<document source="/home/pi/rhostmush-handbook/source/12-advanced.rst">
    <section ids="advanced-features-of-rhostmush" names="advanced\ features\ of\ rhostmush">
        <title>
            Advanced features of RhostMUSH
        <section ids="debugging-tracing" names="debugging/tracing">
            <title>
                Debugging/Tracing
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Debugging in Rhost allows for advanced features like expressing where and
                            when to do debugging via a trace() function, with toggled labels, and the
                            ability to grep content from trace output.  There also exists features to
                            color-match parenthesis, braces, and brackets in-game as well as pretty print
                            the output of commands and functions.
                            - help trace
                            - help %_
                            - help trace()
                            - help parenmatch()
                            - help parenstr()
        <section ids="zoning" names="zoning">
            <title>
                Zoning
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Zoning in Rhost allows the same functionality of Penn and MUX, though the
                            syntax is different.  It also allows the ability to belong to multiple
                            zones at the same time and take advantage of mulitple zones at once.
                            This allows for increased levels of complexity.
                            - help zones
                            - help @zone
                            - help zonecmd()
                            - help lzone()
                            - help @Lock type twink
                            - help @lock type zone
        <section ids="reality-levels" names="reality\ levels">
            <title>
                Reality Levels
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Reality levels allows for the ability to have a sandboxed ‘existance’
                            in each physical location across the entirity of the mush.  Each
                            reality is its own sandbox and can either stand alone or work
                            dependently with other realities.  A person can belong to multiple
                            realities at the same time, and realities is geared to a method for
                            send and receive.  Each ‘method’ requires to be in the given reality
                            to affect it.
                            - help reality levels
                            - wizhelp chkreality
                            - wizhelp reaity level
                            - help @Lock type user
        <section ids="function-and-command-overriding" names="function\ and\ command\ overriding">
            <title>
                Function and Command Overriding
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Functions and commands can both be overridden with softcode.  To
                            override a hardcoded command you first set the command ignore.
                            There are various levels of ignoring so that you could have it
                            ignored from mortals but have it executed fine for non-mortals.
                            This allows you to use the actual physical command within a
                            softcode override.  You may also use @Hook for altering how
                            a command works.   Functions are overridden by setting the
                            function in question ignored, then writing a softcode alternative
                            that is then executed and fetched appropriately.
                        <block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        Commands:
                                    <definition>
                                        <bullet_list bullet="-">
                                            <list_item>
                                                <paragraph>
                                                    wizhelp @admin
                                            <list_item>
                                                <paragraph>
                                                    wizhelp access
                                            <list_item>
                                                <paragraph>
                                                    wizhelp permissions
                                            <list_item>
                                                <paragraph>
                                                    wizhelp @Hook
                                            <list_item>
                                                <paragraph>
                                                    wizhelp hook setup
                                <definition_list_item>
                                    <term>
                                        Functions:
                                    <definition>
                                        <bullet_list bullet="-">
                                            <list_item>
                                                <paragraph>
                                                    wizhelp @admin
                                            <list_item>
                                                <paragraph>
                                                    wizhelp function_access
                                            <list_item>
                                                <paragraph>
                                                    wizhelp @function
                                            <list_item>
                                                <paragraph>
                                                    help @lfunction
                                            <list_item>
                                                <paragraph>
                                                    wizhelp bypass()
        <section ids="the-recycle-bin" names="the\ recycle\ bin">
            <title>
                The Recycle Bin
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Rhost has a recycle bin that works a bit like a windows recycle bin.
                            Whenever you destroy something within the mush, it is stacked onto
                            the recycle bin and marked unavailable within the mush.  This marks
                            the dbref# as garbage in any sense of the word.  However, the object
                            is not able to be reused until purged.  Once purged, it is put onto
                            a free list that can then be reassigned to a new object.
                            - wizhelp @nuke
                            - wizhelp @destroy
                            - wizhelp @toad
                            - wizhelp @turtle
                            - wizhelp @purge
                            - wizhelp @recover
                            - wizhelp @reclist
        <section ids="percent-substitution-adding-overriding" names="percent\ substitution\ adding/overriding">
            <title>
                Percent Substitution Adding/Overriding
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Rhost allows the ability to both override percent substitutions as
                            well as creating new ones.  This is done with @Hook and admin
                            params and issues softcode overriding.  Due to how it is evaluated
                            there is no risk of recursion.
                            - wizhelp @hook
                            - wizhelp hook_cmd
                            - wizhelp sub_include
                            - wizhelp sub_override
        <section ids="hooking" names="hooking">
            <title>
                Hooking
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Hooking allows you to have advanced methods to manipulate commands
                            including adding customized switches to them via softcode.
                            - wizhelp @hook
                            - wizhelp hook_cmd
                            - wizhelp hook_obj
                            - wizhelp hook setup
        <section ids="command-based-uselocks" names="command\ based\ uselocks">
            <title>
                Command based uselocks
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            This allows you to have unique uselocks per $command.  This is done
                            through the use of the USELOCK attribute flag, then you set up
                            a matching attribute name with a prefix of a ~ to specify how
                            the lock is to be evaluated.  This works in the same manner
                            as an evaluation lock.  To be able to use the USELOCK attribute flag
                            you must be empowered to do so with the ‘ATRUSE’ @toggle.  You may
                            also use the secure_atruselock config parameter to globally enable
                            this and not require the toggle to be set.
                            - wizhelp atruse toggle
                            - help attribute uselocks
        <section ids="differentating-between-command-and-listen-locks" names="differentating\ between\ command\ and\ listen\ locks">
            <title>
                Differentating between command and listen locks
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            We distinguish between commands and listens with uselocks by passing
                            an optional argument to all locks that are uselocks.  This optional
                            argument is 0 for a default lock, 1 for a command lock and 2 for
                            a listen lock.
                            - help @lock type uselock
        <section ids="wizard-auto-overiding-and-how-to-disable-it" names="wizard\ auto-overiding\ and\ how\ to\ disable\ it">
            <title>
                Wizard auto-overiding and how to disable it
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            By default wizards override all locks, including attribute locks,
                            can see all dark exits, and bypass pagelocks.  This can be
                            troublesome, and even abusive, so there’s ways to disable this.
                            - wizhelp @depower (for those abusing it)
                            - wizhelp no_override (disable overiding locks)
                            - wizhelp no_uselock (disable just uselock overriding)
                            - wizhelp pagelock toggle (disable pagelock overriding)
        <section ids="advanced-flag-and-toggle-control" names="advanced\ flag\ and\ toggle\ control">
            <title>
                Advanced FLAG and TOGGLE control
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Flags and toggles can be controlled to have multiple permissions
                            and enable/disable targets of how the flags are allowed to be
                            set.  This is done through commands in-game or you can use
                            conf file options to do so.
                            - wizhelp @flagdef
                            - wizhelp @toggledef
                            ——- @admin @flagdef alternatives
                            - wizhelp flag_access_set
                            - wizhelp flag_access_unset
                            - wizhelp flag_access_see
                            - wizhelp flag_access_type
                            ——- @admin @toggledef alternatives
                            - wizhelp toggle_access_set
                            - wizhelp toggle_access_unset
                            - wizhelp toggle_access_see
                            - wizhelp toggle_access_type
        <section ids="advanced-site-control" names="advanced\ site\ control">
            <title>
                Advanced site control
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            We allow advanced site control by not only blocking various sites
                            but we can specify how many times a player can be connected at the
                            same time as well as how many times sites are able to connect at
                            the same time.  This is done through normal site manipulation.
                            - wizhelp forbid_host
                            - wizhelp register_host
                            - wizhelp noguest_host
                            - wizhelp @list (site option)
        <section ids="auto-registration" names="auto-registration">
            <title>
                Auto-Registration
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Autoregistration is the method that a player can auto-register
                            by providing their email on the connect screen.  It will email
                            them a password and an optional document that the administrator
                            provides.  This is well described in the wizhelp.
                            - wizhelp autoregistration
        <section ids="which-bit-level-is-best" names="which\ bit\ level\ is\ best?">
            <title>
                Which bit level is best?
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            This is something that should be discussed by you and the staff
                            of your game.  As a good rule of thumb, only provide the bitlevel
                            that is required to do the job.  Too much power is always risky.
                            In essence, each tier of bit can do everything the previous bitlevel
                            can do, and then additional stuff on top of it.  The highest bitlevel
                            is #1 itself, being bitlevel 7.  Then immortal, which should be
                            considered the #1 character in most cases and is bitlevel 6.  Then
                            the royalty character, which is equal to wizard on penn, mux, or
                            other codebases.  For most things, this is the bitlevel you want
                            to assign players.  The exception will likely be game owners or
                            people who control the master room code.
                        <paragraph>
                            There’s a bunch of readme files and online wizhelp that goes into
                            detail of the various bitlevels and what each can do.
                            - XV.   Multi-tiered bitlevel systems
                            - wizhelp control
        <section ids="what-are-the-limits-for-size-growth-for-rhostmush" names="what\ are\ the\ limits\ for\ size/growth\ for\ rhostmush?">
            <title>
                What are the limits for size/growth for RhostMUSH?
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            While using QDBM, there’s really no set limits for most things.
                            The limits that we have are as followed:
                            LBUF - 64K.  It is recommended to only use 32K as there is some
                        <block_quote>
                            <block_quote>
                                <paragraph>
                                    issues with networking with 64K lbufs.
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>
                                        Compile time option with the menu configurator
                        <definition_list>
                            <definition_list_item>
                                <term>
                                    SBUF - 64 characters (if configured – it’s suggested you do).
                                <definition>
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>
                                                Compile time option with the menu configurator
                        <paragraph>
                            MBUF - 200 characters.  Not able to be changed.
                        <definition_list>
                            <definition_list_item>
                                <term>
                                    MAX CONNECTIONS - Limited by the total number of open sockets
                                <definition>
                                    <block_quote>
                                        <paragraph>
                                            and descriptors on the account and server running on.
                                            There are various tools to limit connection DoS attemps
                                            and other such nastiness.  This is well documented in
                                            the netrhost.conf file.
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>
                                                wizhelp max_players
                                        <list_item>
                                            <paragraph>
                                                ~/game/netrhost.conf
                            <definition_list_item>
                                <term>
                                    MEMORY - no limit.  Generally runs between 8-50M depending
                                <definition>
                                    <paragraph>
                                        on the size of the mush and the LBUF size specified.
                            <definition_list_item>
                                <term>
                                    CPU  - no limit, but has built in cpu abort in code.  The
                                <definition>
                                    <block_quote>
                                        <paragraph>
                                            netrhost.conf file documents this well for customizing.
                                            the default values are usually good enough.
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>
                                                wizhelp max_cpu_cycles
                                        <list_item>
                                            <paragraph>
                                                wizhelp cpuintervalchk
                                        <list_item>
                                            <paragraph>
                                                wizhelp cputimechk
                                        <list_item>
                                            <paragraph>
                                                wizhelp cpu_secure_lvl
                                        <list_item>
                                            <paragraph>
                                                wizhelp heavy_cpu_max
                                        <list_item>
                                            <paragraph>
                                                ~/game/netrhost.conf
                            <definition_list_item>
                                <term>
                                    DISK - no limit.  Generally will be 75-200M depending on size,
                                <definition>
                                    <paragraph>
                                        number of backups and if you leave your compiled object
                                        files in.
                            <definition_list_item>
                                <term>
                                    DB Size - (20000 default) There is no limit on the number of
                                <definition>
                                    <block_quote>
                                        <paragraph>
                                            objects the db can have.  By default it’s soft limited
                                            to 20K objects, which can be changed by a netrhost.conf
                                            file change.  We have had this up past 1.5 million
                                            objects, and other than a second or two of lag for
                                            complex searches we had no real problem.
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>
                                                wizhelp maximum_size
                                        <list_item>
                                            <paragraph>
                                                help @quota
                                        <list_item>
                                            <paragraph>
                                                wizhelp @quota
                                        <list_item>
                                            <paragraph>
                                                wizhelp @limit
                            <definition_list_item>
                                <term>
                                    Attribute Size - 10K as a hard limit.  750 as a soft limit.
                                <definition>
                                    <block_quote>
                                        <paragraph>
                                            You can increase this but it can’t exceed 10000
                                            attributes.  This is to avoid DoS style attacks.
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph>
                                                wizhelp vlimit
                                        <list_item>
                                            <paragraph>
                                                wizhelp @limit
        <section ids="sqlite-and-mysql-maria-setup-and-why-use-it" names="sqlite\ and\ mysql/maria\ setup\ and\ why\ use\ it?">
            <title>
                Sqlite and MySQL/Maria setup and why use it?
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Both of these can be configured separately or conjointly to
                            run in parallel.  This can be done through the RhostMUSH
                            configuration utility.  You generally want to use SQL for
                            external data storage or accessing a central repository
                            of data to share between multiple projects.  Like, for
                            example between a wiki, a forum, and the mush.
        <section ids="executing-outside-scripts-and-binaries-within-rhostmush" names="executing\ outside\ scripts\ and\ binaries\ within\ rhostmush">
            <title>
                Executing outside scripts and binaries within RhostMUSH
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Rhost has execscript() which allows executing outside binaries
                            or scripts as a native function.  All effort has been done to
                            avoid any type of DoS based issue or hang by doing this, however
                            the guidelines presented should be followed before doing so.
                            - wizhelp execscript
                            - wizhelp power execscript
                            - help sidefx
                            - wizhelp writing scripts
        <section ids="pulling-external-data-into-rhostmush" names="pulling\ external\ data\ into\ rhostmush">
            <title>
                Pulling external data into RhostMUSH
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            You are capable of pulling external data in to RhostMUSH using
                            several methods.  These are by using:
                        <block_quote>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>
                                        SQL (mysql or sqlite)
                                <list_item>
                                    <paragraph>
                                        execscript
                                <list_item>
                                    <paragraph>
                                        cron (wizhelp signal)
        <section ids="integrating-a-unix-cron-right-into-rhostmush" names="integrating\ a\ unix\ cron\ right\ into\ rhostmush">
            <title>
                Integrating a unix cron right into RhostMUSH
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            The unix cron can be used to integrate with Rhost fairly
                            easilly by use of signals.  By using SIGUSR1 you can specify
                            Rhost to execute code in-game, which part of that could be
                            to pick up a pre-designed list of commands that the unix cron
                            has set up.
                            - wizhelp signal
                            - wizhelp signal_cron
        <section ids="signal-handling-how-it-works-and-when-and-why-use-it" names="signal\ handling,\ how\ it\ works,\ and\ when\ and\ why\ use\ it">
            <title>
                Signal handling, how it works, and when and why use it
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Signals are used to do different things for the mush.  By default,
                            the following signals are recognized by the mush and will do
                            the following as defaults.
                            - SIGUSR1 - will do a reboot of the mush.  This is also customizable
                        <block_quote>
                            <paragraph>
                                so that you can have it execute code in-mush if you want.
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>
                                    SIGUSR2 - will do a clean shutdown of the mush.
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            SIGTERM - will immediately scram the mush as cleanly and fast
                                        <definition>
                                            <paragraph>
                                                as possible.  It will avoid dumping anything to
                                                the database to speed up scramming, but write
                                                a TERM flat file to be loaded in if corruption.
        <section ids="setting-up-global-parents-global-parents-global-attribute-formatting-and-other-global-setups" names="setting\ up\ global\ parents,\ global\ @parents,\ global\ attribute\ formatting,\ and\ other\ global\ setups">
            <title>
                Setting up global parents, global @parents, global attribute formatting, and other global setups
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Global parents are useful when you want to have a global ‘parent’
                            without actually having a defined 
                            <reference refuri="mailto:'@parent">
                                ‘@parent
                            ’.  It always will be the
                            highest tier in a lookup.  The way lookups will go will be:
                        <block_quote>
                            <paragraph>
                                self->@parent(s)->@zone(s)->GlobalParent
                        <paragraph>
                            The type of the parent does not have to match the target.
                        <paragraph>
                            These global parents can be defined either by using a global
                            generic parent or by using the type.  If a type is specified it
                            overrides the generic.  The following parameters are used:
                            - global_parent_obj     - The generic global parent (if defined)
                            - global_parent_room    - The room global parent
                            - global_parent_exit    - The exit global parent
                            - global_parent_thing   - The thing global parent
                            - global_parent_player  - The player global parent
                    <list_item>
                        <paragraph>
                            Global @parents are different than global parents in that any new
                            item of similar type that is created is automatically assigned this
                            physical @parent.  It’s obviously more limiting since it sets
                            the literal physical parent defined.
                        <paragraph>
                            The type of the parent does not have to match the target.
                        <paragraph>
                            The following parameters are used:
                            - room_parent           - The target that new rooms are @parented
                            - exit_parent           - The target that new exits are @parented
                            - thing_parent          - The target that new things are @parented
                            - player_parent         - The target that new players are @parented
                    <list_item>
                        <paragraph>
                            Global attribute formatting is a method define a wrapper, of sorts,
                            where attributes like @desc, @odesc, @succ, and anything similar
                            can be processed through this.  All attributes will be either
                            &FORMAT<attribute> or &<attribute>FORMAT based on the current
                            configuration.  Example: &FORMATDESC or &DESCFORMAT localy, or
                            use the following global objects for global formatting.  Local
                            formatting has priority.
                        <paragraph>
                            The type of the parent does not have to match the target.
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>
                                    room_attr_default     - Target for room formatting
                            <list_item>
                                <paragraph>
                                    exit_attr_default     - Target for exit formatting
                            <list_item>
                                <paragraph>
                                    thing_attr_default    - Target for thing formatting
                            <list_item>
                                <paragraph>
                                    player_attr_default   - Target for player formatting
        <section ids="rhostmush-limitations-and-how-to-get-around-them" names="rhostmush\ limitations\ and\ how\ to\ get\ around\ them">
            <title>
                RhostMUSH limitations and how to get around them
            <block_quote>
                <paragraph>
                    While Rhost is insanely configurable and quite powerful, there are
                    limitations that exist within it.
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Function invocations.  Sometimes you will hit a ceiling on evaluation.
                            You may want to tweak values to allow more functions or commands
                            to execute.  The following controls that:
                            - function_invocation_limit [25000 default] - specifies the total
                        <block_quote>
                            <paragraph>
                                functions you can execute per command.
                        <bullet_list bullet="-">
                            <list_item>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            function_recursion_limit [50] - specifies the total times a
                                        <definition>
                                            <paragraph>
                                                function can call itself over and over.  Rarely should this
                                                be increased and doing so can effect your stack depth.
                    <list_item>
                        <paragraph>
                            Command queue limits.  Sometimes you want more to be queued up for
                            players or wizards.
                            - player_queue_limit  - Max number of entries a player can queue
                            - wizard_queue_limit  - Max number of entries a wizard can queue
                    <list_item>
                        <paragraph>
                            @limit is a wonderful way to lock down limitations per player or
                            global.  Lots of power is available here.
                            - @limit
                            - vattr_limit_checkwiz - Enable @limit checks for wizards
                            - wizmax_vattr_limit   - Set wizard global VATTR limits
                            - wizmax_dest_limit    - Set wizard global @destroy limits
                            - max_vattr_limit      - Set player global VATTR limits
                            - max_dest_limit       - Set player global @destroy limits
                    <list_item>
                        <paragraph>
                            Lots of trace output can be cut off.  You can modify this with:
                            - trace_output_limit   - Set lines of trace output shown
                    <list_item>
                        <paragraph>
                            To define how many commands a minute a player set SPAMMONITOR can use
                            - spam_limit – default 120
                    <list_item>
                        <paragraph>
                            If you examine things and see ‘Output cut off’ messages, you may want
                            to increase your output limit, funny enough, the name of this is
                            similar
                            - output_limit - You should set this no less than 4 times the current
                        <block_quote>
                            <paragraph>
                                size of your LBUF.
                    <list_item>
                        <paragraph>
                            Attributes names can not exceed 64 characters.  Sorry, it’s a hard limit
                    <list_item>
                        <paragraph>
                            Sometime you may find a single may not work for an escape.  You can
                            in most cases use a % instead or double escape the to make it work.
                            Also look at lit() as a solution.
        <section ids="things-other-mushes-can-do-that-rhost-can-not-and-how-to-emulate-it" names="things\ other\ mushes\ can\ do\ that\ rhost\ can\ not\ and\ how\ to\ emulate\ it">
            <title>
                Things other mushes can do that Rhost can not and how to emulate it
            <section ids="pennmush" names="pennmush">
                <title>
                    PennMUSH
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>
                                Attribute trees.  These are emulated as a base set and can be
                                duplicated enough to at least port code.
                        <list_item>
                            <paragraph>
                                lsearch() will have to be recoded to search()
                        <list_item>
                            <paragraph>
                                align() will have to be recoded to printf()
                        <list_item>
                            <paragraph>
                                Penn allows empty attributes.  Rhost does not.  Work will have to
                                be done to take this into consideration.
                        <list_item>
                            <paragraph>
                                All 
                                <problematic ids="id2" refid="id1">
                                    *
                                val() functions in Penn that are used will have to be
                                remapped to a non-
                                <problematic ids="id4" refid="id3">
                                    *
                                val() function.  It should be as simple as
                                function_alias to the non-
                                <problematic ids="id6" refid="id5">
                                    *
                                val.  Example:
                            <block_quote>
                                <paragraph>
                                    @admin function_alias=hasattrval hasattr
                        <list_item>
                            <paragraph>
                                Penn’s hardcoded comsystem is emulated with the softcode comsys
                        <list_item>
                            <paragraph>
                                Penn’s @mail system is workable with mail wrappers
                        <list_item>
                            <paragraph>
                                Pueblo is not supported.
                        <list_item>
                            <paragraph>
                                json is not supported.
                        <list_item>
                            <paragraph>
                                ssl is not natively supported (yet), see section XIV
                        <list_item>
                            <paragraph>
                                This uses @shutdown/restart, Rhost uses @reboot
            <section ids="mux" names="mux">
                <title>
                    MUX
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>
                                Mux has an async mysql database engine.  This is not possible
                                with Rhost.  You’ll have to use the sync method instead.
                        <list_item>
                            <paragraph>
                                UTF8 is supported but internally passed differently.
                        <list_item>
                            <paragraph>
                                Mux’s hardcoded comsystem is emulated with the softcode comsys
                        <list_item>
                            <paragraph>
                                MUX’s @mail system is workable with mail wrappers
                        <list_item>
                            <paragraph>
                                Pueblo is not supported.
                        <list_item>
                            <paragraph>
                                This uses @restart, Rhost uses @reboot
        <section ids="advanced-guest-setup" names="advanced\ guest\ setup">
            <title>
                Advanced guest setup
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            After you set up your guests, you can set unique names to each guest
                            if you so want after defining the dbref#’s your guests use.  This is
                            done by defining them in the guest_namelist parameter.  You can also
                            increase guests (or decrease them) between 0-31 guests.
                            - wizhelp guest_namelist
                            - wizhelp num_guests
        <section ids="attribute-permission-masking-and-the-joys-of-the-power-behind-it" names="attribute\ permission\ masking\ and\ the\ joys\ of\ the\ power\ behind\ it">
            <title>
                Attribute permission masking and the joys of the power behind it
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Attribute contentlocks can be set up so you can lock the actual
                            content that you can set (or even unset!) into an attribute.
                            The beauty of this is that you can specify case sensitive
                            information, lock different ways contents in attributes are set
                            based on who is setting it, or even on where it’s being set.
                            The sky’s the limit.
                            - global_attrdefault    - Target for defining content locks
        <section ids="the-amazing-cluster-and-what-it-can-do-for-you" names="the\ amazing\ @cluster\ and\ what\ it\ can\ do\ for\ you">
            <title>
                The amazing @cluster and what it can do for you
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            Clusters is the way to virtually assign multiple objects into
                            a single physical object.  It essentially chains together two
                            or more objects to share attributes between them, so that any
                            attribute set on any object in that cluster can be set or fetched
                            as if it was a singular entity.  This allows some amazing ability
                            to distribute attribute content or even have a farm of a massive
                            amount of attributes without paying a hefty penalty on object bloat.
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>
                                help cluster  – Gives a fantastic overview of how clusters work.
        <section ids="what-we-plan-for-the-future" names="what\ we\ plan\ for\ the\ future">
            <title>
                What we plan for the future
            <block_quote>
                <block_quote>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>
                                Things to look forward to the future with RhostMUSH.
                                - Full Unicode/UTF8 in Rhost 4.0
                                - A fully featured tag system in Rhost 4.0
                                - Built in Python API handler in Rhost 4.0
                                - Hopefully a built in Ruby and Perl API in Rhost 4.0/4.1
                                - Cross-Mush execution between mushes in Rhost 4.1
                                - More as we think about it :)
                <paragraph>
                    EXT: Additional features not covered otherwise
                    Additional features
                    - +/- 5.4 million years can be utilized with the built in time functions
                <block_quote>
                    <paragraph>
                        which includes timefmt(), secs(), convtime(), convsecs(), and moon().  Party on!
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>
                            Changing permission levels in the middle of execution for evaluation.
                            * see help on the streval and ueval function
                    <list_item>
                        <paragraph>
                            Full features in-game customization of near every aspect of the game.

<document source="/home/pi/rhostmush-handbook/source/01-intro.rst">
    <section ids="what-rhostmush-is-about-and-what-s-so-great-about-rhostmush" names="what\ rhostmush\ is\ about\ and\ what's\ so\ great\ about\ rhostmush.">
        <title>
            What RhostMUSH is about and what’s so great about RhostMUSH.
        <paragraph>
            RhostMUSH was founded in 1989, originally by Natasha Davis (Nyctasia) and as
            a branch from the original release of TinyMUD code.  It was her desire to make
            a game that was flexible, with multiple levels of progression and highly
            customizeable.  She lost time and interest and passed the game to
            Steve Shivers (Seawolf), Mike McDermott (Thorin), and Jace Hoppel (Ashen-Shugar)
        <paragraph>
            Through their work, the stability improved, we fixed it to be multi-platform
            and as bug free as we could possibly make it.  We introduced several methods both
            in game and in source that allowed consistent memory bounds checking and
            various alerts for any mischievous naughtyness in-game or possibilities of any
            hacks, patches, or alterations in the code causing leaks or issues.
        <paragraph>
            While not perfect, it has allowed us to have an absolutely outstanding
            turn around for any bugs sent our way, which anyone who uses RhostMUSH will
            attest to.
        <paragraph>
            Over the years, others have joined the RhostMUSH team, including Ambrosia
            (who is the current dev lead), Lensman, Kage (who kindly provided the
            UTF8/unicode port), Jeff/Loki, Rook, Noltar, and Odin.
        <paragraph>
            We also have had hundreds of people who have offered (and provided) help,
            patches, suggestions, bug fixes, and alternations all on their own and
            every single one will have had their name mentioned in the RHOST.CHANGES
            file in the readme directory.  It’s far too large to have in the online
            help files.
        <paragraph>
            RhostMUSH today provides an amazing tool that allows nearly entire
            customization in-game of every single feature available in Rhost without
            having the requirement to modify the hardcode.  This includes but is
            not limited to:
        <section ids="recycle-bin" names="recycle\ bin">
            <title>
                Recycle bin
            <block_quote>
                <paragraph>
                    Yup, you guessed it.  RhostMUSH has a windows like recycle bin.
                    This means the objects you @nuke and @destroy become ‘destroyed’
                    but not recycled until they are @purged.  If you use the Myrddin
                    CRON in the Mushcode directory, it by default sets up a job
                    to purge anything over 30 days old, which should be more than
                    sufficient for any needs.  The goodness of this?  You can recover
                    nuked things from any period of time, as long as they were not
                    @purged first.
                    Commands: @purge, @nuke, @destroy, @recover, @reclist
        <section ids="snapshot" names="@snapshot">
            <title>
                @snapshot
            <block_quote>
                <paragraph>
                    Live image snapshots to unload or load to and from
                    disk.  As many snapshots as you want, as often as you want.
                    It essentially does a flatfile dump of a dbref#.  Great for
                    backups or cross-Rhost portability.
                    Command: @snapshot
        <section ids="wizard-and-immortals-by-default" names="wizard\ and\ immortals\ by\ default">
            <title>
                Wizard and Immortals by default
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>
                            are spoofable.  Meaning all their @pemits by default will not
                            trigger NOSPOOF.  If you do not wish this, set the SPOOF flag
                            this applies to anyone below their level.
                    <list_item>
                        <paragraph>
                            override all locks.  There’s two flags to disable this.
                            NO_OVERRIDE to stop overriding all locks (including attribs)
                            and NO_USELOCK to just stop overriding uselocks.
                            This applies to anything their level and lower.
                    <list_item>
                        <paragraph>
                            optionally cloak from all non-immortals/God player.
                            This can be highly abused if not careful and there
                            is a @depower to disable cloaking and/or dark that will
                            disable this.
                    <list_item>
                        <paragraph>
                            immortals can optionally supercloak from even wizards.
                            this can not be disabled, and you must consider that immortals
                            should be treated as the God player (#1) since they are
                            effectively #1 in nearly every way.
        <section ids="titles-and-captions-to-a-player-s-name" names="titles\ and\ captions\ to\ a\ player's\ name">
            <title>
                Titles and Captions to a player’s name
            <block_quote>
                <paragraph>
                    @caption and @titlecaption
        <section ids="have-an-alternate-name-with-locks-for-npc-obfuscation" names="have\ an\ alternate\ name\ with\ locks\ for\ npc\ obfuscation">
            <title>
                Have an alternate name with locks for NPC obfuscation
            <block_quote>
                <paragraph>
                    @altname
                    @lock/altname
        <section ids="have-multiple-player-aliases" names="have\ multiple\ player\ aliases">
            <title>
                Have multiple player aliases
            <block_quote>
                <paragraph>
                    As well as a method
                    to reserve player names per player w/o revealing who has what
                    name.
                    @protect
        <section ids="actively-control-how-dark-works-both-game-wide-and-individually" names="actively\ control\ how\ dark\ works\ both\ game-wide\ and\ individually">
            <title>
                Actively control how dark works both game-wide and individually
            <block_quote>
                <paragraph>
                    @depower dark
                    @admin allow_whodark, sweep_dark, command_dark, lcon_checks_dark,
                <block_quote>
                    <paragraph>
                        secure_dark, see_owned_dark, idle_wiz_dark, player_dark
                <paragraph>
                    @toggle snuffdark
                    @flagdef to redefine who and what can set the DARK flag
        <section ids="make-config-file-changes-in-game-without-having-to-reboot-or-have-shell-access" names="make\ config\ file\ changes\ in-game\ without\ having\ to\ reboot\ or\ have\ shell\ access">
            <title>
                Make config file changes in-game without having to reboot or have shell access
            <block_quote>
                <paragraph>
                    @admin admin_object
        <section ids="execute-any-binary-or-script-as-a-localized-function" names="execute\ any\ binary\ or\ script\ as\ a\ localized\ function">
            <title>
                Execute any binary or script as a localized function
            <block_quote>
                <paragraph>
                    EXECSCRIPT (power), SIDEFX (flag)
        <section ids="customized-percent-substitutions-like-n-etc" names="customized\ percent\ substitutions\ (like\ %n,\ %#,\ etc)">
            <title>
                Customized percent substitutions (like %n, %#, etc)
            <block_quote>
                <paragraph>
                    @admin sub_include, @hook
        <section ids="redefine-percent-substitutions-like-n-etc" names="redefine\ percent\ substitutions\ (like\ %n,\ %#,\ etc)">
            <title>
                Redefine percent substitutions (like %n, %#, etc)
            <block_quote>
                <paragraph>
                    @admin sub_override, @hook
        <section ids="localize-command-and-function-overrides-in-a-sandbox" names="localize\ command\ and\ function\ overrides\ in\ a\ sandbox">
            <title>
                Localize command and function overrides in a sandbox
            <block_quote>
                <paragraph>
                    @icmd, @lfunction, subeval(), sandbox()
        <section ids="multiple-zones" names="multiple\ zones">
            <title>
                Multiple Zones
            <block_quote>
                <paragraph>
                    Have multiple zones which can optionally belong to
                    multiple targets (multiple zones per target allowable!)
                    @zone, zones, lzone(), zonecmd()
        <section ids="optionally-control-enable-or-disable-sideeffects" names="optionally\ control,\ enable,\ or\ disable\ sideeffects">
            <title>
                Optionally control, enable, or disable sideeffects
            <block_quote>
                <paragraph>
                    @admin sideeffects, SIDEFX (flag)
        <section ids="have-31-cross-interactive-realities-for-locations" names="have\ 31\ cross-interactive\ realities\ for\ locations">
            <title>
                Have 31 cross-interactive realities for locations
            <block_quote>
                <paragraph>
                    This works as a truly independant and self-contained environment.
                    A room can have 31 ‘layers’, each ‘layer’ is a reality in
                    the same physical space.  These layers can work independently
                    or allow interaction with other layers for vast customization.
                    This affects all methods within the game including all matching,
                    looking, $commands, listens, movement, interaction, pretty
                    much every single aspect of mushing.
                    REALITY LEVELS
        <section ids="override-any-command-with-softcode" names="override\ any\ command\ with\ softcode">
            <title>
                Override any command with softcode
            <block_quote>
                <paragraph>
                    @admin access (check ignore)
                    Master room $commands to then override the hardcode
        <section ids="the-abilility-to-raise-or-lower-permissions-on-the-various" names="the\ abilility\ to\ raise\ or\ lower\ permissions\ on\ the\ various">
            <title>
                The abilility to raise or lower permissions on the various
            <block_quote>
                <paragraph>
                    staff bitlevels for each player.
                    @power, @depower, TOGGLES, FLAGS
        <section ids="customize-new-commands-on-the-connect-screen" names="customize\ new\ commands\ on\ the\ connect\ screen">
            <title>
                Customize new commands on the connect screen
            <block_quote>
                <paragraph>
                    @admin file_object2
        <section ids="softcode-any-txt-file-like-connect-txt" names="softcode\ any\ txt\ file\ (like\ connect.txt)">
            <title>
                Softcode any txt file (like connect.txt)
            <block_quote>
                <paragraph>
                    and have it evaluate in-game.  It evaluates as the object
                    it is on.
                    @admin file_object
        <section ids="advanced-tracing-methods-for-debugging-your-code-including-labels" names="advanced\ tracing\ methods\ for\ debugging\ your\ code\ including\ labels!">
            <title>
                Advanced tracing methods for debugging your code including labels!
            <block_quote>
                <paragraph>
                    Commands: @label
                    Functions: parenmatch(), trace()
                    Toggles: CPUTIME
                    Flags: TRACE
                    Attributes: TRACE_GREP, TRACE, TRACE_COLOR, TRACE_COLOR_<attr>
                    Substitutions: %_
        <section ids="built-in-pretty-printing-of-attributes-with-the-parenmatch-function" names="built\ in\ pretty-printing\ of\ attributes\ with\ the\ parenmatch()\ function">
            <title>
                Built in pretty-printing of attributes with the parenmatch() function
            <block_quote>
                <paragraph>
                    Example Code Output :
                    @emit [add(1,sub(2,div(3,4)),5)];@emit [extract(get(me/foo),3,1)
                <paragraph>
                    Example Pretty Print:
                    @emit [
                <block_quote>
                    <definition_list>
                        <definition_list_item>
                            <term>
                                add(
                            <definition>
                                <definition_list>
                                    <definition_list_item>
                                        <term>
                                            1,sub(
                                        <definition>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>
                                                        2,div(
                                                    <definition>
                                                        <paragraph>
                                                            3,4
                                            <paragraph>
                                                )
                                <paragraph>
                                    ),5
                    <paragraph>
                        )
                <definition_list>
                    <definition_list_item>
                        <term>
                            ];@emit [
                        <definition>
                            <definition_list>
                                <definition_list_item>
                                    <term>
                                        extract(
                                    <definition>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>
                                                    get(
                                                <definition>
                                                    <paragraph>
                                                        me/foo
                                        <paragraph>
                                            ),3,1
                            <paragraph>
                                )
                <paragraph>
                    ]
        <section ids="plenty-more-not-mentioned" names="plenty\ more\ not\ mentioned!">
            <title>
                Plenty more not mentioned!
            <paragraph>
                The flexibility to customize RhostMUSH is what is most daunting.
                Don’t fret, you don’t need to do it to run RhostMUSH successfully.
                In fact, the default configuration is mostly compatible with
                MUSH and will work correctly out of the box for most needs.  For those
                wishing to play, of course the sky is the limit of what you want to
                do.

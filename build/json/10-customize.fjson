{"parents": [], "prev": {"link": "../09-blocking/", "title": "Methods to block anonymous connections and the pros and cons of doing so"}, "next": {"link": "../11-differences/", "title": "The differences to expect to the end user between PennMUSH, MUX, and RhostMUSH as of 08/06/2016"}, "title": "What may need to be modified to get softcode from PennMUSH, TinyMUSH2, TinyMUSH3, or MUX2 to work on Rhost", "meta": null, "body": "<div class=\"section\" id=\"what-may-need-to-be-modified-to-get-softcode-from-pennmush-tinymush2-tinymush3-or-mux2-to-work-on-rhost\">\n<h1>What may need to be modified to get softcode from PennMUSH, TinyMUSH2, TinyMUSH3, or MUX2 to work on Rhost<a class=\"headerlink\" href=\"#what-may-need-to-be-modified-to-get-softcode-from-pennmush-tinymush2-tinymush3-or-mux2-to-work-on-rhost\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>RhostMUSH, for the most part, will work out of the box with most softcode gotten\nfrom other codebases.  There are, however, exceptions.  Most of these exceptions\nwill be minor code differences between how ANSI is processed, the variences\nof arguments or switches to commands or functions, or required flags.</p>\n<p>Most changes will revolve around the ones listed in this document.</p>\n<div class=\"section\" id=\"problematic-functions-between-codebases\">\n<h2>Problematic functions between codebases<a class=\"headerlink\" href=\"#problematic-functions-between-codebases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>lsearch()/search(), align()/printf(), <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>attrval()</p>\n</div>\n<div class=\"section\" id=\"problematic-features-between-codebases\">\n<h2>Problematic features between codebases<a class=\"headerlink\" href=\"#problematic-features-between-codebases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>named variables for regexp patterns in $commands are not supported.\n&#64;aliases on non-players are not supported.  Frankly I find them redundant.</p>\n</div>\n<div class=\"section\" id=\"problematic-commands\">\n<h2>Problematic commands<a class=\"headerlink\" href=\"#problematic-commands\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>&#64;mapsql, hardcoded required comssytem commands (some are redundant)</p>\n</div>\n<div class=\"section\" id=\"sidefx-flag\">\n<h2>SIDEFX flag<a class=\"headerlink\" href=\"#sidefx-flag\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Anything that uses sideeffects \u2013DIRECTLY\u2013 requires this flag.\nSideeffects are like set(), pemit(), and so forth.  list(), while a\nside-effect, does not require this flag as it is considered passive and safe.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"variable-exits\">\n<h2>Variable exits<a class=\"headerlink\" href=\"#variable-exits\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Rhost handles them slightly different.  You do not link\nexits to #-4.  That\u2019s an invalid destination.  I always found it, frankly,\nstupid to save any data in the database that was literally invalid.  So,\nyou link the exit as you normally would, then &#64;toggle the exit variable.\nAt that point you use &#64;exitto like you would any other codebase.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"zones\">\n<h2>Zones<a class=\"headerlink\" href=\"#zones\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Zones actually can work near exactly as you would expect them to\nwork on TinyMUSH, MUX, or Penn.  Either at once or at different times.\nWe recognize multiple zones, zone masters, zone inheritance, zone\nparenting, zone command processing, and the ability to bypass zones\nentirely.  There\u2019s a ton of flexbility with this.  However, the syntax\nfor adding/removing zones is different so the commands will have to be\nported to Rhost.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"powers\">\n<h2>&#64;powers<a class=\"headerlink\" href=\"#powers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Powers work a bit differently in Rhost and they\u2019re named\ndifferently, which should not be that big a surprise as they\u2019re different\nbetween all the codebases anyway.  The big difference is our powers are\ntiered, meaning the can be limited or grown to a given bitlevel and are\nnot just toggle powers like the other codebases.  We also have &#64;depower\nthat is the anti-thesis of &#64;power</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"attribute-length\">\n<h2>Attribute length<a class=\"headerlink\" href=\"#attribute-length\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>While we have 64 character attribute capabilities like\nmost other codebases, PennMUSH allows 1024 attribute length attributes.\nWhy you need one that long boggles the mind, but if you do use attribs\nthat long you need to make sure they are cut down to the proper length.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"attribute-contents\">\n<h2>Attribute contents<a class=\"headerlink\" href=\"#attribute-contents\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>You\u2019ll be happy to know that Rhost allows upwards\nto 64,000 bytes of data to be assigned an LBUF.  We strongly recommand\nto cap at 32,000 however as the various TCP socket protocols play nicer\nwith that value.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"color\">\n<h2>256 color<a class=\"headerlink\" href=\"#color\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Yup!  We got it.</p>\n</div>\n<div class=\"section\" id=\"unicode-utf8\">\n<h2>Unicode/UTF8<a class=\"headerlink\" href=\"#unicode-utf8\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Yup!  We got this too.  Not quiet yet in the main branch,\nbut download Kage\u2019s branch, you won\u2019t be dissapointed.  We will have\nUTF8 in Rhost 4.0 when released.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"attributes-per-object\">\n<h2>Attributes per object<a class=\"headerlink\" href=\"#attributes-per-object\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>This is configurable with the VLIMIT &#64;admin\ncommand, however, it is absolutely hard-limited at 10000 maximum.\nThis is to avoid any DoS type situation and because frankly there\nshould never be a reason to exceed that.  If you need more, use\n&#64;clusters.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"destroying\">\n<h2>Destroying<a class=\"headerlink\" href=\"#destroying\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>&#64;nuke only works on players.  &#64;destroy works on non-players.\nNever the two will meet.  We also have a built in recycle bin meaning\nanything destroyed will not be automatically recycled.  If you want it\nrecycled, you have to &#64;purge it.  Yes, if you use  Myrddin\u2019s CRON, it\nhas a built in entry to auto-purge anything older than 30 days.  This\nalso means you can on-line recover anything destroyed before that 30\ndays.  Groovy, eh?</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"object-id-s\">\n<h2>object id\u2019s<a class=\"headerlink\" href=\"#object-id-s\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Yup, we got them.  Even in searches, and, well, everything.</p>\n</div>\n<div class=\"section\" id=\"lsearch-and-search\">\n<h2>lsearch() and search()<a class=\"headerlink\" href=\"#lsearch-and-search\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>lsearch() in Penn is not syntacically similar to non-Penn search().\nThis will have to be altered.  In addition, search() in non-penn games\nhave to have special consideration for escaping out the evaled args.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"locks-can-be-different\">\n<h2>&#64;locks can be different<a class=\"headerlink\" href=\"#locks-can-be-different\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>We have many more lock capabilities and options\nso this should be a non-issue.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"customer-user-locks\">\n<h2>Customer user-locks<a class=\"headerlink\" href=\"#customer-user-locks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>We do not have custom user-locks like Penn.  We do, however, have the way\nto set encapsulated lock data into an attribute to fetch and compare\nagainst which I find more useful and far more flexible.\nSee: lockencode(), lockdecode(), and lockcheck()</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"attribute-trees\">\n<h2>Attribute trees<a class=\"headerlink\" href=\"#attribute-trees\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Unlike Penn, we don\u2019t really have attribute trees.  We do support the\nbasic capabilities of it for compatibility if you load in softcode that\nuses it, but it doesn\u2019t have the advanced features of attribute trees.\nPlease see \u2018help attribute tree\u2019 for more information.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"prefix-permission-locking\">\n<h2>Prefix permission locking<a class=\"headerlink\" href=\"#prefix-permission-locking\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>We do allow prefix permission locking, and some very advanced abilities\nof it.  Please see wizhelp on &#64;aflags for more information.\n- wizhelp &#64;aflags\n- wizhelp atrperms_max\n- wizhelp atrlock\n- wizhelp atrperms</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"align-and-printf\">\n<h2>align() and printf()<a class=\"headerlink\" href=\"#align-and-printf\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>We do not have align().  Most of the code that uses align() will have to\nbe converted to our printf() (which is compatible but has different syntax)</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"mysql\">\n<h2>MySQL<a class=\"headerlink\" href=\"#mysql\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>While we support MySQL, we do not have an async method like MUX2.  This\nis just not possible, sorry.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"mail-system\">\n<h2>Mail System<a class=\"headerlink\" href=\"#mail-system\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>There are mail wrappers to mimic MUX/TM3 and Penn mail systems.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"comsystem\">\n<h2>Comsystem<a class=\"headerlink\" href=\"#comsystem\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>The softcoded comsystem mimics MUX/TM3 and Penn\u2019s comsystem.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"various-functions\">\n<h2>Various Functions<a class=\"headerlink\" href=\"#various-functions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>There is a \u2018softcode.minmax\u2019 in the Mushcode directory that loads up a slew\nof &#64;function wrappers that will emulate various functions that MUX, Penn, or\nTM3 has.  We have the functionality for nearly all of them, but either our\nfunctions have different syntax, or we have different named functions that\nduplicate the functionality.  It would be far better to recode it to use\nthe native functions, but the &#64;function wrappers are there for lazyness :)</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"empty-attributes\">\n<h2>Empty Attributes<a class=\"headerlink\" href=\"#empty-attributes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Penn allows you to have empty attributes.  Non-penn codebases do not.\nThus, hasattrval and the like are not needed and should likely just point\nto hasattr instead.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"player-stats\">\n<h2>Player Stats<a class=\"headerlink\" href=\"#player-stats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>MUX has some built in ways for player stats.  We do as well but they\u2019re\neither done via functions or attribute contents.  Code that requires this\nwill have to be recoded.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"percent-substitutions\">\n<h2>Percent Substitutions<a class=\"headerlink\" href=\"#percent-substitutions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Some percent substitutions may differ between codebases.  Luckily, Rhost\nallows the ability to remap or creaete new ones if this is a problem.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"switches\">\n<h2>Switches<a class=\"headerlink\" href=\"#switches\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Some switches may not exist in Rhost that do in other codebases, in such\na case, Rhost does allow the ability to &#64;hook a command to define your own\nsoftcoded switch to a hardcoded command and work around the limitation.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"flags\">\n<h2>Flags<a class=\"headerlink\" href=\"#flags\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Some flags may be missing.  If it\u2019s a dummy flag, feel free to use the\nmarker flags MARKER0 to MARKER9 to set them.  If it\u2019s an existing flag\nthat does similar features, feel free to flag_alias it or just flag_name\nit to the other name if you want.</p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"aliases\">\n<h2>Aliases<a class=\"headerlink\" href=\"#aliases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Multiple aliases are supported via &#64;protect.</p>\n</div></blockquote>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["11-differences", "The differences to expect to the end user between PennMUSH, MUX, and RhostMUSH as of 08/06/2016", "N", "next"], ["09-blocking", "Methods to block anonymous connections and the pros and cons of doing so", "P", "previous"]], "sourcename": "10-customize.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">What may need to be modified to get softcode from PennMUSH, TinyMUSH2, TinyMUSH3, or MUX2 to work on Rhost</a><ul>\n<li><a class=\"reference internal\" href=\"#problematic-functions-between-codebases\">Problematic functions between codebases</a></li>\n<li><a class=\"reference internal\" href=\"#problematic-features-between-codebases\">Problematic features between codebases</a></li>\n<li><a class=\"reference internal\" href=\"#problematic-commands\">Problematic commands</a></li>\n<li><a class=\"reference internal\" href=\"#sidefx-flag\">SIDEFX flag</a></li>\n<li><a class=\"reference internal\" href=\"#variable-exits\">Variable exits</a></li>\n<li><a class=\"reference internal\" href=\"#zones\">Zones</a></li>\n<li><a class=\"reference internal\" href=\"#powers\">&#64;powers</a></li>\n<li><a class=\"reference internal\" href=\"#attribute-length\">Attribute length</a></li>\n<li><a class=\"reference internal\" href=\"#attribute-contents\">Attribute contents</a></li>\n<li><a class=\"reference internal\" href=\"#color\">256 color</a></li>\n<li><a class=\"reference internal\" href=\"#unicode-utf8\">Unicode/UTF8</a></li>\n<li><a class=\"reference internal\" href=\"#attributes-per-object\">Attributes per object</a></li>\n<li><a class=\"reference internal\" href=\"#destroying\">Destroying</a></li>\n<li><a class=\"reference internal\" href=\"#object-id-s\">object id\u2019s</a></li>\n<li><a class=\"reference internal\" href=\"#lsearch-and-search\">lsearch() and search()</a></li>\n<li><a class=\"reference internal\" href=\"#locks-can-be-different\">&#64;locks can be different</a></li>\n<li><a class=\"reference internal\" href=\"#customer-user-locks\">Customer user-locks</a></li>\n<li><a class=\"reference internal\" href=\"#attribute-trees\">Attribute trees</a></li>\n<li><a class=\"reference internal\" href=\"#prefix-permission-locking\">Prefix permission locking</a></li>\n<li><a class=\"reference internal\" href=\"#align-and-printf\">align() and printf()</a></li>\n<li><a class=\"reference internal\" href=\"#mysql\">MySQL</a></li>\n<li><a class=\"reference internal\" href=\"#mail-system\">Mail System</a></li>\n<li><a class=\"reference internal\" href=\"#comsystem\">Comsystem</a></li>\n<li><a class=\"reference internal\" href=\"#various-functions\">Various Functions</a></li>\n<li><a class=\"reference internal\" href=\"#empty-attributes\">Empty Attributes</a></li>\n<li><a class=\"reference internal\" href=\"#player-stats\">Player Stats</a></li>\n<li><a class=\"reference internal\" href=\"#percent-substitutions\">Percent Substitutions</a></li>\n<li><a class=\"reference internal\" href=\"#switches\">Switches</a></li>\n<li><a class=\"reference internal\" href=\"#flags\">Flags</a></li>\n<li><a class=\"reference internal\" href=\"#aliases\">Aliases</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "10-customize", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12", "insegel_version": "1.1.0"}
{"parents": [], "prev": {"link": "../powers/", "title": "<span class=\"section-number\">14. </span>Comparison of powers"}, "next": {"link": "../wizhelpfile/", "title": "<span class=\"section-number\">16. </span>RhostMUSH Internal Wizhelp Files"}, "title": "<span class=\"section-number\">15. </span>RhostMUSH Internal Help Files", "meta": null, "body": "<div class=\"section\" id=\"rhostmush-internal-help-files\">\n<h1><span class=\"section-number\">15. </span>RhostMUSH Internal Help Files<a class=\"headerlink\" href=\"#rhostmush-internal-help-files\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<H1>RhostMUSH Help File [HTML Version]</H1>\nGenerated: Wed Jan 13 04:15:48 2016\n<HR><A NAME=\"topic index\"><H2>Topic Index</H2></A><PRE>\n<A HREF=\"#QUOTE\">&quot;</A>                         <A HREF=\"##\">#</A>                         <A HREF=\"##lambda\">#LAMBDA</A>\n<A HREF=\"#DOLARMINUScommands\">$-commands</A>                <A HREF=\"#%\">%</A>                         <A HREF=\"#%BANG\">%!</A>\n<A HREF=\"#%#\">%#</A>                        <A HREF=\"#%%\">%%</A>                        <A HREF=\"#%PLUS\">%+</A>\n<A HREF=\"#%MINUS\">%-</A>                        <A HREF=\"#%0\">%0</A>                        <A HREF=\"#%1\">%1</A>\n<A HREF=\"#%2\">%2</A>                        <A HREF=\"#%3\">%3</A>                        <A HREF=\"#%4\">%4</A>\n<A HREF=\"#%5\">%5</A>                        <A HREF=\"#%6\">%6</A>                        <A HREF=\"#%7\">%7</A>\n<A HREF=\"#%8\">%8</A>                        <A HREF=\"#%9\">%9</A>                        <A HREF=\"#%LT\">%&lt;</A>\n<A HREF=\"#%?\">%?</A>                        <A HREF=\"#%@\">%@</A>                        <A HREF=\"#%_\">%_</A>\n<A HREF=\"#%a\">%a</A>                        <A HREF=\"#%b\">%b</A>                        <A HREF=\"#%c\">%c</A>\n<A HREF=\"#%d\">%d</A>                        <A HREF=\"#%f\">%f</A>                        <A HREF=\"#%i\">%i</A>\n<A HREF=\"#%k\">%k</A>                        <A HREF=\"#%l\">%l</A>                        <A HREF=\"#%m\">%m</A>\n<A HREF=\"#%n\">%n</A>                        <A HREF=\"#%o\">%o</A>                        <A HREF=\"#%p\">%p</A>\n<A HREF=\"#%q\">%q</A>                        <A HREF=\"#%r\">%r</A>                        <A HREF=\"#%s\">%s</A>\n<A HREF=\"#%t\">%t</A>                        <A HREF=\"#%v\">%v</A>                        <A HREF=\"#%w\">%w</A>\n<A HREF=\"#%x\">%x</A>                        <A HREF=\"#AMPER\">&amp;</A>                         <A HREF=\"#PLUSchannel\">+channel</A>\n<A HREF=\"#PLUSchannel2\">+channel2</A>                 <A HREF=\"#PLUShelp\">+help</A>                     <A HREF=\"#PLUSuptime\">+uptime</A>\n<A HREF=\"#1.0.0p0\">1.0.0p0</A>                   <A HREF=\"#1.5.0p0\">1.5.0p0</A>                   <A HREF=\"#2.0.0p0\">2.0.0p0</A>\n<A HREF=\"#3.0.0p0\">3.0.0p0</A>                   <A HREF=\"#3.2.0p0\">3.2.0p0</A>                   <A HREF=\"#3.2.4p0\">3.2.4p0</A>\n<A HREF=\"#3.2.4p1\">3.2.4p1</A>                   <A HREF=\"#3.2.4p10\">3.2.4p10</A>                  <A HREF=\"#3.2.4p11\">3.2.4p11</A>\n<A HREF=\"#3.2.4p12\">3.2.4p12</A>                  <A HREF=\"#3.2.4p13\">3.2.4p13</A>                  <A HREF=\"#3.2.4p14\">3.2.4p14</A>\n<A HREF=\"#3.2.4p15\">3.2.4p15</A>                  <A HREF=\"#3.2.4p16\">3.2.4p16</A>                  <A HREF=\"#3.2.4p17\">3.2.4p17</A>\n<A HREF=\"#3.2.4p18\">3.2.4p18</A>                  <A HREF=\"#3.2.4p2\">3.2.4p2</A>                   <A HREF=\"#3.2.4p3\">3.2.4p3</A>\n<A HREF=\"#3.2.4p4\">3.2.4p4</A>                   <A HREF=\"#3.2.4p5\">3.2.4p5</A>                   <A HREF=\"#3.2.4p6\">3.2.4p6</A>\n<A HREF=\"#3.2.4p7\">3.2.4p7</A>                   <A HREF=\"#3.2.4p8\">3.2.4p8</A>                   <A HREF=\"#3.2.4p9\">3.2.4p9</A>\n<A HREF=\"#3.9.0p0\">3.9.0p0</A>                   <A HREF=\"#3.9.0p1\">3.9.0p1</A>                   <A HREF=\"#3.9.0p2\">3.9.0p2</A>\n<A HREF=\"#3.9.1p0\">3.9.1p0</A>                   <A HREF=\"#3.9.1p1\">3.9.1p1</A>                   <A HREF=\"#3.9.1p2\">3.9.1p2</A>\n<A HREF=\"#3.9.2p0\">3.9.2p0</A>                   <A HREF=\"#3.9.2p1\">3.9.2p1</A>                   <A HREF=\"#3.9.3p0\">3.9.3p0</A>\n<A HREF=\"#3.9.3p1\">3.9.3p1</A>                   <A HREF=\"#3.9.3p2\">3.9.3p2</A>                   <A HREF=\"#3.9.3p3\">3.9.3p3</A>\n<A HREF=\"#3.9.4p0\">3.9.4p0</A>                   <A HREF=\"#3.9.4p1\">3.9.4p1</A>                   <A HREF=\"#3.9.4p2\">3.9.4p2</A>\n<A HREF=\"#3.9.4p3\">3.9.4p3</A>                   <A HREF=\"#3.9.4p4\">3.9.4p4</A>                   <A HREF=\"#3.9.4p5\">3.9.4p5</A>\n<A HREF=\"#3.9.5p0\">3.9.5p0</A>                   <A HREF=\"#3.9.5p1\">3.9.5p1</A>                   <A HREF=\"#3.9.5p2\">3.9.5p2</A>\n<A HREF=\"#3.9.5p3\">3.9.5p3</A>                   <A HREF=\"#:\">:</A>                         <A HREF=\"#;\">;</A>\n<A HREF=\"#GT\">&gt;</A>                         <A HREF=\"#@@\">@@</A>                        <A HREF=\"#@@()\">@@()</A>\n<A HREF=\"#@aahear\">@aahear</A>                   <A HREF=\"#@aclone\">@aclone</A>                   <A HREF=\"#@aconnect\">@aconnect</A>\n<A HREF=\"#@adescribe\">@adescribe</A>                <A HREF=\"#@adfail\">@adfail</A>                   <A HREF=\"#@adisconnect\">@adisconnect</A>\n<A HREF=\"#@adrop\">@adrop</A>                    <A HREF=\"#@aefail\">@aefail</A>                   <A HREF=\"#@aenter\">@aenter</A>\n<A HREF=\"#@afail\">@afail</A>                    <A HREF=\"#@agfail\">@agfail</A>                   <A HREF=\"#@ahear\">@ahear</A>\n<A HREF=\"#@akill\">@akill</A>                    <A HREF=\"#@aleave\">@aleave</A>                   <A HREF=\"#@alfail\">@alfail</A>\n<A HREF=\"#@alias\">@alias</A>                    <A HREF=\"#@amhear\">@amhear</A>                   <A HREF=\"#@amove\">@amove</A>\n<A HREF=\"#@ansiname\">@ansiname</A>                 <A HREF=\"#@apay\">@apay</A>                     <A HREF=\"#@arfail\">@arfail</A>\n<A HREF=\"#@asfail\">@asfail</A>                   <A HREF=\"#@assert\">@assert</A>                   <A HREF=\"#@asuccess\">@asuccess</A>\n<A HREF=\"#@atfail\">@atfail</A>                   <A HREF=\"#@atofail\">@atofail</A>                  <A HREF=\"#@atport\">@atport</A>\n<A HREF=\"#@attach\">@attach</A>                   <A HREF=\"#@aufail\">@aufail</A>                   <A HREF=\"#@ause\">@ause</A>\n<A HREF=\"#@away\">@away</A>                     <A HREF=\"#@break\">@break</A>                    <A HREF=\"#@caption\">@caption</A>\n<A HREF=\"#@channel\">@channel</A>                  <A HREF=\"#@channel2\">@channel2</A>                 <A HREF=\"#@charges\">@charges</A>\n<A HREF=\"#@chown\">@chown</A>                    <A HREF=\"#@clone\">@clone</A>                    <A HREF=\"#@clone2\">@clone2</A>\n<A HREF=\"#@cluster\">@cluster</A>                  <A HREF=\"#@cluster action\">@cluster action</A>           <A HREF=\"#@cluster action func\">@cluster action func</A>\n<A HREF=\"#@cluster add\">@cluster add</A>              <A HREF=\"#@cluster clear\">@cluster clear</A>            <A HREF=\"#@cluster cut\">@cluster cut</A>\n<A HREF=\"#@cluster del\">@cluster del</A>              <A HREF=\"#@cluster edit\">@cluster edit</A>             <A HREF=\"#@cluster func\">@cluster func</A>\n<A HREF=\"#@cluster func action\">@cluster func action</A>      <A HREF=\"#@cluster grep\">@cluster grep</A>             <A HREF=\"#@cluster list\">@cluster list</A>\n<A HREF=\"#@cluster new\">@cluster new</A>              <A HREF=\"#@cluster reaction\">@cluster reaction</A>         <A HREF=\"#@cluster repair\">@cluster repair</A>\n<A HREF=\"#@cluster set\">@cluster set</A>              <A HREF=\"#@cluster threshhold\">@cluster threshhold</A>       <A HREF=\"#@cluster trigger\">@cluster trigger</A>\n<A HREF=\"#@cluster wipe\">@cluster wipe</A>             <A HREF=\"#@conformat\">@conformat</A>                <A HREF=\"#@cost\">@cost</A>\n<A HREF=\"#@cpattr\">@CPATTR</A>                   <A HREF=\"#@create\">@create</A>                   <A HREF=\"#@decompile\">@decompile</A>\n<A HREF=\"#@describe\">@describe</A>                 <A HREF=\"#@destroy\">@destroy</A>                  <A HREF=\"#@dfail\">@dfail</A>\n<A HREF=\"#@dig\">@dig</A>                      <A HREF=\"#@doing\">@doing</A>                    <A HREF=\"#@dolist\">@dolist</A>\n<A HREF=\"#@dolist2 \">@dolist2 </A>                 <A HREF=\"#@door\">@door</A>                     <A HREF=\"#@drain\">@drain</A>\n<A HREF=\"#@drop\">@drop</A>                     <A HREF=\"#@ealias\">@ealias</A>                   <A HREF=\"#@edit\">@edit</A>\n<A HREF=\"#@efail\">@efail</A>                    <A HREF=\"#@emit\">@emit</A>                     <A HREF=\"#@enter\">@enter</A>\n<A HREF=\"#@entrances\">@entrances</A>                <A HREF=\"#@eval\">@eval</A>                     <A HREF=\"#@exitformat\">@exitformat</A>\n<A HREF=\"#@exitto\">@exitto</A>                   <A HREF=\"#@extansi\">@extansi</A>                  <A HREF=\"#@fail\">@fail</A>\n<A HREF=\"#@femit\">@femit</A>                    <A HREF=\"#@filter\">@filter</A>                   <A HREF=\"#@find\">@find</A>\n<A HREF=\"#@force\">@force</A>                    <A HREF=\"#@forwardlist\">@forwardlist</A>              <A HREF=\"#@fpose\">@fpose</A>\n<A HREF=\"#@fsay\">@fsay</A>                     <A HREF=\"#@gfail\">@gfail</A>                    <A HREF=\"#@grep\">@GREP</A>\n<A HREF=\"#@guild\">@guild</A>                    <A HREF=\"#@halt\">@halt</A>                     <A HREF=\"#@hide\">@hide</A>\n<A HREF=\"#@idesc\">@idesc</A>                    <A HREF=\"#@idle\">@idle</A>                     <A HREF=\"#@if\">@if</A>\n<A HREF=\"#@ifelse\">@ifelse</A>                   <A HREF=\"#@include\">@include</A>                  <A HREF=\"#@include2 \">@include2 </A>\n<A HREF=\"#@infilter\">@infilter</A>                 <A HREF=\"#@inprefix\">@inprefix</A>                 <A HREF=\"#@kill\">@kill</A>\n<A HREF=\"#@lalias\">@Lalias</A>                   <A HREF=\"#@last\">@last</A>                     <A HREF=\"#@leave\">@leave</A>\n<A HREF=\"#@lemit\">@lemit</A>                    <A HREF=\"#@lfail\">@lfail</A>                    <A HREF=\"#@lfunction\">@lfunction</A>\n<A HREF=\"#@lfunction2\">@lfunction2</A>               <A HREF=\"#@link\">@link</A>                     <A HREF=\"#@link2\">@link2</A>\n<A HREF=\"#@list\">@list</A>                     <A HREF=\"#@list2 \">@list2 </A>                   <A HREF=\"#@listen\">@listen</A>\n<A HREF=\"#@listmotd\">@listmotd</A>                 <A HREF=\"#@lock\">@lock</A>                     <A HREF=\"#@lock attribute\">@lock attribute</A>\n<A HREF=\"#@lock attribute2\">@lock attribute2</A>          <A HREF=\"#@lock carry\">@lock carry</A>               <A HREF=\"#@lock compound\">@lock compound</A>\n<A HREF=\"#@lock evaluation\">@lock evaluation</A>          <A HREF=\"#@lock evaluation2\">@lock evaluation2</A>         <A HREF=\"#@lock indirect\">@lock indirect</A>\n<A HREF=\"#@lock is\">@lock is</A>                  <A HREF=\"#@lock keys\">@Lock keys</A>                <A HREF=\"#@lock locks\">@lock locks</A>\n<A HREF=\"#@lock locks2\">@lock locks2</A>              <A HREF=\"#@lock locks3\">@lock locks3</A>              <A HREF=\"#@lock normal\">@lock normal</A>\n<A HREF=\"#@lock ownership\">@lock ownership</A>           <A HREF=\"#@lock type chownlock\">@lock type ChownLock</A>      <A HREF=\"#@lock type darklock\">@lock type DarkLock</A>\n<A HREF=\"#@lock type defaultlock\">@lock type DefaultLock</A>    <A HREF=\"#@lock type droplock\">@lock type DropLock</A>       <A HREF=\"#@lock type droptolock\">@lock type DropToLock</A>\n<A HREF=\"#@lock type enterlock\">@lock type EnterLock</A>      <A HREF=\"#@lock type getfromlock\">@lock type GetFromLock</A>    <A HREF=\"#@lock type givelock\">@lock type GiveLock</A>\n<A HREF=\"#@lock type givetolock\">@lock type GiveToLock</A>     <A HREF=\"#@lock type leavelock\">@lock type LeaveLock</A>      <A HREF=\"#@lock type linklock\">@lock type LinkLock</A>\n<A HREF=\"#@lock type openlock\">@lock type OpenLock</A>       <A HREF=\"#@lock type pagelock\">@lock type PageLock</A>       <A HREF=\"#@lock type parentlock\">@lock type ParentLock</A>\n<A HREF=\"#@lock type receivelock\">@lock type ReceiveLock</A>    <A HREF=\"#@lock type speechlock\">@lock type SpeechLock</A>     <A HREF=\"#@lock type teloutlock\">@lock type TeloutLock</A>\n<A HREF=\"#@lock type tportlock\">@lock type TportLock</A>      <A HREF=\"#@lock type twinklock\">@lock type TwinkLock</A>      <A HREF=\"#@lock type uselock\">@lock type UseLock</A>\n<A HREF=\"#@lock type userlock\">@lock type UserLock</A>       <A HREF=\"#@lock type zonetolock\">@lock type ZoneToLock</A>     <A HREF=\"#@lock type zonewizlock\">@lock type ZoneWizLock</A>\n<A HREF=\"#@mailsig\">@mailsig</A>                  <A HREF=\"#@moniker\">@moniker</A>                  <A HREF=\"#@move\">@move</A>\n<A HREF=\"#@mvattr\">@mvattr</A>                   <A HREF=\"#@name\">@name</A>                     <A HREF=\"#@nameformat\">@nameformat</A>\n<A HREF=\"#@notify\">@notify</A>                   <A HREF=\"#@odescribe\">@odescribe</A>                <A HREF=\"#@odfail\">@odfail</A>\n<A HREF=\"#@odrop\">@odrop</A>                    <A HREF=\"#@oefail\">@oefail</A>                   <A HREF=\"#@oemit\">@oemit</A>\n<A HREF=\"#@oenter\">@oenter</A>                   <A HREF=\"#@ofail\">@ofail</A>                    <A HREF=\"#@ogfail\">@ogfail</A>\n<A HREF=\"#@okill\">@okill</A>                    <A HREF=\"#@oleave\">@oleave</A>                   <A HREF=\"#@olfail\">@olfail</A>\n<A HREF=\"#@omove\">@omove</A>                    <A HREF=\"#@opay\">@opay</A>                     <A HREF=\"#@open\">@open</A>\n<A HREF=\"#@orfail\">@orfail</A>                   <A HREF=\"#@osuccess\">@osuccess</A>                 <A HREF=\"#@otfail\">@otfail</A>\n<A HREF=\"#@otofail\">@otofail</A>                  <A HREF=\"#@otport\">@otport</A>                   <A HREF=\"#@oufail\">@oufail</A>\n<A HREF=\"#@ouse\">@ouse</A>                     <A HREF=\"#@oxenter\">@oxenter</A>                  <A HREF=\"#@oxleave\">@oxleave</A>\n<A HREF=\"#@oxtport\">@oxtport</A>                  <A HREF=\"#@parent\">@parent</A>                   <A HREF=\"#@password\">@password</A>\n<A HREF=\"#@pay\">@pay</A>                      <A HREF=\"#@pemit\">@pemit</A>                    <A HREF=\"#@pemit2\">@pemit2</A>\n<A HREF=\"#@pipe\">@pipe</A>                     <A HREF=\"#@prefix\">@prefix</A>                   <A HREF=\"#@progprompt\">@progprompt</A>\n<A HREF=\"#@program\">@program</A>                  <A HREF=\"#@program2 \">@program2 </A>                <A HREF=\"#@program3\">@program3</A>\n<A HREF=\"#@protect\">@protect</A>                  <A HREF=\"#@ps\">@ps</A>                       <A HREF=\"#@quitprogram\">@quitprogram</A>\n<A HREF=\"#@quota\">@quota</A>                    <A HREF=\"#@quota alternate\">@quota alternate</A>          <A HREF=\"#@quota standard\">@quota standard</A>\n<A HREF=\"#@race\">@race</A>                     <A HREF=\"#@register\">@register</A>                 <A HREF=\"#@reject\">@reject</A>\n<A HREF=\"#@remit\">@remit</A>                    <A HREF=\"#@rfail\">@rfail</A>                    <A HREF=\"#@robot\">@robot</A>\n<A HREF=\"#@runout\">@runout</A>                   <A HREF=\"#@salisten\">@salisten</A>                 <A HREF=\"#@sasmell\">@sasmell</A>\n<A HREF=\"#@sataste\">@sataste</A>                  <A HREF=\"#@satouch\">@satouch</A>                  <A HREF=\"#@saystring\">@saystring</A>\n<A HREF=\"#@search\">@search</A>                   <A HREF=\"#@selfboot\">@SELFBOOT</A>                 <A HREF=\"#@set\">@set</A>\n<A HREF=\"#@set2\">@set2</A>                     <A HREF=\"#@sex\">@sex</A>                      <A HREF=\"#@sfail\">@sfail</A>\n<A HREF=\"#@skip\">@skip</A>                     <A HREF=\"#@slisten\">@slisten</A>                  <A HREF=\"#@solisten\">@solisten</A>\n<A HREF=\"#@sosmell\">@sosmell</A>                  <A HREF=\"#@sotaste\">@sotaste</A>                  <A HREF=\"#@sotouch\">@sotouch</A>\n<A HREF=\"#@sql\">@sql</A>                      <A HREF=\"#@sqlconnect\">@sqlconnect</A>               <A HREF=\"#@sqldisconnect\">@sqldisconnect</A>\n<A HREF=\"#@ssmell\">@ssmell</A>                   <A HREF=\"#@startup\">@startup</A>                  <A HREF=\"#@staste\">@staste</A>\n<A HREF=\"#@stats\">@stats</A>                    <A HREF=\"#@stouch\">@stouch</A>                   <A HREF=\"#@success\">@success</A>\n<A HREF=\"#@sudo\">@sudo</A>                     <A HREF=\"#@sweep\">@sweep</A>                    <A HREF=\"#@switch\">@switch</A>\n<A HREF=\"#@switch2\">@switch2</A>                  <A HREF=\"#@teleport\">@teleport</A>                 <A HREF=\"#@teleport2\">@teleport2</A>\n<A HREF=\"#@tfail\">@tfail</A>                    <A HREF=\"#@titlecaption\">@titlecaption</A>             <A HREF=\"#@tofail\">@tofail</A>\n<A HREF=\"#@toggle\">@toggle</A>                   <A HREF=\"#@tport\">@tport</A>                    <A HREF=\"#@trigger\">@trigger</A>\n<A HREF=\"#@ufail\">@ufail</A>                    <A HREF=\"#@unlink\">@unlink</A>                   <A HREF=\"#@unlock\">@unlock</A>\n<A HREF=\"#@uptime\">@uptime</A>                   <A HREF=\"#@use\">@use</A>                      <A HREF=\"#@verb\">@verb</A>\n<A HREF=\"#@verb2\">@verb2</A>                    <A HREF=\"#@verb3\">@verb3</A>                    <A HREF=\"#@version\">@version</A>\n<A HREF=\"#@wait\">@wait</A>                     <A HREF=\"#@wait2\">@wait2</A>                    <A HREF=\"#@wall\">@wall</A>\n<A HREF=\"#@whereall\">@whereall</A>                 <A HREF=\"#@whereis\">@whereis</A>                  <A HREF=\"#@wipe\">@wipe</A>\n<A HREF=\"#@zone\">@zone</A>                     <A HREF=\"#\\\\\">\\\\</A>                        <A HREF=\"#]\">]</A>\n<A HREF=\"#abode\">ABODE</A>                     <A HREF=\"#abs()\">ABS()</A>                     <A HREF=\"#accent()\">ACCENT()</A>\n<A HREF=\"#accent2\">ACCENT2</A>                   <A HREF=\"#accent3\">ACCENT3</A>                   <A HREF=\"#accent4\">ACCENT4</A>\n<A HREF=\"#accents toggle\">ACCENTS TOGGLE</A>            <A HREF=\"#acos()\">ACOS()</A>                    <A HREF=\"#add()\">ADD()</A>\n<A HREF=\"#after()\">AFTER()</A>                   <A HREF=\"#aiindex()\">AIINDEX()</A>                 <A HREF=\"#aindex()\">AINDEX()</A>\n<A HREF=\"#aliased functions\">aliased functions</A>         <A HREF=\"#align()\">ALIGN()</A>                   <A HREF=\"#allof()\">ALLOF()</A>\n<A HREF=\"#alphamax()\">ALPHAMAX()</A>                <A HREF=\"#alphamin()\">ALPHAMIN()</A>                <A HREF=\"#alt inventories\">ALT INVENTORIES</A>\n<A HREF=\"#altnames\">ALTNAMES</A>                  <A HREF=\"#ancestors\">ANCESTORS</A>                 <A HREF=\"#and()\">AND()</A>\n<A HREF=\"#andchr()\">ANDCHR()</A>                  <A HREF=\"#andflag()\">ANDFLAG()</A>                 <A HREF=\"#andflags()\">ANDFLAGS()</A>\n<A HREF=\"#ansi\">ANSI</A>                      <A HREF=\"#ansi functions\">ansi functions</A>            <A HREF=\"#ansi quirks\">ANSI QUIRKS</A>\n<A HREF=\"#ansi()\">ANSI()</A>                    <A HREF=\"#ansi2\">ANSI2</A>                     <A HREF=\"#ansi3\">ANSI3</A>\n<A HREF=\"#ansi4\">ANSI4</A>                     <A HREF=\"#ansicolor\">ANSICOLOR</A>                 <A HREF=\"#ansinames\">ANSINAMES</A>\n<A HREF=\"#aposs()\">APOSS()</A>                   <A HREF=\"#arbitrary commands\">ARBITRARY COMMANDS</A>        <A HREF=\"#arbitrary2\">arbitrary2</A>\n<A HREF=\"#architect\">ARCHITECT</A>                 <A HREF=\"#arithmetic functions\">arithmetic functions</A>      <A HREF=\"#array()\">ARRAY()</A>\n<A HREF=\"#art()\">ART()</A>                     <A HREF=\"#asc()\">ASC()</A>                     <A HREF=\"#asin()\">ASIN()</A>\n<A HREF=\"#atan()\">ATAN()</A>                    <A HREF=\"#atan2()\">ATAN2()</A>                   <A HREF=\"#attrcnt()\">ATTRCNT()</A>\n<A HREF=\"#attribute flag architect\">ATTRIBUTE FLAG ARCHITECT</A>  <A HREF=\"#attribute flag atrlock\">ATTRIBUTE FLAG ATRLOCK</A>    <A HREF=\"#attribute flag councilor\">ATTRIBUTE FLAG COUNCILOR</A>\n<A HREF=\"#attribute flag dark\">ATTRIBUTE FLAG DARK</A>       <A HREF=\"#attribute flag default\">ATTRIBUTE FLAG DEFAULT</A>    <A HREF=\"#attribute flag god\">ATTRIBUTE FLAG GOD</A>\n<A HREF=\"#attribute flag guildmaster\">ATTRIBUTE FLAG GUILDMASTER</A><A HREF=\"#attribute flag hidden\">ATTRIBUTE FLAG HIDDEN</A>     <A HREF=\"#attribute flag immortal\">ATTRIBUTE FLAG IMMORTAL</A>\n<A HREF=\"#attribute flag lock\">ATTRIBUTE FLAG LOCK</A>       <A HREF=\"#attribute flag logged\">ATTRIBUTE FLAG LOGGED</A>     <A HREF=\"#attribute flag mdark\">ATTRIBUTE FLAG MDARK</A>\n<A HREF=\"#attribute flag no_clone\">ATTRIBUTE FLAG NO_CLONE</A>   <A HREF=\"#attribute flag no_command\">ATTRIBUTE FLAG NO_COMMAND</A> <A HREF=\"#attribute flag no_inherit\">ATTRIBUTE FLAG NO_INHERIT</A>\n<A HREF=\"#attribute flag no_parse\">ATTRIBUTE FLAG NO_PARSE</A>   <A HREF=\"#attribute flag noprog\">ATTRIBUTE FLAG NOPROG</A>     <A HREF=\"#attribute flag pinvisible\">ATTRIBUTE FLAG PINVISIBLE</A>\n<A HREF=\"#attribute flag private\">ATTRIBUTE FLAG PRIVATE</A>    <A HREF=\"#attribute flag regexp\">ATTRIBUTE FLAG REGEXP</A>     <A HREF=\"#attribute flag royalty\">ATTRIBUTE FLAG ROYALTY</A>\n<A HREF=\"#attribute flag safe\">ATTRIBUTE FLAG SAFE</A>       <A HREF=\"#attribute flag singlethread\">ATTRIBUTE FLAG SINGLETHREAD</A><A HREF=\"#attribute flag uselock\">ATTRIBUTE FLAG USELOCK</A>\n<A HREF=\"#attribute flag visual\">ATTRIBUTE FLAG VISUAL</A>     <A HREF=\"#attribute flag wizard\">ATTRIBUTE FLAG WIZARD</A>     <A HREF=\"#attribute flags\">ATTRIBUTE FLAGS</A>\n<A HREF=\"#attribute flags2\">ATTRIBUTE FLAGS2</A>          <A HREF=\"#attribute ownership\">ATTRIBUTE OWNERSHIP</A>       <A HREF=\"#attribute ownership2\">attribute ownership2</A>\n<A HREF=\"#attribute ownership3\">attribute ownership3</A>      <A HREF=\"#attribute tree limitations\">ATTRIBUTE TREE LIMITATIONS</A><A HREF=\"#attribute tree permission\">ATTRIBUTE TREE PERMISSION</A>\n<A HREF=\"#attribute tree setting\">ATTRIBUTE TREE SETTING</A>    <A HREF=\"#attribute tree viewing\">ATTRIBUTE TREE VIEWING</A>    <A HREF=\"#attribute trees\">ATTRIBUTE TREES</A>\n<A HREF=\"#attribute uselock2\">ATTRIBUTE USELOCK2</A>        <A HREF=\"#attribute uselocks\">ATTRIBUTE USELOCKS</A>        <A HREF=\"#audible\">AUDIBLE</A>\n<A HREF=\"#auditorium\">AUDITORIUM</A>                <A HREF=\"#avg()\">AVG()</A>                     <A HREF=\"#bang notation\">BANG NOTATION</A>\n<A HREF=\"#before()\">BEFORE()</A>                  <A HREF=\"#being killed\">BEING KILLED</A>              <A HREF=\"#between()\">BETWEEN()</A>\n<A HREF=\"#bittype()\">BITTYPE()</A>                 <A HREF=\"#blind\">BLIND</A>                     <A HREF=\"#bogus commands\">BOGUS COMMANDS</A>\n<A HREF=\"#boolean values\">BOOLEAN VALUES</A>            <A HREF=\"#bounce\">BOUNCE</A>                    <A HREF=\"#bounceforward\">BOUNCEFORWARD</A>\n<A HREF=\"#bound()\">BOUND()</A>                   <A HREF=\"#brackets()\">BRACKETS()</A>                <A HREF=\"#brandy_mail toggle\">BRANDY_MAIL TOGGLE</A>\n<A HREF=\"#byeroom\">BYEROOM</A>                   <A HREF=\"#cand()\">CAND()</A>                    <A HREF=\"#caplist()\">CAPLIST()</A>\n<A HREF=\"#capstr()\">CAPSTR()</A>                  <A HREF=\"#case()\">case()</A>                    <A HREF=\"#caseall()\">caseall()</A>\n<A HREF=\"#cat()\">cat()</A>                     <A HREF=\"#cd\">cd</A>                        <A HREF=\"#ceil()\">CEIL()</A>\n<A HREF=\"#center()\">CENTER()</A>                  <A HREF=\"#ch\">ch</A>                        <A HREF=\"#changes\">changes</A>\n<A HREF=\"#channel\">channel</A>                   <A HREF=\"#channel2\">channel2</A>                  <A HREF=\"#charin()\">CHARIN()</A>\n<A HREF=\"#charout()\">CHAROUT()</A>                 <A HREF=\"#children()\">CHILDREN()</A>                <A HREF=\"#chkreality()\">CHKREALITY()</A>\n<A HREF=\"#chkreality()\">CHKREALITY()</A>              <A HREF=\"#chktrace()\">CHKTRACE()</A>                <A HREF=\"#chomp()\">CHOMP()</A>\n<A HREF=\"#chown_ok\">CHOWN_OK</A>                  <A HREF=\"#chr()\">CHR()</A>                     <A HREF=\"#citer()\">CITER()</A>\n<A HREF=\"#cloak\">CLOAK</A>                     <A HREF=\"#clone()\">CLONE()</A>                   <A HREF=\"#cluster commands\">CLUSTER COMMANDS</A>\n<A HREF=\"#cluster functions\">cluster functions</A>         <A HREF=\"#cluster_add()\">CLUSTER_ADD()</A>             <A HREF=\"#cluster_attrcnt()\">CLUSTER_ATTRCNT()</A>\n<A HREF=\"#cluster_default()\">CLUSTER_DEFAULT()</A>         <A HREF=\"#cluster_edefault()\">CLUSTER_EDEFAULT()</A>        <A HREF=\"#cluster_flags()\">CLUSTER_FLAGS()</A>\n<A HREF=\"#cluster_get()\">CLUSTER_GET()</A>             <A HREF=\"#cluster_get_eval()\">CLUSTER_GET_EVAL()</A>        <A HREF=\"#cluster_grep()\">CLUSTER_GREP()</A>\n<A HREF=\"#cluster_hasattr()\">CLUSTER_HASATTR()</A>         <A HREF=\"#cluster_hasflag()\">CLUSTER_HASFLAG()</A>         <A HREF=\"#cluster_lattr()\">CLUSTER_LATTR()</A>\n<A HREF=\"#cluster_lattr2 \">CLUSTER_LATTR2 </A>           <A HREF=\"#cluster_regrep()\">CLUSTER_REGREP()</A>          <A HREF=\"#cluster_regrepi()\">CLUSTER_REGREPI()</A>\n<A HREF=\"#cluster_set()\">CLUSTER_SET()</A>             <A HREF=\"#cluster_stats()\">CLUSTER_STATS()</A>           <A HREF=\"#cluster_u()\">CLUSTER_U()</A>\n<A HREF=\"#cluster_u2()\">CLUSTER_U2()</A>              <A HREF=\"#cluster_u2default()\">CLUSTER_U2DEFAULT()</A>       <A HREF=\"#cluster_u2ldefault()\">CLUSTER_U2LDEFAULT()</A>\n<A HREF=\"#cluster_u2local()\">CLUSTER_U2LOCAL()</A>         <A HREF=\"#cluster_u2local2\">CLUSTER_U2LOCAL2</A>          <A HREF=\"#cluster_udefault()\">CLUSTER_UDEFAULT()</A>\n<A HREF=\"#cluster_ueval()\">CLUSTER_UEVAL()</A>           <A HREF=\"#cluster_uldefault()\">CLUSTER_ULDEFAULT()</A>       <A HREF=\"#cluster_ulocal()\">CLUSTER_ULOCAL()</A>\n<A HREF=\"#cluster_ulocal2\">CLUSTER_ULOCAL2</A>           <A HREF=\"#cluster_vattrcnt()\">CLUSTER_VATTRCNT()</A>        <A HREF=\"#cluster_wipe()\">CLUSTER_WIPE()</A>\n<A HREF=\"#cluster_xget()\">CLUSTER_XGET()</A>            <A HREF=\"#clusters\">CLUSTERS</A>                  <A HREF=\"#cmds()\">CMDS()</A>\n<A HREF=\"#cname()\">CNAME()</A>                   <A HREF=\"#co\">co</A>                        <A HREF=\"#colors\">colors</A>\n<A HREF=\"#colors()\">COLORS()</A>                  <A HREF=\"#columns()\">COLUMNS()</A>                 <A HREF=\"#columns2\">COLUMNS2</A>\n<A HREF=\"#columns3\">COLUMNS3</A>                  <A HREF=\"#combat\">COMBAT</A>                    <A HREF=\"#command evaluation\">COMMAND EVALUATION</A>\n<A HREF=\"#command evaluation2\">command evaluation2</A>       <A HREF=\"#commands\">commands</A>                  <A HREF=\"#commands flag\">COMMANDS FLAG</A>\n<A HREF=\"#commands2\">commands2</A>                 <A HREF=\"#comp()\">COMP()</A>                    <A HREF=\"#con()\">CON()</A>\n<A HREF=\"#config()\">CONFIG()</A>                  <A HREF=\"#conn()\">CONN()</A>                    <A HREF=\"#connected\">CONNECTED</A>\n<A HREF=\"#control\">CONTROL</A>                   <A HREF=\"#control_ok\">CONTROL_OK</A>                <A HREF=\"#controls()\">controls()</A>\n<A HREF=\"#convsecs()\">CONVSECS()</A>                <A HREF=\"#convtime()\">CONVTIME()</A>                <A HREF=\"#copyright\">COPYRIGHT</A>\n<A HREF=\"#cor()\">COR()</A>                     <A HREF=\"#cos()\">COS()</A>                     <A HREF=\"#cosh()\">COSH()</A>\n<A HREF=\"#costs \">COSTS </A>                    <A HREF=\"#councilor\">COUNCILOR</A>                 <A HREF=\"#cpattr2\">CPATTR2</A>\n<A HREF=\"#cpattr3\">CPATTR3</A>                   <A HREF=\"#cputime toggle\">CPUTIME TOGGLE</A>            <A HREF=\"#cputime2\">CPUTIME2</A>\n<A HREF=\"#crc32()\">CRC32()</A>                   <A HREF=\"#create()\">CREATE()</A>                  <A HREF=\"#createtime()\">CREATETIME()</A>\n<A HREF=\"#credits\">CREDITS</A>                   <A HREF=\"#credits2\">credits2</A>                  <A HREF=\"#credits3\">credits3</A>\n<A HREF=\"#credits4\">credits4</A>                  <A HREF=\"#credits5\">credits5</A>                  <A HREF=\"#creplace()\">CREPLACE()</A>\n<A HREF=\"#ctu()\">CTU()</A>                     <A HREF=\"#dark\">DARK</A>                      <A HREF=\"#database information functions\">database information functions</A>\n<A HREF=\"#debug\">DEBUG</A>                     <A HREF=\"#dec()\">DEC()</A>                     <A HREF=\"#decode64()\">DECODE64()</A>\n<A HREF=\"#decrypt()\">DECRYPT()</A>                 <A HREF=\"#default()\">default()</A>                 <A HREF=\"#delete()\">DELETE()</A>\n<A HREF=\"#delextract()\">delextract()</A>              <A HREF=\"#destroy()\">DESTROY()</A>                 <A HREF=\"#destroy_ok\">DESTROY_OK</A>\n<A HREF=\"#dice()\">DICE()</A>                    <A HREF=\"#die()\">DIE()</A>                     <A HREF=\"#differences\">DIFFERENCES</A>\n<A HREF=\"#differences2\">DIFFERENCES2</A>              <A HREF=\"#dig()\">DIG()</A>                     <A HREF=\"#digest()\">DIGEST()</A>\n<A HREF=\"#dist2d()\">DIST2D()</A>                  <A HREF=\"#dist3d()\">DIST3D()</A>                  <A HREF=\"#div()\">DIV()</A>\n<A HREF=\"#doing\">doing</A>                     <A HREF=\"#door syntax\">DOOR SYNTAX</A>               <A HREF=\"#door_close\">DOOR_CLOSE</A>\n<A HREF=\"#door_kick\">DOOR_KICK</A>                 <A HREF=\"#door_list\">DOOR_LIST</A>                 <A HREF=\"#door_list2\">DOOR_LIST2</A>\n<A HREF=\"#door_open\">DOOR_OPEN</A>                 <A HREF=\"#door_push\">DOOR_PUSH</A>                 <A HREF=\"#door_status\">DOOR_STATUS</A>\n<A HREF=\"#door_writing\">DOOR_WRITING</A>              <A HREF=\"#door_writing2\">DOOR_WRITING2</A>             <A HREF=\"#door_writing3\">DOOR_WRITING3</A>\n<A HREF=\"#doored\">DOORED</A>                    <A HREF=\"#drop\">drop</A>                      <A HREF=\"#dropMINUStos\">DROP-TOS</A>\n<A HREF=\"#e()\">E()</A>                       <A HREF=\"#edefault()\">edefault()</A>                <A HREF=\"#edit()\">EDIT()</A>\n<A HREF=\"#editansi()\">EDITANSI()</A>                <A HREF=\"#ee()\">EE()</A>                      <A HREF=\"#elementpos()\">ELEMENTPOS()</A>\n<A HREF=\"#elements()\">elements()</A>                <A HREF=\"#elementsmux()\">elementsmux()</A>             <A HREF=\"#elist()\">elist()</A>\n<A HREF=\"#elock()\">elock()</A>                   <A HREF=\"#emit()\">EMIT()</A>                    <A HREF=\"#enactor\">ENACTOR</A>\n<A HREF=\"#encode64()\">ENCODE64()</A>                <A HREF=\"#encrypt()\">ENCRYPT()</A>                 <A HREF=\"#enter\">enter</A>\n<A HREF=\"#enter_ok\">ENTER_OK</A>                  <A HREF=\"#entrances()\">ENTRANCES()</A>               <A HREF=\"#eq()\">eq()</A>\n<A HREF=\"#error()\">ERROR()</A>                   <A HREF=\"#escape()\">ESCAPE()</A>                  <A HREF=\"#escapex()\">ESCAPEX()</A>\n<A HREF=\"#esclist()\">ESCLIST()</A>                 <A HREF=\"#eval()\">EVAL()</A>                    <A HREF=\"#examine\">examine</A>\n<A HREF=\"#examine2\">examine2</A>                  <A HREF=\"#examine3\">examine3</A>                  <A HREF=\"#examine4\">examine4</A>\n<A HREF=\"#exit()\">EXIT()</A>                    <A HREF=\"#exits\">EXITS</A>                     <A HREF=\"#exp()\">EXP()</A>\n<A HREF=\"#extansi toggle\">EXTANSI TOGGLE</A>            <A HREF=\"#extract()\">EXTRACT()</A>                 <A HREF=\"#extractword()\">EXTRACTWORD()</A>\n<A HREF=\"#failure\">FAILURE</A>                   <A HREF=\"#fbetween()\">FBETWEEN()</A>                <A HREF=\"#fbound()\">FBOUND()</A>\n<A HREF=\"#fdiv()\">FDIV()</A>                    <A HREF=\"#filter()\">filter()</A>                  <A HREF=\"#findable()\">findable()</A>\n<A HREF=\"#first()\">FIRST()</A>                   <A HREF=\"#firstof()\">FIRSTOF()</A>                 <A HREF=\"#flag aliases\">FLAG ALIASES</A>\n<A HREF=\"#flag list\">FLAG LIST</A>                 <A HREF=\"#flag list2\">FLAG LIST2</A>                <A HREF=\"#flags\">FLAGS</A>\n<A HREF=\"#flags()\">FLAGS()</A>                   <A HREF=\"#flip()\">FLIP()</A>                    <A HREF=\"#floating\">FLOATING</A>\n<A HREF=\"#floor()\">FLOOR()</A>                   <A HREF=\"#floordiv()\">FLOORDIV()</A>                <A HREF=\"#fmod()\">FMOD()</A>\n<A HREF=\"#fold()\">fold()</A>                    <A HREF=\"#folder\">folder</A>                    <A HREF=\"#folder change\">folder change</A>\n<A HREF=\"#folder cmdlist\">folder cmdlist</A>            <A HREF=\"#folder create\">folder create</A>             <A HREF=\"#folder cshare\">folder cshare</A>\n<A HREF=\"#folder current\">folder current</A>            <A HREF=\"#folder delete\">folder delete</A>             <A HREF=\"#folder list\">folder list</A>\n<A HREF=\"#folder move\">folder move</A>               <A HREF=\"#folder rename\">folder rename</A>             <A HREF=\"#folder share\">folder share</A>\n<A HREF=\"#foldercurrent()\">FOLDERCURRENT()</A>           <A HREF=\"#folderlist()\">FOLDERLIST()</A>              <A HREF=\"#foreach()\">FOREACH()</A>\n<A HREF=\"#free\">FREE</A>                      <A HREF=\"#fubar\">FUBAR</A>                     <A HREF=\"#fullname()\">FULLNAME()</A>\n<A HREF=\"#function aliases\">FUNCTION ALIASES</A>          <A HREF=\"#function classes\">FUNCTION CLASSES</A>          <A HREF=\"#function classes2\">FUNCTION CLASSES2</A>\n<A HREF=\"#function classes3\">FUNCTION CLASSES3</A>         <A HREF=\"#function classes4\">FUNCTION CLASSES4</A>         <A HREF=\"#function classes5\">FUNCTION CLASSES5</A>\n<A HREF=\"#function classes6\">FUNCTION CLASSES6</A>         <A HREF=\"#function classes7\">FUNCTION CLASSES7</A>         <A HREF=\"#function list\">FUNCTION LIST</A>\n<A HREF=\"#function list2\">FUNCTION LIST2</A>            <A HREF=\"#function list3\">FUNCTION LIST3</A>            <A HREF=\"#function list4\">FUNCTION LIST4</A>\n<A HREF=\"#function list5\">FUNCTION LIST5</A>            <A HREF=\"#function types\">FUNCTION TYPES</A>            <A HREF=\"#functions\">FUNCTIONS</A>\n<A HREF=\"#game information functions\">game information functions</A><A HREF=\"#garble()\">GARBLE()</A>                  <A HREF=\"#gender\">GENDER</A>\n<A HREF=\"#get\">get</A>                       <A HREF=\"#get()\">GET()</A>                     <A HREF=\"#get2\">get2</A>\n<A HREF=\"#get_eval()\">GET_EVAL()</A>                <A HREF=\"#give\">give</A>                      <A HREF=\"#globalroom()\">GLOBALROOM()</A>\n<A HREF=\"#goals\">GOALS</A>                     <A HREF=\"#going\">GOING</A>                     <A HREF=\"#goto\">goto</A>\n<A HREF=\"#grab\">grab</A>                      <A HREF=\"#grab()\">GRAB()</A>                    <A HREF=\"#graball()\">GRABALL()</A>\n<A HREF=\"#grep()\">GREP()</A>                    <A HREF=\"#gt()\">gt()</A>                      <A HREF=\"#gte()\">gte()</A>\n<A HREF=\"#guests\">GUESTS</A>                    <A HREF=\"#guild()\">GUILD()</A>                   <A HREF=\"#guildmaster\">GUILDMASTER</A>\n<A HREF=\"#halted\">HALTED</A>                    <A HREF=\"#hasattr()\">hasattr()</A>                 <A HREF=\"#hasattrp()\">hasattrp()</A>\n<A HREF=\"#hasflag()\">hasflag()</A>                 <A HREF=\"#hasquota()\">hasquota()</A>                <A HREF=\"#hasrxlevel()\">HASRXLEVEL()</A>\n<A HREF=\"#hastoggle()\">HASTOGGLE()</A>               <A HREF=\"#hastxlevel()\">HASTXLEVEL()</A>              <A HREF=\"#hastype()\">hastype()</A>\n<A HREF=\"#haven\">HAVEN</A>                     <A HREF=\"#help\">help</A>                      <A HREF=\"#here\">HERE</A>\n<A HREF=\"#home()\">HOME()</A>                    <A HREF=\"#homes\">HOMES</A>                     <A HREF=\"#ibreak()\">IBREAK()</A>\n<A HREF=\"#ic\">IC</A>                        <A HREF=\"#idiv()\">IDIV()</A>                    <A HREF=\"#idle\">IDLE</A>\n<A HREF=\"#idle()\">IDLE()</A>                    <A HREF=\"#ifelse()\">ifelse()</A>                  <A HREF=\"#iindex()\">IINDEX()</A>\n<A HREF=\"#ilev()\">ILEV()</A>                    <A HREF=\"#immortal\">IMMORTAL</A>                  <A HREF=\"#inc()\">INC()</A>\n<A HREF=\"#indestructible\">INDESTRUCTIBLE</A>            <A HREF=\"#index()\">INDEX()</A>                   <A HREF=\"#info\">INFO</A>\n<A HREF=\"#inherit\">INHERIT</A>                   <A HREF=\"#inprogram()\">INPROGRAM()</A>               <A HREF=\"#insert()\">INSERT()</A>\n<A HREF=\"#internal_doors\">INTERNAL_DOORS</A>            <A HREF=\"#inum()\">INUM()</A>                    <A HREF=\"#inventory\">inventory</A>\n<A HREF=\"#inzone()\">INZONE()</A>                  <A HREF=\"#isalnum()\">ISALNUM()</A>                 <A HREF=\"#isalpha()\">ISALPHA()</A>\n<A HREF=\"#iscluster()\">ISCLUSTER()</A>               <A HREF=\"#isdbref()\">ISDBREF()</A>                 <A HREF=\"#isdigit()\">ISDIGIT()</A>\n<A HREF=\"#ishidden()\">ISHIDDEN()</A>                <A HREF=\"#isint()\">ISINT()</A>                   <A HREF=\"#islower()\">ISLOWER()</A>\n<A HREF=\"#isnum()\">ISNUM()</A>                   <A HREF=\"#ispunct()\">ISPUNCT()</A>                 <A HREF=\"#isspace()\">ISSPACE()</A>\n<A HREF=\"#isupper()\">ISUPPER()</A>                 <A HREF=\"#isword()\">ISWORD()</A>                  <A HREF=\"#isxdigit()\">ISXDIGIT()</A>\n<A HREF=\"#iter()\">ITER()</A>                    <A HREF=\"#itext()\">ITEXT()</A>                   <A HREF=\"#join\">join</A>\n<A HREF=\"#jump_ok\">JUMP_OK</A>                   <A HREF=\"#keepalive toggle\">KEEPALIVE TOGGLE</A>          <A HREF=\"#keepflags()\">KEEPFLAGS()</A>\n<A HREF=\"#keeptype()\">KEEPTYPE()</A>                <A HREF=\"#key\">KEY</A>                       <A HREF=\"#kill\">kill</A>\n<A HREF=\"#ladd()\">LADD()</A>                    <A HREF=\"#land()\">LAND()</A>                    <A HREF=\"#last()\">LAST()</A>\n<A HREF=\"#lastcreate()\">LASTCREATE()</A>              <A HREF=\"#lattr()\">LATTR()</A>                   <A HREF=\"#lattr2 \">LATTR2 </A>\n<A HREF=\"#lavg()\">LAVG()</A>                    <A HREF=\"#lcmds()\">LCMDS()</A>                   <A HREF=\"#lcon()\">LCON()</A>\n<A HREF=\"#lcstr()\">LCSTR()</A>                   <A HREF=\"#ldelete()\">LDELETE()</A>                 <A HREF=\"#ldiv()\">LDIV()</A>\n<A HREF=\"#leave\">leave</A>                     <A HREF=\"#left()\">LEFT()</A>                    <A HREF=\"#lemit()\">LEMIT()</A>\n<A HREF=\"#lexits()\">LEXITS()</A>                  <A HREF=\"#lflags()\">LFLAGS()</A>                  <A HREF=\"#light\">LIGHT</A>\n<A HREF=\"#link()\">LINK()</A>                    <A HREF=\"#link_ok\">LINK_OK</A>                   <A HREF=\"#linking \">LINKING </A>\n<A HREF=\"#list functions\">list functions</A>            <A HREF=\"#list functions2\">list functions2</A>           <A HREF=\"#list functions3\">list functions3</A>\n<A HREF=\"#list functions4\">list functions4</A>           <A HREF=\"#list()\">LIST()</A>                    <A HREF=\"#list2\">LIST2</A>\n<A HREF=\"#listcommands()\">LISTCOMMANDS()</A>            <A HREF=\"#listdiff()\">LISTDIFF()</A>                <A HREF=\"#listen\">listen</A>\n<A HREF=\"#listening\">LISTENING</A>                 <A HREF=\"#listflags()\">LISTFLAGS()</A>               <A HREF=\"#listfunctions()\">LISTFUNCTIONS()</A>\n<A HREF=\"#listinter()\">LISTINTER()</A>               <A HREF=\"#listmatch()\">LISTMATCH()</A>               <A HREF=\"#listnewsgroups()\">LISTNEWSGROUPS()</A>\n<A HREF=\"#listprotection()\">LISTPROTECTION()</A>          <A HREF=\"#listrlevels()\">LISTRLEVELS()</A>             <A HREF=\"#lists\">LISTS</A>\n<A HREF=\"#listtoggles()\">LISTTOGGLES()</A>             <A HREF=\"#listunion()\">LISTUNION()</A>               <A HREF=\"#lit()\">LIT()</A>\n<A HREF=\"#lj()\">LJ()</A>                      <A HREF=\"#ljc()\">LJC()</A>                     <A HREF=\"#ljust()\">LJUST()</A>\n<A HREF=\"#lloc()\">LLOC()</A>                    <A HREF=\"#lmath()\">LMATH()</A>                   <A HREF=\"#lmax()\">LMAX()</A>\n<A HREF=\"#lmin()\">LMIN()</A>                    <A HREF=\"#lmul()\">LMUL()</A>                    <A HREF=\"#ln()\">LN()</A>\n<A HREF=\"#lnor()\">LNOR()</A>                    <A HREF=\"#lnum()\">LNUM()</A>                    <A HREF=\"#lnum2()\">LNUM2()</A>\n<A HREF=\"#loc()\">LOC()</A>                     <A HREF=\"#localfunc()\">LOCALFUNC()</A>               <A HREF=\"#localize()\">LOCALIZE()</A>\n<A HREF=\"#locate()\">LOCATE()</A>                  <A HREF=\"#locate2\">locate2</A>                   <A HREF=\"#locate3\">locate3</A>\n<A HREF=\"#lock()\">lock()</A>                    <A HREF=\"#lockcheck()\">lockcheck()</A>               <A HREF=\"#lockdecode()\">lockdecode()</A>\n<A HREF=\"#lockencode()\">lockencode()</A>              <A HREF=\"#log()\">LOG()</A>                     <A HREF=\"#logarithmic functions\">logarithmic functions</A>\n<A HREF=\"#logical functions\">logical functions</A>         <A HREF=\"#logout\">LOGOUT</A>                    <A HREF=\"#look\">look</A>\n<A HREF=\"#looping\">LOOPING</A>                   <A HREF=\"#lor()\">LOR()</A>                     <A HREF=\"#lpage\">lpage</A>\n<A HREF=\"#lparent()\">LPARENT()</A>                 <A HREF=\"#lrand()\">lrand()</A>                   <A HREF=\"#lreplace()\">LREPLACE()</A>\n<A HREF=\"#lrooms()\">lrooms()</A>                  <A HREF=\"#lsub()\">LSUB()</A>                    <A HREF=\"#lt()\">lt()</A>\n<A HREF=\"#lte()\">lte()</A>                     <A HREF=\"#ltoggles()\">LTOGGLES()</A>                <A HREF=\"#lwho()\">LWHO()</A>\n<A HREF=\"#lxnor()\">LXNOR()</A>                   <A HREF=\"#lxor()\">LXOR()</A>                    <A HREF=\"#lzone()\">LZONE()</A>\n<A HREF=\"#mail\">mail</A>                      <A HREF=\"#mail alias\">mail alias</A>                <A HREF=\"#mail anonymous\">mail anonymous</A>\n<A HREF=\"#mail autofor\">mail autofor</A>              <A HREF=\"#mail autopurges\">mail autopurges</A>           <A HREF=\"#mail ball\">mail ball</A>\n<A HREF=\"#mail basics\">mail basics</A>               <A HREF=\"#mail basics2\">mail basics2</A>              <A HREF=\"#mail both\">mail both</A>\n<A HREF=\"#mail btutor\">mail btutor</A>               <A HREF=\"#mail changes\">mail changes</A>              <A HREF=\"#mail changes2\">mail changes2</A>\n<A HREF=\"#mail check\">mail check</A>                <A HREF=\"#mail cmdlist\">mail cmdlist</A>              <A HREF=\"#mail cmdlist2\">mail cmdlist2</A>\n<A HREF=\"#mail cmdlist3\">mail cmdlist3</A>             <A HREF=\"#mail creating\">mail creating</A>             <A HREF=\"#mail credits\">mail credits</A>\n<A HREF=\"#mail delete\">mail delete</A>               <A HREF=\"#mail dtutor\">mail dtutor</A>               <A HREF=\"#mail dtutor notes\">mail dtutor notes</A>\n<A HREF=\"#mail dtutor1\">mail dtutor1</A>              <A HREF=\"#mail dtutor2\">mail dtutor2</A>              <A HREF=\"#mail dtutor3\">mail dtutor3</A>\n<A HREF=\"#mail dtutor4\">mail dtutor4</A>              <A HREF=\"#mail dtutor5\">mail dtutor5</A>              <A HREF=\"#mail dtutor6\">mail dtutor6</A>\n<A HREF=\"#mail dtutor7\">mail dtutor7</A>              <A HREF=\"#mail folders\">mail folders</A>              <A HREF=\"#mail forward\">mail forward</A>\n<A HREF=\"#mail line\">mail line</A>                 <A HREF=\"#mail line examples\">mail line examples</A>        <A HREF=\"#mail lineeditor\">mail lineeditor</A>\n<A HREF=\"#mail list_aliases\">mail list_aliases</A>         <A HREF=\"#mail lock\">mail lock</A>                 <A HREF=\"#mail main\">mail main</A>\n<A HREF=\"#mail mark\">mail mark</A>                 <A HREF=\"#mail massmail\">mail massmail</A>             <A HREF=\"#mail nall\">mail nall</A>\n<A HREF=\"#mail new\">mail new</A>                  <A HREF=\"#mail next\">mail next</A>                 <A HREF=\"#mail number\">mail number</A>\n<A HREF=\"#mail page\">mail page</A>                 <A HREF=\"#mail password\">mail password</A>             <A HREF=\"#mail previous\">mail previous</A>\n<A HREF=\"#mail quick\">mail quick</A>                <A HREF=\"#mail quicklist\">mail quicklist</A>            <A HREF=\"#mail quota\">mail quota</A>\n<A HREF=\"#mail read\">mail read</A>                 <A HREF=\"#mail recall\">mail recall</A>               <A HREF=\"#mail recall2\">mail recall2</A>\n<A HREF=\"#mail recall3\">mail recall3</A>              <A HREF=\"#mail reject\">mail reject</A>               <A HREF=\"#mail reply\">mail reply</A>\n<A HREF=\"#mail save\">mail save</A>                 <A HREF=\"#mail send\">mail send</A>                 <A HREF=\"#mail send brandy\">mail send brandy</A>\n<A HREF=\"#mail send examples\">mail send examples</A>        <A HREF=\"#mail send quick\">mail send quick</A>           <A HREF=\"#mail send2\">mail send2</A>\n<A HREF=\"#mail setup_aliases\">mail setup_aliases</A>        <A HREF=\"#mail share\">mail share</A>                <A HREF=\"#mail signature\">mail signature</A>\n<A HREF=\"#mail status\">mail status</A>               <A HREF=\"#mail status2\">mail status2</A>              <A HREF=\"#mail technical\">mail technical</A>\n<A HREF=\"#mail topics\">mail topics</A>               <A HREF=\"#mail tutorial\">mail tutorial</A>             <A HREF=\"#mail uall\">mail uall</A>\n<A HREF=\"#mail unmark\">mail unmark</A>               <A HREF=\"#mail unread\">mail unread</A>               <A HREF=\"#mail version\">mail version</A>\n<A HREF=\"#mail write\">mail write</A>                <A HREF=\"#mail write PLUSacc\">mail write +acc</A>           <A HREF=\"#mail write PLUSbcc\">mail write +bcc</A>\n<A HREF=\"#mail write PLUScc\">mail write +cc</A>            <A HREF=\"#mail write PLUSdel\">mail write +del</A>           <A HREF=\"#mail write PLUSedit\">mail write +edit</A>\n<A HREF=\"#mail write PLUSeditall\">mail write +editall</A>       <A HREF=\"#mail write PLUSfedit\">mail write +fedit</A>         <A HREF=\"#mail write PLUSfeditall\">mail write +feditall</A>\n<A HREF=\"#mail write PLUSforget\">mail write +forget</A>        <A HREF=\"#mail write PLUSforward\">mail write +forward</A>       <A HREF=\"#mail write PLUSinsert\">mail write +insert</A>\n<A HREF=\"#mail write PLUSjoin\">mail write +join</A>          <A HREF=\"#mail write PLUSjustify\">mail write +justify</A>       <A HREF=\"#mail write PLUSlist\">mail write +list</A>\n<A HREF=\"#mail write PLUSproof\">mail write +proof</A>         <A HREF=\"#mail write PLUSreply\">mail write +reply</A>         <A HREF=\"#mail write PLUSsend\">mail write +send</A>\n<A HREF=\"#mail write PLUSsplit\">mail write +split</A>         <A HREF=\"#mail write PLUSsubject\">mail write +subject</A>       <A HREF=\"#mail write MINUS\">mail write -</A>\n<A HREF=\"#mail write adding\">mail write adding</A>         <A HREF=\"#mail write autonotify\">mail write autonotify</A>     <A HREF=\"#mail write cmdlist\">mail write cmdlist</A>\n<A HREF=\"#mail write cmdlist2\">mail write cmdlist2</A>       <A HREF=\"#mail write examples\">mail write examples</A>       <A HREF=\"#mail write forwarding\">mail write forwarding</A>\n<A HREF=\"#mail write quicksending\">mail write quicksending</A>   <A HREF=\"#mail writing\">mail writing</A>              <A HREF=\"#mail zap\">mail zap</A>\n<A HREF=\"#mailMINUSadmin\">mail-admin</A>                <A HREF=\"#mailMINUSaliases\">mail-aliases</A>              <A HREF=\"#mailMINUSaliases2\">mail-aliases2</A>\n<A HREF=\"#mailMINUSdeleting\">mail-deleting</A>             <A HREF=\"#mailMINUSexamples\">mail-examples</A>             <A HREF=\"#mailMINUSfiltering\">mail-filtering</A>\n<A HREF=\"#mailMINUSfolders\">mail-folders</A>              <A HREF=\"#mailMINUSother\">mail-other</A>                <A HREF=\"#mailMINUSreading\">mail-reading</A>\n<A HREF=\"#mailMINUSreviewing\">mail-reviewing</A>            <A HREF=\"#mailMINUSsharing\">mail-sharing</A>              <A HREF=\"#mailMINUSwriting\">mail-writing</A>\n<A HREF=\"#mail_noparse toggle\">MAIL_NOPARSE TOGGLE</A>       <A HREF=\"#mail_stripreturn toggle\">MAIL_STRIPRETURN TOGGLE</A>   <A HREF=\"#mailfilter\">MAILFILTER</A>\n<A HREF=\"#mailquick()\">MAILQUICK()</A>               <A HREF=\"#mailvalidate toggle\">MAILVALIDATE TOGGLE</A>       <A HREF=\"#map()\">map()</A>\n<A HREF=\"#marker0\">MARKER0</A>                   <A HREF=\"#marker1\">MARKER1</A>                   <A HREF=\"#marker2\">MARKER2</A>\n<A HREF=\"#marker3\">MARKER3</A>                   <A HREF=\"#marker4\">MARKER4</A>                   <A HREF=\"#marker5\">MARKER5</A>\n<A HREF=\"#marker6\">MARKER6</A>                   <A HREF=\"#marker7\">MARKER7</A>                   <A HREF=\"#marker8\">MARKER8</A>\n<A HREF=\"#marker9\">MARKER9</A>                   <A HREF=\"#mask()\">MASK()</A>                    <A HREF=\"#match()\">MATCH()</A>\n<A HREF=\"#max()\">MAX()</A>                     <A HREF=\"#me\">ME</A>                        <A HREF=\"#member()\">member()</A>\n<A HREF=\"#merge()\">MERGE()</A>                   <A HREF=\"#mid()\">MID()</A>                     <A HREF=\"#min()\">MIN()</A>\n<A HREF=\"#miscellaneous functions\">miscellaneous functions</A>   <A HREF=\"#mix()\">MIX()</A>                     <A HREF=\"#mod()\">MOD()</A>\n<A HREF=\"#modifytime()\">MODIFYTIME()</A>              <A HREF=\"#modulo()\">MODULO()</A>                  <A HREF=\"#money\">MONEY</A>\n<A HREF=\"#money()\">MONEY()</A>                   <A HREF=\"#moneyname()\">MONEYNAME()</A>               <A HREF=\"#monitor\">MONITOR</A>\n<A HREF=\"#monitor toggle\">MONITOR TOGGLE</A>            <A HREF=\"#moon()\">MOON()</A>                    <A HREF=\"#move\">move</A>\n<A HREF=\"#move()\">MOVE()</A>                    <A HREF=\"#moving\">MOVING</A>                    <A HREF=\"#moving2\">moving2</A>\n<A HREF=\"#moving3\">moving3</A>                   <A HREF=\"#mrpage\">mrpage</A>                    <A HREF=\"#mudname()\">MUDNAME()</A>\n<A HREF=\"#mul()\">MUL()</A>                     <A HREF=\"#munge()\">MUNGE()</A>                   <A HREF=\"#munge2\">MUNGE2</A>\n<A HREF=\"#muxpage toggle\">MUXPAGE TOGGLE</A>            <A HREF=\"#mwords()\">MWORDS()</A>                  <A HREF=\"#myopic\">MYOPIC</A>\n<A HREF=\"#name()\">NAME()</A>                    <A HREF=\"#nameq()\">NAMEQ()</A>                   <A HREF=\"#nand()\">NAND()</A>\n<A HREF=\"#ncomp()\">NCOMP()</A>                   <A HREF=\"#nearby()\">NEARBY()</A>                  <A HREF=\"#neq()\">neq()</A>\n<A HREF=\"#new users\">NEW USERS</A>                 <A HREF=\"#news\">news</A>                      <A HREF=\"#news changes\">news changes</A>\n<A HREF=\"#news check\">news check</A>                <A HREF=\"#news cmdlist\">news cmdlist</A>              <A HREF=\"#news default group\">news default group</A>\n<A HREF=\"#news description\">news description</A>          <A HREF=\"#news description2\">news description2</A>         <A HREF=\"#news extend\">news extend</A>\n<A HREF=\"#news general\">news general</A>              <A HREF=\"#news groupinfo\">news groupinfo</A>            <A HREF=\"#news grouplist\">news grouplist</A>\n<A HREF=\"#news groupmem\">news groupmem</A>             <A HREF=\"#news info\">news info</A>                 <A HREF=\"#news jump\">news jump</A>\n<A HREF=\"#news login\">news login</A>                <A HREF=\"#news mailto\">news mailto</A>               <A HREF=\"#news new user\">news new user</A>\n<A HREF=\"#news old news\">news old news</A>             <A HREF=\"#news post\">news post</A>                 <A HREF=\"#news postlist\">news postlist</A>\n<A HREF=\"#news postlock\">news postlock</A>             <A HREF=\"#news read\">news read</A>                 <A HREF=\"#news readall\">news readall</A>\n<A HREF=\"#news readlock\">news readlock</A>             <A HREF=\"#news repost\">news repost</A>               <A HREF=\"#news status\">news status</A>\n<A HREF=\"#news subscribe\">news subscribe</A>            <A HREF=\"#news technical\">news technical</A>            <A HREF=\"#news unsubscribe\">news unsubscribe</A>\n<A HREF=\"#news userinfo\">news userinfo</A>             <A HREF=\"#news verbose\">news verbose</A>              <A HREF=\"#news yank\">news yank</A>\n<A HREF=\"#next()\">NEXT()</A>                    <A HREF=\"#no_ansi_ex toggle\">NO_ANSI_EX TOGGLE</A>         <A HREF=\"#no_ansi_exit toggle\">NO_ANSI_EXIT TOGGLE</A>\n<A HREF=\"#no_ansi_player toggle\">NO_ANSI_PLAYER TOGGLE</A>     <A HREF=\"#no_ansi_room toggle\">NO_ANSI_ROOM TOGGLE</A>       <A HREF=\"#no_ansi_thing toggle\">NO_ANSI_THING TOGGLE</A>\n<A HREF=\"#no_command\">NO_COMMAND</A>                <A HREF=\"#no_flash\">NO_FLASH</A>                  <A HREF=\"#no_spoof\">NO_SPOOF</A>\n<A HREF=\"#no_tel\">NO_TEL</A>                    <A HREF=\"#no_underline\">NO_UNDERLINE</A>              <A HREF=\"#no_walls\">NO_WALLS</A>\n<A HREF=\"#no_yell\">NO_YELL</A>                   <A HREF=\"#nocommand\">NOCOMMAND</A>                 <A HREF=\"#noflash\">NOFLASH</A>\n<A HREF=\"#noglobparent toggle\">NOGLOBPARENT TOGGLE</A>       <A HREF=\"#noisy\">NOISY</A>                     <A HREF=\"#nor()\">NOR()</A>\n<A HREF=\"#nospoof\">NOSPOOF</A>                   <A HREF=\"#nostr()\">NOSTR()</A>                   <A HREF=\"#not()\">NOT()</A>\n<A HREF=\"#notchr()\">NOTCHR()</A>                  <A HREF=\"#notel\">NOTEL</A>                     <A HREF=\"#notify_link toggle\">NOTIFY_LINK TOGGLE</A>\n<A HREF=\"#nounderline\">NOUNDERLINE</A>               <A HREF=\"#nowalls\">NOWALLS</A>                   <A HREF=\"#noyell\">NOYELL</A>\n<A HREF=\"#nozoneparent toggle\">NOZONEPARENT TOGGLE</A>       <A HREF=\"#npemit()\">NPEMIT()</A>                  <A HREF=\"#nsiter()\">NSITER()</A>\n<A HREF=\"#null()\">NULL()</A>                    <A HREF=\"#num()\">NUM()</A>                     <A HREF=\"#numerical conversion functions\">numerical conversion functions</A>\n<A HREF=\"#nummatch()\">NUMMATCH()</A>                <A HREF=\"#nummember()\">NUMMEMBER()</A>               <A HREF=\"#numpos()\">NUMPOS()</A>\n<A HREF=\"#numwildmatch()\">numwildmatch()</A>            <A HREF=\"#obj()\">OBJ()</A>                     <A HREF=\"#object information functions\">object information functions</A>\n<A HREF=\"#object information functions2\">object information functions2</A><A HREF=\"#object types\">OBJECT TYPES</A>              <A HREF=\"#objeval()\">OBJEVAL()</A>\n<A HREF=\"#oemit()\">OEMIT()</A>                   <A HREF=\"#ofparse()\">OFPARSE()</A>                 <A HREF=\"#ofparse2\">OFPARSE2</A>\n<A HREF=\"#opaque\">OPAQUE</A>                    <A HREF=\"#open()\">OPEN()</A>                    <A HREF=\"#or()\">OR()</A>\n<A HREF=\"#orchr()\">ORCHR()</A>                   <A HREF=\"#orflag()\">ORFLAG()</A>                  <A HREF=\"#orflags()\">ORFLAGS()</A>\n<A HREF=\"#outputprefix\">OUTPUTPREFIX</A>              <A HREF=\"#outputsuffix\">OUTPUTSUFFIX</A>              <A HREF=\"#owner()\">OWNER()</A>\n<A HREF=\"#pack()\">PACK()</A>                    <A HREF=\"#page\">page</A>                      <A HREF=\"#page2 \">page2 </A>\n<A HREF=\"#parenmatch()\">PARENMATCH()</A>              <A HREF=\"#parenstr()\">PARENSTR()</A>                <A HREF=\"#parent objects\">PARENT OBJECTS</A>\n<A HREF=\"#parent()\">PARENT()</A>                  <A HREF=\"#parent2 \">PARENT2 </A>                  <A HREF=\"#parent_ok\">PARENT_OK</A>\n<A HREF=\"#parents()\">PARENTS()</A>                 <A HREF=\"#parse()\">PARSE()</A>                   <A HREF=\"#parsestr()\">PARSESTR()</A>\n<A HREF=\"#parsestr2\">PARSESTR2</A>                 <A HREF=\"#parsestr3\">PARSESTR3</A>                 <A HREF=\"#parsestr4\">PARSESTR4</A>\n<A HREF=\"#pedit()\">PEDIT()</A>                   <A HREF=\"#pemit()\">PEMIT()</A>                   <A HREF=\"#penn_mail toggle\">PENN_MAIL TOGGLE</A>\n<A HREF=\"#pfind()\">PFIND()</A>                   <A HREF=\"#pgrep()\">PGREP()</A>                   <A HREF=\"#pi()\">PI()</A>\n<A HREF=\"#pickrand()\">pickrand()</A>                <A HREF=\"#pid()\">PID()</A>                     <A HREF=\"#pid2\">PID2</A>\n<A HREF=\"#player\">PLAYER</A>                    <A HREF=\"#player information functions\">player information functions</A><A HREF=\"#pmatch()\">PMATCH()</A>\n<A HREF=\"#port()\">PORT()</A>                    <A HREF=\"#pos()\">POS()</A>                     <A HREF=\"#pose\">pose</A>\n<A HREF=\"#poss()\">POSS()</A>                    <A HREF=\"#power()\">POWER()</A>                   <A HREF=\"#power10()\">POWER10()</A>\n<A HREF=\"#printf codelist\">PRINTF CODELIST</A>           <A HREF=\"#printf examples\">PRINTF EXAMPLES</A>           <A HREF=\"#printf examples2\">PRINTF EXAMPLES2</A>\n<A HREF=\"#printf examples3\">PRINTF EXAMPLES3</A>          <A HREF=\"#printf examples4\">PRINTF EXAMPLES4</A>          <A HREF=\"#printf examples5\">PRINTF EXAMPLES5</A>\n<A HREF=\"#printf examples6\">PRINTF EXAMPLES6</A>          <A HREF=\"#printf penn\">PRINTF PENN</A>               <A HREF=\"#printf penn2\">PRINTF PENN2</A>\n<A HREF=\"#printf syntax \">PRINTF SYNTAX </A>            <A HREF=\"#printf()\">PRINTF()</A>                  <A HREF=\"#private\">PRIVATE</A>\n<A HREF=\"#privatize()\">PRIVATIZE()</A>               <A HREF=\"#programmer()\">PROGRAMMER()</A>              <A HREF=\"#ptimefmt()\">PTIMEFMT()</A>\n<A HREF=\"#ptimefmt2\">PTIMEFMT2</A>                 <A HREF=\"#puppet\">PUPPET</A>                    <A HREF=\"#puppets\">PUPPETS</A>\n<A HREF=\"#pushregs()\">PUSHREGS()</A>                <A HREF=\"#quickreference\">QUICKREFERENCE</A>            <A HREF=\"#quiet\">QUIET</A>\n<A HREF=\"#quit \">quit </A>                     <A HREF=\"#quota alternate2\">quota alternate2</A>          <A HREF=\"#quota alternate3\">quota alternate3</A>\n<A HREF=\"#quota()\">quota()</A>                   <A HREF=\"#r()\">R()</A>                       <A HREF=\"#race()\">RACE()</A>\n<A HREF=\"#rand()\">RAND()</A>                    <A HREF=\"#randextract()\">randextract()</A>             <A HREF=\"#randmatch()\">randmatch()</A>\n<A HREF=\"#randpos()\">randpos()</A>                 <A HREF=\"#read\">read</A>                      <A HREF=\"#reality level functions\">reality level functions</A>\n<A HREF=\"#reality levels\">REALITY LEVELS</A>            <A HREF=\"#rebootsecs()\">REBOOTSECS()</A>              <A HREF=\"#reboottime()\">REBOOTTIME()</A>\n<A HREF=\"#regedit()\">REGEDIT()</A>                 <A HREF=\"#regeditall()\">REGEDITALL()</A>              <A HREF=\"#regeditalli()\">REGEDITALLI()</A>\n<A HREF=\"#regeditallilit()\">REGEDITALLILIT()</A>          <A HREF=\"#regeditalllit()\">REGEDITALLLIT()</A>           <A HREF=\"#regediti()\">REGEDITI()</A>\n<A HREF=\"#regeditilit()\">REGEDITILIT()</A>             <A HREF=\"#regeditlit()\">REGEDITLIT()</A>              <A HREF=\"#regexp classes\">REGEXP CLASSES</A>\n<A HREF=\"#regexp classes2\">REGEXP CLASSES2</A>           <A HREF=\"#regexp examples\">REGEXP EXAMPLES</A>           <A HREF=\"#regexp syntax\">REGEXP SYNTAX</A>\n<A HREF=\"#regexp syntax2\">REGEXP SYNTAX2</A>            <A HREF=\"#regexp syntax3\">REGEXP SYNTAX3</A>            <A HREF=\"#regexp syntax4\">REGEXP SYNTAX4</A>\n<A HREF=\"#regexp syntax5\">REGEXP SYNTAX5</A>            <A HREF=\"#regexp syntax6\">REGEXP SYNTAX6</A>            <A HREF=\"#regexp syntax7\">REGEXP SYNTAX7</A>\n<A HREF=\"#regexp syntax8\">REGEXP SYNTAX8</A>            <A HREF=\"#regexps\">REGEXPS</A>                   <A HREF=\"#regexps2\">REGEXPS2</A>\n<A HREF=\"#reglmatch()\">REGLMATCH()</A>               <A HREF=\"#reglmatchall()\">REGLMATCHALL()</A>            <A HREF=\"#reglmatchalli()\">REGLMATCHALLI()</A>\n<A HREF=\"#reglmatchi()\">REGLMATCHI()</A>              <A HREF=\"#regmatch()\">REGMATCH()</A>                <A HREF=\"#regmatchi()\">REGMATCHI()</A>\n<A HREF=\"#regnummatch()\">REGNUMMATCH()</A>             <A HREF=\"#regnummatchi()\">REGNUMMATCHI()</A>            <A HREF=\"#regrab()\">REGRAB()</A>\n<A HREF=\"#regraball()\">REGRABALL()</A>               <A HREF=\"#regraballi()\">REGRABALLI()</A>              <A HREF=\"#regrabi()\">REGRABI()</A>\n<A HREF=\"#regrep()\">REGREP()</A>                  <A HREF=\"#regrepi()\">REGREPI()</A>                 <A HREF=\"#regular expression functions\">regular expression functions</A>\n<A HREF=\"#relational functions\">relational functions</A>      <A HREF=\"#remainder()\">REMAINDER()</A>               <A HREF=\"#remflags()\">REMFLAGS()</A>\n<A HREF=\"#remit()\">REMIT()</A>                   <A HREF=\"#remove()\">remove()</A>                  <A HREF=\"#remtype()\">REMTYPE()</A>\n<A HREF=\"#repeat()\">REPEAT()</A>                  <A HREF=\"#replace()\">REPLACE()</A>                 <A HREF=\"#rest()\">REST()</A>\n<A HREF=\"#reswitch()\">RESWITCH()</A>                <A HREF=\"#reswitchall()\">RESWITCHALL()</A>             <A HREF=\"#reswitchalli()\">RESWITCHALLI()</A>\n<A HREF=\"#reswitchi()\">RESWITCHI()</A>               <A HREF=\"#reverse()\">REVERSE()</A>                 <A HREF=\"#revisions\">revisions</A>\n<A HREF=\"#revwords()\">REVWORDS()</A>                <A HREF=\"#right()\">RIGHT()</A>                   <A HREF=\"#rindex()\">RINDEX()</A>\n<A HREF=\"#rj()\">RJ()</A>                      <A HREF=\"#rjc()\">RJC()</A>                     <A HREF=\"#rjust()\">RJUST()</A>\n<A HREF=\"#rloc()\">RLOC()</A>                    <A HREF=\"#rnum()\">RNUM()</A>                    <A HREF=\"#robbery\">ROBBERY</A>\n<A HREF=\"#robot\">ROBOT</A>                     <A HREF=\"#roman()\">ROMAN()</A>                   <A HREF=\"#room\">ROOM</A>\n<A HREF=\"#room()\">ROOM()</A>                    <A HREF=\"#rotl()\">rotl()</A>                    <A HREF=\"#rotr()\">rotr()</A>\n<A HREF=\"#round()\">ROUND()</A>                   <A HREF=\"#royalty\">ROYALTY</A>                   <A HREF=\"#rpage\">rpage</A>\n<A HREF=\"#rset()\">RSET()</A>                    <A HREF=\"#rxlevel()\">RXLEVEL()</A>                 <A HREF=\"#s()\">S()</A>\n<A HREF=\"#safe\">SAFE</A>                      <A HREF=\"#safebuff()\">SAFEBUFF()</A>                <A HREF=\"#safelog toggle\">SAFELOG TOGGLE</A>\n<A HREF=\"#save\">save</A>                      <A HREF=\"#say\">say</A>                       <A HREF=\"#score\">score</A>\n<A HREF=\"#scramble()\">scramble()</A>                <A HREF=\"#search classes\">search classes</A>            <A HREF=\"#search()\">SEARCH()</A>\n<A HREF=\"#searchng()\">SEARCHNG()</A>                <A HREF=\"#secs()\">SECS()</A>                    <A HREF=\"#secure()\">SECURE()</A>\n<A HREF=\"#securex()\">SECUREX()</A>                 <A HREF=\"#sees()\">sees()</A>                    <A HREF=\"#semaphores\">SEMAPHORES</A>\n<A HREF=\"#semaphores2\">semaphores2</A>               <A HREF=\"#senses\">SENSES</A>                    <A HREF=\"#session\">SESSION</A>\n<A HREF=\"#set()\">SET()</A>                     <A HREF=\"#setdiff()\">SETDIFF()</A>                 <A HREF=\"#setinter()\">SETINTER()</A>\n<A HREF=\"#setq()\">SETQ()</A>                    <A HREF=\"#setq_old()\">SETQ_OLD()</A>                <A HREF=\"#setq_templates\">SETQ_TEMPLATES</A>\n<A HREF=\"#setqmatch()\">SETQMATCH()</A>               <A HREF=\"#setr()\">SETR()</A>                    <A HREF=\"#setr_old()\">SETR_OLD()</A>\n<A HREF=\"#setunion()\">SETUNION()</A>                <A HREF=\"#shift()\">SHIFT()</A>                   <A HREF=\"#shl()\">shl()</A>\n<A HREF=\"#showfailcmd\">SHOWFAILCMD</A>               <A HREF=\"#shr()\">shr()</A>                     <A HREF=\"#shuffle()\">shuffle()</A>\n<A HREF=\"#side effect functions\">side effect functions</A>     <A HREF=\"#sideeffects\">SIDEEFFECTS</A>               <A HREF=\"#sidefx\">SIDEFX</A>\n<A HREF=\"#sign()\">SIGN()</A>                    <A HREF=\"#sin()\">SIN()</A>                     <A HREF=\"#singlethreading\">SINGLETHREADING</A>\n<A HREF=\"#singletime()\">SINGLETIME()</A>              <A HREF=\"#sinh()\">SINH()</A>                    <A HREF=\"#slave\">SLAVE</A>\n<A HREF=\"#smell\">smell</A>                     <A HREF=\"#sort()\">SORT()</A>                    <A HREF=\"#sortby()\">SORTBY()</A>\n<A HREF=\"#sortlist()\">SORTLIST()</A>                <A HREF=\"#soundex()\">SOUNDEX()</A>                 <A HREF=\"#soundex2\">SOUNDEX2</A>\n<A HREF=\"#soundlike()\">SOUNDLIKE()</A>               <A HREF=\"#soundslike()\">SOUNDSLIKE()</A>              <A HREF=\"#space()\">SPACE()</A>\n<A HREF=\"#speak()\">SPEAK()</A>                   <A HREF=\"#spellnum()\">SPELLNUM()</A>                <A HREF=\"#splice()\">SPLICE()</A>\n<A HREF=\"#spoofing\">SPOOFING</A>                  <A HREF=\"#sql\">SQL</A>                       <A HREF=\"#sql()\">SQL()</A>\n<A HREF=\"#sqlescape()\">SQLESCAPE()</A>               <A HREF=\"#sqlite_query()\">SQLITE_QUERY()</A>            <A HREF=\"#sqlite_query2\">SQLITE_QUERY2</A>\n<A HREF=\"#sqloff()\">SQLOFF()</A>                  <A HREF=\"#sqlon()\">SQLON()</A>                   <A HREF=\"#sqlping()\">SQLPING()</A>\n<A HREF=\"#sqrt()\">SQRT()</A>                    <A HREF=\"#squish()\">SQUISH()</A>                  <A HREF=\"#squish()\">SQUISH()</A>\n<A HREF=\"#stack\">STACK</A>                     <A HREF=\"#startsecs()\">STARTSECS()</A>               <A HREF=\"#starttime()\">STARTTIME()</A>\n<A HREF=\"#stats()\">STATS()</A>                   <A HREF=\"#step()\">STEP()</A>                    <A HREF=\"#sticky\">STICKY</A>\n<A HREF=\"#str()\">STR()</A>                     <A HREF=\"#strallof()\">STRALLOF()</A>                <A HREF=\"#strcat()\">STRCAT()</A>\n<A HREF=\"#strdistance()\">STRDISTANCE()</A>             <A HREF=\"#streq()\">STREQ()</A>                   <A HREF=\"#streval()\">STREVAL()</A>\n<A HREF=\"#strfirstof()\">STRFIRSTOF()</A>              <A HREF=\"#strfunc()\">STRFUNC()</A>                 <A HREF=\"#string functions\">string functions</A>\n<A HREF=\"#string functions2\">string functions2</A>         <A HREF=\"#string functions3\">string functions3</A>         <A HREF=\"#strip()\">STRIP()</A>\n<A HREF=\"#stripaccents()\">STRIPACCENTS()</A>            <A HREF=\"#stripansi()\">STRIPANSI()</A>               <A HREF=\"#strlen()\">STRLEN()</A>\n<A HREF=\"#strlenraw()\">STRLENRAW()</A>               <A HREF=\"#strlenvis()\">STRLENVIS()</A>               <A HREF=\"#strmatch()\">STRMATCH()</A>\n<A HREF=\"#strmath()\">strmath()</A>                 <A HREF=\"#strtrunc()\">STRTRUNC()</A>                <A HREF=\"#sub()\">SUB()</A>\n<A HREF=\"#subj()\">SUBJ()</A>                    <A HREF=\"#subnetmatch()\">SUBNETMATCH()</A>             <A HREF=\"#substitutions\">SUBSTITUTIONS</A>\n<A HREF=\"#substitutions2\">substitutions2</A>            <A HREF=\"#success\">SUCCESS</A>                   <A HREF=\"#superMINUSroyalty\">SUPER-ROYALTY</A>\n<A HREF=\"#switch()\">SWITCH()</A>                  <A HREF=\"#switchall()\">SWITCHALL()</A>               <A HREF=\"#switches\">SWITCHES</A>\n<A HREF=\"#t()\">T()</A>                       <A HREF=\"#take\">take</A>                      <A HREF=\"#take2\">take2</A>\n<A HREF=\"#tan()\">TAN()</A>                     <A HREF=\"#tanh()\">TANH()</A>                    <A HREF=\"#taste\">taste</A>\n<A HREF=\"#tel()\">TEL()</A>                     <A HREF=\"#telok\">TELOK</A>                     <A HREF=\"#temple\">TEMPLE</A>\n<A HREF=\"#terse\">TERSE</A>                     <A HREF=\"#thing\">THING</A>                     <A HREF=\"#think\">think</A>\n<A HREF=\"#throw\">throw</A>                     <A HREF=\"#time functions\">time functions</A>            <A HREF=\"#time()\">TIME()</A>\n<A HREF=\"#timefmt advanced\">TIMEFMT ADVANCED</A>          <A HREF=\"#timefmt advanced example\">TIMEFMT ADVANCED EXAMPLE</A>  <A HREF=\"#timefmt advanced2\">TIMEFMT ADVANCED2</A>\n<A HREF=\"#timefmt codelist\">TIMEFMT CODELIST</A>          <A HREF=\"#timefmt codelist2\">TIMEFMT CODELIST2</A>         <A HREF=\"#timefmt date\">TIMEFMT DATE</A>\n<A HREF=\"#timefmt elapsed\">TIMEFMT ELAPSED</A>           <A HREF=\"#timefmt escapes\">TIMEFMT ESCAPES</A>           <A HREF=\"#timefmt examples\">TIMEFMT EXAMPLES</A>\n<A HREF=\"#timefmt syntax\">TIMEFMT SYNTAX</A>            <A HREF=\"#timefmt syntax2\">TIMEFMT SYNTAX2</A>           <A HREF=\"#timefmt time\">TIMEFMT TIME</A>\n<A HREF=\"#timefmt timezone\">TIMEFMT TIMEZONE</A>          <A HREF=\"#timefmt()\">TIMEFMT()</A>                 <A HREF=\"#timezone list\">timezone list</A>\n<A HREF=\"#timezone list10\">timezone list10</A>           <A HREF=\"#timezone list11\">timezone list11</A>           <A HREF=\"#timezone list12\">timezone list12</A>\n<A HREF=\"#timezone list2\">timezone list2</A>            <A HREF=\"#timezone list3\">timezone list3</A>            <A HREF=\"#timezone list4\">timezone list4</A>\n<A HREF=\"#timezone list5\">timezone list5</A>            <A HREF=\"#timezone list6\">timezone list6</A>            <A HREF=\"#timezone list7\">timezone list7</A>\n<A HREF=\"#timezone list8\">timezone list8</A>            <A HREF=\"#timezone list9\">timezone list9</A>            <A HREF=\"#tobin()\">TOBIN()</A>\n<A HREF=\"#todec()\">TODEC()</A>                   <A HREF=\"#toggle list\">TOGGLE LIST</A>               <A HREF=\"#toggle()\">toggle()</A>\n<A HREF=\"#toggles\">TOGGLES</A>                   <A HREF=\"#tohex()\">TOHEX()</A>                   <A HREF=\"#tooct()\">TOOCT()</A>\n<A HREF=\"#topics\">topics</A>                    <A HREF=\"#totcmds()\">TOTCMDS()</A>                 <A HREF=\"#totmatch()\">TOTMATCH()</A>\n<A HREF=\"#totmember()\">TOTMEMBER()</A>               <A HREF=\"#totpos()\">TOTPOS()</A>                  <A HREF=\"#totwildmatch()\">totwildmatch()</A>\n<A HREF=\"#touch\">touch</A>                     <A HREF=\"#tr()\">TR()</A>                      <A HREF=\"#trace\">TRACE</A>\n<A HREF=\"#trace()\">TRACE()</A>                   <A HREF=\"#trace2\">trace2</A>                    <A HREF=\"#trace_grep\">TRACE_GREP</A>\n<A HREF=\"#train\">train</A>                     <A HREF=\"#translate()\">TRANSLATE()</A>               <A HREF=\"#transparent\">TRANSPARENT</A>\n<A HREF=\"#trigonometry functions\">trigonometry functions</A>    <A HREF=\"#trim()\">TRIM()</A>                    <A HREF=\"#trunc()\">TRUNC()</A>\n<A HREF=\"#txlevel()\">TXLEVEL()</A>                 <A HREF=\"#type()\">type()</A>                    <A HREF=\"#u()\">U()</A>\n<A HREF=\"#u2()\">U2()</A>                      <A HREF=\"#u2default()\">u2default()</A>               <A HREF=\"#u2ldefault()\">u2ldefault()</A>\n<A HREF=\"#u2local()\">U2LOCAL()</A>                 <A HREF=\"#u2local2\">U2LOCAL2</A>                  <A HREF=\"#ucstr()\">UCSTR()</A>\n<A HREF=\"#udefault()\">udefault()</A>                <A HREF=\"#ueval()\">UEVAL()</A>                   <A HREF=\"#uldefault()\">uldefault()</A>\n<A HREF=\"#ulocal()\">ULOCAL()</A>                  <A HREF=\"#ulocal2\">ULOCAL2</A>                   <A HREF=\"#unesclist()\">UNESCLIST()</A>\n<A HREF=\"#unfindable\">UNFINDABLE</A>                <A HREF=\"#unpack()\">UNPACK()</A>                  <A HREF=\"#use\">use</A>\n<A HREF=\"#useful\">USEFUL</A>                    <A HREF=\"#user attributes\">USER ATTRIBUTES</A>           <A HREF=\"#userlocks\">userlocks</A>\n<A HREF=\"#v()\">V()</A>                       <A HREF=\"#vadd()\">VADD()</A>                    <A HREF=\"#valid()\">VALID()</A>\n<A HREF=\"#vanilla_errors toggle\">VANILLA_ERRORS TOGGLE</A>     <A HREF=\"#variable exits\">VARIABLE EXITS</A>            <A HREF=\"#variable toggle\">VARIABLE TOGGLE</A>\n<A HREF=\"#vatovz\">VATOVZ</A>                    <A HREF=\"#vattrcnt()\">VATTRCNT()</A>                <A HREF=\"#vcross()\">VCROSS()</A>\n<A HREF=\"#vdim()\">VDIM()</A>                    <A HREF=\"#vdot()\">VDOT()</A>                    <A HREF=\"#verbose\">VERBOSE</A>\n<A HREF=\"#verbs\">VERBS</A>                     <A HREF=\"#version\">version</A>                   <A HREF=\"#version()\">VERSION()</A>\n<A HREF=\"#visible()\">visible()</A>                 <A HREF=\"#visiblemux()\">visiblemux()</A>              <A HREF=\"#visual\">VISUAL</A>\n<A HREF=\"#vmag()\">VMAG()</A>                    <A HREF=\"#vmul()\">VMUL()</A>                    <A HREF=\"#vpage toggle\">VPAGE TOGGLE</A>\n<A HREF=\"#vsub()\">VSUB()</A>                    <A HREF=\"#vunit()\">VUNIT()</A>                   <A HREF=\"#wanderer\">wanderer</A>\n<A HREF=\"#where()\">WHERE()</A>                   <A HREF=\"#while()\">WHILE()</A>                   <A HREF=\"#while2\">WHILE2</A>\n<A HREF=\"#whisper\">whisper</A>                   <A HREF=\"#who\">who</A>                       <A HREF=\"#wielded\">wielded</A>\n<A HREF=\"#wildmatch()\">wildmatch()</A>               <A HREF=\"#wipe()\">WIPE()</A>                    <A HREF=\"#wizards\">WIZARDS</A>\n<A HREF=\"#wordpos()\">wordpos()</A>                 <A HREF=\"#words()\">WORDS()</A>                   <A HREF=\"#worn\">worn</A>\n<A HREF=\"#wrap()\">WRAP()</A>                    <A HREF=\"#wrap2\">WRAP2</A>                     <A HREF=\"#wrapcolumns()\">WRAPCOLUMNS()</A>\n<A HREF=\"#wrapcolumns2\">WRAPCOLUMNS2</A>              <A HREF=\"#wrapcolumns3\">WRAPCOLUMNS3</A>              <A HREF=\"#writable()\">WRITABLE()</A>\n<A HREF=\"#xcon()\">XCON()</A>                    <A HREF=\"#xcon2\">XCON2</A>                     <A HREF=\"#xdec()\">XDEC()</A>\n<A HREF=\"#xget()\">XGET()</A>                    <A HREF=\"#xinc()\">XINC()</A>                    <A HREF=\"#xnor()\">XNOR()</A>\n<A HREF=\"#xor()\">XOR()</A>                     <A HREF=\"#xorchr()\">XORCHR()</A>                  <A HREF=\"#xtermcolor\">XTERMCOLOR</A>\n<A HREF=\"#xtermcolor list\">XTERMCOLOR LIST</A>           <A HREF=\"#xtermcolor list2\">XTERMCOLOR LIST2</A>          <A HREF=\"#xtermcolor list3\">XTERMCOLOR LIST3</A>\n<A HREF=\"#xtermcolor list4\">XTERMCOLOR LIST4</A>          <A HREF=\"#xtermcolor syntax\">XTERMCOLOR SYNTAX</A>         <A HREF=\"#zatozz\">ZATOZZ</A>\n<A HREF=\"#zemit()\">ZEMIT()</A>                   <A HREF=\"#zfun()\">ZFUN()</A>                    <A HREF=\"#zfun2()\">ZFUN2()</A>\n<A HREF=\"#zfun2default()\">zfun2default()</A>            <A HREF=\"#zfun2ldefault()\">zfun2ldefault()</A>           <A HREF=\"#zfun2local()\">ZFUN2LOCAL()</A>\n<A HREF=\"#zfun2local2\">ZFUN2LOCAL2</A>               <A HREF=\"#zfundefault()\">zfundefault()</A>             <A HREF=\"#zfuneval()\">ZFUNEVAL()</A>\n<A HREF=\"#zfunldefault()\">zfunldefault()</A>            <A HREF=\"#zfunlocal()\">ZFUNLOCAL()</A>               <A HREF=\"#zfunlocal2\">ZFUNLOCAL2</A>\n<A HREF=\"#zone functions\">zone functions</A>            <A HREF=\"#zone_autoadd toggle\">ZONE_AUTOADD TOGGLE</A>       <A HREF=\"#zone_autoaddall toggle\">ZONE_AUTOADDALL TOGGLE</A>\n<A HREF=\"#zonecmdchk\">ZONECMDCHK</A>                <A HREF=\"#zonecontents\">ZONECONTENTS</A>              <A HREF=\"#zonemaster\">ZONEMASTER</A>\n<A HREF=\"#zoneparent \">ZONEPARENT </A>               <A HREF=\"#zones\">zones</A>                     <A HREF=\"#zones2\">zones2</A>\n<A HREF=\"#zwho()\">ZWHO()</A>                    <HR><A NAME=\"QUOTE\"><H3>&quot;</H3></A><PRE>\n  Command: &quot;&lt;message&gt;\n  Says &lt;message&gt; out loud to everyone in your current room.  Example:\n  the command '&quot;Where is the movie theater?' produces\n  '&lt;yourname&gt; says &quot;Where is the movie theater&gt;&quot;'.  Note that the closing\n  double quote is automatically added.\n  \n  See Also: page, pose, say, :, &quot;, @saystring\n  \n</PRE>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"##\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"#\"><H3>#</H3></A><PRE>\n  Command: #&lt;number&gt; &lt;command&gt;\n  Forces the object whose database number is &lt;number&gt; to perform &lt;command&gt;.\n  Example: '#1033 move north' forces object #1033 to go north (assuming that\n  you control it).  The same restrictions that apply to @force also apply to\n  this command.\n  \n  See Also: @force\n  \n</PRE>\n<A HREF=\"#QUOTE\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"##lambda\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"#lambda\"><H3>#LAMBDA</H3></A><PRE>\n  Object type: #lambda\n  \n  In any function that accepts #obj/attr pairs, you may substitute the\n  object dbref# with '#lambda'.  This basically says 'take the string after\n  as a literal and not an attribute'.\n  \n  For example:\n    &gt; @va #123=Testing\n    Set.\n    &gt; say get(#123/va)\n    You say &quot;Testing&quot;\n    &gt; say get(#lambda/va)\n    You say &quot;va&quot;\n    &gt; say u(#lambda/Testing: %%0,Boo!)\n    You say &quot;Testing: Boo!&quot;\n    \n</PRE>\n<A HREF=\"##\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#DOLARMINUScommands\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"DOLARMINUScommands\"><H3>$-commands</H3></A><PRE>\n  Please check help on 'ARBITRARY COMMANDS'.  \n  \n  However, you should be aware that RhostMUSH comes default with $commands\n  *NOT* working on players.  Talk to your local administration to see if \n  this option has been enabled or disabled.\n  \n  See Also: ARBITRARY COMMANDS\n  \n</PRE>\n<A HREF=\"##lambda\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%\"><H3>%</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#DOLARMINUScommands\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%BANG\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%BANG\"><H3>%!</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%#\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%#\"><H3>%#</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%BANG\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%%\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%%\"><H3>%%</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%#\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%PLUS\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%PLUS\"><H3>%+</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%%\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%MINUS\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%MINUS\"><H3>%-</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%PLUS\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%0\"><H3>%0</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%MINUS\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%1\"><H3>%1</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%2\"><H3>%2</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%3\"><H3>%3</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%4\"><H3>%4</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%5\"><H3>%5</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%6\"><H3>%6</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%7\"><H3>%7</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%8\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%8\"><H3>%8</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%9\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%9\"><H3>%9</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%8\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%LT\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%LT\"><H3>%&lt;</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%9\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%?\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%?\"><H3>%?</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%LT\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%@\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%@\"><H3>%@</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%?\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%_\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%_\"><H3>%_</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n  Syntax: %_&lt;label&gt;  -- enables debugging if &lt;label&gt; is in TRACE attribute.\n          %_&lt;-label&gt; -- disables debugging for &lt;label&gt;\n          %_&lt;off&gt;    -- disables all debugging\n  \n  The %_ substitution is a special substitution as it allows you to enbed\n  breakpoints into code to toggle on and off debugging on the fly dynamically.\n  This is handled by the enactors 'TRACE' attribute that houses the marker\n  that you specify for the substitutions.  The marker can be any string.\n  \n  You use - for the label to turn off debugging for that particular debug\n  marker.  For stacked debugging this will decrement the debug stack count.\n   \n  Using the &lt;label&gt; adds to the debug stack and using &lt;-label&gt; reduces one\n  from the debug stack.  This allows you to essentially nest debugging\n  breakpoints within code and only enable/disable them when you set\n  the specified label in your TRACE value.  For instance, &amp;TRACE me=123\n  \n  Note: This has absolutely no impact on the TRACE flag and uses another\n  method to keep track of how it's tracing information.  You can use\n  this in addition to the TRACE flag if you so wish.\n  \n  You may use the attribute TRACE_COLOR to set a standard color for your\n  labels.   For instance, &amp;TRACE_COLOR me=+purple.  You may specify colors\n  by label as &amp;TRACE_COLOR_&lt;label&gt; me=+orange.  Like &amp;TRACE_COLOR_123.\n  This will fall back on 'TRACE_COLOR' if the by label isn't found.\n  \n  You may specify a TRACE_GREP attibute on yourself (&amp;TRACE_GREP me=&lt;string&gt;)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.  If the TRACE_GREP attribute\n  is attribute-set REGEXP, it will take the string as a regexp match.\n   \n  Examples:\n    &gt; &amp;TRACE me=123\n    &gt; say Debugging: [add(1,1)]%_&lt;123&gt;[add(2,2)]%_&lt;-123&gt;[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -&gt; '4'\n    You say &quot;Debugging: 246&quot;\n    &gt; say Debugging: [add(1,1)]%_&lt;123&gt;[add(2,2)]%_&lt;off&gt;[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -&gt; '4'\n    You say &quot;Debugging: 246&quot;\n    &gt; &amp;TRACE_COLOR me=+orange\n    &gt; say Debugging: [add(1,1)]%_&lt;123&gt;[add(2,2)]%_&lt;off&gt;[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -&gt; '4'\n    You say &quot;Debugging: 246&quot;\n  \n  In the last exampole, the 123 inside the []'s would have been orange.\n  \n  See Also: SUBSTITUTIONS, TRACE, trace()\n  \n</PRE>\n<A HREF=\"#%@\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%a\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%a\"><H3>%a</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%_\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%b\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%b\"><H3>%b</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%a\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%c\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%c\"><H3>%c</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%b\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%d\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%d\"><H3>%d</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%c\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%f\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%f\"><H3>%f</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%d\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%i\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%i\"><H3>%i</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%f\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%k\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%k\"><H3>%k</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%i\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%l\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%l\"><H3>%l</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%k\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%m\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%m\"><H3>%m</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%l\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%n\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%n\"><H3>%n</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%m\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%o\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%o\"><H3>%o</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%n\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%p\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%p\"><H3>%p</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%o\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%q\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%q\"><H3>%q</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%p\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%r\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%r\"><H3>%r</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%q\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%s\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%s\"><H3>%s</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%r\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%t\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%t\"><H3>%t</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%s\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%v\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%v\"><H3>%v</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%t\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%w\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%w\"><H3>%w</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#%v\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#%x\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"%x\"><H3>%x</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#%w\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#AMPER\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"AMPER\"><H3>&amp;</H3></A><PRE>\n  Command: &amp;&lt;attribute&gt; &lt;object&gt;[=&lt;value&gt;]\n           &amp;`&lt;tree-attribute&gt; &lt;object&gt;[=&lt;value&gt;]\n  Synonym: @set &lt;object&gt; = &lt;attribute&gt;:[&lt;value&gt;]\n   \n  Sets the attribute named &lt;attribute&gt; on &lt;object&gt; to &lt;value&gt;.  If\n  &lt;attribute&gt; is not a predefined attribute (like ofail or va), then it is\n  created.  Attributes so created are called user-named attributes.\n  Attribute names may only contain letters, numbers, and the characters\n  &lt; -_.@#$^&amp;*~?=+| &gt;, and must start with a letter.  The names of user-named\n  attributes may not be abbreviated (an attempt to get the value of the\n  attribute will fail, and an attempt to set will create a new attribute).\n  The &amp; command may be used to set predefined attributes (in this instance,\n  '&amp;&lt;attr&gt; &lt;object&gt;=&lt;value&gt;' is equivalent to '@&lt;attr&gt; &lt;object&gt;=&lt;value&gt;').\n  \n  Attributes must start with an alpha character, or in special cases any\n  of the following characters: ~_#.+\n  \n  Starting with a '`' will tell it to use the TREE method for setting \n  attributes which will attempt to set/validate all branches to the tree\n  prior to setting it.\n  \n  Example:\n    &amp;myattr Object=This is my data on attribute 'myattr'\n    Set.\n   \n  See Also: @set, @cluster set, VATOVZ, ZATOZZ, &gt;, ATTRIBUTE TREES\n  \n</PRE>\n<A HREF=\"#%x\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#PLUSchannel\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"PLUSchannel\"><H3>+channel</H3></A><PRE>\n  Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The built in channel system that RhostMUSH has is a simple design\n  based off standard MUSE com systems.  The format for each is\n  as follows:\n  \n       +chan[nel] +channel-name  (add yourself to a channel)\n       +chan[nel] -channel-name  (remove yourself from a channel)\n       +chan[nel]                (display all your channels)\n       +com channel=who          (see who is on a given channel)\n       +com channel=message      ('talk' on a given channel)\n  \n  (help channel2 to continue)\n\n</PRE>\n<A HREF=\"#AMPER\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#PLUSchannel2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"PLUSchannel2\"><H3>+channel2</H3></A><PRE>\n  Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The channel system is case sensitive and does recognize various\n  formatting by the following special cases.\n  \n       :     this poses a message on the channel.\n       ;     this possessive poses on the channel.\n       &quot;     this speaks on the channel.\n  \n          Syntax:  +com channel=[format]message\n          Example: +com channel=:message (poses on the channel)\n  \n  All channels cost money (currently 5 gold a pop) except for\n  'sting' (a flame-type channel for insults) and 'public' for\n  general discussions.  Please note that any insults slung on\n  sting REMAIN on sting.  This will be enforced. \n  \n</PRE>\n<A HREF=\"#PLUSchannel\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#PLUShelp\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"PLUShelp\"><H3>+help</H3></A><PRE>\n  If enabled (please check @list options), this will work just like normal\n  'help' does, but for +help.  This is intended for TINY/MUX compatibility\n  and is disabled by default.\n  \n  The /search switch works for +help as well.\n  \n</PRE>\n<A HREF=\"#PLUSchannel2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#PLUSuptime\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"PLUSuptime\"><H3>+uptime</H3></A><PRE>\n  Command: +uptime\n  \n  This command shows how long the mush has been up and the time since \n  the last reboot.\n  \n  See Also: version\n  \n</PRE>\n<A HREF=\"#PLUShelp\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#1.0.0p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"1.0.0p0\"><H3>1.0.0p0</H3></A><PRE>\n  Release Date: Aug 1 1989\n  Status: Experimental\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * COUNCILOR flag for lower bitlevel inheritance [NYS]\n  * ARCHITECT flag for lower bitlevel inheritance [NYS]\n  * GUILDMASTER flag for lower bitlevel inheritance [NYS]\n  * @trigger and new functionality importing [NYS]\n  * MUSE compatible comsystem [NYS]\n  * @race/@guild fields [NYS]\n  * RWHO multi-mud connector [NYS]\n    \n  Changes\n  -------\n  * Permission system revamped for more than just wizard [NYS]\n  * DARK granted more power to hide [NYS]\n    \n  Bug Fixes\n  ---------\n  * Memory leak in db engine [NYS]\n  \n</PRE>\n<A HREF=\"#PLUSuptime\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#1.5.0p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"1.5.0p0\"><H3>1.5.0p0</H3></A><PRE>\n  Release Date: Mar 1 1990\n  Status: Experimental\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Convert game engine for MUSE compatibility [NYS]\n  * Enable multi-tier power system [NYS]\n  \n  Changes\n  -------\n  * System code handles bitlevel inheritance [NYS]\n  \n  Bug Fixes\n  ---------\n  * Infinite loop in @dolist [NYS]\n\n</PRE>\n<A HREF=\"#1.0.0p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#2.0.0p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"2.0.0p0\"><H3>2.0.0p0</H3></A><PRE>\n  Release Date: Sep 1 1990\n  Status: Pre-Release\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Convert game engine for MUSH compatibility [SEA]\n  * Hardcoded Mail System [SEA]\n  * Better ComSystem Support [ASH]\n  * Hardcoded BBS System [THO]\n  * @power/@depower system to mimic MUSE inheritance [SEA]\n  * @toggle system for bitwise flags [THO]\n  \n  Changes\n  -------\n  * Multi-tier subsystem incorporating MUSE engine [SEA]\n  * Multi-bit system with full tier inheritance [ASH]\n  * Permission system rewritten to make more sense [THO]\n  \n  Bug Fixes\n  ---------\n  * Tons of compatibility issues [THO/SEA/ASH]\n\n</PRE>\n<A HREF=\"#1.5.0p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.0.0p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.0.0p0\"><H3>3.0.0p0</H3></A><PRE>\n  Release Date: Mar 1 1991\n  Status: Pre-Alpha\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Mail system modularized to be ported to other systems [SEA]\n  * Zone system - multi-tier [THO]\n  * Experimental byte-compiled language (NaILS) [THO]\n  \n  Changes\n  -------\n  * GDBM limitations to avoid hard DB corruption [SEA]\n  \n  Bug Fixes\n  ---------\n  * Permission system was totally borked [SEA]\n\n</PRE>\n<A HREF=\"#2.0.0p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.0p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.0p0\"><H3>3.2.0p0</H3></A><PRE>\n  Release Date: Nov 1 1991\n  Status: Experimental\n  \n  New Features\n  ------------\n  * Rewrite of parser to be more sane [SEA]\n  * Socket protection against DoS/DDoS [THO]\n  * Built-in IDENT address lookups [THO]\n  * Built-in DNS address lookups [THO]\n  \n  Changes\n  -------\n  * Byte-compiler removed -- Too many bugs [THO]\n  \n  Bug Fixes\n  ---------\n  * Tons of memory leaks fixed in functions [SEA/THO/ASH]\n\n</PRE>\n<A HREF=\"#3.0.0p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p0\"><H3>3.2.4p0</H3></A><PRE>\n  Release Date: 1 Jan 1992\n  Status: Beta\n  \n  New Features\n  ------------\n  * PID values to processes [SEA]\n  * hardcoded mail system (Version 2) [SEA]\n  \n  Changes\n  -------\n  \n  Bug Fixes\n  ---------\n\n</PRE>\n<A HREF=\"#3.2.0p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p1\"><H3>3.2.4p1</H3></A><PRE>\n  Release Date: 1 Jul 1992\n  Status: Beta\n  \n  New Features\n  ------------\n  * hardcoded BBS system (Version 2) [THO]\n  \n  Changes\n  -------\n  \n  Bug Fixes\n  ---------\n  * @hook/igswitch wouldn't work with multiple switches [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p10\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p10\"><H3>3.2.4p10</H3></A><PRE>\n  Release Date: 1 Jan 1997\n  Status: Beta\n  \n  New Features\n  ------------\n  * strfunc() for passing lists to any function [ASH]\n  * max_cpu_cycles admin param (default 3) for cpu alarms [ASH]\n  * cpu_secure_lvl admin param (default 0) for cpu alarms [ASH]\n  \n  Changes\n  -------\n  * lattr() optionally shows locks [ASH]\n  \n  Bug Fixes\n  ---------\n  * you could still get into a garbage object [ASH]\n  * forwardlists were not cleared on @wipe [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p11\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p11\"><H3>3.2.4p11</H3></A><PRE>\n  Release Date: 1 Jul 1997\n  Status: Beta\n  \n  New Features\n  ------------\n  * @icmd has new switches to handle location/zone overriding:\n    /droom, /iroom, /croom, /lroom, /lallroom [ASH]\n  * foreach() added for compatibility [ASH]\n  * ilev() Returns nest level of an iter() [ASH]\n  * @limit [/vmod /dmod /list /reset] limits @destroy/vattr [ASH]\n  * IGNOREZONE toggle enables zone/location command disable/ignore [ASH]\n  * VPAGE toggles aliases to show/not show in pages you receive [ASH]\n  * PAGELOCK toggles pages to normal when wizard lock overriding [KRK]\n  * MAIL_NOPARSE toggle to switch %r's and %t's in mail viewing [ASH]\n  * ignore_zone globally specify zone ignoring for a command [ASH]\n  * disable_zone globally specify zone disabling for a command [ASH]\n  * global_ansimask globally define what ansi codes to allow/deny [ASH]\n  * expand_goto force exit movement to use a 'goto' [ASH]\n  * max_dest_limit specify maximum @destroys allowed per player [ASH]\n  * max_vattr_limit specify maximum _NEW_ vattrs allowed per player [ASH]\n  * hide_nospoof if '1' you have to control target to see NOSPOOF flag [KRK]\n  \n  Changes\n  -------\n  * lattr() optionally handles attribute locks [ASH]\n  * examine/parent shows dbref#'s of parent objects [ASH]\n  * elist() has 5th argument for penn compatibility [ASH]\n  * /until switch to @wait for exact time [ASH]\n  * strmath() has new args for better flexability [ASH]\n  * mail uses ~ to evaluate attributes on player targets [ASH]\n  * better context for mail autoregistration [ASH]\n  * wizards now override page locks [ASH]\n  * +list to mail improved for output [ASH]\n  * @pemit has /silent switch for penn compat [ASH]\n  \n  Bug Fixes\n  ---------\n  * DoS protection lacking for attribute sets [ASH]\n  * buffer issue with @decompile [ASH]\n  * mail showed cloaked wizzes being connected [ASH]\n  * moon() didn't handle full moons properly [KRK]\n  * isdbref() thought '#' was a valid dbref [ASH]\n  * Attribute setting issue introduced with P11 [KRK]\n  * Logging options were a bit skewered with on/off settings [ASH]\n  * Attempted to free mbufs in @disable login area twice [ASH]\n  * Parenting fix with possible recursion [ASH]\n  * @lock/chown required on CHOWN_OK object.  Shouldn't be [ASH]\n  * @icmd for players broke with room/location addition [KRK]\n  * Cloaked items didn't trigger @startup [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p10\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p12\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p12\"><H3>3.2.4p12</H3></A><PRE>\n  Release Date: 1 Jan 1998\n  Status: Beta\n  \n  New Features\n  ------------\n  * REALITY LEVELS [ASH]\n  * +proof for mail proofing [ASH]\n  * lastip now handles lastip of the person logging in [KRK]\n  * rxlevel()/txlevel() - return RX/TX reality level [ASH]\n  * listrlevels() list all levels [ASH]\n  * hasrxlevel()/ hastxlevel() check target RX/TX levels [ASH]\n  * cansee() check if target can see source (reality level based only) [ASH]\n  * @rxlevel - set/remove reality level source check [ASH]\n  * @txlevel - set/remove reality level target check [ASH]\n  * mrpage (mrp) respond to the player list that you received in a page [ASH]\n  * NONAME if set on a target, the name is not displayed [ASH]\n  * reality_level define new reality level(s).  32 max [ASH]\n  * wiz_always_real a wizard is always seeing everything as 'real' [ASH]\n  * def_exit_rx, def_exit_tx, def_room_rx, def_room_tx, def_player_rx,\n    def_player_tx, def_thing_rx, def_thing_tx for default realities [ASH]\n  * validate_host Specify invalid site-masks for autoregistration emails [ASH]\n  * log_command_list Specify commands to individually log [ASH]\n  * partial_conn, partial_deconn @aconnect/@adisconnects on partial [ASH]\n  * secure_functions  Enable/disable security on listed functions [ASH]\n  * max_logins_allowed (mudstate) absolute ceiling of connections allowed [ASH]\n  * penn_switches switch() and switchall() will accept &lt; and &gt; [ASH]\n   \n  Changes\n  -------\n  * double eval removed to mimic penn functionality [ASH]\n  * randextract() handles 5th arg for output [ASH]\n  * @conncheck shows total commands [ASH]\n  * @aconnect/adisconnect handle various options now [ASH]\n  * @list has several new options for listing/displaying [ASH]\n  * puppet output is now highlighted [ASH]\n  \n  Bug Fixes\n  ---------\n  * autoreg validation and cleanup [ASH]\n  * filter() would accept '1&lt;blah&gt;' as well as '1' [ASH]\n  * possible pointer-misalignment with internal messaging with MONITOR [ASH]\n  * Rare occurance of getting inside a garbage object (non-crash-bug) [ASH]\n  * @mvattr had small bug with copying over itself &amp; keeping copy [ASH]\n  * Semaphores didn't do wait time correctly [ASH]\n  * Time/Create stamps visible by anyone [ASH]\n  * LBUF not freed in mail/quota [ASH]\n  * @dynhelp not able to parse subdirectories (using a '^') [ASH]\n  * @icmd not inherited in all instances [ASH]\n  * Some side effects had wrong security/permission checks [ASH]\n  * Side effects did not check inheritance for permission [ASH]\n  * Iter()/list() and suite did not handle ansi properly [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p11\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p13\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p13\"><H3>3.2.4p13</H3></A><PRE>\n  Release Date: 1 Jul 1998\n  Status: Beta\n  \n  New Features\n  ------------\n  * isint() for MUX/Penn compatibility [ASH] \n  * FLAGDEF attrib flag for logging (added to @flagdef) [ASH]\n  * safebuff() cuts buffer off before LBUF is reached [ASH]\n  * floordiv() return the 'floor' (rounded down) of result of division [ASH]\n  * last() return last word specified by delimiter [ASH]\n  * singletime() return time rounded to lowest element (s, m, h, d, etc) [ASH]\n  * parenmatch() ansifies bracket/paren/brace matches &amp; RED's mismatch [ASH]\n  * lrand() returns random numbers between two points [ASH]\n  * keeptype() does reverse of remtype() [ASH]\n  * lcmds() List all commands '$' or listens '^' on object [ASH]\n  * pack() convert a number to base 2-64 [ASH]\n  * unpack() convert a pack()'d number back to base 10 [ASH]\n  * crc32() return a crc32 code for the specified string [ASH]\n  * toggle() works like the @toggle command.  Follows SIDEFX restrictions [ASH]\n  * moneyname() returns the singular/plural name based on argument [ASH]\n  * config() if no argument, displays all params otherwise value of param [ASH]\n  * @eval force evaluation of functionality [ASH]\n  * mortal_examine if set, target always examines like a mortal [ASH]\n  * mail_lockdown @toggle target is restricted in mail 'monitoring' [ASH]\n  * muxpage @toggle allows 'p &lt;blah&gt;' to work like in MUX/TM3/PENN [ASH]\n  * heavy_cpu_max param  ceilings heavilly used cpu-intensive functions [ASH]\n  * lastsite_paranoia param enable auto-reg/auto-forbid of spamming site [ASH]\n  * max_lastsite_cnt param specify # of connects in period of time [ASH]\n  * min_con_attempt specify the wait between 'first' connect and subquent [ASH]\n  * lattr_default_oldstyle (default 0) snuffs the '#-1 NO MATCH' [ASH]\n  * formats_are_local localize @nameformat, @conformat, @exitformat [ASH]\n  * mail_def_object default object for global aliases [ASH]\n  * wizard_queue_limit distinguish between wizard and mortals for queues [ASH]\n  * max_pcreate_time time range allowed before max_pcreates reached [ASH]\n  * max_pcreate_lim number of pcreates allowed in given timeframe [ASH]\n  * pcreate_paranoia level of action to take against infidels (0-2) [ASH]\n  * global_parent_obj global parent that attributes are inherited off of [ASH]\n  \n  Changes\n  -------\n  * log god @admin param log all activity of #1\n  * /quiet to @notify and @drain [ASH]\n  * @cpattr assumes enactor if no source given [ASH]\n  * lattr() has 3rd arg for listen/command matches [ASH]\n  * /clear to @toggle to clear toggles [ASH]\n  * if more than 20 zones on a target, switch to dbref# listing [ASH]\n  * @admin and @site handle /## CIDR notation [ASH]\n  * @edit highlights changes now [ASH]\n  * remtype(), keeptype() handles multiple types [ASH]\n  * internal buffering issues now lists line number and file [ASH]\n  * @list options does sub-options now [ASH]\n  * @name field changed from 16 to 22 characters [ASH]\n  * /instant switch added for compatibility [ASH]\n  * mail/recall enhancements for immortals/#1 [ASH]\n  * lrooms() has a third argument to show level [ASH]\n  * @dump/flat allows optional filename [ASH]\n  * enhanced options to mail reading [ASH]\n  * ports added to lwho(), idle(), conn(), cmds() [ASH]\n  * lattr() handles optional target player [ASH]\n  \n  Bug Fixes\n  ---------\n  * conversion script for TM3 broke in some conditions [ASH]\n  * @lock/getfrom didn't check enactors location [ASH]\n  * convtime() used daylight savings now no longer uses [ASH]\n  * IDESC wouldn't work with Reality Levels [ASH]\n  * Bad memory could corrupt command parsing with sockets [ASH}\n  * @list alloc would scroll values negative [ASH]\n  * @teleport and movement could 'hide' from wizards in inventories [ASH]\n  * home, if @icmd'd, wouldn't allow the command to be overridden [ASH]\n  * The CLOAK flag would give 'has left' messages [ASH]\n  * The lookup_player() code now handles '*' as well as not [ASH]\n  * If recycling was not enabled, you could still @destroy [ASH]\n  * Trace output was broke with how it displayed enactor/target [ASH]\n  * NOSTOP flag on objects in the master room could cause infinite loop [ASH]\n  * QueueMax attribute would not work unless owned by the target [ASH]\n  * DNS/AUTH lookups could have unforseen behavior on non-printable chars [ASH]\n  * setqmatch() does not work like the help dictated it should [ASH]\n  * hastoggle() was wizard-only for no reason  [ASH]\n  * atof() could have buffer issues if string greater than 100 characters [ASH]\n  * Counts for input, output, and lost fields were not accurate [ASH]\n  * @conncheck could have unpredicatable results with name of the door [ASH]\n  * MONITOR information had some uninitialized values that could crash [ASH]\n  * DARK flags with wizards so it won't show wiz as being connected [ASH]\n  * mid() didn't work like it did in MUX2/PENN.  It's now an alias [ASH]\n  * type() could bypass cloaked targets [ASH]\n  * quick_wild() could cause some SIGSEGV's if not accurately verified [ASH]\n  * inventory doesn't handle Reality Levles corrected [ASH]\n  * lcon(), next(), con(), lexits(), lcon(), xcon(), and sees() with\n  reguards to handling Reality Levles were broke [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p12\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p14\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p14\"><H3>3.2.4p14</H3></A><PRE>\n  Release Date: 1 Jan 1999\n  Status: Beta\n  \n  New Features\n  ------------\n  * optional restrictions on people who CPU slam your mush [ASH]\n  * Attributes can start with ~ [ASH]\n  * A-Z are now available for setq registers [ASH]\n  * Penn compatible SHS encryption [LNS]\n  * txlevel()/rxlevel() for set/display realities [ASH]\n  * rset() sideeffect for set() that sets attribute and returns value [ASH]\n  * pedit() to mimic Penn's edit() functionality [ASH]\n  * ptimefmt() to mimic Penn/Mux's timefmt() functionality [ASH]\n  * textfile() works like dynhelp() but pushes onto buffer [ASH]\n  * lattrp() lattr() for parent checks [ASH]\n  * ctu() function that does deg/rad/grad conversion [ASH]\n  * visiblemux() for mux's visible() compatibility [ASH]\n  * @hook to show/display/change individual hooks.  \n    Switches are: /permit, /ignore, /before, /after, /igswitch [ASH]\n  * uselock attrib flag checks matching ~&lt;attribute&gt; for uselock [ASH]\n  * SPAMMONITOR flag check target for spam (60 cmds/sec) [ASH]\n  * ZONEINHERIT allows zonemasters to have attribs inherited to children [ASH]\n  * muddb_name admin param for db names to seperate from 'mud_name' [ASH]\n  * global_error_obj evaluate the VA attribute on the object for huh? [ASH]\n  * mail_autodeltime specifies when mail is globally purged (def 21 days) [ASH]\n  * global_parent_room globally inherit attribs to room w/o @parent [ASH]\n  * global_parent_thing globally inherit attribs to thing w/o @parent [ASH]\n  * global_parent_player globally inherit attribs to player w/o @parent [ASH]\n  * global_parent_exit globally inherit attribs to exit w/o @parent [ASH]\n  * hook_obj globally define the 'hook' object [ASH]\n  * hook_cmd process 'hooks' on specified commands [ASH]\n  * look_moreflags will show global flags on things with examine [ASH]\n  * stack_limit nest check for 'stack' to throttle back a given amount [ASH]\n  \n  Changes\n  -------\n  * round() handles negative arguments [ASH]\n  * the SPOOF flag is inheritable [ASH]\n  * /nosub switch to @pemit to leave ## and #@ un-evaled [ASH]\n  * /preserve to @wipe and wipe() to reverse effect [ASH]\n  * all @o* messages no longer display on null [ASH]\n  * set(), setr(), setq(), and r() handle ansi [ASH]\n  * if owner is FLOATING they won't receive float messages [ASH]\n  * /basic switch to @lock for Penn compatibility [ASH]\n  * @list user_attributes handle wildcard matching [ASH]\n  * @list alloc shows better buffer stats [ASH]\n  * better replace_token call for all ##/#@ subs [ASH]\n  * citer() has optional seperator [ASH]\n  * lwho() has argument to list just ports [ASH]\n  * modified MONITOR site monitoring to show remote port [ASH]\n  * sin(), tan(), etc modified for MUX compatibility [ASH]\n  \n  Bug Fixes\n  ---------\n  * double free in elist() [ASH]\n  * EXTANSI could bleed [ASH]\n  * Helpfile errors fixed [ASH]\n  * SESSION didn't cut the name off at 16 chars (formatting issue) [ASH]\n  * mailquick()'s arg didn't totally mirror MUX's mail() [ASH]\n  * if who_unfindable disabled, player_dark disabled, and allow_whodark enabled\n    you'd never get the connect flag of a wizard. [ASH]\n  * Linux and other weird unix systems tended to hang on AUTH lookups [THO]\n  * v() wouldn't handle special chars as first char if enabled ATTR_HACK [ASH]\n  * parent() when used to set a new parent did not return the dbref# [ASH]\n  * Fixed legacy bug in QUEUE which effected a-z setq() regs [ASH]\n  * 'home' check was broke if set disabled and ignore at the same time [ASH]\n  * @thaw didn't handle semaphores properly [ASH]\n  * Zone-ignores didn't work for QUIT, LOGOUT, and it's ilk [ASH]\n  * Debug Monitor stack had a conditional off-by-one state on @reboots [AMB]\n  * @extansi was broke when ZENTY_ANSI not defined [AMB]/[LNS]\n  * wildcard matching could become problematic and loop endlessly [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p13\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p15\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p15\"><H3>3.2.4p15</H3></A><PRE>\n  Release Date: 1 Jul 1999\n  Status: Beta\n  \n  New Features\n  ------------\n  * local.c plugin support [LNS]\n  * BANG support (!, !!, etc) [KRK]\n  * +bcc for blind carbon copies for mail [ASH]\n  * mailstatus() function to mimic mail/status [ASH]\n  * elementsmux() for MUX elements() compatibility [ASH]\n  * parsestr() for help with speech formatting [ASH]\n  * chomp() strip returns before, after, or both sides of string [ASH]\n  * escapex() like escape() but choose what chars to _not_ escape [ASH]\n  * securex() like escapex() but for secure()'s counterpart [ASH]\n  * BLIND flag to make target arrival/leaving 'snuffed' [ASH]\n  * DEFAULT attribute flag for handling default global attrib [ASH]\n  * SINGLETHREAD attribute flag to handle single-threading $commands [ASH]\n  * ATRLOCK attribute flag to handle global attribute locking [ASH]\n  * MUXPAGE toggle to allow mux-like paging for compatibility [ASH]\n  * NOGLOBPARENT toggle to disable inheritance of global inheret parents [ASH]\n  * NODEFAULT toggle to disable global default handling [ASH]\n  * mail_verbosity will add Subj: to sent mail [ASH]\n  * mail_anonymous set name for anonymous mail (Default: *Anonymous*) [ASH]\n  * sidefx_maxcalls (1000 default) for max sideffects allowed/command [ASH]\n  * oattr_enable_altname enable/disable alt name in odrop/ofail/osucc [ASH]\n  * oattr_uses_altname for alt names sent to odrop/ofail/osucc [ASH]\n  * empower_fulltel - Offer two methods for FULLTEL [ASH]\n  * spam_msg message sent to spammers [AMB]\n  * spam_objmsg message sent to spammers of objects [AMB]\n  * room_aconnect aconnects on individual rooms work (cloak checked) [LNS]\n  * room_adisconnect adisconnects on individual rooms (cloak checked) [LNS]\n  * player_attr_default default @&lt;attrib&gt; handler for did_it() attribs [ASH]\n  * thing_attr_default default @&lt;attrib&gt; handler for did_it() attribs [ASH]\n  * exit_attr_default default @&lt;attrib&gt; handler for did_it() attribs [ASH]\n  * room_attr_default default @&lt;attrib&gt; handler for did_it() attribs [ASH]\n  * global_clone_obj default dbref# for cloning attributes [ASH]\n  * global_clone_player default debref# for cloning attributes [ASH]\n  * global_clone_thing default debref# for cloning attributes [ASH]\n  * global_clone_room default debref# for cloning attributes [ASH]\n  * global_clone_exit default debref# for cloning attributes [ASH]\n  * global_attrdefault global locker for attribute sets/clears [ASH]\n  * nobroadcast_host defines what sites will be 'snuffed' from MONITOR [ASH]\n  \n  Changes\n  -------\n  * Total rewrite of all hash tables for dynamic loading [LNS]\n  * alias system overhaul for better feature set [LNS]\n  * /anon switch to mail systems [ASH]\n  * timestamps added for forward/replied mail [ASH]\n  * lit() accepts commas as part of its input string [ASH]\n  * hastype() follows type() for permissions [ASH]\n  * config(sideeffects_txt) return the string of sideeffects enabled [LNS]\n  * /preserve to @chown and @chownall to preserve flags [LNS]\n  * @list stack shows filenames properly now [LNS]\n  * PID processing added to @notify, @wait for pid handling [ASH]\n  * @function/delete for deleting @functions [ASH]\n  * lzone() offers optional paging [ASH]\n  * @doors are no longer preserved through reboots [LNS]\n  * columns() optionally (13th arg) handles filler on short args [ASH]\n  * inc()/dec() now take strings as a '0' value like normal [ASH]\n  * @pcreate/reg for emailing register email based on @areg [ASH]\n  * @pemit handles reality_levels with all arguments [ASH]\n  * @admin can be used to delete aliases as well as add [LNS]\n  \n  Bug Fixes\n  ---------\n  * permission with NO_EXAMINE and attribute fetches [ASH]\n  * array out of bounds with BACKSTAGE flag [ASH]\n  * wildmatch() broke on some matches [ASH]\n  * Bug with @mvattr and QUIET flag [ASH]\n  * Objects could use the brandy toggle to send mail [ASH]\n  * Security issue with autoregistration [ASH]\n  * goto didn't have hooks before/after right [ASH]\n  * SIGSEGV on autozone add if player didn't belong to zone [ASH]\n  * Bug with teleporting and permissions [ASH]\n  * NASTY bug that could corrupt registries with @freeze/@thaw/@wait [ASH]\n  * Fix help entry with @convert/@quota cross-matching [ASH]\n  * Fix alloc corruption with 'page' from liberal nulls [ASH]\n  * Fix issue in @program string sent to global_error_obj incorrect [ASH]\n  * Fix for orflags()/andflags() with flag rewrite [ASH]\n  * Fix for @uptime to show time up longer than a year [ASH]\n  * Fix for legacy bug in @list functions for blowing a buffer [ASH]\n  * Fix for ZENTY_ANSI compiletime with a possible buffer overrun [ASH]\n  * Fix for two rhosts running same debugmon debug_id [ASH]\n  * Fix for mis-matched DPUSH/RETURN for DPOP in door.c [ASH]\n  * Fix for pemit()/npemit() with argument evaluation [ASH]\n  * Fix for legacy bug with vattr initialization [ASH]\n  * Fix for library overflow issues regarding system call on ptimefmt() [ASH]\n  * Fix for default() and edefault() for invalid dbref# [ASH]\n  * lock(), rxlevel(), txlevel(), and parent() sidefx counter count issue [ASH]\n  * Possible overrun on the stack with iter() during certain config opts [ASH]\n\n\n</PRE>\n<A HREF=\"#3.2.4p14\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p16\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p16\"><H3>3.2.4p16</H3></A><PRE>\n  Release Date: 1 Jan 2000\n  Status: Beta\n  \n  New Features\n  ------------\n  * ZoneWizLock gives full wiz-like permissions of your zone [ASH]\n  * aiindex() - works like iindex() except will append to a null list [ASH]\n  * sortby() - Added for MUX2 compatibility [ASH]\n  * wizmax_vattr_limit for wizard attrib @limits [ASH]\n  * wizmax_dest_limit for wizard @destroy @limits [ASH]\n  * vattr_limit_checkwiz to enable/disable @limits for wizards [ASH]\n  * guild_attrname to change the Guild field in WHO/DOING [ASH]\n  * exits_connect_rooms to disable floating for any linking exit [ASH] \n  * switch_substitutions allows #$ substitutions in switches  [ASH]\n  * examine_restrictive [1-5 (0 disables)] to restrict examine on 'level' [ASH]\n     \n  Changes\n  -------\n  * wrap() has 7th argument for left justification [ASH]\n  * +proof for mail enhanced for characters used [ASH]\n  * @cpattr, @mvattr, and @edit now follows attribute content locking [ASH]\n  * /noisy for @set does 'loud' setting like PennMUSH [ASH]\n  * @dynhelp/dynhelp()/textfile() does partial matching [ASH]\n  * @decompile has /all(default) /flags and /attribs switches [ASH]\n  * - mail writing allows '=' without escaping now [ASH]\n  * wizards optionally checked for @limits if configured [ASH]\n  * funceval added to @list [ASH]\n  * @doing, @doing/header and @poll given larger strings [ASH]\n  * switch(), switchall(), and @switch now optionally take #$ [ASH]\n  * lattr() takes page values [ASH]\n  * room checks hardened against corrupted db's [ASH]\n  \n  Bug Fixes\n  ---------\n  * wrap() had optional run-off and didn't cut properly [ASH]\n  * @door didn't handle mangled ports right [ASH]\n  * caseall() double free [ASH]\n  * crashbug with broadcast_host [ASH]\n  * +proof for mail could cause a crash [ASH]\n  * strmath() broke on ammount argument [ASH]\n  * BOUNCE was not cleared on RECOVER objects [ASH]\n  * debug stack (trace) had a memory leak [ASH]\n  * wizard objects not inherit incorrectly triggered @limit [ASH]\n  * passing only one argument to @admin params could cause a crash [AMB]\n  * BLIND broke on some situations [ASH]\n  * the internal hash tables had an off-by-one bug [ASH]\n  * @flag/remove didn't return an error if it failed [ASH]\n\n\n</PRE>\n<A HREF=\"#3.2.4p15\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p17\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p17\"><H3>3.2.4p17</H3></A><PRE>\n  Release Date: 1 Jul 2000\n  Status: Beta\n  \n  New Features\n  ------------\n  * fmod() for Penn compatibility [ASH]\n  * seperate .conf file for most commonly used params [AMB]\n  * @admin roomlog_path to specify different path for LOGROOM [ASH]\n  * new minimal_db imported [ASH]\n  \n  Changes\n  -------\n  * LOGROOM @toggle logs to roomlogs directory [ASH]\n  * attrcnt() can repair objects [ASH]\n  * @aflags gives detailed information on attributes [ASH]\n  * @admin garbage_chunk, precmd_obj wasn't used [AMB]\n  * @attribute/delete now does sanity checking [ASH]\n  \n  Bug Fixes\n  ---------\n  * moon() had a huge margin of error on waxing/waning [KRK]\n  * asksource.sh fix for (l)oad issue [ASH]\n  * news/verbose broke functionality [AMB]\n  * bunch of help file fixes [AMB]\n  * ZENTY_ANSI broke if TINY_SUB enabled [ASH]\n  * function aliases could override hardcode [ASH]\n  * @pcreate/reg crashed in rare circumstances [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p16\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p18\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p18\"><H3>3.2.4p18</H3></A><PRE>\n  Release Date: 1 Jan 2001\n  Status: Beta\n  \n  New Features\n  ------------\n  * %@ support for compatibility with other codebases. [ASH]\n  * queue_compatible to allow negative semaphores [ASH]\n  * Allowed large WHO listing for compatibility [ASH]\n  * OLD_SETQ config parameter for pre-TM2 compatibility [ASH]\n  * percent subsitution ceiling per command [ASH]\n  * lcon_checks_dark for dark lock checking enforcement [ASH]\n  * mail/anon and 'both' options added to mail [ASH]\n  * KEEPALIVE @toggle for network keepalives [ASH]\n  * CHKREALITY @toggle/chkreality() for reality comparison matches [ASH]\n  * reality_locks @admin param for global lock checking [ASH]\n  * reality_locktype for reality lock typemethods [ASH]\n  * LOGGED attribute flag to log all changes to attribute [ASH]\n  * NOISY @toggle to mimic 'noisy' sets ala PennMUSH [ASH]\n  \n  Changes\n  -------\n  * @aflags/full to count atttributes in use with that name [ASH]\n  * mail/recall shows more statistics [ASH]\n  * FUBAR flag stops functions from executing [ASH]\n  * @hook/fail for fail checks [AMB]\n  * backup_flat.sh recognizes -s for single-runs for crontabs [ASH]\n  * CPU protection improved, especially with TRACE output [ASH]\n  \n  Bug Fixes\n  ---------\n  * soundex buffering issue gave garbled output [KRK]\n  * sideeffects could double evaluate [AMB]\n  * WHO/DOING with dark broke [AMB]\n  * help files broke with escapes with zenty ansi [ASH]\n  * mail/recall didn't display multiple messages properly [ASH]\n  * crash bug with mail dynamic $-aliases [ASH]\n  * @dynhelp/parse broke parsing ansi properly [ASH]\n  * mail/recall had off-by-one in month display [ASH]\n  * logf() conflicted with newer compilers [ASH]\n  * @hook/igswitch didn't evaluate properly [ASH]\n  * tons of Solaris/SunOS compatibility [ASH]\n  * player cache and reality levels could clobber match-state data [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p17\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p2\"><H3>3.2.4p2</H3></A><PRE>\n  Release Date: 1 Jan 1993\n  Status: Beta\n  \n  New Features\n  ------------\n  * several mail enhancements for auto repair [SEA]\n  * mail folders [SEA]\n  * various mail config parameters for stability/config [SEA]\n  * VLIMIT to control max attributes\n  \n  Changes\n  -------\n  * massive mail malloc for fast delivery [SEA]\n  \n  Bug Fixes\n  ---------\n  * unfindable didn't work right with loc() and others [ASH]\n  * GDBM/NDBM fix for corruption with vlimit fix [SEA]\n\n</PRE>\n<A HREF=\"#3.2.4p18\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p3\"><H3>3.2.4p3</H3></A><PRE>\n  Release Date: 1 Jul 1993\n  Status: Beta\n  \n  New Features\n  ------------\n  * remtype() to remove a list based on type [ASH]\n  * mailquick() for quick mail review [SEA]\n  * eval() for string/attribute evaluation [ASH]\n  * translate() for deparsing strings [SEA]\n  * valid() to validate types [ASH]\n  * entrances() to return entrances to target [SEA]\n  * graball() like grab() but grabs all [SEA]\n  * remit() to remite to a room [ASH]\n  * rnum() to parse rooms [SEA]\n  * wipe() for wiping [ASH]\n  * destroy() for destroying [ASH]\n  * step() to step parse based on stepping [ASH]\n  * localize() to localize registers from eval [ASH]\n  * null() to snuff output of string [SEA]\n  * ladd(), lsub(), lmul(), ldiv(), land(), lavg(), lmax(),\n  lmin(), lor(), lxor(), lnor(), lxnor(), ncomp(), streq(),\n  xcon(), inzone(), zemit(), zwho(), zfun(), zfun2(),\n  zfunlocal(), zfun2local(), zfundefault(), zfun2default(),\n  zfuneval(), zfunldefault(), zfunl2default() [SEA]\n  * lastcreate(), while(), modifystamp(), createdstamp() [ASH]\n  * @hide[/on/off] - For PENN compatibility [ASH]\n  * @saystring define what is substituted instead of 'says' [ASH]\n  * NOWHO (internal) - mark who is @hidden [ASH]\n  * LOGIN bypass @disable logins [SEA]\n  * ZONECONTENTS makes zonemaster behave like master room [THO]\n  * BACKSTAGE check to see if auto-inherited to ownership [SEA]\n  * NOBACKSTAGE marker for backstage checks [SEA]\n  * ANONYMOUS return 'Someone' when cloaked when talk/say [SEA]\n  * NOWHO specify who can @hide [SEA]\n  * EXAMINE_FULL examine anything but #1, cloaked, and noex [SEA]\n  * FULLTEL teleport anywhere but #1 and cloaked locations [SEA]\n  * BRANDY_MAIL send mail with 'mail user-list=3Dsubject' methodology [ASH]\n  * FORCEHALTED force someone who is halted [ASH]\n  * mail_tolist enable/disable To: &lt;players&gt; in mail automatically [ASH]\n  * mail_default change 'mail' from mail/quick to mail/status [ASH]\n  \n  Changes\n  -------\n  * name() optionally handles setting via sideeffect [ASH]\n  * examine/quick aliased to /brief [ASH]\n  * examine/brief modified output to mimic other codebases [ASH]\n  * @function/list for penn compatibility [ASH]\n  * /zone to @pemit for pemit to zones [THO]\n  * @dolist/notify to trigger semaphores [SEA]\n  * mail/next and mail/zap modifications [SEA]\n  \n  Bug Fixes\n  ---------\n  * %l and loc() didn't work right in trace output [ASH]\n  * depower tel_anywhere didn't work [SEA]\n  * look could see cloaked things if given long-finger ability [SEA]\n  * recover objects could be examined to find names of them and owner [ASH]\n  * grab() crashed server if given only one argument [SEA]\n  * go couldn't use 'go' through parent exits before [SEA]\n  * ueval() fixed missing LBUF free [ASH]\n  * mail/write +list gave erraneous results [SEA]\n  * lexits() won't show exits set PRIVATE at the 'home' of those exits [SEA]\n  * min() value shoved a double in an int [ASH]\n  * max() value shoved a double in an int [ASH]\n  * wmail/size tried to free null pointer [SEA]\n  * host sites over 50 characters would not null terminate [SEA]\n  * @open could clobber the return exit from how tprintf() buffers [SEA]\n  * andflags() and orflags() didn't escape out '2' or '1' right [SEA]\n\n</PRE>\n<A HREF=\"#3.2.4p2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p4\"><H3>3.2.4p4</H3></A><PRE>\n  Release Date: 1 Jan 1994\n  Status: Beta\n  \n  New Features\n  ------------\n  * localized formatting allowed with &amp;format&lt;blah&gt; [ASH]\n  * listmatch() for matching wildcard values [SEA]\n  * setqmatch() for matching wildcard and storing in setq [SEA]\n  * listnewsgroups() to list newsgroups [THO]\n  * inprogram() to show if in program [ASH]\n  * PROG to specify if target can issue @program [ASH]\n  * NOSHPROG to specify if you can shell out of a program [ASH]\n  * IMMPROG to enforce staying in a @program until completion [ASH]\n  * @program to put someone into an interactive program [ASH]\n  * @quitprogram to abort the program [ASH]\n  * @progprompt to specify the prompt to program [ASH]\n  * @extansi to specify a multi-ansified name on a target [ASH]\n  * train to 'teach' someone what you type [ASH]\n  * +help (hardcode) to call plushelp.txt/.indx [ASH]\n  * login_to_prog to enable logging into a running @program [ASH]\n  * noshell_prog to disable shelling out of a @program [ASH]\n  * sidefx_returnval for sideeffects to return dbref#'s (like set) [ASH]\n  * nospam_connect to snuff bot spammage on connects [ASH]\n  * noregist_onwho to disable 'R' on WHO/DOING when register sites [ASH]\n  * lnum_compat to enable lnum compatibility mode [ASH]\n  * mailinclude_file to specify the text file included in registering [ASH]\n  * must_unlquota requires unlocking quota to modify quota [SEA]\n  \n  Changes\n  -------\n  * @prog aliased to @program [ASH]\n  * filter() now supports an output seperator [ASH]\n  * lnum() and lnum2() optionally return NULL if given a '0' [ASH]\n  * mask() now takes '~' for adding 1's comp, '1' for 1's and '2' for 2's [ASH]\n  * mailquick() takes 3rd argument for MUX mail() compatibility [ASH]\n  * news/articlelife takes 'forever' as a valid argument [THO]\n  * mail/status takes /subject, (U)nread, (N)ew, (B)oth new/unread, (S)aved,\n   (M)arked, and (O)ld mail as optional search params [ASH]\n  * mail/number takes same new args as mail/status [ASH]\n  * news/read now marks messages as 'read' [ASH]\n  * @ansiname now allows raw ansi [ASH]\n  * dig(), create(), open(), clone() all optionally return dbref#'s [ASH]\n  * @list options now shows more (and valuable) information [ASH]\n  * @function/list now shows flags for privalaged/preserved functions [ASH]\n  * mail/status and mail/read now show connected players [ASH]\n  * mail/write and - now show how many characters you have written [ASH]\n  * mail/forward and mail/reply now recognize the BRANDY_MAIL @toggle [ASH]\n  * @function/preserve to preserve registers from being modified [ASH]\n  \n  Bug Fixes\n  ---------\n  * attribute formatting broke for what/owhat [ASH]\n  * filter() did not correctly parse arguments in some instances [ASH]\n  * @set thing/attr=_thing/attr would on rare occurances not work [ASH]\n  * lock() would not parse the second argument in some occurances [ASH]\n  * mail/reply didn't function right when BRANDY_MAIL toggled [ASH]\n  * setunion() would not parse 3rd/4th args correctly on rare occurances [ASH]\n  * news/articlelife wouldn't reset articlelife with '-1' [THO]\n\n\n</PRE>\n<A HREF=\"#3.2.4p3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p5\"><H3>3.2.4p5</H3></A><PRE>\n  Release Date: 1 Jul 1994\n  Status: Beta\n  \n  New Features\n  ------------\n  * noauth_site specifies site and mask that AUTH lookups are skipped [ASH]\n  * nodns_site specifies site and mask that DNS lookups are skipped [ASH]\n\n  \n  Changes\n  -------\n  * all help entries allow /search content searching [ASH]\n  * /noauth and /nodns switches for @site [THO]\n  * better timeout conditions for site lookups [THO]\n  * @list site_information now shows additional information [ASH]\n  \n  Bug Fixes\n  ---------\n  * AUTH hung if remote server was configured wrong. Rewrote [THO]\n  * Command substitution (%c/%x) could cause a SIGSEGV at random times [ASH]\n\n\n</PRE>\n<A HREF=\"#3.2.4p4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p6\"><H3>3.2.4p6</H3></A><PRE>\n  Release Date: 1 Jan 1995\n  Status: Beta\n  \n  New Features\n  ------------\n  * forbid_host, register_host, autoreg_host, noguest_host, suspect_host site\n  restrictions for DNS host matches [ASH]\n\n  \n  Changes\n  -------\n  * @break accepts optional arguments [ASH]\n  * @list site_information now shows DNS blocking [ASH]\n\n  \n  Bug Fixes\n  ---------\n  * mail didn't mark folders properly for deletion [ASH]\n  * ansi() didn't recognize 'u' for underline [ASH]\n  * @program had small issue with prompt storage [ASH]\n  * autoreg file inclusion didn't count total lines right [ASH]\n  * hastoggles(), haspowers(), and hasdepowers() didn't work [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p7\"><H3>3.2.4p7</H3></A><PRE>\n  Release Date: 1 Jul 1995\n  Status: Beta\n  \n  New Features\n  ------------\n  * ZENTY-ANSI ANSI markup handler (Thanks Zenty)\n  \n  Changes\n  -------\n  * @set handles attrib flags: GOD, IMMORTAL, WIZARD/ROYALTY, COUNCILOR, \n    ARCHITECT, GUILDMASTER, HIDDEN, DARK [ASH]\n\n  \n  Bug Fixes\n  ---------\n  * reality locks didn't evaluate properly [ASH]\n  * @list options did not show RESTRICT_HOME config setting\n\n</PRE>\n<A HREF=\"#3.2.4p6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p8\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p8\"><H3>3.2.4p8</H3></A><PRE>\n  Release Date: 1 Jan 1996\n  Status: Beta\n  \n  New Features\n  ------------\n  * Attributes starting with _ allowed and wiz only [ASH]\n  * mail recognizes +editall, +feditall, +fedit, +cc, and +bcc args [ASH]\n  * mailalias() returns the dbref# list of players global mail alias [ASH]\n  * programmer() returns the dbref# of thing that put target in @program [ASH]\n  * vcross() for MUX2 compatibility [ASH]\n  * switchall() like switch() but matches all [ASH]\n  * brackets() return bracket matches [ASH]\n  * @@() works like null() but does not evaluate [ASH]\n  * @flagdef define flag permission levels (/set, /unset, /see) [ASH]\n  * @dynhelp dynamically read a specified &lt;file&gt;.txt/.indx file [ASH]\n  * COMMANDS optional flag to define what uses commands [ASH]\n  * NO_CLONE attribute flag to stop attributes from copying when @cloned [ASH]\n  * MARKER0 through MARKER9 marker flags [ASH]\n  * BOUNCE allows players to pass what they hear to their contents [ASH]\n  * MONITOR_BAD monitor failed connects/creations to non-existant players [ASH]\n  * PROG_ON_CONNECT reverses the current logic of program and connecting [ASH]\n  * imm_nomod specifies only immortal can set/unset the NOMODIFY flag [ASH]\n  * paranoid_exit_linking when enabled, you MUST control exit to link [ASH]\n  * notonerr_return when DISABLED not() returns a '0' for returning #-1 [ASH]\n  * safer_passwords passwords require 5+ chars, one upper, lower, special [ASH]\n  * max_sitecons specifies the maximum # of port connections [ASH]\n  \n  Changes\n  -------\n  * lnum()/lnum2() handles negative numbers [ASH]\n  * NOMODIFY optionally set to immortal only [ASH]\n  * all vector functions recognize output seperator [ASH]\n  * mail +justify, +insert, +edit, +editall handles line numbers [ASH]\n  * dice has more arguments for offset values [ASH]\n  * modified/created is examinable now [ASH]\n  \n  Bug Fixes\n  ---------\n  * internal vprintf allocation memory leak [ASH]\n  * NOMODIFY wasn't strict enough [ASH]\n  * BACKSTAGE/NOBACKSTAGE didn't handle @zones [ASH]\n  * create() didn't check permissions for @dig, @open, and @pcreate [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.2.4p9\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.2.4p9\"><H3>3.2.4p9</H3></A><PRE>\n  Release Date: 1 Jul 1996\n  Status: Beta\n  \n  New Features\n  ------------\n  * @assert for Penn compatibility [ASH]\n  * @toggle ZONECMDCHECK for zones to execute commands [ASH]\n  * +acc added to append the cc to mail [ASH]\n  * @flagdef for flag definition [ASH]\n  * caseall() works like switchall() but for case [ASH]\n  * cand() works like and() but stops processing on first 'FALSE' [ASH]\n  * cor() works like or() but stops processing on first 'TRUE' [ASH]\n  * moon() based on the POM code from berkley [ASH]\n  * isword() returns 'TRUE' if entire string is all alpha/hyphon [ASH]\n  * itext() returns nth arg (text '##') of an iter() [ASH]\n  * inum() returns nth arg (num '#@') of an iter() [ASH]\n  * modulo() returns the modulus of the numbers [ASH]\n  * NO_PARSE attribute flag that stops /evaluation of %0-%9 in $commands [ASH]\n  * SAFE attribute flag that stops modification of attribute [ASH]\n  * SHOWFAILCMD show any matching failed $cmd uses the @ufail suite [ASH]\n  * MAIL_STRIPRETURN when combining lines uses spaces not carrage returns [ASH]\n  * PENN_MAIL when sending mail, use PENN like style [ASH]\n  * guest_namelist specifies a dynamic namelist for guests [ASH]\n  * hackattr_nowiz defines if '_attr' is wiz only or follows normal rules [ASH]\n  * hackattr_see defines if '_attr' is viewable by wizard only [ASH]\n  * penn_playercmds $commands on player work only for that player/inv [ASH]\n  \n  Changes\n  -------\n  * @break is now PennMUSH compatible [ASH]\n  * player argument to mail/recall for by-player recalling [ASH]\n  * valid() has more cases [ASH]\n  * columns() has filler argument [ASH]\n  \n  Bug Fixes\n  ---------\n  * CONNECT flag didn't show in some situations [ASH]\n  * Bug with dynhelp().  Player (3rd arg) never resolved correctly [ASH]\n  * Possible (and very rare) overflow with certain wiz commands [ASH]\n  * SIGSEGV bug with recursive @functions [ASH]\n  * When @toggled MONITOR_BAD, MONITOR_FAIL doubled up failed connections [ASH]\n  * Malaligned pointer in command.c.  Non-crash issue  [ASH]\n  * setq() registers wern't cleared for extreamly fast command input [ASH]\n  * ex thing/*sta* returns 'no attribs found' if tstamps enabled [ASH]\n  * enhanced security for .txt file reading/verification (possible DoS) [ASH]\n  * attrib flag DARK couldn't be unset by non-#1.  Only #1 can set it now [ASH]\n  * encrypt/decrypt really mangled with how it passed key [ASH]\n\n</PRE>\n<A HREF=\"#3.2.4p8\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.0p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.0p0\"><H3>3.9.0p0</H3></A><PRE>\n  Release Date: 1 Jan 2002\n  Status: Experimental to Alpha\n  \n  New Features\n  ------------\n  * log_maximum for maximum calls of logtofile() per command [ASH]\n  * power_objects if toggled on allows objects to have direct @powers [ASH]\n  * rooms_can_open allows rooms to open exits inside themselves [ASH]\n  * sub_override/sub_include for %-sub customization [AMB]\n  * signal_object for signaling objects [ODN]\n  * break_compatibility to allow double eval for compatibility [ASH]\n  * signal_object_type to handle function or command execution [ASH]\n  * log_network_errors enables/disables network error logging [ASH]\n  * SIGNAL handling is now recognized [ASH]\n  * SIGUSR1 optionally handles object evaluation [ASH]\n  * ZONE_LIKE_PARENTS for @parent like handling for @zones [ASH]\n  * ZONECMDCHECK @toggle for zone parent checks [ASH]\n  * Added %+, and %? for compatibility [ASH]\n  * Added NO_CODE flag for code restriction [AMB]\n  * Added Penn's regexp package: regmatch(), regmatchi(), regedit(), \n    regediti(), regeditall(), regeditalli(), reswitch(), reswitchi(), \n    reswitchall(), reswitchalli(), regrab(), regrabi(), regraball(), \n    regraballi(), regrep(), regrepi()  [ASH]\n  * bypass() for function overloading [ASH]\n  * logtofile() for logging [ASH]\n  * searchng() for search with nogarbage [ASH]\n  * keepflags()/remflags() for flag filtering [ASH]\n  * foldercurrent()/folderlist() for mail folder manipulation [ASH]\n  * Added default options for MUX/Penn/TM3 buildouts [LNS]\n  * Total rewrite of tprintf() buffering [LNS]\n  * ] for pre-processing commands (Penn compat) [ASH]\n  * Rewrite of permission handler for second word of permissions [ASH]\n  * round_kludge @admin param for 'cleaner' rounding [KRK]\n  * idle for non-idle time issued commands [ASH]\n  * HIDEIDLE @toggle to appear idle when you're not [ASH]\n  * MORTALREALITY @toggle for wizzes to handle realities like a mortal [ASH]\n  * MAILVALIDATE to validate mail before sending (with brandy mailer) [ASH]\n  * (d)elete option in asksource.sh [ASH]\n    \n  Changes\n  -------\n  * Makefile addition to optionally ignore signals [ASH]\n  * Makefile uses date -r [ASH]\n  * version() optionally handles an argument for compile date [ASH]\n  * Improved bounds checking in various functions for security [ASH]\n  * tel() now recognizes the QUIET switch [ASH]\n  * Laxed useable characters for attributes [ASH]\n  * added stepping argument to lnum()/lnum2() [ASH]\n  * Relaxed permissions of reality locktype 2 &amp; 3 [ASH]\n  * Added locktype 4 &amp; 5 for reverse of 2 &amp; 3 [ASH]\n  * @log can now write to subdirectories up to 5 deep [ASH]\n  * @edit has /check for checking output w/o editing (Penn compat) [ASH]\n  * @search has /nogarbage switch for ignoring going/recover [ASH]\n  * moon() takes optional argument for moon phase percentage [ASH]\n  * @grep takes /regexp option for regular expression matching [ASH]\n  * /single switch to @edit for limiting editing to one arg [ASH]\n  * edit() has 4th argument to specify single edit only [ASH]\n  * WANDERER and GUEST check owner as well as target [ASH]\n  * Good_chk() internal macro to handle better good object detection [ASH]\n  * added eval/noval permissions for commands/functions [ASH]\n  * list() given 4th argument for header [ASH]\n  * Added /toreality to @pemit for reality pemitting [ASH]\n  * TM3 Conversion capabilities vastly increased [ASH]\n  * @hook now shows sub-overrides and sub-includes [ASH]\n  * User-defined %-subs can be passed arguments [ASH]\n    \n  Bug Fixes\n  ---------\n  * sortby() mangling enactor [ASH]\n  * signals were not handled properly and could cause a shutdown [ASH]\n  * @idesc, @rsrvdesc2, home had issues with reality levels [ASH]\n  * double-free in globals fixed [ASH]\n  * asksource.sh fix for option 9 &amp; 15 [ODN]\n  * bug in mail when mail index is maxed won't send mail [ASH]\n  * crash bug in @dbck [ASH]\n  * read_remote_name didn't function properly [AMB]\n  * /fail switch broke in @hook [ASH]\n  * mail/news issue when nuking players [ASH]\n  * @quota bug where buffer freed before display [AMB]\n  * MUXPAGE @toggle issue with /port switch [LNS]\n  * Bunch of missing help file entries fixed [AMB]\n  * BSD compiling mail/cque warnings and issues [ODN]\n  * examine with lock display errors in certain conditions [ASH]\n  * ] was stripping {} when it shouldn't [AMB]/[ODN]\n  \n</PRE>\n<A HREF=\"#3.2.4p9\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.0p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.0p1\"><H3>3.9.0p1</H3></A><PRE>\n  Release Date: 1 Jan 2003\n  Status: Experimental to Alpha\n    \n  New Features\n  ------------\n  * labels for setq/setr/r [ASH]\n  * SETQ_TEMPLATES for objects [ASH]\n    \n  Changes\n  -------\n  * extra protection to garble() [ASH] \n  * center() allows multi-character filler [ASH] \n  * lexit()/lcon() take optional output arguments [AMB] \n  * added /notify to @switch [ASH] \n  * Improved dice() with multiple arguments [ASH] \n  * v() handles arguments above 9 [ASH] \n  * strfunc() is bypass() aware [ASH]\n  * mail shows 'm' for messages marked for auto-delete [ASH] \n  * map() takes arguments now [ASH] \n  * chomp() handles %r much cleaner [ASH]\n    \n  Bug Fixes\n  ---------\n  * idle timeout could be off on lagging servers (servers under load) [ASH]\n  * @kick could crash the game [ASH] \n  * lloc() could crash the game [ASH]\n  * command pathing with GOTO broke with ignore [ASH] \n  * 'N' command (]) showed up as 'N' and not ']' [ASH]\n  * wrapcolumns() could crash [ASH] \n  * flag_name had possible issues with duplicated entries [ASH]\n  * sub_include had uninitialized arguments [KRK]\n  * lcon()/lexits() had a crash bug [ASH]\n  * random times output was snuffed based on CPU alerm issues [ASH]\n  * setq/setr didn't evaluate first argument [ASH]\n  * internal tprintf off-by-one bug [ASH]\n  * crash bug in ATRLOCK [ASH]\n  * bug in clock skew protection for AMD processors [ASH]\n    \n</PRE>\n<A HREF=\"#3.9.0p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.0p2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.0p2\"><H3>3.9.0p2</H3></A><PRE>\n  Release Date: 1 Jan 2004\n  Status: Experimental to Alpha\n    \n  New Features\n  ------------\n  * time skew protection for drifting time [ASH] \n  * network flood protection [ASH] \n  * MUX2 password compatibility added to Rhost [ASH] \n  * 64 char attribs, optional Mysql, and Doors added to compiletime [ASH]\n  * 64 bit platforms are now auto-detected [ASH]\n  * MAILFILTER attribute for mail to auto-sort incoming mail [ASH]\n  * QDBM support now available [AMB]\n  * nameq() to rename registers [ASH] \n  * spellnum() for Penn compatibility [ASH]\n  * ibreak() for breaking out of iter() [ASH]\n  * shift() to shift up/down %0-%9 parsing [ASH]\n  * fbetween()/fbound() for floating points [ASH]\n  * accents are now available via markup language (%f) [ASH]\n  * printf() for line processing [ASH] \n  * STOP and CONT switches to @halt for queue processing [ASH]\n  * %q&lt;label&gt; for TM3/Penn compatibility [ASH]\n  * netrhost.pid now holds the process id of the running mush [ASH]\n  * Action lists added to @cluster sets [ASH]\n  * BOUNCEFORWARD for BOUNCE flag [ASH]\n  * strdistance() for Levenshtein distance of strings [ASH]\n  * tr() for find/replace for Penn compatibility [ASH]\n  * digest() SSL algos [ASH]\n  * roman() roman number converter [ASH]\n    \n  Changes\n  -------\n  * open() and dig() take optional argument for destionation [ASH]\n  * asksource.sh improved with new args [ASH]\n  * case() and caseall() support $# like switch() [KRK]\n  * error() handles optional target argument [ASH]\n  * %-subs take character limiter [ASH]\n  * Minimal_db removed until updated [KRK]\n  * timefmt(), convsecs(), convtime() and moon() now handle 64 bit time [ASH]\n  * list() handles optional target player [ASH]\n  * garble() optionally handles char count instead of string [ASH]\n  * remit() optionally handles to-reality like @pemit [ASH]\n  * /display to @function to handle function displaying [ASH]\n  * /LIST to @function handles wildcarding [ASH]\n  * Output to @list buffers cleaned up [ASH]\n  * Allow keyword negation to @admin [LNS]\n    \n  Bug Fixes\n  ---------\n  * fixed @door code to be useable [ASH] \n  * Unitialized variables in view_attr (internal) [KRK] \n  * Mail wouldn't compile under AIX [ASH] \n  * @assert not behaving like @break [KRK]\n  * sha1 compiling issues with  new compiler [ASH] \n  * null commands deidled player when it shouldn't [ASH]\n  * 64 bit compiling issues on new compilers [ASH] \n  * signal handling could break alarm triggering [ASH]\n  * spellnum() had an issue with 10's argument [ASH]\n  * randmatch() had a crash bug [ASH]\n  * caseall() had a missing LBUF [ASH]\n  * QDBM corrupted the mail db in some instances [ASH]\n  * default*() functions always evaluated second arg [ASH]\n  * ptimefmt() had a missing structure argument [ASH]\n  * hardcoded news system had a missing free [ASH]\n    \n</PRE>\n<A HREF=\"#3.9.0p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.1p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.1p0\"><H3>3.9.1p0</H3></A><PRE>\n  Release Date: 1 Jan 2006\n  Status: Alpha\n    \n  New Features\n  ------------\n  * accent()/stripaccents() for accent characters [ASH]\n  * pid() for process ID returns [ASH]\n  * pgrep() for parent grepping [ASH]\n  * @clusters have been added.  Available switches are:\n    /new, /add, /del, /clear, /list, /threshold, /action, /edit, /set, /repair,\n    /grep, /reaction, /cut, /trigger [ASH] \n  * cluster_u(), cluster_u2(), cluster_ulocal(), cluster_u2local(), \n    cluster_uldefault(), cluster_u2ldefault(), cluster_udefault(),\n    cluster_u2default(), cluster_grep(), cluster_regrep(), cluster_regrepi()\n    cluster_hasattr(), cluster_lattr(), cluster_attrcnt(), cluster_vattrcnt()\n    cluster_get(), cluster_xget(), cluster_set(), cluster_default(),\n    cluster_edefault(), cluster_stats(), cluster_get_eval(), \n    cluster_ueval() [ASH]\n    \n  Changes\n  -------\n  * strip() takes optional 3rd arg for allowing chars and not denying [ASH]\n  * filter() can now take multiple arguments [ASH] \n  * @wait/pid recoded to be nicer on the queue [ASH]\n  * chr() allows handling markups [ASH]\n  * LOGROOM toggle uses LOGNAME on the room as an override [ASH]\n  * setr()/setq() handle ! and + argument for next available reg [ASH] \n  * SIG USR1/USR2 has better handling [ASH] \n  * /oneeval switch to @pemit to enforce single evaluation [ASH] \n  * lexits() allows page listing [ASH] \n  * @function/display shows flags now [ASH] \n  * all *lattr*() functions reworked to fall under a single evaluater [ASH] \n  * all *u*() functions reworked to fall under a single evaluater [ASH] \n  * lock() with optional 3rd argument to set/clear attribute locks [ASH]\n  * @wait handles +/- values for Penn compatibility [ASH]\n  * vattrcnt() has a method to fix broken attribute counts [ASH] \n  * pgrep() has option for outputting matches [ASH] \n  * @mvattr/@cpattr with cleaner display of attributes [ASH] \n  * OUTPUTPREFIX/OUTPUTSUFFIX are now stored through reboots [ASH] \n    \n  Bug Fixes\n  ---------\n  * lrooms() had a bug with proper room listing [ASH]\n  * creplace() didn't evaluate second argument right [ASH] \n  * fixed up internal buffering for better allocation [ASH]\n  * mail/reply didn't work with players with spaces [ASH] \n  * translate() didn't handle %0-%9 properly [ASH]\n  * citer() had a double buffer allocation [ASH] \n  * @whereis/@whereall didn't hide dark players [ASH]\n  * %q&lt;label&gt; broke TRACE [ASH]\n  * BANG support didn't work on overloaded functions [ASH]\n  * possible crash bug in signal and command processing [ASH] \n  * map()/filter() didn't parse arguments properly [ASH] \n  * connecting didn't honor @hide/dark/cloak properly [ASH]\n  \n  \n</PRE>\n<A HREF=\"#3.9.0p2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.1p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.1p1\"><H3>3.9.1p1</H3></A><PRE>\n  Release Date: 20 Jun 2008\n  Status: Alpha\n  \n  New Features\n  ------------\n  * Added optional &lt;type&gt; argument to vattrcnt, pgrep, and cluster_grep. [ASH]\n  * Added a &lt;delim&gt; to pgrep. [ASH]\n  * Added rotational logs and supported features [ASH]\n  * Added caplist() [KRK]\n  * Added listdiff(), listunion(), listinter() [ASH]\n  * Added iscluster() [ASH]\n    \n  Changes\n  -------\n  * Cleanup for cluster documentation [KRK]\n  * Updated help for printf() [ASH]\n  * Updated switch recognization for commands to be user friendly [ASH]\n  * Center no longer has an 80 character limitation [ASH]\n  * all *lattr() funcs take type &gt; and &lt; to show largest/smallest attrib [ASH]\n    \n  Bug Fixes\n  ---------\n  * Fixed a missing declaration for clusters. [KRK]\n  * Fix for OSX 10.5.2 with 'broken' header includes. [ASH]\n  * Ansi bleed on some conditions of wrap(). [ASH]\n  * Fixed wrap() 'justification' issue if string less than wrap length [ASH]\n  \n</PRE>\n<A HREF=\"#3.9.1p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.1p2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.1p2\"><H3>3.9.1p2</H3></A><PRE>\n  Release Date: 12/01/10\n  Status: Alpha\n  \n  New Features\n  ------------\n  * Added cluster_hasflag() [ASH]\n  * Added cluster_flags() [ASH]\n  * Added @snapshot [ASH]\n  * Added writable() for set permission checks for attributes [ASH]\n  * Admin param old_elist to toggle double eval for elist [ASH]\n  * SAFELOG toggle for use with modifying say behavior [ASH]\n  * @cluster/action/func for functionary triggers [ASH]\n  * Added config param mux_child_compat for children() compatibility [ASH]\n  * added signal_cron param for reading in a file at signal [ASH]\n  * @protect for reserving player names [ASH]\n  * @protect has switches /alias and /unalias for tagging names as active [ASH]\n  * listprotect() to list a player's protected names [ASH]\n  * @blacklist for adding blacklisted specific IP addresses (like TOR) [ASH]\n  * cluster_wipe() added to mimic @cluster/wipe [ASH]\n  * chktrace() to check what stage of tracing the parser is at [ASH]\n  * privatize() for making local functions (ulocal/localize/etc) null [ASH]\n    \n  Changes\n  -------\n  * sees() has optional third argument to handle exits [ASH]\n  * Improve buffering for @list permissions [ASH]\n  * pid() handles target of process id (PID) [ASH]\n  * wrap() takes 'i'gnore case for non-padding wrapped values [ASH]\n  * 'f' option to escapex() handles omitting first escape [ASH]\n  * mkindx now handles topic aliasing by stacking &amp; topics [ASH]\n  * elist() by default no longer double-evaluates [ASH]\n  * lattr(), lattrp(), cluster_lattr(), lzone(), children() handle ~#1-#2 [ASH]\n  * @list user_attrib handles AND flag and OR flag matches [ASH]\n  * GUEST passwords can be 'guest' with safer_passwords enabled [ASH]\n  * @idle takes %0 as argument of string you were paged with [ASH]\n  * cluster functionary actions take precedence over command actions [ASH]\n  * setting/clearing attributes notify you now if it's been done before [ASH]\n  * Delay in cluster action/function action is now mudconf based [ASH]\n  * Page now alerts you of players that you are cloaked from [ASH]\n  * children() optionally behaves like mux's children() with empty returns [ASH]\n  * SIGUSR1 optionally reads a file now with a kill -USR1 [ASH]\n  * modified depreciated bcopy() in attribute handler to memcpy [ASH]\n  * connect display in mail honors dark/unfindable/@hide [ASH]\n  * Help entry for TRANSPARENT shows flag as 'T' instead of 't' [ASH]\n  * Added /command switch to @trigger\n  * Error entries (in error.txt) starting with '!' are evaluated [ASH]\n  * map() handles multicharacter output delimiter [ASH]\n  * switch_search admin param to switch search and searchng [ASH]\n    \n  Bug Fixes\n  ---------\n  * cluster_lattr() returned #-1 instead of 0 for unrecognized attribs [ASH]\n  * @search/nogarbage didn't recognize the switch properly [ASH]\n  * Compile issue on old compilers parsing the C99 standard of log.c [ASH]\n  * #lambda inherited from parent where it shouldn't have [ASH]\n  * compile warning on variable declaration in log.c [ASH]\n  * writable() didn't correctly recognize non-existing attribs [ASH]\n  * double entry for &gt; cleaned up in hash table [ASH]\n  * double-eval on delextract() fixed [ASH]\n  * parenthesis parsing was broken in advanced regexp on $commands [ASH]\n  * double-eval on interpreter for commands specified in @break/assert [ASH]\n  * unitialized variables related to @open/@dig on new databases fixed [ASH]\n  * cluster_set() didn't parse the second argument properly [ASH]\n  * cluster_grep[i]() didn't check the target cluster object properly [ASH]\n  * elist() didn't evaluate first argument properly [ASH]\n  * possible missed LBUF_FREE in listmatch/setqmatch in certain conditions [ASH]\n  * cleanup of missing elements in help.txt\n  * possible missed LBUF_FREE in notify code on extremely rare conditions [ASH]\n  * Double pass on @protect [ASH]\n  \n</PRE>\n<A HREF=\"#3.9.1p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.2p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.2p0\"><H3>3.9.2p0</H3></A><PRE>\n  Release Date: 12/01/10\n  Status: Alpha\n    \n  New Features\n  ------------\n  * @include for content inclusion ala PennMUSH [ASH]\n  * @sudo for command processing [ASH]\n  * @skip for command processing [ASH]\n    \n  Changes\n  -------\n  * printf() has : for filler character [ASH]\n  * added mux_lcon_compat to enforce lcon() returns empty string [ASH]\n  * setq()/setr() now understand '+' for dynamic named variables [ASH]\n  * /PROTECT switch to @function for tagging of deleting regs [ASH]\n  * map() delimiter is controlled by a config param map_space_delim [ASH]\n  * @function now allows /min and /max for user-defined functions [ASH]\n    \n  Bug Fixes\n  ---------\n  * MySQL 3rd party patch corrupted the LBUF stack.  While we do not officially\n    support the MySQL patch, it was fixed nevertheless [ASH]\n  * Backing out new code could cause internal attributes to be redefined. [ASH]\n  * @ps/all and pid() didn't always show the queue for non-players [ASH]\n  * map() broke compatibility with output delim if not specified [ASH]\n  * @skip didn't evaluate properly [ASH]\n\n</PRE>\n<A HREF=\"#3.9.1p2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.2p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.2p1\"><H3>3.9.2p1</H3></A><PRE>\n  Release 10/30/2011\n  Status: Alpha\n    \n  New Features\n  ------------\n  * checkpass() function for royalty and higher. [KRK]\n  * %i substitution for itext. [KRK]\n  * chkgarbage() function to check if target is GOING [ASH]\n  * lookup_site() to see the real in-use SITE of a port [ASH]\n  * ee() for engineering notation of floating points [ASH]\n      \n  Changes\n  -------\n  * singletime() now handles (w)eeks, (M)onths, and (y)ears like MUX [ASH]\n  * timefmt() handles 'Z' (timezone), 'z' daylight savings, 'u' days in\n    century, 'U' century in millenium, and 'm' total milliniums. [ASH]\n  * map() can take a config option for default delimiter (default space) [ASH]\n  * caplist() handles English Syntax Title formats [ASH]\n  * @function takes /min and /max values for @function definitions [ASH]\n  * @function/list displays MIN and MAX values (if existing) [ASH]\n  * timefmt() handles timezone conversion... all timezones... [ASH]\n  * timefmt() handles weeks, centuries, and milleniums [ASH]\n  * ldelete() handles multiple arguments [ASH]\n  * insert() handles multiple arguments [ASH]\n  * replace() handles multiple arguments [ASH]\n  * ifelse() handles %$ [ASH]\n  * objeval() with third arg to bypass NO_CODE flag [ASH]\n    \n  Bug Fixes\n  ---------\n  * @assert/@break didn't handle {}'s for multiple args [ASH]\n  * illegal buffer free and copy in command.c [ASH]\n  * Fix for int handler exception in glibc [ASH]\n  * @protect could walk over @alias -- minor glitch [ASH]\n  * @include didn't properly evaluate arguments [ASH]\n  * elapsed time in time fields in timefmt() broke with negative numbers [ASH]\n  * CPUTIME didn't report CPU seconds correctly in 64 bit platforfms [ASH]\n  \n</PRE>\n<A HREF=\"#3.9.2p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.3p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.3p0\"><H3>3.9.3p0</H3></A><PRE>\n  Release Date: 05/30/12\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Added native support for SQLITE [ASH] -- Thanks Ol'Sarge/Ternary\n  * Added 256 color support to the internal markup translater [ASH]\n  * colors() for color listing as well as numerical/hex display [ASH]\n    \n  Changes\n  -------\n  * BOUNCEFORWARD/BOUNCE now redirects TRACE [ASH]\n  * pack()/unpack() optionally handles Penn's 64 bit compression [ASH]\n  * creplace() handles optional range value [ASH]\n  * ljust()/rjust() handles multi-character filler [ASH]\n  * ansi() takes FG/BG arguments (1-255). e.g. ansi(100/200,string) [ASH]\n  * %c/%x substitutions take 1-255 ansi subs via %c0x##%cn (ergo: hex) [ASH]\n  * better sanitization for @Protect with a built-in way to fix aliases [ASH]\n    \n  Bug Fixes\n  ---------\n  * NO_CODE broke global_error_obj if enabled.  Fixed [ASH]\n  * regexp issue with command  matching and parenthesis and backslashes [ASH]\n  * Immortals were not able to re-@name themselves to a protected name [ASH]\n  * @include didn't evaluate %0 args passed to it [ASH]\n  \n</PRE>\n<A HREF=\"#3.9.2p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.3p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.3p1\"><H3>3.9.3p1</H3></A><PRE>\n  Release Date: 06/20/12\n  Status: Alpha\n    \n  New Features\n  ------------\n  * added nslookup() for immortals with proper CPU/delay protection [ASH]\n  * added room_toggles for default toggles for room creation [ASH]\n  * added exit_toggles for default toggles for exit creation [ASH]\n  * added robot_toggles for default toggles for @robot creation [ASH]\n  * added player_toggles for default toggles for player creation [ASH]\n  * added thing_toggles for default toggles for object creation [ASH]\n  * added @list default_toggles to show the above default toggles [ASH]\n    \n  Changes\n  -------\n  * TERSE flag works on ROOMS [ASH]\n  * @break and @assert have /queued and /inline switches [ASH]\n  * trim() allows trimming multiple characters [ASH]\n  * think, @emit, @oemit, pose, and say understand the /noansi switch [ASH]\n  * page, rpage, lpage, mrpage understand the /noansi switch [ASH]\n  * The basic @ansiname allows 256 colors now via 0x## or 0X## [ASH]\n  * made @list default_flags no longer worthless [ASH]\n  * / is superflurous with regards to FG colors in ansi() [ASH]\n  * ansi() allows #FFFFFF, &lt;#FFFFFF&gt;, and &lt;R G B&gt; modes [ASH]\n  * colors() has the 'x' option to display #FFFFFF format [ASH]\n  * colors() has the 'r' option to display R G B format [ASH]\n  * @sudo, @skip handle multiple arguments now [ASH]\n  \n  Bug Fixes\n  ---------\n  * the asksource.sh script broke on ubuntu because it didn't have slocate\n  \n</PRE>\n<A HREF=\"#3.9.3p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.3p2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.3p2\"><H3>3.9.3p2</H3></A><PRE>\n  Release Date: 08/10/12\n  Status: Alpha\n  \n  New Features\n  ------------\n  * ansi() engine totally rewritten to better utilize and optimize [ASH]\n  * NOTRACE switch to @function to disabling tracing of global functions [ASH]\n  * cname() for colorized/accented names [ASH]\n  * %k (works like %n but the colorized/accented name) [ASH]\n    \n  Changes\n  -------\n  * printf() handles multi-character filler and filler is ANSI-aware [ASH]\n  * printf() for :: padding optionally put spaces for 'blank lines' [ASH]\n  * enabled QDBM database support right out of the config script [ASH]\n  * @funciton/list and /display displays functions tagged NOTRACE [ASH]\n  * global errors can no longer be traced [ASH]\n  * Rewrote ansi and accent parser to be faster and single-parsed [ASH]\n  * added /localize and /clearregs to @include for Penn compat. [ASH]\n  * added /globalize and /clearregs to @sudo. [ASH]\n    \n  Bug Fixes\n  ---------\n  * printf() had a color clobbering affect in certain circumstances [ASH]\n  * printf() had an off by one alignment issue with justification [ASH]\n  * fixed up some library lookup code in the asksource.sh script [ASH]\n  * fixed the random dissapearing backslash issue [ASH]\n  * secured @sudo for registers. [ASH]\n  * % or \\ at the end of an ansified string could escape out ansi [ASH]\n    fix for this is allowing % and \\ as special chr() input.\n  * \\\\ for emits didn't work properly [ASH]\n\n</PRE>\n<A HREF=\"#3.9.3p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.3p3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.3p3\"><H3>3.9.3p3</H3></A><PRE>\n  Release Date: 09/20/12\n  Status: Alpha\n  \n  New Features\n  -------\n  * @titlecaption added for player prefix labels [ASH]\n  * streval() [ASH]\n    \n  Changes\n  -------\n  * made ljust/rjust/center/ljc/rjc/printf natively handle chr() [ASH]\n  * added '|', ', and ` format options to printf [ASH]\n  * added '&quot;' to printf to allow word-wrapping with the '|' option [ASH]\n  * allowed clone() to handle PRESERVE and PARENT tags [ASH]\n  * @nuke, @toad, and @turtle follow @limits now [ASH]\n  * @halt/pid will report the PID that was halted [ASH]\n  * increased the buffer alloc field in @list alloc [ASH]\n  * Added includecnt and includenest config parameters for @include [ASH]\n  * @protect for wizzes split full listing with the /all switch [ASH]\n  * Made ifelse()'s $# be handled with ifelse_substitution param [ASH]\n    \n  Bug Fixes\n  ---------\n  * IDLE would uncloak/undark a wizard that was auto-dark/cloaked [ASH]\n  * $Z in timefmt() would show negative values in &gt; 32 bit math [ASH]\n  * case sensitivity was reversed for reswitch/reswitchi cases [ASH]\n  * backward compatibility with v(#) was broke. [ASH]\n  * IDLE mis-aligned carrage return and line feeds [ASH]\n  \n</PRE>\n<A HREF=\"#3.9.3p2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.4p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.4p0\"><H3>3.9.4p0</H3></A><PRE>\n  Release Date: 04/08/13\n  Status: Alpha\n    \n  New Features\n  -------\n  * encode64() from PennMUSH.  Requires OpenSSL. [ASH]\n  * decode64() from PennMUSH.  Requires OpenSSL. [ASH]\n  * @lfunction to allow players to define localized functions [ASH]\n  * global parameter to specify global @lfunction limit per player [ASH]\n  * global parameter to enable/disable BLIND snuffing connect/disconnect [ASH]\n  * Wizard accessable mailquota() function to mimic mail/quota results [ASH]\n  * %W to return target item if inside a twinklock [ASH]\n  * strlenvis() to correctly count 'special' chars via chr() [ASH]\n    \n  Changes\n  -------\n  * Got the native MUX password reader working with input from Mike [ASH]\n  * @caption and @titlecaption allow larger buffers for players [ASH]\n  * internal sha1 code had to have variables redefined for conflict [ASH]\n  * pemit() has an optional third argument for ## substitutions [ASH]\n  * mask() now accepts maximum arguments [ASH]\n  * Added /inline, /nobreak, /localize, /clearreg to @dolist [ASH]\n  * Added /nobreak to @include [ASH]\n  * @limit to allow /lfun switch for individual @lfunction overrides [ASH]\n  * Added /target switch to @include [ASH]\n  * BLIND (when configured to do so) snuffs connect/disconnect messages [ASH]\n  * strmath() handles multi-word args in a mixed math/nonmath for delims [ASH]\n  * TwinkLock when set on a player is now inheritable to all they own [ASH]\n  * Laxed restrictions on sub_include for %-sub definitions [ASH]\n  * elist() takes a 'munge' argument to apply to each element optionally [ASH]\n  * converted tprintf buffering for better allocation in some commands [ASH]\n  * enriched CPU protection for some /inline switches to be more paranoid [ASH]\n    \n  Bug Fixes\n  ---------\n  * strfunc() could call itself.  Just a cosmetic fix that made no sense [ASH]\n  * strfunc() could cut off buffers on certain function calls [ASH]\n  * printf() had CR/LF reversed [ASH]\n  * mysql had compile issues on later compilers [ASH]\n  * door code had a warning under latest compilers with realloc [ASH]\n  * typos in help in various places with clustering [ASH]\n  * 256 color mapping with RGB could be off by one on conditions [AMB]\n  * Source had undeclared function when REALITY_LEVELS not defined [ASH]\n  * printf() didn't handle accents properly in some conditions [ASH]\n  * reality level lock type 3 and 5 broke with userlock checks [AMB]\n  * strfunc() was case sensitive.  It shouldn't be. [ASH]\n  * @break/@assert in some cases would keep stale results [ASH]\n  \n</PRE>\n<A HREF=\"#3.9.3p3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.4p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.4p1\"><H3>3.9.4p1</H3></A><PRE>\n  Release Date: 07/17/13\n  Status: Alpha\n  \n  New Features\n  -------\n  * config parameter reality_compare for optional methods of desc display [ASH]\n  * config parameter atrperms to set up attribute prefix permissions [ASH]\n  * config parameter atrperms_max for ceiling on prefixes defined [ASH]\n  \n  Changes\n  -------\n  * asksource.sh (for the menu configurator) now optionally allows disabling \n    OpenSSL by force as some 3rd party openssl programs would barf on\n    compatibility [ASH]\n  * strmath() improved with inner delimitation (2 new arguments) [ASH]\n  * a bit of cleanup with @pemit on cloaked players [ASH]\n  * @aflags will now show _ prefix permissions on attribs (where exists) [ASH]\n  * @switch handles /inline, /clearregs, /nobreak, and /localize options [ASH]\n  * Cleaned up help.txt to no longer give line longer than X with mkindx [ASH]\n  * Improved validation for @Lfunction [ASH]\n  * @aflags/perm to show attribute prefix permissions in use [ASH]\n  * greatly improved feature set for parsestr() for added speaking [ASH]\n  \n  Bug Fixes\n  ---------\n  * compiling issue when not using the enhanced ansi option [ASH]\n  * crashbug in @blacklist/list in some conditions [ASH]\n  * paging was broken in @blacklist/list, non-crash bug. [ASH]\n  * possible erraneous cpu alert on new player creation on first connect [ASH]\n  * @dynhelp didn't evaluate optional player target properly [ASH]\n  * @lfunction was too restrictive on ownership [ASH]\n\n</PRE>\n<A HREF=\"#3.9.4p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.4p2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.4p2\"><H3>3.9.4p2</H3></A><PRE>\n  Release Date: 10/01/13\n  Status: Alpha\n  \n  New Features\n  -------\n  * safer_ufun -- enforces attributes on objects you don't control is taken at\n    permission level of the object OR the player, whatever is LOWER. [ASH]\n  * SNUFFDARK  -- @toggle (for wizards) to hide normal dark exit display. [ASH]\n  * UNSAFE     -- attribute flag to override safer_ufun permissions [ASH]\n  * @progreset -- allows you to reset the prompt of the target [ASH]\n  \n  Changes\n  -------\n  * printf() - the '/' option specifies cutoff value for '|' wrap option [ASH]\n  * entering extended ASCII in input window auto-translates to markup [ASH]\n  * @snapshot/list takes optional wildcard searching for files [ASH]\n  * added nag notice if you use @set with a toggle or a @toggle with set [ASH]\n  * verbosity now shows more information with setting/removing @toggles [ASH]\n  * create() takes one argument now for Penn compatibility [ASH]\n  * all *lattr() functions now handle regexp optionally [ASH]\n  * @cluster/wipe and @cluster/grep now optionally handle /regexp [ASH]\n  * @wipe optionally handles /regexp [ASH]\n  * wipe() and cluster_wipe() optionally handle regexp [ASH]\n  * added many more options to valid() [ASH]\n  * all *regrep*() functions optionally handle regexp attribute matching [ASH]\n  * pushregs now optionally allow you to specify registers to push/pop [ASH]\n  * setdiff/setunion/setinter functions now optionally handle sorttype [ASH]\n  * %d&lt;num&gt; for @dolist/inline [ASH]\n  * itext()/inum() take optional key value (2nd arg) for @dolist/inline [ASH]\n  * 'L' option added to %i and %d for Penn compatibility [ASH]\n  \n  Bug Fixes\n  ---------\n  * fixed CPU issue with bogus checks on connecting players in rare \n    conditions [ASH]\n  * @function/list erraneously had a limit displayed from local functions [ASH]\n  * when compiling without BANG support, there was an undeclared variable [ASH]\n  * strmath() started at 0 when it should start a 1 [ASH]\n  * some clients don't handle normalizing prompts properly, so we now\n    fix this behavior forcefully [ASH]\n  * printf() couldn't combine '/' and ':' options previously [ASH]\n  * some extended ascii characters wouldn't display proplery [ASH]\n  * documentation was missing for @cluster/wipe [ASH]\n  * functions.c did not compile under CLANG [ASH]\n  * @include didn't properly null arguments forcefully set [ASH]\n  * @switch, @skip, @sudo did not evaluate in some situations [ASH]\n  * no_eval works properly for @functions now by not-evaling input. [ASH]\n  * pack/unpack for penn compat on radixes &gt;=16 &amp; &lt;= 36 was broke [ASH]\n\n</PRE>\n<A HREF=\"#3.9.4p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.4p3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.4p3\"><H3>3.9.4p3</H3></A><PRE>\n  Release Date: 01/01/14\n  Status: Alpha\n  \n  New Features\n  -------\n  * reglmatch()/reglmatchi() -- match positions (like match()) [ASH]\n  * reglmatchall()/reglmatchalli() -- all positions (like matchall()) [ASH]\n  * regnummatch()/regnummatchi() -- count of matches (like nummatch()) [ASH]\n  \n  Changes\n  -------\n  * /tree added to @decompile, examine, and *lattr*() functions for \n    Penn-tree viewing [ASH]\n  * /regexp added to @decompile and examine for regexp wildcard matching [ASH]\n  * ^listens optionally handle parented arguments with @admin listen_parents \n    enabled [ASH]\n  * /multi switch added to @oemit to optionally allow multiple targets [ASH]\n  * oemit() optionally handles multiple targets [ASH]\n  * lattr() and family handles TREE viewing optionally [ASH]\n  * lexits() honors dark locks [ASH]\n  * @aflags modified to allow online adding, modifying, deleting attrib \n    prefixes [ASH]\n  * reverse(), scramble(), capstr(), lcstr(), ucstr(), and caplist() are now \n    ansi-aware [ASH]\n  * columns() is now ansi aware, and it was a pain in the arse. [ASH]\n  * wrapcolumns() is now ansi aware, and was a bigger pain in the arse. [ASH]\n  \n  Bug Fixes\n  ---------\n  * @function/list would not display all listings if not immortal [ASH]\n  * memcpy() crash bug with GCC 4.x with aggressive compiler optimization [ASH]\n  * WHO/DOING would not properly show 'year' if on over a year [ASH]\n  * strfunc() wouldn't handle null arguments properly [ASH]\n  * QDBM on a panic SIGTERM dump could occasinally corrupt the db \n    (but flatfile fine) [ASH]\n  * @door definition change in later versions of GCC caused a conflict [ASH]\n\n</PRE>\n<A HREF=\"#3.9.4p2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.4p4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.4p4\"><H3>3.9.4p4</H3></A><PRE>\n  Release Date: 05/01/14\n  Status: Alpha\n  \n  New Features\n  -------\n  * !^ and !!^ for true-boolean comparisons for functions for BANG notation.\n  * lockencode(), lockdecode(), lockcheck() for variable lock checking\n  \n  Changes\n  -------\n  * mid(), before() and after() are now ansi aware [ASH]\n  * citer() is now ansi aware [ASH]\n  * pos(), randpos() and totpos() are ansi aware [ASH]\n  * shuffle() is now ansi aware [ASH]\n  * wrapcolumns() has EOL padding optionally [ASH]\n  \n  Bug Fixes\n  ---------\n  * strfunc() was broke for single argument entries [ASH]\n  * bug introduced with the ansi handler to columns() in off by one bug [ASH]\n  * @skip/ifelse wouldn't evaluate arguments properly [ASH]\n  * @assert/inline and @break/inline wouldn't eval args properly [ASH]\n  * #lambda erraneously stripped extra /'s at times [ASH]\n  * art() handles non-printables [ASH]\n  * possible crashbug in encode64/decode64 due to glibc memory map change [ASH]\n\n</PRE>\n<A HREF=\"#3.9.4p3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.4p5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.4p5\"><H3>3.9.4p5</H3></A><PRE>\n  Release Date: 05/24/14\n  Status: Alpha\n  \n  New Features\n  ---------\n  * array() will wrap out text based on column width into setq registers [ASH]\n  \n  Changes\n  -------\n  * massive cleanup and helper tools for ansi for ease of modification [ASH]\n  * better error control with failed player creation with safer_passwords [ASH]\n  * Rooms set QUIET that are @toggled LOGROOM no longer notify of logging [ASH]\n  * printf() is more vigerous in reusing ansi for filler [ASH]\n  \n  Bug Fixes\n  ---------\n  * columns() and wrapcolumns() had a crashbug with the handler (3.9.4p4) [ASH]\n  * formatting with inverse ansi wasn't recognized properly [ASH]\n  * speech.c broke when REALITY_LEVELS was no longer defined [ASH]\n  * The initial db creation could bomb creating #1 with safer_passwords [ASH]\n  * lwho() didn't properly check wiz when specifying optional target [ASH]\n  * printf() with |&quot; options had an alignment issue with ansi [ASH]\n  * bug with 'guest' in safer_passwords [ASH]\n  * memory leak in shuffle() [ASH]\n\n</PRE>\n<A HREF=\"#3.9.4p4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.5p0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.5p0\"><H3>3.9.5p0</H3></A><PRE>\n  Release Date: 09/15/14\n  Status: Alpha\n  \n  New Features\n  ---------\n  * @remote -- allows to execute as if location was at remote [AMB]\n  * ip_address param to specify ip addrfor mush to listen (default all) [AMB]\n  * %c, %x and %m are freely configurable as ANSI or last-command sub [AMB]\n  * subnetmatch() function to compare a specified IP against a subnet [AMB]\n  * %2 (body) and %3 (date/time) subs for MAILFILTER [ASH]\n  * sinh(), cosh(), tanh() added [AMB]\n  * icmdobj @admin param to specify optional @icmd eval checks [ASH]\n  * ansi_txtfiles optionally allow %c/%x/%m ansi subs in .txt files [ASH]\n  * /silent switch for @reboot. Immortal-only by default [AMB]\n  * parsestr() has new option '|' for @emits [ASH]\n  * @list system -- Compile-time parameters [ASH]\n  * mailread() function added to provide wizards individual mail \n    message segments [ASH]\n  * mailsend() sideeffect function to allow wizards to send mail [ASH]\n  * /STRICT options to @edit and edit() for strict-ansi alignment [ASH]\n  * /RAW for @edit and edit() for raw editing ansi markup (orig behavior) [ASH]\n  * list_max_chars parameter limits number of characters list can output [ASH]\n  * /TF switch to @decomile for Penn compatibility.  Now people can stop \n    whining [ASH]\n  * @toggledef for TOGGLES as @flagdef was for FLAGS [ASH]\n  * /index feature to @flagdef and @toggledef [ASH]\n  * flag_access_set, flag_access_unset, flag_access_see params \n    for @flagdef [ASH]\n  * toggle_access_set, toggle_access_unset, toggle_access_see params \n    for @toggledef [ASH]\n  * tor_localhost, tor_paranoid for dynamic live TOR proxy protection [ASH]\n  * float_precision for floating point decimal precision (default 6) [ASH]\n  * file_object parameter to specify dynamic override for connect.txt and \n    friends [ASH]\n  * extractword() is a multi-char delimeter/seperator/ansi-aware \n    extract/delextract [ASH]\n  * mwords() is a multi-char delimiter/ansi-ignore words [ASH]\n  * @dbclean to purge unused attributes from the db [ASH]\n  * editansi() allows you to edit ansi encoding in a string [ASH]\n  * @depower DARK that will disable all DARK capabilities of the target \n    (and belongings) [ASH]\n  * @admin param ansi_default handles high-utilized functions to specify ansi \n    aware default [ASH]\n  * @admin accent_extend to allow ASCII 251-255 characters.  Use at your own \n    risk :) [ASH]\n\n  Changes\n  -------\n  * LBUFS are now capable of &gt; 4K with QDBM [AMB]\n  * Queue timers handle milliseconds [AMB]\n  * Compile Menu allows configuring higher LBUF's [AMB]\n  * Large amounts of cleanup in help files [AMB]\n  * @sudo can now be nested [AMB]\n  * @aflags /list aliased to /perms [ASH]\n  * @aflags conditions for wanderer/guest (unregistered) for prefixes [ASH]\n  * @aflags evaluation checks for prefixes [ASH]\n  * Reality level names are increased to 16 characters [AMB]\n  * NO_CODE made more lax on some functions/commands [AMB]\n  * @icmd allows /eval and /eroom evaluation checks [ASH]\n  * MAILFILTER handles arguments for body and time/date [ASH]\n  * Updated TOR script with new URL, removed obsolete ones. [AMB]\n  * pmatch(here) run inside a player returns the #dbref. [ASH]\n  * Internal lower limit of cputimechk and cpuintervalchk lowered to '1' [AMB]\n  * Added missing config options to alternate_netrhost.conf [AMB]\n  * Mentioned several config optons in help of the commands they modify. [AMB]\n  * Updated README.first install steps to actually include 'make links' [AMB]\n  * Added checks in Startmush that look for presence of binary first. [AMB]\n  * Examine/@decompile now works on attribute aliases [ASH]\n  * Internal ceiling for maximum number of mails removed. Depends on LBUF [ASH]\n  * @list flags differentiates better between normal and extended flags [ASH]\n  * A lot of Rhost history added to helpfiles [ASH]\n  * nummatch, totmatch and multi-regmatch now have strict CPU checks [ASH]\n  * art() has an optional second argument for just displaying article [ASH]\n  * PRIVATE flag will now snuff non-listening messages from wizards [ASH]\n  * @edit and edit() now cleanly handle ANSI [ASH]\n  * moved all of the ansi handler voodoo into stringutil.c [ASH]\n  * printf() and the backend ansi handler natively handle ASCII-8 encoding [ASH]\n  * list() is now throttled on how much output it can have [ASH]\n  * page relaxes syntax slightly allowing 'p =blah' to work with MUXPAGE [ASH]\n  * optionally compiles in system pcre libraries and not source derived [ASH]\n  * @flagdef now will give you the flags that are assigned on set [ASH]\n  * reality levels read 0x00000000 notation to mirror @list rlevel in conf \n    file for those who find the math of hexidecimal to decimal difficult [ASH]\n  * uselock evaluation locks pass '0' for default, '1' for command and\n    '2' for listens for @lock/use only [ASH]\n  * @reboot/silent is more verbose to the player initiating it [ASH]\n  * The help entry was wrong for grep() and associated functions with\n    it handling non-wild args.  This is now allowed with optional arg [ASH]\n  * getfrom lock now properly handles @fail/@ofail/@afail messages [ASH]\n  * NO_WALLS properly muffles @dump messages [ASH]\n  * clients that did not do CRLF didn't handle null entries correctly [ASH]\n  * *_site admin params raised from 1000 chars to LBUF_SIZE [ASH]\n  * bittype() optionally handles true staff inheritance checks [ASH]\n  * strmath() now handles floating point notation [ASH]\n  * localize() optionally has 2nd argument to specify specific regs to \n    localize [ASH]\n  * tr() is now ANSI-aware, and optionally allows previous behavior [ASH]\n  * editansi() enhanced to allow negation of special ansi encoding [ASH]\n  * sqlite now recognizes foreign keys [ASH]\n  * @set, &amp;, set(), setr() are now PennMUSH style TREE aware optionally [ASH]\n  * Enabled signal catch debugging information [ASH]\n  * @include has /override switch that will mimic how arguments are assigned \n    like Penn [ASH]\n  * ' option to printf() is now more useful with how it padds [ASH]\n  * before(), after(), and mid() have a switch to disable ansi-awareness for \n    speed [ASH]\n  * Stricter checking of setq/setq_old/setr/setr_old label argument and more\n    clear error message in case label is invalid [AMB]\n  \n  Bug Fixes\n  ---------\n  * Some memsets didn't initialize the entire buffer [ASH]\n  * wrap() had an off by one for 256 ansi color [ASH]\n  * pmatch() didn't handle nonplayers right [AMB]\n  * /quiet switch missing on @extansi [AMB]\n  * kill -USR2 could corrupt QDBM databases on rare occasions [ASH]\n  * MUX passwords broke with previous security fix to encoding [ASH]\n  * ex/parent wouldn't identify desc in certain circumstances [ASH]\n  * strfunc() had a memoryleak with a non-free LBUF [ASH]\n  * elist() had a memoryleak with non-free LBUF [ASH]\n  * Fixed missing QDBM #ifdef in redirect_ndbm.h [AMB]\n  * Fixed %l being too restrictive if enforce_unfindable is enabled [AMB]\n  * Fixed reverse-logic'd helpfile entry for hasattrp_compat [AMB]\n  * fixed format&lt;attr&gt; -&gt; &lt;attr&gt;format in attrib formatting help [AMB]\n  * DB Converter now handles MUX 2.9+ properly again. [ASH]\n  * Off-by-one fix for ansi stringlength detection. [ASH]\n  * nor() would not properly work its logic past 2 arguments [AMB]\n  * ANSI internals handle multiple enabled ANSI subs [AMB/ASH]\n  * SHOWFAILCMD wouldn't work for parent command lookups [ASH]\n  * ! syntax to printf filler was broken from ansi rewrite [ASH]\n  * wrapcolumns() didn't handle CR/LF correctly for certain clients [ASH]\n  * flag_name could crash the mush if fed invalid arg in the .conf file [ASH]\n  * small chance of crash with player undefined for @reboot/silent [ASH]\n  * crash bug in tel() due to a typo fixed [ASH]\n  * mid() had an unitialized field when fetching outside of length \n    (non-crash) [ASH]\n  * off by one bug for handling accented characters in ansi translator \n    backcode [ASH]\n  * MONITOR_SITE was not handled by master toggle MONITOR [ASH]\n  * creplace() was hardcoded with LBUF of 4000 chars [ASH]\n  * some better cleanup of other functions for LBUF sizing [ASH]\n  * typo with message when you re-wait a @wait by pid [ASH]\n  * memory leak in @aflags without arguments [ASH]\n  * bad things happened with @remote when issuer of @remote moved while in \n    @remote [ASH]\n  * timers would not reset properly without a forced alarm call on signal \n    breaks [ASH]\n  * regedit()'s suite of functions were erraneously locked at 4 args [ASH]\n  * compile time warnings with some new additions when ZENTY_ANSI not \n    specified [ASH]\n  * mail.c had in the write editor erraneous warnings hardcoded to 4K \n    buffers [ASH]\n  * double eval fix in parsestr() [ASH]\n  * third party mysql.c had a segsetv fix [ASH]\n  * timers had a bug in mysql.c and mis-defined in timer.c [ASH]\n  * memory corruption with argument passing in @include could crash [ASH]\n  * wrong definition for next_timer with the milisecond timer [ASH]\n  * double-alloc in destroy code (non-crash) [ASH]\n  * @depowers wouldn't work properly on inheritance when power_objects was \n    enabled [ASH]\n  * printf() had a one by off pad issue with extra spaces with ' option [ASH]\n  * off by one buffer count for ansi_txtfile parameter caused bleeding [ASH]\n  * Third optional argument of setq/setr did not evaluate [AMB]\n\n</PRE>\n<A HREF=\"#3.9.4p5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.5p1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.5p1\"><H3>3.9.5p1</H3></A><PRE>\n  Release Date: 03/27/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * @pipe will allow you to pipe output to an attribute (until full) [ASH]\n  * ATAN2 for MUX2/Penn/other compatibility [ASH]\n  * sortlist() takes 2 or more lists and selects max/min based on sorting [ASH]\n  * ch to allow you to connect @hidden (if wizard or @powered NOWHO) [ASH]\n  * flag_access_type, toggle_access_type configs for TYPE restrictions [ASH]\n  * /tee and /status switches for @pipe to allow more flexibility [ASH]\n  * Optional compiletime to allow GLIB2's SHA512 random-seed passwords [ASH]\n    Note: This does allow backward compatibility with existing DES passwords\n  * forbid, register, and guest site restrictions allow optional connects [ASH]\n  * @admin allows you to online load/save/list .conf file parameters [ASH]\n  * NO_NAME flag on object types will evaluate @nameformat if available on all\n    THING types for the purpose of inventory, contents, and looking [ASH]\n  * A non-conformat switch global /syntax is available for most commands that\n    will now show syntax and available switches for any command [ASH]\n  \n  Changes\n  ------------\n  * strfunc now has a ceiling of arguments to 1000 to avoid DoS issues [ASH]\n  * By popular demand, 'idle' when followed by '@@' does an idle think [ASH]\n  * delete() is now ansi-aware [ASH]\n  * @uptime shows system uptime (when available) [ASH]\n  * If a player @toggles VARIABLE on themselves, then says, poses, and @walls\n    will be colorized as if cname() [ASH]\n  * @flagdef and @toggledef now can restrict based on TYPE [ASH]\n  * added bitlevel permission override to @flagdef/@typedef TYPE restricts [ASH]\n  * editansi() now accepts multiple arguments for search/replace [ASH]\n  * 'N' normalizer search for editansi() [ASH]\n  * with the avent of SHA512 passwords, password length capped at 160 char [ASH]\n  * on systems that do not have a SHA512 compatible glibc fall back to DES\n    while encrypting passwords. [ASH]\n  * Locks (normal and attribute) are 'noisy' with the NOISY @toggle [ASH]\n  * expanded flag overwrite for expanded-who (PARIS) compiletime [ASH]\n  * added player dbref as 4th arg (%3) to file_object parameter [ASH]\n  * If the mail-db gets corruption, you can attempt a wmail/load to recover it\n    if you have a valid mail flatfile. [ASH]\n  * wizhelp granted to GUILDMASTER bitted players by default [ASH]\n  * @selfboot has optional switches /list and /port so you can specify what \n    connection you want selfbooted.\n    \n  Bug Fixes\n  ------------\n  * mail/mark/save when no more saved quota wouldn't notify you of that [ASH]\n  * ascii8 encoding could allow multi-sequences in %&lt;###&gt; encoding [ASH]\n  * forgot to define EXTLIBS in the Makefile -- oopse [ASH]\n  * missed free in the @uptime changes for buffers [ASH]\n  * buffering issue with @list options [ASH]\n  * old_setq didn't handle re-mapping register names with '!' option [ASH]\n  * cleaned up code to compile without warnings on latest clang [ASH]\n  * cleaned up code to compile without warnings on latest BSD (with clang) [ASH]\n  * some unixes do not have scandir so we rolled our own in such a case [ASH]\n  * possible buffer overflow missed with expanding site restrictions [ASH]\n  * bug with scandir being undefined on certain unix flavors [ASH]\n  * citer() and tr() didn't honor LF correctly in some situations [ASH]\n\n</PRE>\n<A HREF=\"#3.9.5p0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.5p2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.5p2\"><H3>3.9.5p2</H3></A><PRE>\n  Release Date: 07/04/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * MySQL natively is now recognized within RhostMUSH's build utility [ASH]\n    - Note: ./patch.sh will not patch this in as it did require a rewrite\n      of the src/Makefile, bin/asksource.sh, and some additional files.\n    - ./patch.sh (and patching) will not break backward compatibility.\n  * enhanced_convtime toggles the processing of extra formats for the\n    convtime() function [ASH]\n  * ofparse() -- Handles all the various firstoff/allof/etc functions [ASH]\n  * tree_character -- @admin param to define what the TREE character is\n    for attribute trees.  Default of ` [ASH]\n  * sqlping() to check if the database is alive and kicking or dead and\n    stinky [ASH]\n  * mysql_delay defaults to '0' for a paranoid hard-deny or 60-86400 for\n    a delay on how long until the next attempt for a positive mysql\n    connection is allowed [ASH]\n  * parenstr() works like parenmatch() but takes a literal string [ASH]\n  * @admin name_with_desc boolean toggle to enable showing names of\n    things you look at [ASH]\n  * esclist() and unesclist() to specify characters to escape [ASH]\n  * added proxy_checker config param for semi-accurate proxy detect [ASH] \n  * elementpos() works like elements() but for characters [ASH]\n  * anti-idling detection added via idle_stamp and idle_stamp_max [ASH]\n  * @door/kick to kick a player off a connected door [ASH]\n  * @door/push to push a player into a door [ASH]\n  * %_&lt;label&gt; debug breakpoints are now available for coding [ASH]\n  * TRACE, TRACE_COLOR and TRACE_COLOR_&lt;label&gt; for trace %_&lt;label&gt; [ASH]\n  * TRACE_GREP will highlight red any trace output that matches [ASH]\n  \n  Changes\n  ------------\n  * pi() and e() optionally take an argument to specify the value for\n    precision from 1 to float_precision (@list options system) [ASH]\n  * div(), fdiv(), floordiv(), fmod(), modulo(), remainder(), and\n    sub() now handle multiple arguments for Penn compatibility. [ASH]\n  * For those who are used to Penn, 'DEBUG' is aliased to 'TRACE' [ASH]\n  * textfile() takes optional arguments to sanitize output for use\n    in various coding including an output seperator [ASH]\n  * hilite topic headers for help (as requested by many) [ASH]\n  * mysql more vigerously tries to keep stale connections active [ASH]\n  * the build script more cleanly does dynamic building of Makefile [ASH]\n  * @halt has a /quiet switch now.\n  * if getdate is found on the server, allow enhanced convtime [ASH]\n  * enhancement to creplace() for a multi-char-position replace [ASH]\n  * foreach passes the position now as '%1' [ASH]\n  * zwho() by default listed type target belonging to a zone.  Now,\n    it optionally lists players INSIDE any item in the zone [ASH]\n  * mysql has been enhanced and security improved [ASH]\n  * setq/setr with + and ! if fed a label, if label is 0-9 or a-z,\n    it sets the register instead of setting a label. [ASH]\n  * caplist() optionally capitalizes all parts of hyphonated words\n    optionally if that word would have been capitalized [ASH]\n  * pos(), totpos(), and numpos() optionally matches any of the \n    chars specified [ASH]\n  * new parameter in examine_restrictive and it now restricts\n    @decompile as well [ASH]\n  * hardened sqlescape() to more vigerously do connect attempts [ASH]\n  * @list rlevel dec for decimal display [ASH]\n  * @list options value/boolean allows optional wildcard searches [ASH]\n  * improved strmath() to handle a greater range of floating points [ASH]\n  * optionally allow a time-delay on MySQL reconnections instead of\n    a forced hard-deny via @sqlconnect to give some better control [ASH]\n  * allow '.' and '+' as first characters for attribute names [ASH]\n  * step() allows up to MAX_ARGS arguments now [ASH]\n  * timezone option added to valid() [ASH]\n  * parentable_control_lock controls if @locks are inheritable [ASH]\n  * valid() types locktype and lockkey added for Penn compat [ASH]\n  * total rework of the internal exec parser stack to properly handle\n    some erraneous REGEXP pre-parsing syntax issues [ASH]\n  * because people kept raising the VLIMIT past the recommended values\n    while in GDBM mode, we have hard-locked it for 32/64 bit GDBM [ASH]\n  * @reboot enforces binary's existance prior to actual rebooting [ASH]\n  * remove() now allows multiple removals\n  * enhanced content searches for help [ASH]\n  * @grep now handles /parent switch [ASH]\n  * ! shown on @function and @lfunction if a flag permission exists [ASH]\n  * array() has optional output seperator [ASH]\n  * %q&lt;LABEL&gt; now also handles 0-9a-z registers [ASH]\n  * first() and last() are now optionally ANSI-aware with 3rd arg [ASH]\n  * @chownall now optionally allows a mix of specifying room, exit,\n    thing or player.  It defaults to all types [ASH]\n  * @door now allows interactive connections (ergo, it allows queueing) [ASH]\n  * Broke out %m, %c, and %x from sub_override params [ASH]\n  * cleanup of the sub_override parser [ASH]\n    \n  Bug Fixes\n  ------------\n  * mysql didn't update the include file for mysql correctly [ASH]\n  * help entries didn't always add a CR to the LF [ASH]\n  * small memory leak in door code [ASH]\n  * Erraneous warnings removed when compiling with -O2 optimization [ASH]\n  * ~/src/Makefile was broke on latest Debian builds because of an\n    incompatibility with their /bin/sh (/bin/dash) binary [ASH]\n  * argument handler issue when passing zero args to @include/override [ASH]\n  * @hook did not show percent subs enabled/disabled properly on rare\n    occurances [ASH]\n  * @include didn't reset the state correctly in some instances [ASH]\n  * @dolist/inline didn't properly parse nested args [ASH]\n  * regedit*() functions could double-eval the $0-$99 subs.  This will\n    break some backward compatability on anything that depended on the\n    double evaluation but is a necessary evil for security plus now\n    behaves like it should have to begin with (via the help) [ASH]\n  * cd (connect dark) didn't follow permission restrictions right [ASH]\n  * @admin function_access didn't work quite right on @lfunctions [ASH]\n  * @limit with globals of unlimited for destory/vlimit was broke [ASH]\n  * Further restrictions to @remote required for safe guarding [ASH]\n  * small cleanup in formatting with @list funperm [ASH]\n  * if a user-defined attribute was deleted the @function attached\n    to it would no longer show up, now it does but gives warnings [ASH]\n  * put a ceiling on function_recurse_limit to no longer bypass the\n    debug STACK LIMIT (of 1000) as a worse case scenerio [ASH]\n  * toggles did not showup when you @decompiled. [ASH]\n  * @robot was broke with internal flag checks [ASH]\n  * xinc/xdec for registers didn't understand labels [ASH]\n  * EXFULLWIZATTR didn't work with @aflags wiz (and lower) [ASH]\n  * array() didn't normalize %r's correctly [ASH]\n  * crashbug in idle_stamp for noncommands [ASH]\n  * CYGWIN should work with compiling Rhost on Windows platforms [ASH]\n  * the /preserve switch to @chownall didn't work properly [ASH]\n  * @chownall and @chown did not properly strip some of the staff\n    flags as it should have when /preserve was not specified [ASH]\n  * weird issue fixed where it thought max players reached when didn't [ASH]\n\n</PRE>\n<A HREF=\"#3.9.5p1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#3.9.5p3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"3.9.5p3\"><H3>3.9.5p3</H3></A><PRE>\n  Release Date: 12/13/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * ifelse_compat option that makes if()/ifelse()/@skip/@if etc. behave\n    as TRUE in case the first argument is a normal string. [AMB]\n  * execscript() with matching sideeffect value and @power execscript to\n    allow executing external script as a function with appropiate \n    safeguards for script name and arguments [ASH]\n  \n  Changes\n  ------------\n  * TRACE_GREP attribute if set REGEXP will do regular expression matching on\n    the trace output for all trace output. [ASH]\n  * modified system uptime to hard-query the utmp system file for\n    compatibility and performance [ASH]\n  * added /towner and /ttype switches to @purge to combine time and type/owner\n    for enhanced purging [ASH]\n  * Laxed some restrictions on @admin params [ASH]\n  * optional 3rd argument to parenmatch() does pretty-print of mush code [ASH]\n  * securex() and escapex() now optionally accept 'a' as argument to ignore\n    ansi [ASH]\n    \n  Bug Fixes\n  ------------\n  * columns() did not default justification to 'L'eft if left blank with \n    4 or more arguments [ASH]\n  * foreach() had a possibility of overwriting a static buffer in-use\n    which could return erraneous results (non-crash-bug) [ASH]\n</PRE>\n<A HREF=\"#3.9.5p2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#:\">[NEXT]</A>\n<BR>\n<HR><A NAME=\":\"><H3>:</H3></A><PRE>\n  Command: :&lt;message&gt;\n  Displays &lt;message&gt; to everyone in your current room, preceded by your name\n  and a space.  Example: the command ':jumps for joy' produces\n  '&lt;yourname&gt; jumps for joy'.\n  \n  If you have a space after the ':' it will use the ';' format instead.\n  \n  See Also: page, pose, say, whisper, ;, &quot;\n  \n</PRE>\n<A HREF=\"#3.9.5p3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#;\">[NEXT]</A>\n<BR>\n<HR><A NAME=\";\"><H3>;</H3></A><PRE>\n  Command: ;&lt;message&gt;\n  This command is much like the ':' command, except that no space is inserted\n  between your name and the action.  Example: the command ';'s watch beeps.'\n  produces '&lt;yourname&gt;'s watch beeps.'.\n \n  Warning: This command does not work in command lists run from an attribute\n  because the ';' is treated as the command separator.  Use pose/nospace\n  instead.\n  \n  If you have a space after the ';' it will use the ':' format instead.\n \n  See Also: page, pose, say, whisper, :, &quot;\n  \n</PRE>\n<A HREF=\"#:\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#GT\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"GT\"><H3>&gt;</H3></A><PRE>\n  Command: &gt;&lt;attribute&gt; &lt;object in cluster&gt;[=&lt;value&gt;]\n  Synonym: @cluster/set &lt;object&gt; = &lt;attribute&gt;:[&lt;value&gt;]\n   \n  Sets the attribute named &lt;attribute&gt; on &lt;object&gt; to &lt;value&gt;.  If\n  &lt;attribute&gt; is not a predefined attribute (like ofail or va), then it is\n  created.  Attributes so created are called user-named attributes.\n  Attribute names may only contain letters, numbers, and the characters\n  &lt; -_.@#$^&amp;*~?=+| &gt;, and must start with a letter.  The names of user-named\n  attributes may not be abbreviated (an attempt to get the value of the\n  attribute will fail, and an attempt to set will create a new attribute).\n  \n  The object that is chosen will be either the object in the cluster that\n  already contains the attribute, or the object in the cluster with the\n  least number of attributes currently on it.\n  \n  Specifying an object not in the cluster will return an error.\n  \n  Attributes must start with an alpha character, or in special cases any\n  of the following characters: ~_#.+\n  \n  Example:\n    &gt;myattr ClusterObj=This is my data on attribute 'myattr'\n    Set.\n   \n  See Also: @set, @cluster set, VATOVZ, ZATOZZ, &amp;\n\n</PRE>\n<A HREF=\"#;\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@@\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@@\"><H3>@@</H3></A><PRE>\n  Command: @@ &lt;args&gt;\n \n  This command does nothing, therefore it is useful for putting comments into\n  a MUSH program.  Be careful that ()'s and {}'s in the (otherwise ignored)\n  arguments are nested correctly, lest your command-ending ; be trapped\n  inside.\n \n  Example:\n     @va me=$foobar *:@fo #1234=%0;@@ This controls my foobar puppet.\n  \n  See Also: @break, @assert, idle\n  \n</PRE>\n<A HREF=\"#GT\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@@()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@@()\"><H3>@@()</H3></A><PRE>\n  Function: @@(&lt;string&gt;)\n  \n  This function will eat all output from &lt;string&gt;.  This is handy if you want\n  to place comments within functions.  Anything within @@() is NOT evaluated.\n  \n  Example:\n    &gt; say [@@(this is a test[setq(0,test)])]- [r(0)]\n    You say &quot;- &quot;\n  \n  See Also: localize(), eval(), null(), privatize()\n  \n</PRE>\n<A HREF=\"#@@\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aahear\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aahear\"><H3>@aahear</H3></A><PRE>\n  Command: @aahear[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aahear\n \n  An Aahear on an object is activated whenever the listen pattern\n  matches anything done/said by anything else in the room, including\n  itself.  (The Ahear ignores itself, helpful for keeping machines from \n  triggering itself).  \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aahear listener = &quot;I heard someone (maybe me?) say the word!\n   \n  See Also: @ahear, @amhear, @listen\n  \n</PRE>\n<A HREF=\"#@@()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aclone\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aclone\"><H3>@aclone</H3></A><PRE>\n  Command: @aclone[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aclone\n \n  Sets the actions to be taken by a new object that has just been created\n  as the result of a @clone command.  The contents of the Aclone attribute\n  are run by the new object and not by the old object.\n \n  This attribute is only meaningful for things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aclone Time bomb = @wait 600=@trig me/va;@wait 10=@trig me/vb\n           @va time bomb = :EXPLODES with a thundering roar;@destroy me\n           @vb time bomb = :ticks.; @wait 10=@trig me/vb\n  \n  See Also: @clone\n  \n</PRE>\n<A HREF=\"#@aahear\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aconnect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aconnect\"><H3>@aconnect</H3></A><PRE>\n  Command: @aconnect[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aconnect\n \n  Sets the actions to be taken by a player right after connecting to the\n  game.  This attribute is only meaningful for players, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  '1' is passed as %0 if you are already connected when you connect, and\n  '0' is passed as %0 if it's your only connection.\n   \n  Example: @aconnect me = check.my.mailbox\n  \n  See Also: @adisconnect\n  \n</PRE>\n<A HREF=\"#@aclone\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@adescribe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@adescribe\"><H3>@adescribe</H3></A><PRE>\n  Command: @adescribe[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Adescribe\n \n  Sets the actions to be taken when &lt;object&gt; is looked at.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @adesc kitten = :rubs against %n's legs affectionately.\n  \n  See Also: look, @desc, @idesc, @odesc, taste, @sataste, touch, @satouch,\n            listen, @salisten, smell, @sasmell\n  \n</PRE>\n<A HREF=\"#@aconnect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@adfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@adfail\"><H3>@adfail</H3></A><PRE>\n  Command: @adfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Adfail\n \n  Sets the action to be taken by an object when someone tries to drop it\n  but fails because they didn't pass the object's drop lock.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @adfail sword = @name me=Cursed Sword;:laughs maniacally.\n  \n  See Also: drop, @dfail, @odfail, @lock\n  \n</PRE>\n<A HREF=\"#@adescribe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@adisconnect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@adisconnect\"><H3>@adisconnect</H3></A><PRE>\n  Command: @adisconnect[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Adisconnect\n  Sets the actions to be taken by a player right after disconnecting from\n  the game.\n \n  This attribute is only meaningful for players, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  There are three arguments passed to the @adisconnect.\n      %0 is the reason for your disconnect (netdeath, quit, logout, etc)\n      %1 is the total time in seconds you were connected for that instance.\n      %2 is '0' if it's your only connection, '1' if you're connected more \n         than once.\n   \n  Example: @adisconnect me = home\n  \n  See Also: @aconnect\n  \n</PRE>\n<A HREF=\"#@adfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@adrop\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@adrop\"><H3>@adrop</H3></A><PRE>\n  Command: @adrop[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Adrop\n \n  Sets the action to be taken by an object when it is dropped, or by an exit\n  when it is successfully used.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @adrop plastique = kill %n=100; @destroy me\n  \n  See Also: drop, @drop, @odrop, DROP-TO, EXITS\n  \n</PRE>\n<A HREF=\"#@adisconnect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aefail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aefail\"><H3>@aefail</H3></A><PRE>\n  Command: @aefail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aefail\n \n  Sets the action to be taken by an object when someone tries to enter it\n  but fails because the object is not ENTER_OK or the player fails the\n  object's enter lock.\n \n  The enter lock only affects the 'enter' command and its aliases (set via\n  the @ealias command), it does not affect exits that lead to the object or\n  teleporting in.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aefail car = @emit ;'s alarm starts wailing when %n tries\n                         to break in.\n  \n  See Also: @aenter, @efail, @ealias, @enter, @oefail, @oenter, enter,\n            ENTER_OK\n  \n</PRE>\n<A HREF=\"#@adrop\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aenter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aenter\"><H3>@aenter</H3></A><PRE>\n  Command: @aenter[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aenter\n \n  Sets the action to be taken by an object or room when someone enters it,\n  whether by using an exit, the enter or leave commands, or by teleporting.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aenter car = :starts its engine, eagerly awaiting a road trip.;\n                         &quot;Beep Beep!\n  \n  See Also: enter, @enter, @oenter, ENTER_OK\n  \n</PRE>\n<A HREF=\"#@aefail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@afail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@afail\"><H3>@afail</H3></A><PRE>\n  Command: @afail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Afail\n \n  Sets the commands to be performed by &lt;object&gt; when one of these events\n  occurs:\n \n    - For exits: Someone tries to traverse the exit but cannot because they\n      fail the exit's default lock or the exit is not linked.\n    - For players and things: Someone tries to pick up the object but cannot\n      because they fail the object's default lock.\n    - For rooms, players, and things: Someone looks around inside the room,\n      player, or thing and fails the object's default lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    &gt; @afail vase = :falls to the floor and smashes to pieces.;@destroy me\n  \n  See Also: @fail, @ofail, FAILURE\n  \n</PRE>\n<A HREF=\"#@aenter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@agfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@agfail\"><H3>@agfail</H3></A><PRE>\n  Command: @agfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Agfail\n \n  Sets the action to be taken by an object when someone tries to give it\n  away but fails because they didn't pass the object's give lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @agfail sword = @name me=Cursed Sword;:laughs maniacally.\n  \n  See Also: give, @gfail, @ogfail, @lock\n  \n</PRE>\n<A HREF=\"#@afail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ahear\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ahear\"><H3>@ahear</H3></A><PRE>\n  Command: @ahear[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Ahear\n \n  Sets the actions to be taken after the object hears a string that matches\n  the pattern in the Listen attribute which was not produced by the object\n  itself.  Messages that are produced by the object itself are ignored.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ahear clock = &quot;The time is now [time()].  &gt;&gt; BONNNNGGGGG &lt;&lt;\n  \n  See Also: @aahear, @amhear, @listen\n  \n</PRE>\n<A HREF=\"#@agfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@akill\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@akill\"><H3>@akill</H3></A><PRE>\n  Command: @akill[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Akill\n \n  Sets the actions to be taken by an object after it is killed and has\n  returned to its home.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @akill lion = south; :leaps onto %n, roaring loudly.;kill %n=100\n  \n  See Also: kill, @kill and @okill, BEING KILLED, IMMORTAL, ROYALTY\n  \n</PRE>\n<A HREF=\"#@ahear\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aleave\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aleave\"><H3>@aleave</H3></A><PRE>\n  Command: @aleave[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aleave\n \n  Sets the action to be taken by an object or room when someone leaves it,\n  whether by using an exit, the enter or leave commands, or by teleporting.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aleave car = :stops to let %n out.;:revs its engine, hoping\n                         another brave soul would like a ride.\n  \n  See Also: leave, @leave, @oleave\n  \n</PRE>\n<A HREF=\"#@akill\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@alfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@alfail\"><H3>@alfail</H3></A><PRE>\n  Command: @alfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Alfail\n \n  Sets the action to be taken by an object when someone tries to leave it\n  but fails because the player fails the object's leave lock.\n \n  The leave lock only affects the 'leave' command and its aliases (set via\n  the @ealias command), it does not affect going home, using an exit in the\n  location, or teleporting out.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @alfail box = :rattles around as %n tries to escape.\n  \n  See Also: @aleave, @lalias, @leave, @lfail, @oleave, @olfail, leave\n  \n</PRE>\n<A HREF=\"#@aleave\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@alias\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@alias\"><H3>@alias</H3></A><PRE>\n  Command: @alias[/&lt;switch&gt;] &lt;player&gt; = &lt;name&gt;\n  Attribute: Alias\n \n  Provides an alternate name by which the player is known.  The alternate\n  name is only used for players when referenced as '*&lt;name&gt;' or by commands\n  that only take player names (such as page or @stats).  You may not set\n  an alias on any other object type.\n \n  When setting an alias, the alias is checked to see that it is both a legal\n  player name and not already in use.  Only if both checks succeed is the\n  alias set.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  See Also: @name, @protect, listprotection()\n  \n</PRE>\n<A HREF=\"#@alfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@amhear\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@amhear\"><H3>@amhear</H3></A><PRE>\n  Command: @amhear[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Amhear\n \n  Sets the actions to be taken after the object hears a string that matches\n  the pattern in the Listen attribute which was produced by the object\n  itself.\n  Messages that are produced by anything other than the object itself are\n  ignored.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @amhear listener = &quot;Wait a minute.  I said the trigger word!\n  \n  See Also: @aahear, @ahear, @listen\n  \n</PRE>\n<A HREF=\"#@alias\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@amove\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@amove\"><H3>@amove</H3></A><PRE>\n  Command: @amove[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Amove\n \n  Sets the action to be taken by an object whenever it moves from one \n  location to another, whether by using an exit, entering or leaving an\n  object, teleporting, or going home.\n \n  This attribute is meaningful for players, and things and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @amove car = @vz me=[extract(%vz,1,19)] [loc(me)]\n  \n  See Also: @move, @omove\n  \n</PRE>\n<A HREF=\"#@amhear\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ansiname\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ansiname\"><H3>@ansiname</H3></A><PRE>\n  Command: @ansiname[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: AnsiName\n  \n  This sets the ansi codes for the particular object.  As long as that object\n  is allowed to have ansi codes (individually or globally) then whatever\n  color codes you put in @ansiname will be the color of the name of the\n  object.  \n  \n  This only will effect looking, inventory, and contents.  \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Example: \n    &gt; @ansiname object=hr\n    Set.\n  \n  Note:  If the object is @toggled with EXTANSI, then ansiname can hold\n         literal ansicodes.  Check help on @extansi for this.  \n  \n  See Also: @name, @extansi, @caption, ANSINAME, ansi(), EXTANSI TOGGLE, \n            @titlecaption\n\n</PRE>\n<A HREF=\"#@amove\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@apay\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@apay\"><H3>@apay</H3></A><PRE>\n  Command: @apay[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Apay\n \n  Sets the actions to be taken after the object is given the number of coins\n  specified in its Cost attribute.  If the giver tries to give more than that\n  number of coins, the excess is refunded, and if less than the necessary\n  amount is given then it is all given back and a snide message is sent to\n  the giver.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @apay Coke machine = @clone Can of Coke; :drops a can on the\n                                floor.\n  \n  See Also: give, @cost, @opay, @pay\n  \n</PRE>\n<A HREF=\"#@ansiname\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@arfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@arfail\"><H3>@arfail</H3></A><PRE>\n  Command: @arfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Arfail\n \n  Sets the action to be taken by an object when someone tries to give it\n  something that fails its give lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @arfail merchant = &quot;I don't buy such junk.  Begone!;\n                              @tel %#=cheater_exit\n  \n  See Also: give, @agfail, @gfail, @ogfail, @orfail, @rfail, @lock\n  \n</PRE>\n<A HREF=\"#@apay\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@asfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@asfail\"><H3>@asfail</H3></A><PRE>\n  Command: @asfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Asfail\n  \n  Sets the action to be taken when someone fails to pass the SpeechLock\n  on a room set AUDITORIUM.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @asfail here = @pemit %#=I warned you no talking!;@tel %#=home\n  \n  See Also: @sfail, @lock, AUDITORIUM\n  \n</PRE>\n<A HREF=\"#@arfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@assert\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@assert\"><H3>@assert</H3></A><PRE>\n  Command: @assert &lt;value&gt; [=&lt;command(s)&gt;]\n  \n  The @assert command is used to optionally break out of any processing of\n  commands.  The possible values to pass to it are zero (0) or non-zero\n  (which is any number but zero (0)...).  If a non-zero is passed to this \n  command, then it treats it as a NOOP and continues processing as if nothing \n  occurred.  However, if a zero number is passed to this command.  The \n  processing of the command stops there and no further processing is done.\n  \n  Available Switches:\n    /queued -- process the &lt;commands(s)&gt; by queuing them (default).\n    /inline -- process the &lt;commands(s)&gt; inline and do not queue them.\n  \n  This works opposite of @break.\n  \n  Example:\n    &gt; @create obj\n    &gt; @set obj=!halt inherit\n    &gt; @va obj=$test *:@pemit %#=Before assert;@assert %0;@pemit %#=After assert\n    &gt; test 1\n      Before assert\n      After assert\n    &gt; test 0\n      Before assert\n  \n  See Also: $-COMMAND, @@, @break, @skip\n\n</PRE>\n<A HREF=\"#@asfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@asuccess\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@asuccess\"><H3>@asuccess</H3></A><PRE>\n  Command: @asuccess[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Asucc\n \n  Sets the actions to be taken by an object when someone successfully picks\n  it up (because they passed the lock), by an exit when someone passes\n  through it, or when someone looks at a room and passes the room's lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @asucc kitten = :climbs up your sleeve and nuzzles your face.\n  \n  See Also: @osucc, @success, SUCCESS\n  \n</PRE>\n<A HREF=\"#@assert\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@atfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@atfail\"><H3>@atfail</H3></A><PRE>\n  Command: @atfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Atfail\n \n  Sets the action to be taken by an object when someone tries to teleport\n  there but fails.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @atfail here = @page [owner(me)]=%N tried to teleport here.\n  \n  See Also: @teleport, @tfail, @otfail, @lock\n  \n</PRE>\n<A HREF=\"#@asuccess\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@atofail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@atofail\"><H3>@atofail</H3></A><PRE>\n  Command: @atofail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Atofail\n  \n  Sets the action to be taken by an object when someone tries to teleport\n  out from it but fails.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:   @atofail here= @page [owner(me)]=%n tried to teleport out.\n  \n  See Also: @teleport, @tofail, @otofail, @lock\n  \n</PRE>\n<A HREF=\"#@atfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@atport\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@atport\"><H3>@atport</H3></A><PRE>\n  Command: @atport[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Atport\n \n  Sets the actions to be performed by object whenever it teleports.\n  The actions are performed after the object moves to its new location.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @atport me = &amp;TEL.COUNT me=add(v(TEL.COUNT),1)\n \n  See Also: @otport, @oxtport, @tport, @teleport\n  \n</PRE>\n<A HREF=\"#@atofail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@attach\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@attach\"><H3>@attach</H3></A><PRE>\n  Command: @include[/&lt;switch&gt;] &lt;object&gt;/&lt;attr&gt; [=&lt;arg1&gt;,&lt;arg2&gt;,...,&lt;argN&gt;]\n           @attach[/&lt;switch&gt;]  &lt;object&gt;/&lt;attr&gt; [=&lt;arg1&gt;,&lt;arg2&gt;,...,&lt;argN&gt;]\n  \n  Note:  @attach is an alias to @include/override.\n  \n  The @include command can only be issued in a queue.  Ergo, if it is to be \n  issued at the player command line, it must be queued first (like with @wait)\n  \n  The @include command will insert, at the location of the @include, any \n  commands that were stored in the specified attribute on the specified \n  object.  You must have control over the object and be able to see the\n  attribute to be able to fetch the information.  This passes all the standard\n  arguments (%0-%9) and can be overridden by arguments you pass to it.  After\n  the @included text, the %0-%9 variables will return to what it was prior\n  to the @include.\n  \n  This behaves similar to @trigger, except it will insert the commands in\n  order and not queue them up.\n  \n  @include honors @break/@assert.  You can have at most 10 @includes.  You\n  can only nest to 3 levels deep.\n  \n  @admin params includecnt and includenest handle @include's flexibility.\n  \n  The following switches exist for @include:\n    /command   - bypass the $command/^listen portion of the attribute.\n    /clearregs - clear the registers prior to calling included attribute.\n                 Note: this automatically sets the localize option.\n    /localize  - localizes the registers for the include duration.\n    /nobreak   - disregard @break/@assert inside the includes from outside.\n    /target    - Use the target as executor instead of executor of @include\n                 Note: You must control target to use this.\n    /override  - If any arguments are passed to @include to override the\n                 default, this will disable all default arguments.\n    \n  {see @include2 for examples}\n\n</PRE>\n<A HREF=\"#@atport\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@aufail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@aufail\"><H3>@aufail</H3></A><PRE>\n  Command: @aufail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Aufail\n \n  Sets the list of commands to be run when someone 'use's the object but\n  fails the object's use lock.  Note that the other functions controlled\n  by the use lock (paying, listening, and $-commands) do not trigger\n  Aufail.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aufail robot = &quot;I _told_ you to leave me alone; kill %n=100\n \n  See Also: @oufail, @ufail, @use\n  \n</PRE>\n<A HREF=\"#@attach\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ause\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ause\"><H3>@ause</H3></A><PRE>\n  Command: @ause[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Ause\n \n  Sets the actions to be taken when someone uses the object with the use\n  command.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ause grenade = :EXPLODES with a thundering roar; kill %n=100;\n                           @destroy me\n  See Also: use, @ouse, @use\n  \n</PRE>\n<A HREF=\"#@aufail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@away\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@away\"><H3>@away</H3></A><PRE>\n  Command: @away[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Away\n \n  This attribute is sent as a message to anyone who tries to page you when \n  you are not connected. %# is used for the person paging you and not you\n  yourself.\n \n  This attribute is only meaningful for players, and will never be\n  automatically referenced on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @away me = Hey, I'm not even connected.  So why are you paging me?\n  \n  See Also: @idle, @reject, page\n  \n</PRE>\n<A HREF=\"#@ause\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@break\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@break\"><H3>@break</H3></A><PRE>\n  Command: @break[/switch] &lt;value&gt; [=&lt;command(s)&gt;]\n  \n  The @break command is used to optionally break out of any processing of\n  commands.  The possible values to pass to it are zero (0) or non-zero\n  (which is any number but zero (0)...).  If a zero is passed to this command,\n  then it treats it as a NOOP and continues processing as if nothing occurred.\n  However, if a non-zero number is passed to this command.  The processing\n  of the command stops there and no further processing is done.\n  \n  Available Switches:\n    /queued -- process the &lt;commands(s)&gt; by queuing them (default).\n    /inline -- process the &lt;commands(s)&gt; inline and do not queue them.\n  \n  Example:\n    &gt; @create obj\n    &gt; @set obj=!halt inherit\n    &gt; @va obj=$testme *:@pemit %#=Before break;@break %0;@pemit %#=After break\n    &gt; testme 0\n      Before break\n      After break\n    &gt; testme 1\n      Before break\n  \n  See Also: $-COMMAND, @@, @assert, @skip\n  \n</PRE>\n<A HREF=\"#@away\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@caption\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@caption\"><H3>@caption</H3></A><PRE>\n  Command: @caption[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: Caption\n  \n  This attribute sets up a caption that is used when a player is looked at.\n  This 'caption' is appended to their name.  You may set a large caption,\n  but only the first 40 characters will be used.  ANSI is also stripped.\n  This is only used for players and is ignored for every other data type.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  Example: \n    &gt; lo me\n    Tinyplayer(#123Pc)\n    You see nothing special.\n    &gt; @caption me=the silly one.\n    &gt; lo me\n    Tinyplayer(#123Pc), the silly one.\n    You see nothing special.\n    &gt; @set me=myopic\n    &gt; lo me\n    Tinyplayer, the silly one.\n    You see nothing special.\n  \n  See Also: @ansiname, @extansi, @name, @titlecaption\n\n</PRE>\n<A HREF=\"#@break\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@channel\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@channel\"><H3>@channel</H3></A><PRE>\n  Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The built in channel system that RhostMUSH has is a simple design\n  based off standard MUSE com systems.  The format for each is\n  as follows:\n  \n       +chan[nel] +channel-name  (add yourself to a channel)\n       +chan[nel] -channel-name  (remove yourself from a channel)\n       +chan[nel]                (display all your channels)\n       +com channel=who          (see who is on a given channel)\n       +com channel=message      ('talk' on a given channel)\n  \n  (help channel2 to continue)\n\n</PRE>\n<A HREF=\"#@caption\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@channel2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@channel2\"><H3>@channel2</H3></A><PRE>\n  Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The channel system is case sensitive and does recognize various\n  formatting by the following special cases.\n  \n       :     this poses a message on the channel.\n       ;     this possessive poses on the channel.\n       &quot;     this speaks on the channel.\n  \n          Syntax:  +com channel=[format]message\n          Example: +com channel=:message (poses on the channel)\n  \n  All channels cost money (currently 5 gold a pop) except for\n  'sting' (a flame-type channel for insults) and 'public' for\n  general discussions.  Please note that any insults slung on\n  sting REMAIN on sting.  This will be enforced. \n  \n</PRE>\n<A HREF=\"#@channel\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@charges\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@charges\"><H3>@charges</H3></A><PRE>\n  Command: @charges[/&lt;switch&gt;] &lt;object&gt; = &lt;count&gt;\n  Attribute: Charges\n \n  This attribute allows you to limit the number of times an object can be\n  used.  If there is a charges attribute it is decremented each time an\n  action on the object is triggered.  Once it reaches zero, normal triggering\n  stops and the Runout attribute (if one is present) is run instead.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @charges Fireball wand = 5\n  \n  See Also: @runout\n  \n</PRE>\n<A HREF=\"#@channel2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@chown\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@chown\"><H3>@chown</H3></A><PRE>\n  Command: @chown &lt;object&gt;[=&lt;player&gt;]\n           @chown &lt;object&gt;/&lt;attr&gt;[=&lt;player&gt;]\n  The first form changes the ownership of &lt;object&gt; to &lt;player&gt; (default is\n  to yourself).  Objects may be things, rooms or exits. To chown things, you\n  have to be carrying the thing. For rooms or exits, you have to be in the\n  room. Objects must have the CHOWN_OK flag set before they may be @chowned.\n  In a room, the command used must be @chown here = &lt;name&gt;, and for an object,\n  you must be very specific.\n \n  The second form changes the ownership of the indicated attribute on &lt;object&gt;\n  to &lt;player&gt; (default is the owner of the object).  You may only @chown\n  unlocked attributes.  You may @chown unlocked attributes on objects that\n  you own to yourself, and you may also @chown attributes that you own on\n  objects owned by others to the owner of the object.\n \n  When an object is @chowned, all unlocked attributes on the object are\n  automatically @chowned as well, locked attributes remain owned by their\n  original owners.\n \n  The HALTED flag is automatically set on the new copy of the object.\n  Players can't be @chowned; they always own themselves. \n  \n  See Also: @lock, @Unlock, CHOWN_OK, ATTRIBUTE OWNERSHIP\n  \n</PRE>\n<A HREF=\"#@charges\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@clone\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@clone\"><H3>@clone</H3></A><PRE>\n  Command: @clone[/&lt;switches&gt;] &lt;object&gt;[=&lt;newname/cost&gt;]\n \n  Creates an exact duplicate of &lt;object&gt; that is owned by you and (for things\n  and exits) puts it in your current location.  You may have the object put\n  in your inventory (or your exitlist in the case of cloning exits) by using\n  the /inventory switch.\n \n  You may clone your own objects, plus VISUAL objects owned by others.\n  The INHERIT and ROYALTY bits of the (new) object are cleared when the object\n  is cloned.  If &lt;newname&gt; is specified, it is used as the name instead of\n  the original name.\n \n  If you clone a linked exit, an attempt is made to link the clone to the\n  same location.  Except when using the /inventory switch, you can only clone\n  exits when you own your current location.\n \n  If you clone a room with a drop-to, an attempt is made to link the drop-to\n  to the same location.\n \n  If the original object was owned by you, then the ACLONE attribute is run\n  in the new attribute, otherwise the new object is set HALTED.  Exits and\n  contents of cloned objects are not cloned.\n  \n{ 'help @clone2' for more }\n  \n</PRE>\n<A HREF=\"#@chown\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@clone2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@clone2\"><H3>@clone2</H3></A><PRE>\n  The following switches are available:\n     /cost       - Treat the argument after the = as the cost of the new\n                   object, not the name.\n     /inherit    - Don't reset the INHERIT bit on the new object.\n     /inventory  - Create the new object in your inventory (or your exitlist,\n                   in the case of cloning exits).\n     /location   - Create the new object in your location (default).\n     /parent     - Set the new object's parent to be the template object and\n                   don't copy the attributes.\n  \n  See Also: @create, @decompile, @destroy, VISUAL\n  \n</PRE>\n<A HREF=\"#@clone\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster\"><H3>@cluster</H3></A><PRE>\n  Command: @cluster[/&lt;switch&gt;] [[&lt;arguments&gt;][=&lt;values&gt;]]\n  \n  The @cluster command is used to 'cluster' or link together a set of 2 or\n  more dbref#'s into a single entity to be used and accessed by a set of\n  clustering commands and functions as the aforementioned single entity.\n  This is used to allow more flexability of data storage, better organization\n  and a way to allow better data handling of the database as a whole.\n  \n  For more help on what @cluster can do, please refer to the following\n  switches available.  Individidual help is available with \n  'help @cluster &lt;switch&gt;'\n  \n  Switch      Description                Switch        Description\n  ---------   -------------------------- -----------   -----------------------\n    /new    - start new cluster          /add        - add dbref# to a cluster\n    /del    - delete dbref# from cluster /clear      - purge cluster\n    /list   - list cluster specifics     /threshold  - set threshold limit\n    /action - set threshold action       /edit       - edit attr on cluster\n    /set    - set/unset attr on cluster  /repair     - repair cluster\n    /grep   - grep cluster for match     /reaction   - edit action on cluster\n    /cut    - 'cut' dbref# from cluster  /trigger    - trigger attr in cluster\n    /func   - Specify function action    /regexp     - use regexp pattern match\n    /wipe   - Wipe attrib(s) in cluster\n   \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@clone2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster action\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster action\"><H3>@cluster action</H3></A><PRE>\n  Command: @cluster/action &lt;cluster object&gt;=&lt;string&gt;\n           @cluster/action/func &lt;cluster object&gt;=&lt;string&gt;\n  \n  The action switch sets the action that will be executed on the cluster\n  once the threshhold value has been reached.  The threshhold value\n  is defined as the LOWEST attribute count on any item currently in\n  the cluster.  The action is only executed once every 10 seconds to\n  avoid recursive based attacks.\n  \n  The /func switch will set the FUNCTION action instead of normal action.\n  The function action has precedence over the normal action.\n  \n  Example:\n    &gt; @cluster/action #3683=@pemit [owner(me)]=Triggered!\n    Cluster action for cluster #3683 set to: @pemit [owner(me)]=Triggered!\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster action func\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster action func\"><H3>@cluster action func</H3></A><PRE>\n  Command: @cluster/action &lt;cluster object&gt;=&lt;string&gt;\n           @cluster/action/func &lt;cluster object&gt;=&lt;string&gt;\n  \n  The action switch sets the action that will be executed on the cluster\n  once the threshhold value has been reached.  The threshhold value\n  is defined as the LOWEST attribute count on any item currently in\n  the cluster.  The action is only executed once every 10 seconds to\n  avoid recursive based attacks.\n  \n  The /func switch will set the FUNCTION action instead of normal action.\n  The function action has precedence over the normal action.\n  \n  Example:\n    &gt; @cluster/action #3683=@pemit [owner(me)]=Triggered!\n    Cluster action for cluster #3683 set to: @pemit [owner(me)]=Triggered!\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster action\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster add\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster add\"><H3>@cluster add</H3></A><PRE>\n  Command: @cluster/add &lt;cluster&gt;=&lt;new object&gt;\n  \n  The add switch adds new objects to a pre-existing cluster.  The /add only \n  works on objects that do not currently belong to a cluster.  You can have\n  upwards to 600 or more objects in a single cluster at this time.\n  \n  Example:\n    &gt; @cluster/add notacluster=myobject\n    That object isn't a cluster.  Use @cluster/new to make one.\n    &gt; @cluster/add mycluster=myobject\n    Cluster object #123 has been added to #789\n   \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster action func\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster clear\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster clear\"><H3>@cluster clear</H3></A><PRE>\n  Command: @cluster/clear &lt;cluster object&gt;\n  \n  The clear switch removes clustering information from all objects in the\n  cluster, essentially 'clearing' the cluster in its entirety.  This only \n  removes the cluster related information and does not delete any attributes\n  or information on the cluster members themselves.\n  \n  Example:\n    &gt; @cluster/clear notacluster\n    That object isn't a cluster.  Use @cluster/new to make one.\n    &gt; @cluster/clear myclusterobject\n    Cluster removed with member #123.  A total of 1 objects de-clustered.\n  \n  Note: the total number of objects cleared in the cluster will be shown.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster add\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster cut\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster cut\"><H3>@cluster cut</H3></A><PRE>\n  Command: @cluster/cut &lt;cluster object&gt;\n  \n  The cut switch should only be used as an absolute last measure.  This\n  effectively forces the removal of the target item from the cluster in\n  its entirety.  Once you cut an object from the cluster, you should \n  always use the repair switch on the remaining items in the cluster.\n  This does NOT do any sanitizing checks.\n  \n  Example:\n    &gt; @cluster/cut #3683 \n    Dbref #3683 has been forcefully declustered.\n    It is strongly recommended that you @cluster/repair the remaining items \n             in the cluster.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster clear\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster del\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster del\"><H3>@cluster del</H3></A><PRE>\n  Command: @cluster/del &lt;cluster object&gt;\n  \n  The del switch removes an item from a cluster.  This only removes the \n  cluster attributes and configuration from the object, not the actual data\n  on the object itself.  It may be re-added into the cluster at a later time\n  and without any worry of loss of data.  If this is the only object in the\n  cluster, then the cluster is identified as being removed in its entirety.\n  \n  Example:\n    &gt; @cluster/del notacluster\n    That object isn't a cluster.  Use @cluster/new to make one.\n    &gt; @cluster/del myclusterobject\n    Cluster object #123 has been deleted.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster cut\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster edit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster edit\"><H3>@cluster edit</H3></A><PRE>\n  Command: @cluster/edit &lt;cluster object&gt;/&lt;wild-attr&gt; = &lt;search&gt;,&lt;replace&gt;\n           @cluster/edit &lt;cluster object&gt;/&lt;wild-attr&gt; = ^,&lt;text&gt;\n           @cluster/edit &lt;cluster object&gt;/&lt;wild-attr&gt; = $,&lt;text&gt;\n  \n  This works like @edit except for the entire cluster.  It essentially edits\n  all matching instances of every wild-attr on the cluster.\n  \n  Example:\n    &gt; @cluster/edit #3683/test36??=boo,foo\n    Cluster editing: (multiple)\n    ====[Edit]---&gt; #3683\n    Set - TEST3611: foo\n    Set - TEST3614: foo\n    ====[Edit]---&gt; #3672\n    Set - TEST3610: foo\n    Set - TEST3613: foo\n    Set - TEST3616: foo\n    ====[Edit]---&gt; #3667\n    Set - TEST3612: foo\n    Set - TEST3615: foo\n    Cluster editing complete.\n    \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster del\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster func\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster func\"><H3>@cluster func</H3></A><PRE>\n  Command: @cluster/action &lt;cluster object&gt;=&lt;string&gt;\n           @cluster/action/func &lt;cluster object&gt;=&lt;string&gt;\n  \n  The action switch sets the action that will be executed on the cluster\n  once the threshhold value has been reached.  The threshhold value\n  is defined as the LOWEST attribute count on any item currently in\n  the cluster.  The action is only executed once every 10 seconds to\n  avoid recursive based attacks.\n  \n  The /func switch will set the FUNCTION action instead of normal action.\n  The function action has precedence over the normal action.\n  \n  Example:\n    &gt; @cluster/action #3683=@pemit [owner(me)]=Triggered!\n    Cluster action for cluster #3683 set to: @pemit [owner(me)]=Triggered!\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster edit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster func action\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster func action\"><H3>@cluster func action</H3></A><PRE>\n  Command: @cluster/action &lt;cluster object&gt;=&lt;string&gt;\n           @cluster/action/func &lt;cluster object&gt;=&lt;string&gt;\n  \n  The action switch sets the action that will be executed on the cluster\n  once the threshhold value has been reached.  The threshhold value\n  is defined as the LOWEST attribute count on any item currently in\n  the cluster.  The action is only executed once every 10 seconds to\n  avoid recursive based attacks.\n  \n  The /func switch will set the FUNCTION action instead of normal action.\n  The function action has precedence over the normal action.\n  \n  Example:\n    &gt; @cluster/action #3683=@pemit [owner(me)]=Triggered!\n    Cluster action for cluster #3683 set to: @pemit [owner(me)]=Triggered!\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster func\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster grep\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster grep\"><H3>@cluster grep</H3></A><PRE>\n  Command: @cluster/grep &lt;cluster object&gt;=&lt;attribute(s)&gt;,&lt;string&gt;\n           @cluster/grep/regexp &lt;cluster object&gt;=&lt;attribute(s)&gt;,&lt;string&gt;\n  \n  This works like @grep but is intended for the entirety of the cluster.\n  This essentially searches for any match (partial or wildcarded) on \n  any attribute on the cluster.\n  \n  You may specify the optional regexp switch to use regular expression \n  matching instead of the default matching.\n  \n  Example: \n    &gt; @cluster/grep #3683=*,*foo*\n    Cluster grep: (multiple)\n    ====[Grep]---&gt; #3683\n    TEST3611 TEST3614\n    ====[Grep]---&gt; #3672\n    TEST3610 TEST3613 TEST3616\n    ====[Grep]---&gt; #3667\n    TEST3612 TEST3615\n    Cluster grep completed.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster func action\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster list\"><H3>@cluster list</H3></A><PRE>\n  Command: @cluster/list &lt;cluster object&gt;\n  \n  The list switch lists the various parameters for the cluster specified.\n  Options shown are total members in cluster, the threshold, threshold\n  action, total attributes and attribute statistics.\n  \n  Example:\n    &gt; @cluster/list #3683\n    Showing cluster statistics for cluster with member #3683.\n    3 total members: #3683 #3672 #3667\n    969 total attributes  [Highest: 324,  Lowest: 322,  Average: 323].\n    Threshold has not been set.\n    Threshold action has not been set.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster grep\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster new\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster new\"><H3>@cluster new</H3></A><PRE>\n  Command: @cluster/new &lt;object&gt;\n  \n  The new switch, takes the specified object and assigns it as a cluster \n  object.  Once defined as a cluster, new objects may be /added to the cluster\n  or /deleted to the cluster.  A cluster should never become corrupted, but if\n  there is some inconsistancy, you may /repair it without worry of data loss.\n  \n  Example:\n    &gt; @cluster/new existing-cluster\n    That object is already a cluster.\n    &gt; @cluster/new myobject\n    Cluster for object #123 has been created.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster reaction\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster reaction\"><H3>@cluster reaction</H3></A><PRE>\n  Command: @cluster/reaction &lt;cluster object&gt;=&lt;old string&gt;,&lt;new string&gt;\n  \n  The reaction switch allows you to edit the existing action attribute.\n  The action attribute for the cluster is an internal attribute and\n  requires this special switch to edit it.\n  \n  Example:\n    &gt; @cluster/reaction #3683=Triggered,Woot\n    Cluster ActionList: @pemit [owner(me)]=Woot!\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster new\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster repair\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster repair\"><H3>@cluster repair</H3></A><PRE>\n  Command: @cluster/repair &lt;cluster object&gt;\n  \n  The repair switch will attempt to repair any damaged cluster by resetting\n  the cluster specific values on the cluster.  Corruption shouldn't happen\n  but outside influences (like running out of disk quota) could cause some\n  unexpected situations.\n  \n  Example:\n    &gt; @cluster/repair #3683 \n    Step #1: Walking object cluster membership.\n    Step #2: Sanitizing membership lists.\n    Step #3: Sanitizing thresholds and action lists.\n    Cluster list is error free.  Nothing to repair.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster reaction\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster set\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster set\"><H3>@cluster set</H3></A><PRE>\n  Command: @cluster/set &lt;cluster object&gt;=[!]&lt;flag&gt; [[!]&lt;flag&gt; [!]&lt;flag&gt; ...]\n           @cluster/set &lt;cluster object&gt;=&lt;attribute&gt;:&lt;value&gt;\n           @cluster/set &lt;cluster object&gt;=&lt;attribute&gt;:_&lt;fromobj&gt;/&lt;fromattr&gt;\n           @cluster/set &lt;cluster object&gt;/&lt;attr&gt;=[!]&lt;attrflag&gt;\n  Synonym: &gt;&lt;attribute&gt; &lt;object in cluster&gt;[=&lt;value&gt;]\n  \n  This works like @set except with the entire cluster.  It automatically \n  identifies what object in the cluster contains the attribute and modifies\n  that attribute, otherwise, it will smartly pick an object in the cluster\n  for the new attribute.  If setting flags, it applies the flags to every\n  item in the cluster.\n  \n  Example:\n    &gt; @cluster/set #3683=inherit\n    Cluster: Flags (inherit) set on cluster members #3683 #3672 #3667.\n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster repair\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster threshhold\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster threshhold\"><H3>@cluster threshhold</H3></A><PRE>\n  Command: @cluster/threshhold &lt;cluster object&gt;=&lt;value&gt;\n  \n  The threshhold switch sets the threshhold value that will let the\n  cluster know when the threshhold action is to be executed.  The\n  threshhold is defined as the LOWEST attribute count on any item\n  currently in the cluster.  To avoid recursion based attacks, the\n  threshold is only triggered once every 10 seconds regardless of\n  the threshhold being reached or not.\n   \n  Example:\n    &gt; @cluster/threshhold #3683=500\n    Cluster threshold for cluster #3683 set to: 500 \n  \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster set\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster trigger\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster trigger\"><H3>@cluster trigger</H3></A><PRE>\n  Command: @cluster/trigger &lt;cluster object&gt;/&lt;attr&gt; [=&lt;param&gt; [, &lt;param&gt;]... ]\n  \n  This switch works exactly like the normal @trigger command except it scans\n  the entirety of the cluster for the matching attribute.  This essentially \n  triggers actions on the matching attribute and allows passing arguments \n  (params) to the attribute as arguments %0 to %9 (just like @trigger).\n  \n  Example:\n    &gt; @cluster/set #3683=xxx:@emit Whee - %%0  (remember, @cluster/set  evals)\n    Set.\n    &gt; @cluster/trigger #3683/xxx=abcd  \n    Whee - abcd\n   \n  See Also:  clusters, cluster functions, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster threshhold\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cluster wipe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cluster wipe\"><H3>@cluster wipe</H3></A><PRE>\n  Command: @cluster/wipe &lt;object&gt;[/&lt;wildattr&gt;]\n           @cluster/wipe/regexp &lt;object&gt;[/&lt;wildattr&gt;]\n  \n  The wipe switch, with an optional regexp switch addon, will wipe all matching\n  attributes from every item in the cluster.  This works exactly like @wipe\n  except is performed on the entirity of the cluster.\n  \n  Example:\n    &gt; @cluster/wipe #1234/va*\n    Cluster wipe: 24 total objects, 0 no-match, 0 safe, 4 attributes wiped.\n    &gt; @cluster/wipe/regexp #1234/^..$\n    Cluster wipe: 24 total objects, 0 no-match, 0 safe, 22 attributes wiped.\n  \n  See Also: clusters, cluster functinos, cluster commands, &gt;\n\n</PRE>\n<A HREF=\"#@cluster trigger\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@conformat\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@conformat\"><H3>@conformat</H3></A><PRE>\n  Command: @conformat[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: ConFormat\n  \n  This attribute allows a user to define a user-presentable way for contents.\n  This replaces the normal 'Contents:' and 'Carrying:' lists.  The variable\n  is evaluated as it would a description or other similiar message.\n  \n  Examples:\n    &gt; look\n    A big Room\n    You see before you a big room.\n    Contents:\n    The Goat\n    &gt; @conformat here=Room Contents:[iter(lcon(me),%r---&gt; [name(##)])]\n    &gt; look\n    A big Room\n    You see before you a big room.\n    Room Contents:\n    ---&gt; The Goat\n   \n  The mush has to be configured to enable this to work.  '@list options'\n  \n  See Also: @exitformat, @nameformat\n  \n</PRE>\n<A HREF=\"#@cluster wipe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cost\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cost\"><H3>@cost</H3></A><PRE>\n  Command: @cost[/&lt;switch&gt;] &lt;object&gt; = &lt;amount&gt;\n  Attribute: Cost\n \n  Sets the number of coins that need to be given to an object to trigger the\n  Pay, Opay, and Apay attributes.  If the object is given more than this\n  amount, the excess is returned to the giver, while if less than this amount\n  is given the entire amount is returned, a snide message is sent to the\n  giver, and the Apay, Opay, and Pay attributes are not used.\n \n  This attribute is only meaningful for things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @cost Coke machine = 25\n  \n  See Also: give, @apay, @opay, @pay\n  \n</PRE>\n<A HREF=\"#@conformat\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@cpattr\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@cpattr\"><H3>@CPATTR</H3></A><PRE>\n  Command: @cpattr[/switch] &lt;obj&gt;/&lt;old&gt;=&lt;obj&gt;[/&lt;new1&gt;/&lt;new2/...][,&lt;obj2&gt;...]\n  \n  This command copies attributes from one object to a destination object(s).\n  You can only copy from objects and attributes you control and only onto\n  objects and attributes you control.  You have to specify a valid attribute\n  to copy as well.  There are switches available for @cpattr.  These are:\n      /clear  - this erases the attribute on the originating object if\n                a copy was successful.\n  \n  You may specify the same object if you wish to move attributes on the same\n  object.  You may specify wildcards for attributes.\n  \n{ 'help cpattr2' for examples on all combinations and explanations }\n  \n</PRE>\n<A HREF=\"#@cost\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@create\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@create\"><H3>@create</H3></A><PRE>\n  Command: @create &lt;name&gt; [=&lt;cost&gt;]\n  Creates a thing with the specified name.  Creation costs either &lt;cost&gt;\n  or 10 coins, whichever is greater. The value of a thing is proportional\n  to its cost, specifically, value=(cost/5)-1.  The value may not be greater\n  than 100, values that would be greater than 100 are rounded down to 100.\n  \n  See Also: @destroy, TYPES OF OBJECTS\n  \n</PRE>\n<A HREF=\"#@cpattr\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@decompile\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@decompile\"><H3>@decompile</H3></A><PRE>\n  Command: @decompile[/&lt;switch&gt;] &lt;thing&gt;[/&lt;wild-attrib&gt;] [=&lt;newname&gt;]\n           @decompile/tf[/&lt;switch&gt;] &lt;thing&gt;[/wild-attrib&gt;] [=&lt;new prefix&gt;]\n  \n  Dumps the sequence of commands you would have to type to clone &lt;thing&gt;.\n  This is handy for saving your objects in a text file in case the MUSH dies\n  a horrible death, or for moving your pride-and-joy creation from one MUSH\n  to another.  @decompile works on all object types.\n  If you specify &lt;newname&gt;, then the commands emitted will set attributes,\n  locks, and flags on an object named &lt;newname&gt; and will omit the command\n  to create the object.  You may also specify an optional wild-carded\n  attribute.  The following switches exist:\n      /all     - Show everything (this is the default)\n      /attrib  - Show just attributes\n      /flags   - Show just flags\n      /regexp  - use regular expression matching\n      /tree    - Examine based on Penn trees using '`' as a separator.\n      /tf      - allows prefix formatting for clients.\n  \n  Example: @decompile MyObject/attr*\n           @decompile MyObject\n           @decompile MyObject/attr*=NewName\n           @decompile MyObject=Newname\n  \n  Note:  The /tf switch changes the syntax slightly.\n         1. When in use, the /tf switch changes what is normally &lt;newname&gt; \n            after the '=' into a new prefix for formatting.\n         2. When in use, the /tf switch will ALWAYS display the dbref# of the\n            target object.  There is no way to override this value when using\n            the /tf switch.\n         3. If the TFPREFIX attribute exists on the ENACTOR of the @decompile,\n            it will use that value (unevaluated) instead of the default.\n         4. The default prefix for the /tf switch is: 'FugueEdit &gt; '\n  \n  See Also: examine, look\n  \n</PRE>\n<A HREF=\"#@create\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@describe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@describe\"><H3>@describe</H3></A><PRE>\n  Command: @describe[/&lt;switch&gt;] &lt;object&gt; = &lt;description&gt;\n  Attribute: Desc\n \n  Sets the description for &lt;object&gt;, which others see when they look at the\n  object.  Giving all your objects, rooms, and exits good descriptions is\n  considered to be good building practice.\n \n  Function references and %-substitutions are allowed in descriptions, and\n  are evaluated when someone looks at the object.  In function references,\n  'me' refers to the object being looked at, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the looker.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples:\n    &lt;object&gt; @desc vase = You see a delicate Ming vase.\n    &lt;exit&gt;   @desc elevator = There is an elevator to the east.\n  \n  See Also: look, @adescribe, @odescribe, listen, @slisten, touch, @stouch, \n            taste, @staste, smell, @ssmell\n  \n</PRE>\n<A HREF=\"#@decompile\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@destroy\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@destroy\"><H3>@destroy</H3></A><PRE>\n  Command: @destroy[/&lt;switches&gt;] &lt;object&gt;\n  This command destroys &lt;object&gt; and refunds its cost of creation to its\n  owner.  You must own &lt;object&gt; in order to @destroy it, unless its\n  DESTROY_OK flag is set, in which case anyone holding it may @destroy it.\n  Rooms, exits, and objects may be destroyed, although the actual\n  destruction of rooms is delayed for up to ten minutes and the BYEROOM flag\n  is set on the victim room.  Clearing the BYEROOM flag on the room spares it\n  from destruction.\n \n  The @destroy command will not destroy objects with the SAFE flag set unless\n  the /override switch is specified.  The DESTROY_OK flag overrides the\n  protection given by the SAFE flag.\n \n  The following switches are available:\n    /override  - Negate protection offered by the SAFE flag.\n    /instant   - For compatibility only.  This switch does nothing else.\n  \n  Do note, you can NOT destroy anything set INDESTRUCTIBLE.\n  \n  See Also: DESTROY_OK, SAFE, BYEROOM\n  \n</PRE>\n<A HREF=\"#@describe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@dfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@dfail\"><H3>@dfail</H3></A><PRE>\n  Command: @dfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Dfail\n \n  Sets the message that a player sees when he tries to drop the object but\n  fails because he didn't pass the object's drop lock.\n \n  Function references and %-substitutions are allowed in drop failure\n  messages, and are evaluated when someone drops the object.  In function\n  references, 'me' refers to the object being dropped, while %-substitutions\n  that refer to the enactor (such as %n, %#, %p, etc) refer to the dropper.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @dfail sword = The sword has welded itself to your hand.\n  \n  See Also: drop, @adfail, @odfail, @lock\n  \n</PRE>\n<A HREF=\"#@destroy\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@dig\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@dig\"><H3>@dig</H3></A><PRE>\n  Command: @dig[/&lt;switches&gt;] &lt;name&gt; [= &lt;exitlist&gt; [, &lt;exitlist&gt;] ]\n  Creates a new room with the specified name and displays its number. This \n  command costs 10 coins. If the [= &lt;exitlist&gt;] option is used, an exit will\n  be opened from the current room to the new room automatically.  If the\n  second &lt;exitlist&gt; option (after the comma) is specified, an exit from the\n  new room back to the current room with the specified [Exits] name is\n  opened.  Either exit creation may fail if you do not have sufficient\n  rights to the current room to open or link the new exit.\n  Example: The command\n \n     @dig Kitchen = Kitchen;k;north;n,south;s\n \n  will dig a room called Kitchen, and open an exit called 'Kitchen' in your\n  current room.  The ; symbol means that you may enter the exit by typing\n  'k', 'north' or 'n' also.  This command also opens the exit 'south;s' from\n  'Kitchen' back to where you are.  Only the first Exit name is displayed in\n  the Obvious exits list.\n \n  If you specify the /teleport switch, then you are @teleported to the\n  room after it is created and any exits are opened.\n \n  See Also: @destroy, @link, @open, LINKING, TYPES OF OBJECTS\n  \n</PRE>\n<A HREF=\"#@dfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@doing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@doing\"><H3>@doing</H3></A><PRE>\n  Command: @doing[/&lt;switches&gt;] [&lt;message&gt;]\n  Sets your doing message, which appears after your name in the WHO report.\n  The following switches are available:\n     /message - Sets your Doing string in the WHO report. (default)\n     /poll    - Displays the current Doing poll from the WHO report.\n     /unique  - Sets your doing in your ACTIVE window only.\n  \n  See Also: WHO, DOING\n  \n</PRE>\n<A HREF=\"#@dig\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@dolist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@dolist\"><H3>@dolist</H3></A><PRE>\n  Command: @dolist[/&lt;switch&gt;] [&lt;delimiter&gt;|&lt;pid&gt;] &lt;list&gt;=&lt;action&gt;\n  \n  &lt;list&gt; is a list of strings, which can be object numbers, attributes, or\n  arbitrary words.  &lt;action&gt; is a command to perform once for each item in\n  &lt;list&gt;, replacing the special symbol ## with the corresponding item from\n  &lt;list&gt;. By default, @dolist considers each item in &lt;list&gt; to be separated\n  with spaces. If you specify the /delimit switch, then each item is\n  considered to be separated by &lt;delimiter&gt;. &lt;delimiter&gt; must be a single\n  character.  The special symbol '#@' can be used to return the positional\n  match of the argument currently being processed.  The /notify switch is\n  used to automatically notify the object after the last item in the @dolist\n  is processed.  Great for timed events.\n  \n  The /inline switch may use %d0 to %d9 for ## substitution.  %dL for outer.   \n  \n  Without /inline, it will not handle %d0-%d9.  The reason is the overhead\n  that this would cause would be insufficient for the rewards.  This will\n  hold true to anything that queues with @dolist/inline.  So @switch, @wait,\n  or similar will not be able to process the %d0-%d9.  Sorry for the \n  limitation.\n  \n  If present, &lt;switch&gt; can be any of:\n    /space     - (Default) List elements are separated by spaces.\n    /delimit   - List elements are separated by &lt;delimiter&gt;.\n    /notify    - Issues a @notify me after the end of the @dolist\n    /pid       - Issues a @notify/pid me=&lt;pid&gt; after the end of the @dolist.\n    /inline    - Execute @dolist 'in-line' and do not queue.\n    /clearregs - Clear the registers before going inside @dolist.  This \n                 assumes local registers. (/inline required)\n    /localize  - Make any changes to registers local (/inline required)\n    /nobreak   - All @break/@assert in @dolist ignored in outside processing.\n                 (/inline required)\n  \n{ help @dolist2 for examples}\n  \n</PRE>\n<A HREF=\"#@doing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@dolist2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@dolist2 \"><H3>@dolist2 </H3></A><PRE>\n  Command: @dolist[/&lt;switch&gt;] [&lt;delimiter&gt;] &lt;list&gt;=&lt;action&gt;  \n  \n  This command is particularly handy with lcon() and lexits(). A few examples:\n \n    @dolist [lcon(here)] = &quot;[name(##)](##)\n    @dolist [lcon(here)] = @switch [get(##/last)]=*1990*,&quot;[name(##)]\n    @va me = va vb vc\n    @dolist [get(me/va)] = @emit [get(me/##)]\n    @dolist [get(me/va)] = @emit Argument ## is position #@\n    @dolist Frodo Bilbo Gandalf = page ## = HELP!!!!  I've fallen into a pit.\n    @dolist/delimit , {Frodo, Bilbo Baggins, Gandalf} = page ## = HELP!!!!\n    @wait me=@emit Zapping Finished;@dolist/notify bob joe=@emit Zapped ##\n  \n  See Also: iter(), parse(), list()\n  \n</PRE>\n<A HREF=\"#@dolist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@door\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@door\"><H3>@door</H3></A><PRE>\n  Command: @door \n  Switches: STATUS, OPEN, CLOSED, LIST, PUSH, KICK\n  \n  @door provides control over arbitraty TCP connections that are opened from\n  inside the mush to some external program or service.\n  \n  In order for a door to be available a C-code module must first be loaded by\n  an Admin(*), or compiled statically into the mush server.\n  \n  To see what doors exist on your system, type: @door\n  \n  (*) Not available in RhostMUSH 3.2.4p15 and earlier.\n  \n  See 'DOOR SYNTAX' on a quick listing of commands and what they do.\n  \n  See Also: DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, \n            DOOR_KICK, DOOR_WRITING, INTERNAL_DOORS, DOORED, DOOR SYNTAX\n  \n</PRE>\n<A HREF=\"#@dolist2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@drain\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@drain\"><H3>@drain</H3></A><PRE>\n  Command: @drain[&lt;/switch&gt;] &lt;object&gt;\n  Discards all commands waiting on the semaphore &lt;object&gt; and resets the\n  semaphore to its initial state.  Note, you can also use @halt/pid with\n  the PID process of the given semaphore.  \n  \n  Possible switches are:\n     /quiet   - omit message notification of any @draining\n  \n  See Also: @notify, @ps, SEMAPHORES\n  \n</PRE>\n<A HREF=\"#@door\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@drop\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@drop\"><H3>@drop</H3></A><PRE>\n  Command: @drop[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Drop\n \n  Sets the message that a player sees when he drops the object, or after he\n  goes through the exit.\n \n  Function references and %-substitutions are allowed in drop messages, and\n  are evaluated when someone drops the object.  In function references,\n  'me' refers to the object being dropped, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the dropper.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples: &lt;object&gt; @drop vase = You gently put down the delicate vase.\n            &lt;exit&gt;   @drop elevator = The elevator doors close behind you.\n  \n  See Also: drop, @adrop, @odrop, DROP-TO, EXITS\n  \n</PRE>\n<A HREF=\"#@drain\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ealias\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ealias\"><H3>@ealias</H3></A><PRE>\n  Command: @ealias[/&lt;switch&gt;] &lt;object&gt; = &lt;entrance-list&gt;\n  Attribute: Ealias\n \n  Sets up a set of alternate commands that may be used as synonyms for the\n  command 'enter &lt;object&gt;' when you are in the same location as the object.\n  The alternate commands are separated by semicolons just like in exit names.\n \n  Entry aliases are checked for after exitnames, built-in MUSH commands, and\n  leave aliases for the current location, but before $-commands.  If more than\n  one object has an entry alias that matches a player's command, the one on\n  the object that occurs first in the location contents list is used.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically looked at on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ealias car = get in car; car; climb in; go for a ride\n  \n  See Also: @lalias, enter, leave\n  \n</PRE>\n<A HREF=\"#@drop\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@edit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@edit\"><H3>@edit</H3></A><PRE>\n  Command: @edit[&lt;switch&gt;] &lt;object&gt;/&lt;wild-attr&gt; = &lt;search&gt;,&lt;replace&gt;\n           @edit[&lt;switch&gt;] &lt;object&gt;/&lt;wild-attr&gt; = ^,&lt;text&gt;\n           @edit[&lt;switch&gt;] &lt;object&gt;/&lt;wild-attr&gt; = $,&lt;text&gt;\n  This command edits the contents of one or more attributes of an object,\n  eliminating the need to retype a long attribute in order to make a simple\n  change.  In the first form, all occurrences of &lt;search&gt; in the specified\n  attribute of the named object are replaced with &lt;replace&gt;.  Use curly\n  braces ({ and }) around &lt;search&gt; or &lt;replace&gt; if they contain commas.\n  The second and third form prepend and append &lt;text&gt; to the selected\n  attributes, respectively.  Changes will be highlighted.  If you do not\n  wish the changes to be highlighted, please @toggle yourself with the\n  'NO_ANSI_EX' toggle. (syntax: @toggle me=no_ansi_ex).  \n  \n  The following switches exist for @edit:\n        /check     - perform 'check' of what @edit will do w/o editing.\n        /single    - perform edit on first match, but not rest.\n        /strict    - enforces ansi alignment for each char in original\n                     string and leaves unansified anything outside that.\n        /raw       - raw mode of the string.  Allows to edit ansi markup.\n   \n  If &lt;wild-attr&gt; contains wildcard characters, then all attributes that\n  match are edited.\n  \n  Example:\n    &gt; @va me=This are a test.\n      Set.\n    &gt; @edit me/va=are,is\n      Set - VA: This is a test\n  \n  See Also: edit(), editansi(), @mvattr, @cpattr\n  \n</PRE>\n<A HREF=\"#@ealias\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@efail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@efail\"><H3>@efail</H3></A><PRE>\n  Command: @efail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Efail\n \n  Sets the message that a player sees when he tries to enter the object but\n  fails because the object is not ENTER_OK or the player fails the\n  object's enter lock.\n \n  Function references and %-substitutions are allowed in efail messages, and\n  are evaluated when someone fails to enter the object.  In function\n  references, 'me' refers to the object that the enactor tried to enter, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc) refer to\n  the player who tried (and failed) to enter.\n \n  The enter lock only affects the 'enter' command and its aliases (set via\n  the @ealias command), it does not affect exits that lead to the object or\n  teleporting in.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @efail car = The car's door is locked.\n  \n  See Also: @aefail, @aenter, @ealias, @enter, @oefail, @oenter, enter,\n            ENTER_OK\n  \n</PRE>\n<A HREF=\"#@edit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@emit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@emit\"><H3>@emit</H3></A><PRE>\n  Command: @emit[/&lt;switches&gt;] &lt;message&gt;\n  Sends &lt;message&gt; to everyone in your current location without prefixing it by\n  your character name.  You can also send the message to everyone in the room\n  that contains the object you are inside with the /room switch.\n \n  The following switches are available:\n     /here   - Sends the message to everyone in the same location as you.\n     /room   - Sends the message to everyone in the room that contains the\n               object you are in.  Starting from your location, this switch\n               'leaves' objects until it reaches a room, and @emits the message\n               there.\n     /sub    - Substitute '##' in the string for the target's dbref#.  Note,\n               that iter(), parse() or any function that also handles ## will\n               handle it prior to @emit.\n     /noansi - Show the string literally and don't process ansi.  Only\n               useful with ZENTY_ANSI enabled (at compiletime).\n  \n  If both /here and /room switches are specified, the message is sent to both \n  places.  If neither is specified, /here is assumed.\n \n  Some MUSHes may restrict the use of this command.\n  \n  See Also: @femit, @oemit, @pemit, SPOOFING\n  \n</PRE>\n<A HREF=\"#@efail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@enter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@enter\"><H3>@enter</H3></A><PRE>\n  Command: @enter[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Enter\n \n  Sets the message that a player sees when entering an object or room,\n  whether by using an exit, the enter or leave commands, or by teleporting.\n \n  Function references and %-substitutions are allowed in enter messages, and\n  are evaluated when someone enters the object.  In function references,\n  'me' refers to the object being entered, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the player entering the\n  object.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @enter car = You climb into the car and buckle your seatbelt.\n  \n  See Also: enter, @aenter, @oenter, ENTER_OK\n  \n</PRE>\n<A HREF=\"#@emit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@entrances\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@entrances\"><H3>@entrances</H3></A><PRE>\n  Command: @entrances [[&lt;object&gt;][,&lt;low&gt;[,&lt;high&gt;]]]\n \n  Lists links from elsewhere to the specified object (default: your current\n  room).  For rooms, exits and drop-to's, leading to the room and players\n  and objects whose home is in the room are listed.  For players and objects,\n  lists exits leading to them.  Because this command is computationally\n  expensive, it costs 200 coins.  &lt;low&gt; and &lt;high&gt; can be used to indicate\n  where to start and stop the search, respectively.\n \n  Examples:\n    &gt; @entrances             &lt;- all links to here\n    &gt; @entrances object      &lt;- all links to object\n    &gt; @entrances ,100,200    &lt;- all links to here from #100 to #200\n    &gt; @entrances me,1000     &lt;- all links to me from #1000 and above.\n  \n  See Also: @link, @unlink\n  \n</PRE>\n<A HREF=\"#@enter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@eval\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@eval\"><H3>@eval</H3></A><PRE>\n  Command: @eval &lt;string&gt;\n  \n  This function forces the &lt;string&gt; into evaluation.  @eval, by itself,\n  does not return anything.  This is useful if you wish to use functions\n  (like sideeffects) to set up values and results but not have to use\n  a 'normal' command to issue it.\n  \n  Example:\n    &gt; @eval [pemit(me,test)]\n    test\n  \n  See Also: think, @emit, @pemit, pemit()\n  \n</PRE>\n<A HREF=\"#@entrances\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@exitformat\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@exitformat\"><H3>@exitformat</H3></A><PRE>\n  Command: @exitformat[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: ExitFormat\n  \n  This attribute allows a user to define a user-presentable way for exits.\n  This replaces the normal 'Obvious exits:'  listing.  The variable is\n  evaluated as it would a description or other similiar message.\n  \n  Examples:\n    &gt; look\n    A big Room\n    You see before you a big room.\n    Obvious exits:\n    Out &lt;O&gt;  Bedroom &lt;B&gt;\n    &gt; @exitformat here=Room Exits:[iter(lexits(me),%r#@. [name(##)])]\n    &gt; look\n    A big Room\n    You see before you a big room.\n    Room Exits:\n    1. Out &lt;O&gt;\n    2. Bedroom &lt;B&gt;\n  \n  The mush has to be configured to enable this to work.  '@list options'\n  \n  See Also: @conformat, @nameformat\n  \n</PRE>\n<A HREF=\"#@eval\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@exitto\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@exitto\"><H3>@exitto</H3></A><PRE>\n  Command: @exitto[/&lt;switch&gt;] &lt;exit&gt; = &lt;string&gt;\n  Attribute: ExitTo\n  \n  This attribute allows an exit to handle 'Variable Exits'.  In essence,\n  this attribute is parsed then is checked for a valid linkable destination\n  to send the target who enters the exit to.  All exit messages are \n  evaluated and sent as well.\n  \n  Example:\n    &gt; @toggle MyExit=variable\n    Set.\n    &gt; @exitto MyExit=[switch(obj(%#),he,#123,she,#234,#567)]\n    Set.\n  \n  The above example sends all people of a male sex to room #123, female to \n  #234, and anyone who doesn't match either to #567.\n  \n  See Also: variable exits, variable toggle\n  \n</PRE>\n<A HREF=\"#@exitformat\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@extansi\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@extansi\"><H3>@extansi</H3></A><PRE>\n  Command: @extansi[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  \n  The @extansi command allows you to set multi-color names for an item.  This\n  only effects contents, inventories, and the normal 'look'.  It will not\n  effect anything else.  In addition, the name in @extansi MUST match the\n  name returned by name() (minus ansi codes).  \n  i.e.  stripansi(get(object/ansiname)) = name(object)\n  \n  @extansi is stored in the @ansiname attribute.  This will, naturally, \n  overwrite the previous @ansiname ansi color you may have used.\n  \n  Note:  Target must be @toggled EXTANSI to use this command.\n  \n  The optional switch /quiet suppresses output unless an error is thrown.\n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Examlple:  @name object=99 Red Balloons\n             &gt; Name set.\n             @extansi object=99 [ansi(hr,Red)] Baboons\n             &gt; String entered must match name of target, 99 Red Balloons.\n             @extansi object=99 [ansi(hr,Red)] Balloons\n             &gt; Ansi string entered for 99 Red Balloons of '99 Red Balloons'.\n  \n  See Also: @ansiname, @name, ansi(), EXTANSI TOGGLE\n  \n</PRE>\n<A HREF=\"#@exitto\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@fail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@fail\"><H3>@fail</H3></A><PRE>\n  Command: @fail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Fail\n \n  Sets the failure message for &lt;object&gt;.  This message is seen by the actor\n  when one of these events occurs:\n \n    - For exits: Someone tries to traverse the exit but cannot because they\n      fail the exit's default lock or the exit is not linked.\n    - For players and things: Someone tries to pick up the object but cannot\n      because they fail the object's default lock.\n    - For rooms, players, and things: Someone looks around inside the room,\n      player, or thing and fails the object's default lock.\n \n  Substitution and evaluation is performed on the message before it is shown.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    &gt; @fail table = It's too heavy to lift!                            &lt;thing&gt;\n    &gt; @fail doorway = The doorknob does not turn.                       &lt;exit&gt;\n  \n  See Also: get, @afail, @ofail, FAILURE\n  \n</PRE>\n<A HREF=\"#@extansi\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@femit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@femit\"><H3>@femit</H3></A><PRE>\n  Command: @femit[/&lt;switches&gt;] &lt;object&gt;=&lt;message&gt;\n  Forces &lt;object&gt; to emit &lt;message&gt;.  This command is similar to the command\n  '@force &lt;object&gt; = @emit &lt;message&gt;', except that it will work so long as\n  you own the object, whereas @force may fail if the object has its INHERIT\n  flag set and the object performing the @force does not.\n \n  The following switches are available:\n     /here   - Sends the message to everyone in the same location as &lt;object&gt;.\n     /room   - Sends the message to everyone in the room that contains the\n               object that &lt;object&gt; is in.  Starting from your location, this\n               switch 'leaves' objects until it reaches a room, and @emits the\n               message there.\n     /noansi - Show the string literally and don't process ansi.  Only\n               useful with ZENTY_ANSI enabled (at compiletime).\n    \n  If both /here and /room switches are specified, the message is sent to both \n  places.  If neither is specified, /here is assumed.\n   \n  Some MUSHes may restrict the use of this command.\n    \n  See Also: @emit, @fpose, @fsay, INHERIT, SPOOFING\n  \n</PRE>\n<A HREF=\"#@fail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@filter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@filter\"><H3>@filter</H3></A><PRE>\n  Command: @filter[/&lt;switch&gt;] &lt;object&gt; = &lt;pattern&gt;[, &lt;pattern&gt;...]\n  Attribute: Filter\n \n  This attribute specifies a series of patterns to be used to suppress\n  text normally forwarded by the AUDIBLE flag.  If the desired pattern\n  contains a comma, the pattern may be enclosed in curly braces {}.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    &gt; @fo test=out\n    &gt; @set #378=puppet\n    test&gt; test grows ears and can now hear.\n    &gt; @filter out = {* has arrived.},{* has left.}\n    Set.\n    &gt; :has not arrived.\n    Wizard has not arrived.\n    test&gt; From a distance, Wizard has not arrived.\n    &gt; :has arrived.\n    Wizard has arrived.\n  \n  See Also:  AUDIBLE, @forwardlist, @infilter, @inprefix, @prefix\n  \n</PRE>\n<A HREF=\"#@femit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@find\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@find\"><H3>@find</H3></A><PRE>\n  Command: @find &lt;name&gt;[,&lt;low&gt;[,&lt;high&gt;]]\n \n  Displays the name and number of every room, thing, or player that you\n  control whose name matches &lt;name&gt;. Because the command is computationally\n  expensive, it costs 200 coins.\n \n  &lt;low&gt; and &lt;high&gt; may be used to restrict the range of objects that are\n  searched, if they are given then the search starts at object #&lt;low&gt; and ends\n  at object #&lt;high&gt;.\n \n  Examples:\n    &gt; @find Lost Room\n    &gt; @find Secret Device,12000,14000\n  \n  See Also: @search\n  \n</PRE>\n<A HREF=\"#@filter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@force\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@force\"><H3>@force</H3></A><PRE>\n  Command: @force &lt;player/object&gt;=&lt;command&gt;\n  Forces the game to act as though &lt;player/object&gt; had entered &lt;command&gt;.\n  You may only force objects that you control.  Objects may not force players\n  unless either the object or the player has their INHERIT flag set, and\n  objects that do not have their INHERIT flag set may not force objects that\n  do.  If the victim is specified by number, you may use an alternate form\n  of the command, '#&lt;number&gt; &lt;command&gt;'.\n  \n  See Also: puppets, #, @trigger, @include\n  \n</PRE>\n<A HREF=\"#@find\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@forwardlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@forwardlist\"><H3>@forwardlist</H3></A><PRE>\n  Command: @forwardlist[/&lt;switch&gt;] &lt;object&gt; = &lt;dbref-list&gt;\n  Attribute: Forwardlist\n \n  Specifies a list of locations (specified by their db numbers) that are to\n  receive messages heard by &lt;object&gt; (filtered by the @filter attribute and\n  prefixed by the @prefix attribute).  The messages are only forwarded if\n  &lt;object&gt; has its AUDIBLE flag set.\n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  See Also: @filter, @prefix, AUDIBLE\n  \n</PRE>\n<A HREF=\"#@force\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@fpose\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@fpose\"><H3>@fpose</H3></A><PRE>\n  Command: @fpose[/&lt;switches&gt;] &lt;object&gt;=&lt;message&gt;\n  Forces &lt;object&gt; to pose &lt;message&gt;.  This command is similar to the command\n  '@force &lt;object&gt; = :&lt;message&gt;', except that it will work so long as you\n  own the object, whereas @force may fail if the object has its INHERIT flag\n  set and the object performing the @force does not.\n \n  The following switches are available:\n     /default - (default) Put a space between the name of the object and\n                the message (ie, send '&lt;name&gt; &lt;message&gt;').\n     /nospace - Don't put a space between the name of the object and the\n                message (ie, send '&lt;name&gt;&lt;message&gt;').\n  \n  See Also: @femit, @fsay, pose, :, ;, INHERIT\n  \n</PRE>\n<A HREF=\"#@forwardlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@fsay\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@fsay\"><H3>@fsay</H3></A><PRE>\n  Command: @fsay &lt;object&gt; = &lt;message&gt;\n  Forces &lt;object&gt; (which may be a player) to say &lt;message&gt;.  Can only\n  be executed if the enactor controls the object.\n  \n  See Also: say, @femit, pose\n  \n</PRE>\n<A HREF=\"#@fpose\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@gfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@gfail\"><H3>@gfail</H3></A><PRE>\n  Command: @gfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Gfail\n \n  Sets the message that a player sees when he tries to give away the object\n  but fails because he didn't pass the object's give lock.\n \n  Function references and %-substitutions are allowed in give failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the object being given away, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc) refer\n  to the (attempted) giver.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @gfail sword = You can't give away a cursed sword!\n  \n  See Also: give, @agfail, @ogfail, @lock\n  \n</PRE>\n<A HREF=\"#@fsay\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@grep\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@grep\"><H3>@GREP</H3></A><PRE>\n  Command: @grep[/&lt;switch&gt;] &lt;object&gt;=&lt;attribute(s)&gt;,&lt;string&gt;\n  \n  This command will return a list of attributes matching &lt;attribute(s)&gt; that\n  contain the string &lt;string&gt;.  You may specify wildcards (* or ?) in the\n  attributes or the string to match for.  If no list is found, it returns\n  nothing.\n  \n  The following switches exist for @grep:\n    /quiet  - filters out the output of the 'Grep: Done.' message\n    /regexp - apply regular expression matching for 'string'.\n    /parent - search down parent trees as well (showing parents separately).\n  \n  Example: \n  &gt; @grep me=*,*al*\n    Sex\n    Grep: Done. \n   \n  See Also: @search, examine, get(), match(), grep()\n  \n</PRE>\n<A HREF=\"#@gfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@guild\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@guild\"><H3>@guild</H3></A><PRE>\n  Command: @guild[/&lt;switch&gt;] &lt;player&gt;=&lt;string&gt;\n  \n  This command sets the GUILD attribute on the specified player.  Only\n  staff can use this command.  Optional switches are:\n    /quiet - sets the attribute w/o returning a 'Set.' message.\n    /noisy - this verbosely sets the attribute.  Compatibility with PENN\n  \n  See Also: @race, guild(), race(), @set, &amp;\n  \n</PRE>\n<A HREF=\"#@grep\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@halt\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@halt\"><H3>@halt</H3></A><PRE>\n  Command: @halt[/&lt;switch&gt;] [&lt;object&gt;]\n  Halts all commands being run by &lt;object&gt;, or by the object running the\n  command if no &lt;object&gt; is given.  If the object to be halted is a player,\n  then all commands being run by objects owned by that player are halted.\n  Use this command to stop runaway objects and infinite loops.\n  The process of halting an object involves removing all commands waiting\n  to be run by the object from the queue and refunding the queue deposit.\n  Halting an object does not affect commands waiting on it as a semaphore.\n  \n  Switches available are:\n    /PID   - This will halt (kill) the PID reference to the job in the @ps.\n             This, unlike @halt alone, *WILL* affect jobs waiting as\n             semaphores.\n    /STOP  - (used with /PID) - Sets the queue entry into a SLEEP state\n    /CONT  - (used with /PID) - Resets the queue entry into a RUN state\n    /QUIET - Will quiet the output when you have halted something.\n             Note: warnings/errors will still show through this.\n  \n  See Also: @drain, @notify, @ps, kill, HALTED, SEMAPHORES, pid()\n  \n</PRE>\n<A HREF=\"#@guild\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@hide\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@hide\"><H3>@hide</H3></A><PRE>\n  Command: @hide[/&lt;switch&gt;]\n  \n  This command will hide (or unhide) you from the WHO/DOING.  If you\n  specify the '/off' switch, it will unhide you to appear back on the\n  WHO/DOING.  This also effects lwho(), conn() and idle().  Only full\n  wizards (and you yourself) can see you on the WHO when you @hide.\n  The current switches exist:\n     /on  - this hides you from the WHO (default).\n     /off - this unhides you from the WHO. \n  \n  See Also: WHO, DOING, DARK, UNFINDABLE  \n  \n</PRE>\n<A HREF=\"#@halt\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@idesc\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@idesc\"><H3>@idesc</H3></A><PRE>\n  Command: @idesc[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Idesc\n \n  Sets the internal description for &lt;object&gt;.  The internal description of an\n  object will be shown to any player entering it.  If not set, the regular\n  description in the Desc attribute is shown instead.\n \n  Function references and %-substitutions are allowed in inside descriptions,\n  and are evaluated when someone fails to get or look at the object.  In\n  function references, 'me' refers to the object being looked at, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc)\n  refer to the player doing the looking.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @idesc car = You are sitting in the driver's seat of a Volkswagen\n                        Beetle.\n  \n  See Also: enter, @describe, ENTER_OK\n  \n</PRE>\n<A HREF=\"#@hide\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@idle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@idle\"><H3>@idle</H3></A><PRE>\n  Command: @idle[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Idle\n \n  This attribute is sent as a message to anyone who successfully pages you.\n  It can be used to tell someone who pages you when you will return\n  (if you are going to be away for a while).  %# is used for the person\n  who pages you and not you yourself.\n \n  This attribute is only meaningful for players, and will never be\n  automatically referenced on other object types.\n  \n  The attribute will not be displayed if it returns an empty string.\n  Idea borrowed from PENN.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @idle me = At dinner.  Back about 7PM.\n           @idle me = [ifelse(gt(idle(me),600),Away from computer.  Idle)]\n  \n  The second example will only display an idle message if you've been idle over\n  10 minutes.\n  \n  See Also: @away, @reject, page\n  \n</PRE>\n<A HREF=\"#@idesc\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@if\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@if\"><H3>@if</H3></A><PRE>\n  Command: @skip &lt;boolean expression&gt;=&lt;command&gt;\n           @skip/ifelse &lt;boolean expression&gt;=&lt;true command&gt;[,&lt;false command&gt;]\n  \n  The @skip command 'skips' the command from being executed if the boolean \n  logic presented to @skip is true.  The command will be processed in the\n  normal queue and not executed out of order.  Any value other than '0'\n  is considered 'true' and not a true boolean.  This only processes a single\n  command.  If multiple commands are required, please use @include.\n  \n  Notice if you specify the /ifelse switch the condition is reversed to match\n  how a normal if-else statement would work.  @skip/ifelse is aliased to\n  @if and @ifelse.\n  \n  Examples:\n    &gt; @wait 0={think 1;think 2;@skip 0=think 3;think 4}\n    1\n    2\n    3\n    4\n    &gt; @wait 0={think 1;think 2;@skip 1=think 3;think 4}\n    1\n    2\n    4\n  \n  See Also: @include, @force, @trigger, @skip, @break, @assert, @switch\n\n</PRE>\n<A HREF=\"#@idle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ifelse\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ifelse\"><H3>@ifelse</H3></A><PRE>\n  Command: @skip &lt;boolean expression&gt;=&lt;command&gt;\n           @skip/ifelse &lt;boolean expression&gt;=&lt;true command&gt;[,&lt;false command&gt;]\n  \n  The @skip command 'skips' the command from being executed if the boolean \n  logic presented to @skip is true.  The command will be processed in the\n  normal queue and not executed out of order.  Any value other than '0'\n  is considered 'true' and not a true boolean.  This only processes a single\n  command.  If multiple commands are required, please use @include.\n  \n  Notice if you specify the /ifelse switch the condition is reversed to match\n  how a normal if-else statement would work.  @skip/ifelse is aliased to\n  @if and @ifelse.\n  \n  Examples:\n    &gt; @wait 0={think 1;think 2;@skip 0=think 3;think 4}\n    1\n    2\n    3\n    4\n    &gt; @wait 0={think 1;think 2;@skip 1=think 3;think 4}\n    1\n    2\n    4\n  \n  See Also: @include, @force, @trigger, @skip, @break, @assert, @switch\n\n</PRE>\n<A HREF=\"#@if\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@include\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@include\"><H3>@include</H3></A><PRE>\n  Command: @include[/&lt;switch&gt;] &lt;object&gt;/&lt;attr&gt; [=&lt;arg1&gt;,&lt;arg2&gt;,...,&lt;argN&gt;]\n           @attach[/&lt;switch&gt;]  &lt;object&gt;/&lt;attr&gt; [=&lt;arg1&gt;,&lt;arg2&gt;,...,&lt;argN&gt;]\n  \n  Note:  @attach is an alias to @include/override.\n  \n  The @include command can only be issued in a queue.  Ergo, if it is to be \n  issued at the player command line, it must be queued first (like with @wait)\n  \n  The @include command will insert, at the location of the @include, any \n  commands that were stored in the specified attribute on the specified \n  object.  You must have control over the object and be able to see the\n  attribute to be able to fetch the information.  This passes all the standard\n  arguments (%0-%9) and can be overridden by arguments you pass to it.  After\n  the @included text, the %0-%9 variables will return to what it was prior\n  to the @include.\n  \n  This behaves similar to @trigger, except it will insert the commands in\n  order and not queue them up.\n  \n  @include honors @break/@assert.  You can have at most 10 @includes.  You\n  can only nest to 3 levels deep.\n  \n  @admin params includecnt and includenest handle @include's flexibility.\n  \n  The following switches exist for @include:\n    /command   - bypass the $command/^listen portion of the attribute.\n    /clearregs - clear the registers prior to calling included attribute.\n                 Note: this automatically sets the localize option.\n    /localize  - localizes the registers for the include duration.\n    /nobreak   - disregard @break/@assert inside the includes from outside.\n    /target    - Use the target as executor instead of executor of @include\n                 Note: You must control target to use this.\n    /override  - If any arguments are passed to @include to override the\n                 default, this will disable all default arguments.\n    \n  {see @include2 for examples}\n\n</PRE>\n<A HREF=\"#@ifelse\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@include2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@include2 \"><H3>@include2 </H3></A><PRE>\n  (CONTINUED)\n  Command: @include[/&lt;switch&gt;] &lt;object&gt;/&lt;attr&gt; [=&lt;arg1&gt;,&lt;arg2&gt;,...,&lt;argN&gt;]\n  \n  Example:\n    &gt; @va me=think inny1;think inny2: %0\n    Set.\n    &gt; @vb me=$fnord *:think test1;@include me/va;think test2\n    Set.\n    &gt; @vc me=$fnord2 *:think test1;@include me/va=bah!;think test2\n    &gt; fnord boo!\n    test1\n    inny1\n    inny2: boo!\n    test2\n    &gt; fnord2 boo!\n    test1\n    inny1\n    inny2: bah!\n    test2\n  \n  See Also: @trigger, @force, @sudo, @skip\n\n</PRE>\n<A HREF=\"#@include\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@infilter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@infilter\"><H3>@infilter</H3></A><PRE>\n  Command: @infilter[/&lt;switch&gt;] &lt;object&gt; = &lt;pattern&gt;[, &lt;pattern&gt;...]\n  Attribute: Infilter\n \n  This attribute specifies a series of patterns to be used to suppress\n  text normally sent to the contents of &lt;object&gt; by @listen.  If the desired\n  pattern contains a comma, the pattern may be enclosed in curly braces {}.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    &gt; @listen sports car=*\n    &gt; @fo test=enter sports car\n    test has left.\n    test&gt; Sports Car(#383Q)\n    &gt; :waves.\n    test&gt; Wizard waves.\n    Wizard waves.\n    &gt; @infilter sports = *waves*\n    &gt; :waves.\n    Wizard waves.\n    &gt; :knocks on the window.\n    test&gt; Wizard knocks on the window.\n    Wizard knocks on the window.\n  \n  See Also: @filter, @inprefix, @listen, @prefix\n  \n</PRE>\n<A HREF=\"#@include2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@inprefix\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@inprefix\"><H3>@inprefix</H3></A><PRE>\n  Command: @inprefix[/&lt;switch&gt;] &lt;object&gt; = &lt;prefix text&gt;\n  Attribute: Inprefix\n \n  This attribute, when set, will prefix all text that is sent to the contents\n  of &lt;object&gt; by @listen.  The default is to have no prefix, the text is\n  forwarded unadorned.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    &gt; @listen sports car=*\n    &gt; @fo test=enter sports car\n    test has left.\n    test&gt; Sports Car(#383Q)\n    &gt; :waves.\n    test&gt; Wizard waves.\n    Wizard waves.\n    &gt; @inprefix sports car = In the mundane world outside,\n    test&gt; In the mundane world outside, Wizard waves some more.\n    Wizard waves some more.\n  \n  See Also: @filter, @infilter, @listen, @prefix\n  \n</PRE>\n<A HREF=\"#@infilter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@kill\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@kill\"><H3>@kill</H3></A><PRE>\n  Command: @kill[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Kill\n \n  This command sets the message that is shown to anyone who kills &lt;object&gt;.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Function references and %-substitutions are allowed in kill messages, and\n  are evaluated when someone kills the object.  In function references, 'me'\n  refers to the object that was killed, while %-substitutions that refer to\n  the enactor (such as %n, %#, %p, etc) refer to the player doing the killing.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @kill guard = The guard says &quot;I'll get.. you... for... this... %n&quot;\n                         as he falls down and dies.\n  \n  See Also: kill, @akill, @okill, BEING KILLED, IMMORTAL, ROYALTY\n  \n</PRE>\n<A HREF=\"#@inprefix\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lalias\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lalias\"><H3>@Lalias</H3></A><PRE>\n  Command: @lalias[/&lt;switch&gt;] &lt;object&gt; = &lt;entrance-list&gt;\n  Attribute: Lalias\n \n  Sets up a set of alternate commands that may be used as synonyms for the\n  command 'leave' when you are inside a player or a thing.  The alternate\n  commands are separated by semicolons just like in exit names.\n \n  Leave aliases are checked for after exitnames and built-in MUSH commands, but\n  before enter aliases and $-commands.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically looked at on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @lalias car = get out;climb out;out;open door;outside\n  \n  See Also: @ealias, enter, leave\n  \n</PRE>\n<A HREF=\"#@kill\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@last\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@last\"><H3>@last</H3></A><PRE>\n  Command: @last &lt;player&gt;\n  This command displays a short 'connection history' for &lt;player&gt;, showing\n  recent successful and failed connection attempts, as well as the total\n  number of successful and failed connections.\n  You can only display information about yourself or people you control.\n  \n</PRE>\n<A HREF=\"#@lalias\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@leave\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@leave\"><H3>@leave</H3></A><PRE>\n  Command: @leave[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Leave\n \n  Sets the message that a player sees when leaving an object or room, whether\n  by using an exit, the enter or leave commands, or by teleporting.\n \n  Function references and %-substitutions are allowed in leave messages, and\n  are evaluated when someone leaves the object.  In function references,\n  'me' refers to the object being left, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the player leaving the\n  object.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @leave car = You unbuckle your seatbelt and climb out of the car.\n  \n  See Also: leave, @aleave, @oleave\n  \n</PRE>\n<A HREF=\"#@last\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lemit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lemit\"><H3>@lemit</H3></A><PRE>\n  Command: @lemit &lt;message&gt;\n           @emit/room &lt;message&gt;\n  \n  Please see help on @emit.\n  \n  This is an alias for @emit/room.\n  \n  See Also: @emit\n\n</PRE>\n<A HREF=\"#@leave\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lfail\"><H3>@lfail</H3></A><PRE>\n  Command: @lfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Lfail\n \n  Sets the message that a player sees when he tries to leave it but fails\n  because the player fails the object's leave lock.\n \n  The leave lock only affects the 'leave' command and its aliases (set via\n  the @ealias command), it does not affect going home, using an exit in the\n  location, or teleporting out.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @lfail plane = You don't have a parachute!\n  \n  See Also: @aleave, @alfail, @lalias, @leave, @oleave, @olfail, leave\n  \n</PRE>\n<A HREF=\"#@lemit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lfunction\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lfunction\"><H3>@lfunction</H3></A><PRE>\n  Command: @lfunction[/&lt;switches&gt;] [&lt;function&gt;] [=&lt;object&gt;/&lt;attr&gt; | &lt;value&gt;]\n   \n  This command creates a localized function named &lt;function&gt;.  A localized\n  function is only seen by the owner of the target and all things owned by\n  that target.  Function existance is checked by the object doing the \n  execution of the code, thereby allowing owners the ability to use their\n  own functions in their own code without worry of cross-funtion evaluation.\n\n  When invoked, the arguments to the function are loaded into %0-%9, \n  the &lt;attr&gt; attribute from &lt;object&gt; is fetched, and substitution is \n  performed on the resulting text.  The result of that substitution is \n  returned as the function result.\n  \n  You may only have 20 localized functions defined.\n  \n  The following switches exist:\n    /privilege  - the function is evaluated as if the evaluation were being \n                  performed by the object on which it is stored, instead of \n                  as if it were being performed by the invoker of the function.\n    /list       - list all current softcoded functions (with dbref#/attr's)\n    /preserve   - the function preserves setq registers (r(0)-r(9)).\n    /delete     - delete the specified user-defined function.\n    /display    - displays the details of the specified function.\n    /protect    - all setq registers called in a localized function are nulled.\n    /notrace    - the specified function when defined can't be TRACEed.\n    /max        - Set the maximum number of arguments for the function.\n                  The default is '-1' or unlimited.\n    /min        - Set the minimum number of arguments for the function.\n                  The default is '-1' or 0.\n  \n  {see 'help @lfunction2' to continue}\n\n</PRE>\n<A HREF=\"#@lfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lfunction2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lfunction2\"><H3>@lfunction2</H3></A><PRE>\n  Command: @lfunction[/&lt;switches&gt;] [&lt;function&gt;] [=&lt;object&gt;/&lt;attr&gt;]\n  \n  The function definitions created by @lfunction are not stored in the database\n  so they need to be re-created each time the RhostMUSH is started.  It is\n  recommended that the Startup attribute for the target include code to set up\n  all global functions.  The privalaged and preserved, protect, and notrace \n  switches may be combined.\n   \n  All global functions have precedence over local functions.  All built-in\n  functions have priority over all other functions (unless overridden).\n  Listing local functions will only display the functions that you have\n  control over, meaning wizards will see all local functions defined and\n  the owners of those functions.\n  \n  Examples:  @lfunction myfunction=#123/myattribute\n             @lfunction/priv/pres myfunction=#123/myattribute\n             @lfunction/priv/pres/prot myfunction=#123/myattribute\n             @lfunction/priv/pres/prot/notrace myfunction=#123/myattribute\n             @lfunction/list\n             @lfunction/display myfunction\n             @lfunction/delete myfunction\n             @lfunction/delete #12_myfunction (delete myfunction of user #12)\n             @lfunction/max myfunction=5\n             @lfunction/min myfunction=3\n  \n  Note: With the /list switch, the following letters represent the following:\n             W - privalaged\n             p - preserved\n             + - protected\n             t - notrace\n             ! - flagged (a permission flag exists for that function)\n  \n  You will see the MAX and MIN fields only if they are outside the defaults. \n  \n  Note:  You may use @lfunction/display to see the flag permissions.\n  \n  When deleting functions, if you wish to specify a local function that is\n  by a specific user, you may use the form:\n     @lfunction/del &lt;dbref&gt;_&lt;function&gt;\n  \n  Example:\n     &gt; @function/del #12345_myfunction\n  \n  See Also: u(), streval(), eval()\n \n</PRE>\n<A HREF=\"#@lfunction\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@link\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@link\"><H3>@link</H3></A><PRE>\n  Command: @link &lt;object&gt;=#&lt;number&gt;/here/home\n  When used on a player or a thing, this command sets the object's home\n  to the indicated location.  The destination must be owned by you or be an\n  ABODE room, and you must pass the destination's LinkLock.\n \n  When used on a room, this command sets the room's drop-to, where objects\n  dropped in the room go.  The destination must be a room that is either owned\n  by you or is LINK_OK, and you must pass the destination's LinkLock.\n \n  For exits, this command sets the destination if the exit is currently\n  unlinked, you control the destination or it is set LINK_OK, and you pass the\n  destination's LinkLock.  You can @link an unlinked exit regardless of who\n  owns it or the lock set on it, you are made the owner if you successfully\n  link to the destination.  Linking an exit costs 1 coin, and if the exit was\n  owned by someone else, you also reimburse the former owner 1 coin\n  (making the total cost to you 2 coins).\n  \n{ 'help @link2' for more }\n  \n</PRE>\n<A HREF=\"#@lfunction2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@link2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@link2\"><H3>@link2</H3></A><PRE>\n  Note that in all the above cases that it is the player performing the @link\n  command that must pass the LinkLock, not the object being linked.\n  Therefore, you should use the '$' lock qualifier if you want to prevent\n  specific players from linking to your LINK_OK locations, as simply locking\n  against '*&lt;playername&gt;' does not lock out their puppets.\n \n  You may also @unlink players at your location IF the following conditions\n  are met:\n    1) You own the location\n    2) The player is at your location and that happens to be his home.\n    3) there is a valid default home defined for the mush\n  \n  See Also: @dig, @open, @unlink, DROP-TOS, HOMES, LINKING\n  \n</PRE>\n<A HREF=\"#@link\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@list\"><H3>@list</H3></A><PRE>\n  Command: @list [&lt;option&gt; [&lt;subtopic&gt; [&lt;pagenumber&gt;]] \n  \n  Lists information from internal databases.  Information is available\n  about the following options:\n    attributes      - Valid object attributes.\n    commands        - Commands that you may use (excluding the \n                      attribute-setting commands as well as any exits, and\n                      $-commands available).\n    costs           - Lists the costs associated with many commands and\n                      actions.\n    default_flags   - Lists the flags that new objects receive by default\n                      when created.\n    flags           - Lists the name and letter of all the flags.\n    functions       - Lists all the available functions.\n    options         - Lists several global options and limits.\n        |             You may specify subtopics: boolean, values, config, \n        |             mail, and system\n        +-&gt; boolean - Subtopic option for listing boolean values\n        +-&gt; values  - Subtopic option for listing int values\n        +-&gt; config  - Subtopic option for listing config options\n        +-&gt; mail    - Subtopic option for listing mail options\n        +-&gt; system  - Subtopic option for listing system settings\n    switches        - Lists what commands support switches and the switches\n                      that they do support.\n    toggles         - Lists toggles supported by the mush.\n  \n  The information provided by the @list command is definitive, as it reads\n  the internal tables to produce the information it displays.  Specifying\n  @list with no argument lists the options you may use.\n  \n{help @list2 for a listing of subtopics}\n  \n</PRE>\n<A HREF=\"#@link2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@list2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@list2 \"><H3>@list2 </H3></A><PRE>\n  @list2 - Continued\n  \n  Command: @list [&lt;option&gt; [&lt;subtopic&gt; [&lt;pagenumber&gt;]] \n  \n  @list options has subtopics.  You can issue them by: @list options &lt;subtopic&gt;\n  @list options subtopics have page values:  @list options &lt;subtopic&gt; &lt;page&gt;\n  \n  The following topics have sub-topics currently:\n    OPTIONS    boolean   - show all available boolean configs you can see.\n               values    - show all available values that you can see.\n               config    - show all current status/config information.\n               mail      - show all current hardcoded mail configuration.\n  \n  Examples:\n    &gt; @list options boolean     (For first page - default)\n    &gt; @list options boolean 2   (For second page) \n  \n  See Also: help, news\n  \n</PRE>\n<A HREF=\"#@list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@listen\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@listen\"><H3>@listen</H3></A><PRE>\n  Command: @listen[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: Listen\n \n  This attribute contains a wildcard pattern that the object listens for.\n  Anything spoken, posed, emitted, or whispered in the room that &lt;object&gt; is\n  in, as well as messages resulting from using objects (such as Opay and Succ\n  messages) are checked against the Listen attribute.  When the object hears \n  something that matches the pattern, it triggers the Ahear attribute, as\n  well as either the Amhear or Aahear attributes, as appropriate,\n  substituting %0 the string that matched the first wildcard character in the\n  Listen, %1 for the second. etc.  If the pattern in the Listen attribute is\n  matched, objects in &lt;object&gt;'s inventory will also hear the message and\n  have a chance to match it.  Objects whose Listen attribute is set to\n  anything will be listed when a @sweep command is run by someone in the\n  same room.\n \n  If the @listen pattern is matched, then the object's contents will\n  hear the message also, prefixed by the text in @inprefix if it is set.  Any\n  text that matches any pattern specified in @infilter will not be sent to\n  the contents.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @listen camera = * has arrived.\n           @ahear camera = @va me = %va %0\n  \n  See Also: @aahear, @ahear, @amhear, @sweep, @inprefix, @infilter\n  \n</PRE>\n<A HREF=\"#@list2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@listmotd\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@listmotd\"><H3>@listmotd</H3></A><PRE>\n  Command: @listmotd\n  Displays the current message-of-the-day.  Note that it is displayed when\n  you connect to your character.\n  \n</PRE>\n<A HREF=\"#@listen\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock\"><H3>@lock</H3></A><PRE>\n  Command: @lock[/&lt;whichlock&gt;] &lt;object&gt;=&lt;key&gt;\n           @lock &lt;object&gt;/&lt;attrib&gt;\n   \n  The first form locks &lt;object&gt; to a specific key(s).  Type 'help @lock keys'\n  for a list of the keys you may use.\n   \n  &lt;whichlock&gt; indicates which lock you want to set on the object.  If you\n  don't specify one, you set the Default lock. Type 'help @lock locks' for\n  a list of the locks you may set and what they are used for.\n   \n  The second form locks the indicated attribute of the named object, so that\n  when the object is @chowned, the attribute will remain owned by you.\n  It may also be used when you own an attribute on an object that you do not\n  own, in this case it prevents the object's owner from @chowning the\n  attribute to himself, and prevents anyone from modifying or removing the\n  attribute.  The following sub-topics exist:\n   \n         help mail lock   - help on how to set a mail lock.\n         help @lock keys  - list of valid keys you can use in @locking.\n         help @lock locks - list of available locks you can @lock.\n         help @lock type &lt;lock&gt; - give detailed help on the specific lock.\n         help userlocks   - a special way to define user-defined locking.\n  \n  See Also: @chown, @unlock\n  \n</PRE>\n<A HREF=\"#@listmotd\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock attribute\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock attribute\"><H3>@lock attribute</H3></A><PRE>\n  ATTRIBUTE LOCKS:\n \n  Key: &lt;attribute&gt;:&lt;pattern&gt;\n       +&lt;attribute&gt;:&lt;wildcard-pattern&gt;\n       =&lt;attribute&gt;:&lt;wildcard-pattern&gt;\n \n  You may lock on whether a specific attribute on the player attempting to\n  pass the lock matches a pattern.  Example: '@lock thing=sex:m*' will lock\n  thing to anyone whose sex starts with an M. Wild cards, greater than and\n  less than may be used, for example: '@lock a-f=name:&lt;g' will lock the exit\n  a-f against any one whose name is higher than f.\n \n  Both the player testing the lock and every object in his inventory is\n  checked, the player passes the lock if any of those objects passes the lock.\n  If the attribute name is prefixed by a = then only the player is checked.\n  Similarly, if the attribute name is prefixed by a + then only objects in\n  the player's inventory are tested.\n   \n{ 'help @lock attribute2' for more }\n  \n</PRE>\n<A HREF=\"#@lock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock attribute2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock attribute2\"><H3>@lock attribute2</H3></A><PRE>\n  Note: you may lock against any attribute, but the locked object must be\n  able to read the attribute from the player attempting to pass the lock or\n  the lock will fail.\n \n  Examples:\n    &gt; @lock men's room=sex:m*\n    &gt; @lock a-f=name:&lt;g\n    &gt; @lock post office=email:*@*\n  \n  See Also: ATTRIBUTE OWNERSHIP, @lock evaluation\n  \n</PRE>\n<A HREF=\"#@lock attribute\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock carry\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock carry\"><H3>@lock carry</H3></A><PRE>\n  CARRY LOCKS:\n \n  Key: +&lt;object&gt;\n \n  You pass a carry lock if you are carrying the named object.\n \n  Example:\n    &gt; @lock secret passage = +magic bus\n    You can only traverse the secret passage if you are carrying the\n    magic bus.  The bus cannot enter the passage on its own (perhaps\n    when you are driving it).\n  \n  See Also: @lock is, @lock normal\n  \n</PRE>\n<A HREF=\"#@lock attribute2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock compound\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock compound\"><H3>@lock compound</H3></A><PRE>\n  COMPOUND LOCKS:\n \n  Key: &lt;key&gt; &amp; &lt;key&gt;\n       &lt;key&gt; | &lt;key&gt;\n       !&lt;key&gt;\n       ( &lt;key&gt; )\n \n  You can make complex locks by combining keys with the logical AND and OR\n  operators (&amp; and ! respectively), or by using the NOT operator.  You\n  may also group complex locks with parentheses.\n \n  Examples:\n    &gt; @lock exit = me &amp; !me\n    An impossible lock, nothing can be both you and not you.\n \n    &gt; @lock message = me | *recipient\n    Both you and the player recipient may get the message.\n  \n</PRE>\n<A HREF=\"#@lock carry\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock evaluation\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock evaluation\"><H3>@lock evaluation</H3></A><PRE>\n  EVALUATION LOCKS:\n \n  Key: &lt;attribute&gt;/&lt;value&gt;\n \n  Evaluation locks let you evaluate one of your attributes and compare the \n  result against a value stored in the lock.  The result must be an exact\n  match (no wildcarding allowed, but uppercase and lowercase are considered\n  to be the same).  When evaluating the attribute the enactor substitutions\n  (%#/%n/etc) are replaced with information about the player trying to pass\n  the lock, and 'me' and %! refer to the locked object or exit.\n \n  If you call an indirect lock and the indirect lock is an evaluation lock\n  (or is a compound lock that includes an evaluation lock), then the original\n  lock object is checked for the attribute first, followed by the object that\n  has the actual evaluation lock.  If there are multiple levels of indirection\n  the intermediate locks are not checked.\n   \n{ 'help @lock evaluation2' for more }\n  \n</PRE>\n<A HREF=\"#@lock compound\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock evaluation2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock evaluation2\"><H3>@lock evaluation2</H3></A><PRE>\n  Examples:\n    &gt; @lock bank=checkmoney/1\n    &gt; &amp;checkmoney bank=[gt(money(%#),5000)]\n    Only people and objects with more than 5000 pennies may pass.\n    Note: this lock requires wizard privileges to read the worth of other\n    players.\n \n    &gt; @lock divisible_by_five_club = checkdiv/0\n    &gt; &amp;checkdiv divisible_by_five_club = [mod(mid(%#,2,20),5)]\n    Only objects whose db-number is divisible by 5 may pass.\n  \n  See Also: @lock attributes\n  \n</PRE>\n<A HREF=\"#@lock evaluation\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock indirect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock indirect\"><H3>@lock indirect</H3></A><PRE>\n  INDIRECT LOCKS:\n \n  Key: @&lt;object&gt;\n \n  You may reference the lock on another object and use the result of\n  evaluating that other object's lock.    You pass an indirect lock if you\n  pass the default lock on &lt;object&gt;.  This is especially useful if you\n  have a large number of objects or exits that want to have the same lock,\n  and you want to be able to update one object and have all the other\n  locks change at the same time.\n \n  &lt;object&gt; is searched for when you enter the @lock command and its\n  database number is stored in the lock, so something like\n  '@Lock north=@master.lock' is safe even if you are going to move master.lock\n  to another location.\n \n  Examples:\n    &gt; @lock master.lock = me\n    &gt; @lock north = @master.lock\n    &gt; @lock south = @master.lock\n    North and south all reference the lock on master.lock, so you may change\n    the lock on all three exits by changing master.lock.\n  \n  See Also: @lock normal\n  \n</PRE>\n<A HREF=\"#@lock evaluation2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock is\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock is\"><H3>@lock is</H3></A><PRE>\n  IS LOCKS:\n \n  Key: =&lt;object&gt;\n \n  You pass an is lock only if you are the named object.\n \n  Example:\n    &gt; @lock mystical highway = =magic bus\n    Only the magic bus may travel down the mystical highway.  You cannot\n    travel the highway if you are carrying the bus.\n  \n  See Also: @lock carry, @lock normal\n  \n</PRE>\n<A HREF=\"#@lock indirect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock keys\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock keys\"><H3>@Lock keys</H3></A><PRE>\n \n  You may use the following keys when setting locks.  For information about\n  a particular type of key, type:\n  \n                          'help @lock &lt;Key Type&gt;'.\n \n  Key Type    Form in @Lock Command\n  ----------  ------------------------------\n  Normal      &lt;object&gt;\n  Is          =&lt;object&gt;\n  Carry       +&lt;object&gt;\n  Ownership   $&lt;object&gt;\n  Indirect    @&lt;object&gt;\n  Attribute   &lt;attribute&gt;:&lt;wildcard-pattern&gt;\n              +&lt;attribute&gt;:&lt;wildcard-pattern&gt;\n              =&lt;attribute&gt;:&lt;wildcard-pattern&gt;\n  Evaluation  &lt;attribute&gt;/&lt;value&gt;\n  Compound    &lt;key&gt; &amp; &lt;key&gt;\n              &lt;key&gt; | &lt;key&gt;\n              !&lt;key&gt;\n              ( &lt;key&gt; )\n  \n  Note: Evaluation locks pass '%0' for uselocks.  \n        0 -- default (like when using 'use')\n        1 -- $command is checked\n        2 -- ^listen is checked\n   \n</PRE>\n<A HREF=\"#@lock is\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock locks\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock locks\"><H3>@lock locks</H3></A><PRE>\n  You can set the following locks:\n \n     DefaultLock:  Exits:          controls who may traverse the exit to\n                                   its destination.\n                   Rooms:          controls whether the player sees the SUCC\n                                   or FAIL message for the room following the\n                                   room description when looking at the room.\n                   Players/Things: controls who may GET the object.\n     Basic:        All:            This is an alias for 'DefaultLock' above.\n     EnterLock:    Players/Things: controls who may ENTER the object if the\n                                   object is ENTER_OK.\n                   Rooms:          controls who may enter the room by leaving\n                                   an object inside that room.\n     GiveLock:     Players/Things: controls who may give the object.\n     LeaveLock:    Players/Things: controls who may LEAVE the object.\n     LinkLock:     All but Exits:  controls who may link to the location if \n                                   the location is LINK_OK (for linking exits\n                                   or setting drop-tos) or ABODE (for setting\n                                   homes)\n     PageLock:     Players:        controls who may page the player.\n     ParentLock:   All:            controls who may make @parent links to the\n                                   object.\n     ReceiveLock:  Players/Things: controls who may give things to the object.\n  \n{ 'help @lock locks2' for more  or 'help @lock type &lt;type&gt;' for locktype help}\n  \n</PRE>\n<A HREF=\"#@lock keys\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock locks2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock locks2\"><H3>@lock locks2</H3></A><PRE>\n     DropLock:     All:            controls who may drop the object.\n     SpeechLock:   All but Exits:  controls who may talk in target location.\n     TeloutLock:   All but Exits:  controls who may teleport out of the\n                                   location.\n     TportLock:    Rooms/Things:   controls who may teleport there if the\n                                   location is JUMP_OK.\n     UseLock:      All but Exits:  controls who may USE the object, GIVE the\n                                   object money and have the PAY attributes\n                                   run, have their messages heard and possibly\n                                   acted on by LISTEN and AxHEAR, and invoke\n                                   $-commands stored on the object.\n     UserLock:     All:            Not used by MUSH, is intended to be used\n                                   in MUSH programming where a user-defined\n                                   lock is needed.  This can also be used as\n                                   a REALITY_LEVEL Lock if enabled to do so.\n     TwinkLock:    All:            Allows people to alter your object.  If\n                                   set on a player, all they own is affected.\n     ZoneWizLock:  ZoneMaster:     Allows people control and modify\n                                   ability in a zone. *CAREFUL*  See type\n                                    help for details.\n     ZoneToLock:   ZoneMaster:     Allows people to add objects to your\n                                   zone.\n  \n{ 'help @lock locks3' for more  or 'help @lock type &lt;type&gt;' for locktype help}\n  \n</PRE>\n<A HREF=\"#@lock locks\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock locks3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock locks3\"><H3>@lock locks3</H3></A><PRE>\n     DarkLock:     All:            Specifies who can see dark things/rooms/etc \n     OpenLock:     Rooms/Things:   Specifies who can open an exit at that\n                                   given location.\n     DropToLock:   Rooms/Things:   Specifies who can drop objects at that\n                                   given location. \n     GiveToLock:   All but Exits:  Specifies who can give things while at that\n                                   given location.\n     GetFromLock:  All but Exits:  Specifies who can get things while at that\n                                   given location.  This takes into account\n                                   the lock at the enactor location and target\n                                   location.\n     ChownLock:    All:            Specifies who may chown an item if set\n                                   CHOWN_OK.  No lock means anyone can.\n  \n     For mail locking, read the help on HELP MAIL LOCK\n     For help on the types of locks, type 'help @lock type &lt;type&gt;'\n  \n  See Also: mail lock\n  \n</PRE>\n<A HREF=\"#@lock locks2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock normal\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock normal\"><H3>@lock normal</H3></A><PRE>\n  NORMAL LOCKS:\n \n  Key: &lt;object&gt;\n \n  You pass a normal lock if you either are the named object or if you carry\n  the named object.  &lt;object&gt; may be the name or #number of a thing,  a\n  playername prefixed by an asterisk (*&lt;playername&gt;), 'me', or 'here'.\n \n  Examples:\n    &gt; @lock treasure room = secret key\n    &gt; @lock private area = me\n  \n  See Also: @lock is, @lock carry\n  \n</PRE>\n<A HREF=\"#@lock locks3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock ownership\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock ownership\"><H3>@lock ownership</H3></A><PRE>\n  OWNERSHIP LOCKS:\n \n  Key: $&lt;object&gt;\n \n  You pass an ownership lock if you have the same owner as &lt;object&gt;.\n \n  Examples:\n    &gt; @lock mystuff=$me\n    Only objects you own may use the mystuff exit.\n \n    &gt; @lock/page me = !$*TinyJerk\n    Neither TinyJerk nor any of his objects may page you.\n  \n  See Also: @lock normal\n  \n</PRE>\n<A HREF=\"#@lock normal\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type chownlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type chownlock\"><H3>@lock type ChownLock</H3></A><PRE>\n  Lock Type: ChownLock\n  Syntax   : @lock/chown &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects, Exits:\n    This controls who may @chown an item if it was previously set with\n    the CHOWN_OK flag.  If this lock does not exist, then anyone may\n    chown an item set CHOWN_OK.  This lock works on all types except\n    players who always own themselves.\n  \n  Players:\n    This lock is meaningless for players, as is the CHOWN_OK flag.\n  \n</PRE>\n<A HREF=\"#@lock ownership\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type darklock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type darklock\"><H3>@lock type DarkLock</H3></A><PRE>\n  Lock Type: DarkLock\n  Syntax   : @lock/dark &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players, Exits:\n     This controls who may see the item if it is DARK at the location they\n     look at.  If they already had control of the object, this lock is\n     meaningless.  If the lock does not exist, DARK items are treated\n     normally.\n  \n  Rooms:\n     This controls the darkness level of the room to the player.  If the\n     player passes the lock, that room will be considered NOT DARK for that\n     player.  If the lock does not exist, the dark room will be treated\n     normally.  Please note that all items inside that room that are dark\n     are treated on a seperate basis for the DarkLocks.\n  \n</PRE>\n<A HREF=\"#@lock type chownlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type defaultlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type defaultlock\"><H3>@lock type DefaultLock</H3></A><PRE>\n  Lock Type: Defaultlock \n  Syntax   : @lock &lt;target&gt;=&lt;key&gt;\n             @lock/default &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players:\n     This lock specifies who is able to pick up (GET/TAKE) the target.  If\n     you do not pass the lock, you will not be able to pick up the target.\n     If this lock is not set, then anyone will be able to pick it up.\n  \n  Rooms:\n     Controls if the player is able to see the SUCC (@succ) or FAIL (@fail)\n     messages of the room when they look at the room.\n  \n  Exits:\n     Controls who may pass through the exit to it's destination.  If you\n     do not pass the lock, you will not be able to go through that exit.\n     An exit with no lock is freely accessable.\n  \n</PRE>\n<A HREF=\"#@lock type darklock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type droplock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type droplock\"><H3>@lock type DropLock</H3></A><PRE>\n  Lock Type: DropLock\n  Syntax   : @lock/drop &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Exits, Players, Objects:\n     This controls who may drop the target item.  If you do not pass the \n     lock you will be unable to drop the item.  If no lock exists, you will\n     be able to drop the target freely.\n  \n  \n</PRE>\n<A HREF=\"#@lock type defaultlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type droptolock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type droptolock\"><H3>@lock type DropToLock</H3></A><PRE>\n  Lock Type: DropToLock\n  Syntax   : @lock/dropto &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Rooms:\n     This controls who may drop items AT the location.  If the player\n     passes the lock, they will be permitted to drop items at that location.\n     If they do not pass the lock, they will be forbidden to drop anything\n     at that location.  If the lock does not exist, dropping items will\n     behave normally (based on permissions and any DropLocks).\n  \n  Exits, Players:\n     This lock is meaningless on players and exits.\n  \n</PRE>\n<A HREF=\"#@lock type droplock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type enterlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type enterlock\"><H3>@lock type EnterLock</H3></A><PRE>\n  Lock Type: EnterLock\n  Syntax   : @lock/enter &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players:\n     This lock specifies who will be able to enter the target when the \n     ENTER_OK flag is set on it.  If you do not pass the lock, you will be\n     unable to enter the target.  If the lock does not exist and the \n     ENTER_OK flag is set, then anyone will be able to enter it.\n  \n  Rooms:\n     This lock specifies who may enter the room from an object (or container)\n     inside that room.  If they do not pass the room's EnterLock, then they\n     will be unable to leave that object.\n  \n  Exits:\n     This lock is meaningless for exits.\n  \n</PRE>\n<A HREF=\"#@lock type droptolock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type getfromlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type getfromlock\"><H3>@lock type GetFromLock</H3></A><PRE>\n  Lock Type: GetFromLock\n  Syntax   : @lock/getfrom &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players, Rooms:\n     This controls who may get things AT the location.  If the target passes\n     the lock, it will be able to get items while at that location.  If they\n     do not pass the lock, they will be forbidden to get anything while at\n     that location.  If the lock does not exist, getting items in that \n     location behaves normally (based on permissions and locks on items).\n     This checks first the lock at the enactor's location, THEN it checks\n     the lock at the target location.  If either of those locks are not passed\n     then the target may not be gotten by the enactor.\n  \n  Exits:\n     This lock is meaningless on exits.\n  \n</PRE>\n<A HREF=\"#@lock type enterlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type givelock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type givelock\"><H3>@lock type GiveLock</H3></A><PRE>\n  Lock Type: GiveLock\n  Syntax   : @lock/give &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players:\n     This lock specifies who may give away the target.  If you do not pass\n     the lock, you will be unable to give the object to anything or anyone.\n     If the lock does not exist, then it can be given away freely.\n  \n  Exits, Rooms:\n     This lock is meaningless on rooms and exits.\n  \n</PRE>\n<A HREF=\"#@lock type getfromlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type givetolock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type givetolock\"><H3>@lock type GiveToLock</H3></A><PRE>\n  Lock Type: GiveToLock\n  Syntax   : @lock/giveto &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players, Rooms:\n     This controls who may give things AT the location.  If the target passes\n     the lock, it will be able to give items while at that location.  If they\n     do not pass the lock, they will be forbidden to give anything (except \n     money) at that location.  If the lock does not exist, giving items in \n     that location behaves normally (based on permissions and any GiveLocks).\n  \n  Exits:\n     This lock is meaningless on exits.\n  \n</PRE>\n<A HREF=\"#@lock type givelock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type leavelock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type leavelock\"><H3>@lock type LeaveLock</H3></A><PRE>\n  Lock Type: LeaveLock\n  Syntax   : @lock/leave &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players:\n     This lock specifies who may leave the target.  If you do not pass the\n     lock, you will be unable to leave the object (via the LEAVE command).\n     If the lock does not exist, then it can be left freely.\n  \n  Exits, Rooms:\n     This lock is meaningless on rooms and exits.\n  \n</PRE>\n<A HREF=\"#@lock type givetolock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type linklock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type linklock\"><H3>@lock type LinkLock</H3></A><PRE>\n  Lock Type: LinkLock\n  Syntax   : @lock/link &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Players, Rooms:\n     This lock specifies who may link soemthing TO the location if that\n     location is set LINK_OK.  If that location is set ABODE, then that\n     target may also be set as a HOME.  If there is no lock, it will be\n     able to be linked to freely.\n  \n  Exits:\n     This lock is meaningless on exits.\n  \n</PRE>\n<A HREF=\"#@lock type leavelock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type openlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type openlock\"><H3>@lock type OpenLock</H3></A><PRE>\n  Lock Type: OpenLock\n  Syntax   : @lock/open &lt;target&gt;=&lt;key&gt;\n  \n  Objects, Rooms:\n     This controls who may open exits AT the location.  If the player\n     passes the lock, they will be allowed to open an exit out from that\n     room.  If the lock does not exist, permission to open exits at\n     that location will behave normally.\n  \n  Players, Exits:\n     This lock is meaningless on players and exits.\n  \n</PRE>\n<A HREF=\"#@lock type linklock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type pagelock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type pagelock\"><H3>@lock type PageLock</H3></A><PRE>\n  Lock Type: PageLock\n  Syntax   : @lock/page &lt;target&gt;=&lt;key&gt;\n  \n  Players:\n     This lock determins who is allowed to page you.  If they do not pass the\n     lock, they will be unable to page you and receive your REJECT message\n     (see help on @reject).  If there is no lock, then people can page you\n     freely.\n  \n  Rooms, Exits, Objects:\n     This lock is meaningless on rooms, exits, and objects.\n  \n</PRE>\n<A HREF=\"#@lock type openlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type parentlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type parentlock\"><H3>@lock type ParentLock</H3></A><PRE>\n  Lock Type: ParentLock\n  Syntax   : @lock/parent &lt;target&gt;=&lt;key&gt;\n  \n  Players, Rooms, Exits, Objects:\n     This lock determins who may parent (@parent) an item to the target.  If\n     you do not pass the lock, you will be unable to parent something to it.\n  \n</PRE>\n<A HREF=\"#@lock type pagelock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type receivelock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type receivelock\"><H3>@lock type ReceiveLock</H3></A><PRE>\n  Lock Type: ReceiveLock\n  Syntax   : @lock/receive &lt;target&gt;=&lt;key&gt;\n  \n  Players, Objects:\n     This determins who may give things to the target.  If you do not pass\n     the lock, you will be unable to give anything to the target.  If the\n     lock does not exist, you may give things to it freely.  Players need\n     to be ENTER_OK to be given things.\n  \n  Rooms, Exits:\n     This lock is meaningless on exits and rooms.\n  \n</PRE>\n<A HREF=\"#@lock type parentlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type speechlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type speechlock\"><H3>@lock type SpeechLock</H3></A><PRE>\n  Lock Type: SpeechLock\n  Syntax   : @lock/speech &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Players, Objects:\n     This defines who may talk at the target location.  If you do not pass\n     the lock, you will be unable to use any type of communication at that\n     location.  This includes, say, pose, @emit, @oemit, and the like.\n     Admin level 4 and higher override this lock automatically.  If the lock\n     does not exist, you will be able to speak freely.\n  \n  Exits:\n     This lock is meaningless on exits.\n  \n</PRE>\n<A HREF=\"#@lock type receivelock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type teloutlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type teloutlock\"><H3>@lock type TeloutLock</H3></A><PRE>\n  Lock Type: TeloutLock\n  Syntax   : @lock/telout &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Players, Objects:\n     This defines who is allowed to teleport OUT of the target location.  If\n     you are unable to pass the lock, you will be unable to @teleport out. \n     Keep in mind that 'home' overrides this lock.  If the lock does not\n     exist, you may @teleport out freely.  If a room has a TeloutLock, you\n     will be unable to teleport out of objects inside it unless you pass it.\n  \n  Exits:\n     This lock is meaningless on exits.\n  \n</PRE>\n<A HREF=\"#@lock type speechlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type tportlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type tportlock\"><H3>@lock type TportLock</H3></A><PRE>\n  Lock Type: TportLock\n  Syntax   : @lock/tport &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects:\n     This controls who may teleport INTO the target location ONLY if the\n     JUMP_OK flag is set on the room.  If you do not pass the lock, you will\n     be unable to @teleport into the room.  If the room is JUMP_OK and there\n     is no lock, you may @teleport there freely.\n  \n  Players, Exits:\n     This lock is meaningless on players and exits.\n  \n</PRE>\n<A HREF=\"#@lock type teloutlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type twinklock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type twinklock\"><H3>@lock type TwinkLock</H3></A><PRE>\n  Lock Type: TwinkLock\n  Syntax   : @lock/twink &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects, Exits:\n     The twinklock is a unique lock in that it will allow anyone who passes\n     the lock control over that object.  THIS CAN BE A SECURITY RISK SO BE\n     CAREFUL!  The user who passes the lock will ONLY be able to modify/set\n     attributes.  They will be unable to set, modify, or remove flags, locks,\n     or anything else on the object.  It is generally wise to have objects\n     twinklocked be !INHERIT so that abuse will be limited.  If the lock\n     does not exist, then NO ONE other than the owner will be able to modify\n     that target.\n  \n  Players:\n     Players are special in that just like Rooms, Objects, and Exits, it\n     allows direct modification of them as a player, but also in the case\n     of player, the TwinkLock is special in that it's an inheritable lock.\n     This means if you pass the twinklock of a player, you automatically\n     pass that lock on everything that player owns.\n  \n  Special note:  You can set the item NOMODIFY if you want it to just have\n                 examine privalages and not modify privalages.\n  \n</PRE>\n<A HREF=\"#@lock type tportlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type uselock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type uselock\"><H3>@lock type UseLock</H3></A><PRE>\n  Lock Type: UseLock\n  Syntax   : @lock/use &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects, Exits, Players:\n     This specifies who may use the object.  Using the object includes giving\n     the object money to trigger PAY/COST (@pay/@cost) attributes, being able \n     to USE (@use) the object, triggering any type of listen command or being\n     able to use any type of macros (or $-command) commands.  If you do not\n     pass the lock, you will be unable to use that object.  If the lock does\n     not exist, then anyone will be able to use that object.\n  \n  Special:  %0 is passed into evaluation locks for uselocks.  The values exist:\n     0 -- Default.  Neither a $command or a ^listen (like when you do 'use')\n     1 -- $command was triggered\n     2 -- ^listen was triggered\n    \n  See Also: SHOWFAILCMD\n \n</PRE>\n<A HREF=\"#@lock type twinklock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type userlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type userlock\"><H3>@lock type UserLock</H3></A><PRE>\n  Lock Type: UserLock\n  Syntax   : @lock/user &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects, Exits, Players:\n     This is a dummy lock that has no special purpose inside the MUSH.  This\n     is meant entirilly for a user-preference.  This is to be used if you \n     have need to set up a lock-mechanism without having to 'block' locks\n     on that particular target.\n  \n  Special Enhancement:  If enabled, this lock also serves as a reality level\n     lock.  This in effect allows special 'tweeking' of reality levels so\n     that you may specify additional passes through the reality  The target\n     must be set CHKREALITY for this lock to work.  The CHKREALITY toggle is\n     only settable by WIZARD and higher.  Depending on the current \n     configuration of the locktype (@list options to see) the lock will check \n     if enactor passes lock on target, or if target passes lock on enactor.  It\n     will also check if the values are anded or or'd.  The following options \n     exist:\n               0 - Reality level or'd with lock pass based on target\n               1 - Reailty level or'd with lock pass based on enactor\n               2 - Reality level and'd with lock fail based on target\n               3 - Reality level and'd with lock fail based on enactor\n     \n     In condition 2 and 3, if the lock doesn't exist, it assumes pass \n     automatically.\n  \n</PRE>\n<A HREF=\"#@lock type uselock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type zonetolock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type zonetolock\"><H3>@lock type ZoneToLock</H3></A><PRE>\n  Lock Type: ZoneToLock\n  Syntax   : @lock/zoneto &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects, Exits, Players:\n     This allows people who pass the lock to be able to @zone items to your\n     zone.  This works similiar to the ParentLock with regards to @parents.\n     If the lock does not exist, only those who control the item may @zone it.\n  \n</PRE>\n<A HREF=\"#@lock type userlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@lock type zonewizlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@lock type zonewizlock\"><H3>@lock type ZoneWizLock</H3></A><PRE>\n  Lock Type: ZoneWizLock\n  Syntax   : @lock/zonewiz &lt;target&gt;=&lt;key&gt;\n  \n  Rooms, Objects, Exits, Players:\n     This allows people the ability to control and modify anything within that\n     zone's realm.  If you pass the lock you will have control, otherwise \n     it will be off limits to you.  If the lock does not exist, only those\n     who have power over the target may be able to control and modify it.\n     The ZoneWizLock allows the target to modify/examine anything that is\n     in that zone as long as it is not WIZARD (bitlevel 5) or higher owned.\n     If it is WIZARD or higher owned, then it follows normal permissions on\n     that target to what they can do with it.\n  \n</PRE>\n<A HREF=\"#@lock type zonetolock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@mailsig\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@mailsig\"><H3>@mailsig</H3></A><PRE>\n  Command: @mailsig &lt;targetplayer&gt;=&lt;string&gt;\n  \n  mail signatures are done by storing a user-def attribute on your character.\n  the attribute is called 'MAILSIG'.  To set this attribute, you would do:\n  \n  Examples:\n    @mailsig me=This is my signature.\n    &amp;mailsig me=This is my signature.\n    @set me=mailsig:This is my signature.\n  \n  Please keep in mind that this attribute is *NOT* evaluated for functions and\n  is taken as-is.\n  \n  See Also: mail, folder, MAILFILTER\n  \n</PRE>\n<A HREF=\"#@lock type zonewizlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@moniker\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@moniker\"><H3>@moniker</H3></A><PRE>\n  There is no @moniker.  You actually want @extansi.\n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Please see help on @extansi on how to utilize this.\n  \n  See Also: @ansiname, @titlecaption, ANSINAME, ansi(), EXTANSI TOGGLE,\n            @extansi, @caption  \n  \n</PRE>\n<A HREF=\"#@mailsig\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@move\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@move\"><H3>@move</H3></A><PRE>\n  Command: @move[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Move\n \n  Sets the message that an object sees after it moves from one location to\n  another, whether by using an exit, entering or leaving an object,\n  teleporting, or going home.\n \n  This attribute is meaningful for players, and things and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @move bopper = OK.  You're there now.\n  \n  See Also: @amove, @omove\n  \n</PRE>\n<A HREF=\"#@moniker\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@mvattr\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@mvattr\"><H3>@mvattr</H3></A><PRE>\n  Command: @mvattr &lt;object&gt;=&lt;old&gt;,&lt;new&gt;[,&lt;copy1&gt;]...\n  This command moves attributes around on an object.  The attribute &lt;old&gt; is\n  renamed &lt;new&gt; (and is copied to &lt;copy1&gt;, &lt;copy2&gt; and so on if specified).\n  If you cannot modify the &lt;old&gt; attribute (for instance if you are trying to\n  move the Last attribute, or if it were owned by another player), then a new\n  copy is made and the original is not removed.  If you are trying to move\n  the attribute into an attribute that you have no permission over, then\n  the original attribute is not deleted.\n  \n  See Also: @set, @cpattr\n  \n</PRE>\n<A HREF=\"#@move\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@name\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@name\"><H3>@name</H3></A><PRE>\n  Command: @name &lt;object&gt; = &lt;new name&gt;\n  \n  Changes the name of &lt;object&gt;.  &lt;object&gt; can be a thing, player, exit, or\n  room, specified as &lt;name&gt; or #&lt;dbref&gt; or 'me' or 'here'.\n \n  See '@list options' as to whether or not a player name may contain \n  spaces.  The default for RhostMUSH is to disallow spaces in player names.\n  \n  See Also: name(), @protect, @list options, @alias, @ansiname, @extansi, \n            @caption, @titlecaption\n  \n</PRE>\n<A HREF=\"#@mvattr\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@nameformat\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@nameformat\"><H3>@nameformat</H3></A><PRE>\n  Command: @nameformat[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: NameFormat\n  \n  This attribute allows a user to define a user-presentable way for names.\n  This replaces the normal name of the target when viewed from the INSIDE.\n  Thus, this only has effects for rooms, and for objects only when you are\n  inside them.  This is meaningless for exits and players.\n  \n  Examples:\n    &gt; look\n    A big Room\n    You see before you a big room.\n    Contents:\n    The Goat\n    &gt; @nameformat here=[name(me)] (I think?)\n    &gt; look\n    A big Room (I think?)\n    You see before you a big room.\n    Contents:\n    The Goat\n   \n  The mush has to be configured to enable this to work.  '@list options'\n  \n  See Also: @exitformat, @conformat\n  \n</PRE>\n<A HREF=\"#@name\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@notify\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@notify\"><H3>@notify</H3></A><PRE>\n  Command: @notify[/&lt;switches&gt;] &lt;object&gt;[=&lt;count|pid&gt;]\n  Notifies the semaphore &lt;object&gt;, running the first command that waited on\n  &lt;object&gt; using the '@wait &lt;object&gt;=&lt;command&gt;' or '\n  @wait &lt;object&gt;/&lt;time&gt;=&lt;command&gt;' forms of the @wait command.  If &lt;count&gt; is\n  specified, it indicates the number of times the semaphore is notified.\n  If there are no commands (or less than &lt;count&gt; commands) pending for\n  &lt;object&gt;, then subsequent @waits will not block until the semaphore count\n  reaches zero again.\n \n  The following switches are available:\n     /first - (default) Notify the first command waiting on the indicated\n              semaphore (or the first &lt;count&gt; commands).\n     /all   - Notify all commands waiting on the semaphore and reset the\n              semaphore count to zero.  &lt;count&gt; is ignored.\n     /pid   - Notify the command on &lt;object&gt; that matches the pid &lt;pid&gt;.\n     /quiet - Issue the notify quietly.  This can be mixed with any of\n              the other switches.\n \n  See Also: @drain, @ps, @wait, SEMAPHORES, @halt\n  \n</PRE>\n<A HREF=\"#@nameformat\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@odescribe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@odescribe\"><H3>@odescribe</H3></A><PRE>\n  Command: @odescribe[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Odesc\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone looks at &lt;object&gt;.  If the @odesc evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @odesc vase = carefully inspects the vase.\n  \n  See Also: look, @adescribe, @describe, @idesc, touch, @sotouch, \n            taste, @sotaste, listen, @solisten, smell, @sosmell\n  \n</PRE>\n<A HREF=\"#@notify\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@odfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@odfail\"><H3>@odfail</H3></A><PRE>\n  Command: @odfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Odfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to drop &lt;object&gt; but fails because they\n  didn't pass the object's drop lock.  if the message evaluates to null,\n  nothing is displayed.\n \n  Function references and %-substitutions are allowed in drop failure\n  messages, and are evaluated when someone drops the object.  In function\n  references, 'me' refers to the object being dropped, while %-substitutions\n  that refer to the enactor (such as %n, %#, %p, etc) refer to the dropper.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @odfail sword = tries to put down the sword but it leaps back\n                                       into %p hand.\n  \n  See Also: drop, @adfail, @dfail, @lock\n  \n</PRE>\n<A HREF=\"#@odescribe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@odrop\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@odrop\"><H3>@odrop</H3></A><PRE>\n  Command: @odrop[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Odrop\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone drops &lt;object&gt;, or to others in the room that the\n  player arrives in after taking an exit.  if the message evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: &lt;object&gt; @odrop loadstone = puts down the loadstone and then\n                                       wipes sweat from %p brow.\n           &lt;exit&gt;   @odrop elevator = enters the elevator from the lobby.\n  \n  See Also: drop, @adrop, @drop, DROP-TO, EXITS\n  \n</PRE>\n<A HREF=\"#@odfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oefail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oefail\"><H3>@oefail</H3></A><PRE>\n  Command: @oefail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Oefail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room as the player when he tries to enter the object but fails\n  because the object is not ENTER_OK or the player fails the\n  object's enter lock.  if the message evaluates to null, nothing is displayed.\n \n  The enter lock only affects the 'enter' command and its aliases (set via\n  the @ealias command), it does not affect exits that lead to the object or\n  teleporting in.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oefail car = tries to open the car's door, but it is locked.\n  \n  See Also: @aefail, @aenter, @ealias, @efail, @enter, @oenter, enter,\n            ENTER_OK\n  \n</PRE>\n<A HREF=\"#@odrop\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oemit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oemit\"><H3>@oemit</H3></A><PRE>\n  Command: @oemit[/&lt;switch&gt;] &lt;player&gt;=&lt;message&gt;\n  Emits &lt;message&gt; to everyone in your current location except for &lt;player&gt;.\n  \n  The following switches are available:\n     /noansi -- Show unevaluated ansi codes.\n     /multi  -- take &lt;player&gt; as a multi-target argument.\n  \n  See Also:  @emit, @pemit, SPOOFING\n  \n</PRE>\n<A HREF=\"#@oefail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oenter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oenter\"><H3>@oenter</H3></A><PRE>\n  Command: @oenter[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Oenter\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being entered when someone enters &lt;object&gt;.  Note that the\n  message is shown to those inside the object, not those outside.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.  If the message evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oenter wormhole = enters the wormhole from normal space.\n  \n  See Also: enter, @aenter, @enter, @oxenter\n  \n</PRE>\n<A HREF=\"#@oemit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ofail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ofail\"><H3>@ofail</H3></A><PRE>\n  Command: @ofail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Ofail\n \n  Sets the others failure message for &lt;object&gt;.  This message is seen others\n  in the same location as the actor when one of these events occurs:\n \n    - For exits: Someone tries to traverse the exit but cannot because they\n      fail the exit's default lock or the exit is not linked.\n    - For players and things: Someone tries to pick up the object but cannot\n      because they fail the object's default lock.\n    - For rooms, players, and things: Someone looks around inside the room,\n      player, or thing and fails the object's default lock.\n \n  Substitution and evaluation is performed on the message before it is shown.\n  If the message evaluates to null, nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples:\n    &gt; @ofail table = tries to pick up the table, but it is too heavy.  &lt;thing&gt;\n    &gt; @ofail doorway = tries the knob on the door, to no avail.         &lt;exit&gt;\n  \n  See Also: get, look, @afail, @fail, FAILURE\n  \n</PRE>\n<A HREF=\"#@oenter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ogfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ogfail\"><H3>@ogfail</H3></A><PRE>\n  Command: @ogfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Ogfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to give away &lt;object&gt; but fails because\n  they didn't pass the object's give lock.  If the message evaluates to null,\n  nothing is displayed.\n \n  Function references and %-substitutions are allowed in give failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the object being given away, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc) refer\n  to the (attempted) giver.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ogfail blob = tries to give away a sticky blob of goo.\n  \n  See Also: give, @agfail, @gfail, @lock\n  \n</PRE>\n<A HREF=\"#@ofail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@okill\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@okill\"><H3>@okill</H3></A><PRE>\n  Command: @okill[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Okill\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone kills &lt;object&gt;.  If the message evalautes to null,\n  nothing is displayed.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @okill guard = bashes in the guard's skull, killing him.\n  \n  See Also: kill, @akill, @kill, BEING KILLED, IMMORTAL, ROYALTY\n  \n</PRE>\n<A HREF=\"#@ogfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oleave\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oleave\"><H3>@oleave</H3></A><PRE>\n  Command: @oleave[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Oleave\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being left when someone leaves &lt;object&gt;.  Note that the\n  message is shown to those inside the object, not those outside.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.  If the message evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oleave wormhole = departs the wormhole to return to normal space.\n   \n  See Also: leave, @aleave, @leave, @oxleave\n  \n</PRE>\n<A HREF=\"#@okill\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@olfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@olfail\"><H3>@olfail</H3></A><PRE>\n  Command: @olfail[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Olfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room as the player when he tries to leave it but fails because the\n  player fails the object's leave lock.  If the message evaluates to null,\n  nothing is displayed.\n \n  The leave lock only affects the 'leave' command and its aliases (set via\n  the @ealias command), it does not affect going home, using an exit in the\n  location, or teleporting out.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @olfail plane = thinks about jumping out of the plane without a\n                           parachute, but wisely reconsiders.\n  \n  See Also: @aleave, @alfail, @lalias, @leave, @lfail, @oleave, leave\n  \n</PRE>\n<A HREF=\"#@oleave\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@omove\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@omove\"><H3>@omove</H3></A><PRE>\n  Command: @omove[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: Move\n \n  Sets the message that others in the same location see after the object has\n  moved to that location from somewhere else, whether by using an exit,\n  entering or leaving an object, teleporting, or going home.\n \n  This attribute is meaningful for players, and things and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @omove car = coasts to a stop.\n  \n  See Also: @amove, @move\n  \n</PRE>\n<A HREF=\"#@olfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@opay\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@opay\"><H3>@opay</H3></A><PRE>\n  Command: @opay[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Opay\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone pays &lt;object&gt; enough to satisfy its Cost attribute.\n  If the message evaluates to null, nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @opay Coke machine = slips some change into the coin slot on the\n                                Coke machine.  You hear some rumbling from\n                                inside the machine and a can of Coke appears\n                                in the tray at the bottom of the machine.\n  \n  See Also: give, @cost, @apay, @pay\n  \n</PRE>\n<A HREF=\"#@omove\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@open\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@open\"><H3>@open</H3></A><PRE>\n  Command: @open[/&lt;switches&gt;] &lt;direction list&gt; [=&lt;number&gt;[,&lt;direction list&gt;]]\n  Creates an exit in the specified direction(s). If &lt;number&gt; is specified,\n  it is linked to that room. Otherwise, it is created unlinked. You or anyone\n  else may use the '@link' command to specify where the unlinked exit leads.\n  Opening an exit costs 1 coin. If you specify &lt;number&gt;, linking costs 1 more\n  coin.  You can specify a second direction list (after the comma), which is \n  automatically opened in the room that the new exit goes TO and which is\n  linked back to where you are.  I.e.  @open north;n=#1234,south;s\n  would open exit 'north;n' from here to #1234, and an exit 'south;s'\n  from #1234 to here, assuming you have rights to open exits and link to\n  the rooms in question.\n  \n  Note:  To make variable exits, you @toggle the exit VARIABLE then set\n         an appropiate @exitto on it.\n   \n  The following switches are available:\n     /location  - Create the exit in your location (default).\n     /inventory - Create the exit on yourself.\n   \n  See Also: @dig, @link, LINKING\n  \n</PRE>\n<A HREF=\"#@opay\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@orfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@orfail\"><H3>@orfail</H3></A><PRE>\n  Command: @orfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Orfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to give &lt;object&gt; a thing that does not\n  pass &lt;object&gt;'s receive lock.  If the message evaluates to null, nothing\n  is displayed.\n \n  Function references and %-substitutions are allowed in receive failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the intended recipient of the object,\n  while %-substitutions that refer to the enactor (such as %n, %#, %p, etc)\n  refer to the (attempted) giver.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @orfail merchant=tries to unload some worthless trash on Astinous.\n  \n  See Also: give, @agfail, @arfail, @gfail, @ogfail, @rfail, @lock\n  \n</PRE>\n<A HREF=\"#@open\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@osuccess\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@osuccess\"><H3>@osuccess</H3></A><PRE>\n  Command: @osuccess[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;]\n  Attribute: Osucc\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone picks up the named player or thing, goes through the\n  named exit, or looks at the room and passes the room's lock.  If the message\n  evaluates to null, nothing is displayed.\n \n  Setting Osuccess messages on all takeable objects and usable exits is\n  considered good building practice.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples: &lt;object&gt; @osucc vase = carefully picks up the vase.\n            &lt;exit&gt;   @osucc doorway = opens the door and leaves the room.\n                                      The door closes behind %o with a click.\n  \n  See Also: get, look, @asuccess, @success, SUCCESS\n  \n</PRE>\n<A HREF=\"#@orfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@otfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@otfail\"><H3>@otfail</H3></A><PRE>\n  Command: @otfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Otfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to teleport to somewhere he does not have\n  permission.  You do not see this message if they couldn't teleport out of\n  their present location.  If the message evaluates to null, nothing is\n  displayed.\n \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport to the\n  specified destination.  In function references, 'me' refers to the teleport\n  destination, while %-substitutions that refer to the enactor (such as %n,\n  %#, %p, etc) refer to the player attempting the teleport.\n \n  When a player teleports another object (@tel &lt;object&gt;=&lt;destination&gt;), the\n  lock is checked against the player, not the object.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @otfail here = thinks about teleporting to the Magic Room, but\n                          decides against it at the last moment.\n  \n  See Also: @teleport, @atfail, @tfail, @lock\n  \n</PRE>\n<A HREF=\"#@osuccess\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@otofail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@otofail\"><H3>@otofail</H3></A><PRE>\n  Command: @otofail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Otofail\n  \n  Sets the message (prefixed by the player's name) that is shown to others\n  in the same room when someone tries to teleport out of somewhere he does\n  not have permission.  You do not see this message if they couldn't \n  teleport to their destination location.  If the message evaluates to null,\n  nothing is displayed.\n  \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport out of the\n  specified location.  In function references, 'me' refers to their current\n  location, while %-substitutions that refer to the enactor (such as %n, %#,\n  %p, etc) refer to the player attempting the teleport.\n  \n  When a player teleports another object (@tel &lt;object&gt;=&lt;destination&gt;), the\n  lock is checked against the player, not the object.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:   @otofail here = tries to teleport out of the Magic Room, but\n                             is unsuccessful.\n  \n  See Also: @teleport, @atofail, @tofail, @lock\n  \n</PRE>\n<A HREF=\"#@otfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@otport\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@otport\"><H3>@otport</H3></A><PRE>\n  Command: @otport[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Otport\n \n  Sets the message (prefixed by your name) that others in the room to which\n  the object goes see when the object teleports there.  If the message \n  evaluates to null, nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @otport me = appears in a flash of non-wizardly brilliance.\n   \n  See Also: @atport, @oxtport, @tport, @teleport\n  \n</PRE>\n<A HREF=\"#@otofail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oufail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oufail\"><H3>@oufail</H3></A><PRE>\n  Command: @oufail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Oufail\n \n  Sets the message that others in the same room see when someone tries to\n  use object but fails the object's use lock.  Note that the other functions\n  controlled by the use lock (paying, listening, and $-commands) do not\n  trigger Oufail.  If the message evaluates to null, nothing is displayed.\n \n  Example: @oufail robot = tries to activate the robot, but to no avail.\n   \n  See Also: @aufail, @ufail, @use\n  \n</PRE>\n<A HREF=\"#@otport\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ouse\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ouse\"><H3>@ouse</H3></A><PRE>\n  Command: @ouse[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Ouse\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone uses &lt;object&gt;.  If the message evaluates to null,\n  nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ouse camera = takes a picture with the camera.\n  \n  See Also: use, @ause, @use\n  \n</PRE>\n<A HREF=\"#@oufail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oxenter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oxenter\"><H3>@oxenter</H3></A><PRE>\n  Command: @oxenter[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Oxenter\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being left when someone enters &lt;object&gt;.  Note that the\n  message is shown to those outside the object, not those inside.  If the\n  message evaluates to null, nothing is displayed.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oxenter wormhole = climbs into the wormhole and vanishes.\n  \n  See Also: enter, @aenter, @enter, @oenter\n  \n</PRE>\n<A HREF=\"#@ouse\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oxleave\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oxleave\"><H3>@oxleave</H3></A><PRE>\n  Command: @oxleave[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Oxleave\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being entered when someone leaves &lt;object&gt;.  Note that the\n  message is shown to those outside the object, not those inside.  If the\n  message evaluates to null, nothing is displayed.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oxleave wormhole = steps out of a hyper spatial wormhole.\n   \n  See Also: leave, @aleave, @leave, @oleave\n  \n</PRE>\n<A HREF=\"#@oxenter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@oxtport\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@oxtport\"><H3>@oxtport</H3></A><PRE>\n  Command: @oxtport[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Oxtport\n \n  Sets the message (prefixed by your name) that others in the room from which\n  the object comes see when the object teleports out.  If the message\n  evaluates to null, nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oxtport me = disappears in a flash of non-wizardly brilliance.\n   \n  See Also: @atport, @otport, @tport, @teleport\n  \n</PRE>\n<A HREF=\"#@oxleave\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@parent\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@parent\"><H3>@parent</H3></A><PRE>\n  Command: @parent &lt;object&gt; [=&lt;parent&gt;]\n  This command sets the parent of &lt;object&gt; to &lt;parent&gt; (or clears the parent\n  if &lt;parent&gt; is omitted.  You must control &lt;object&gt;, and must own &lt;parent&gt;.\n  \n  If you are parenting rooms, and wish some of the exits of that room to\n  not be inherited, set the PRIVATE flag on those exits.\n  \n  See Also: PARENT OBJECTS., parents(), parent(), children()\n  \n</PRE>\n<A HREF=\"#@oxtport\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@password\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@password\"><H3>@password</H3></A><PRE>\n  Command: @password &lt;old password&gt;=&lt;new password&gt;\n \n  This command changes your password.\n   \n  See Also: @name\n  \n</PRE>\n<A HREF=\"#@parent\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@pay\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@pay\"><H3>@pay</H3></A><PRE>\n  Command: @pay[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Pay\n \n  Sets the message that is shown to the player who gives &lt;object&gt; enough\n  money to satisfy its Cost attribute.\n \n  This attribute is only meaningful for things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @pay Coke machine = You slip some change into the slot.\n  \n  See Also: give, @apay, @cost, @opay\n  \n</PRE>\n<A HREF=\"#@password\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@pemit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@pemit\"><H3>@pemit</H3></A><PRE>\n  Command: @pemit[/switches] &lt;what&gt;=&lt;message&gt;\n           @pemit/toreality/contents[/list] &lt;realities&gt;/&lt;what&gt;=&lt;message&gt;\n  \n  Emits &lt;message&gt; only to &lt;what&gt;, or to &lt;what&gt;'s contents of the /contents\n  switch is given.  &lt;what&gt; must be either in the same location as you or\n  be something you own.  You can also @pemit to distant players if\n  pagelocks allow you to page them, and this costs as much as a page\n  &lt;This feature is not present in all MUSHes&gt;.  You cannot @pemit to the\n  contents of something you don't own.  You may combine switches.\n  \n  The following switches are available:\n    /contents  - Send the message to the contents of the named object.\n    /object    - Send the message to the named object.\n    /silent    - Same as /object, for PENN compatibility\n    /noisy     - Send to the enactor of the command what was pemitted.\n    /zone      - Send to the specified zone (if not a zonemaster)\n                 Send to all rooms in a zone (if a zonemaster)\n    /nosub     - When used in junction with /list, it will keep ## and #@\n                 from evaluating.\n    /noansi    - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n  \n{ help @pemit2 to continue switches listing }\n  \n</PRE>\n<A HREF=\"#@pay\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@pemit2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@pemit2\"><H3>@pemit2</H3></A><PRE>\n  The following switches are available: (continued)\n    /list      - Send the message to the given list of players.\n                 For this, it parses '##'s just like @dolist or iter().\n                 Example: @pemit/list #1 #2 #3=hello ##!\n                          @pemit/list #1 #2 #3=hello ## (number #@)\n                 (The first would return 'Hello #1!' to #1 and so forth)\n                 (The second would return 'Hello #1 (number 1)' and so forth)\n    /noeval    - Do not evaluate string.\n    /reality   - Will check the reality level of the target to see if the\n                 target will be able to see the message based on the\n                 reality level check.  Need REALITY_LEVELS compiled in.\n    /toreality - specify the realities you wish to @pemit to.  Note:  this\n                 is only useful for the /content switch.\n    /oneeval   - By default @pemit evaluates for every person in /list.\n                 This forces a single evaluation.  It assumes /nosub by \n                 default.  This can only be used with the /list switch.\n\n    Note: /toreality has unique syntaxing.  Examples follow:\n  \n    Syntax:  @pemit/toreality/contents &lt;reality1 ... realityX&gt;/&lt;target&gt;=&lt;msg&gt; \n             @pemit/toreality/list/con &lt;reality1 ... realityX&gt;/&lt;targets&gt;=&lt;msg&gt;\n    \n    Example: @pemit/toreality/con Invis Umbra/here=Only Umbra and Invis sees.\n                \n  See Also: page, @emit, @oemit, SPOOFING\n  \n</PRE>\n<A HREF=\"#@pemit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@pipe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@pipe\"><H3>@pipe</H3></A><PRE>\n  Command: @pipe[/&lt;switch&gt;] [&lt;attribute&gt;]\n \n  This command will allow you to pipe output that you would normally see on\n  your screen into a specified attribute.  You must have permission to write\n  to the attribute, the attribute must be a valid attribute name, and the\n  attribute can not be full (or it'll auto-disable upon attempt).  The \n  attribute is also always on the enactor.  You can't specify another object.\n  The following switches are used:\n    /on     -- Turn on piping to the specified attribute.  \n    /off    -- Turn off piping to the attribute.\n    /tee    -- This turns on piping but also allows viewing output normally.\n    /status -- This gives the current status of your piping.\n  \n  Please note, you obviously can not pipe to multiple attributes at once,\n  and once the attribute is filled to capacity, piping to that attribute\n  will be automatically disabled and output will return to your screen\n  as normal.  If you specify /tee output will occur normally to your screen\n  but you will still be notified if the attrib is filled or an error\n  occured while writing output to it.\n  \n  If you @toggle yourself NOISY, then every output segment that would show\n  up on your screen will notify you that it was piped to the file.  This\n  can be spammy, but it is useful if you want some notification and you\n  have not used /tee.\n  \n  If you are still piping to an attribute, it will notify you of this upon\n  connection, regardless of the NOISY @toggle. \n  \n  You can not use this feature if you are set NO_CODE, GUEST, or WANDERER. \n  \n  Example:\n    &gt; @pipe/on BOO;WHO;@pipe/off \n    Piping to attribute has been enabled.\n    Piping to attribute has been disabled.\n    &gt; think v(boo)\n    Player Name          On For Idle  Guild       Doing\n    Tester                00:01   0s  Citizen\n    1 Player logged in. (Bummer.)\n  \n  See Also: @toggle, NOISY, @set, &amp;\n\n</PRE>\n<A HREF=\"#@pemit2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@prefix\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@prefix\"><H3>@prefix</H3></A><PRE>\n  Command: @prefix[/&lt;switch&gt;] &lt;object&gt; = &lt;prefix text&gt;\n  Attribute: Prefix\n \n  This attribute, when set, will be used as a prefix for all text forwarded\n  by the 'audible' flag on an object or exit.  The default if this attribute\n  is not set is 'From &lt;object name&gt;,' for objects, and 'From a distance,'\n  for exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    &gt; @fo test=out\n    &gt; @set #378=puppet\n    test&gt; test grows ears and can now hear.\n    &gt; :does something silly.\n    Wizard does something silly.\n    test&gt; From a distance, Wizard does something silly.\n    &gt; @prefix out=From some strange place\n    Set.\n    &gt; :does something even sillier.\n    Wizard does something even sillier.\n    test&gt; From some strange place Wizard does something even sillier.\n  \n  See Also: AUDIBLE, @filter, @forwardlist, @infilter, @inprefix\n  \n</PRE>\n<A HREF=\"#@pipe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@progprompt\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@progprompt\"><H3>@progprompt</H3></A><PRE>\n  Attribute: @progprompt &lt;player&gt;=&lt;string&gt;\n  \n  This specifies a string (from 1 to 40 characters) that you may specify \n  for a player going through a program instead of the base '-'.  If you \n  specify a 'NULL' as the string, there will be no prompt.  \n  \n  The @progprompt does not end the string with a &gt;.  If you wish to have\n  one, you'll have to add it to the end of the defined prompt.\n  \n  See Also: @program, @quitprogram\n</PRE>\n<A HREF=\"#@prefix\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@program\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@program\"><H3>@program</H3></A><PRE>\n  Command: @program &lt;player&gt;=&lt;obj/attr&gt;[:&lt;prefix&gt;]\n  \n  This command allows for small 'programs' within RhostMUSH. To understand this\n  command, you must first understand the fact that it completely bypasses any\n  commands, built-in or otherwise, and allows you to send user-input directly\n  into your code.\n   \n  A simple example:\n   \n  @va me=$start:@prog %#=me/vb:Please enter a word:\n  @vb me=@emit You entered %0!;@prog %#=me/vc:Please enter another word:\n  @vc me=@emit This time, you entered %0. You're done!\n   \n  &gt; start\n  Please enter a word:\n  &gt; foobar       (Note that @program literally gives you a '&gt;' prompt.)\n  You entered foobar!\n  Please enter another word:\n  &gt; hoopla\n  This time you entered hoopla. You're done!\n{ 'help @program2' for more }\n \n</PRE>\n<A HREF=\"#@progprompt\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@program2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@program2 \"><H3>@program2 </H3></A><PRE>\n  As you can see, this command basically takes what a user types at the\n  prompt, stuffs it into %0 in the code in &lt;obj/attr&gt;, and then triggers\n  that attribute. Note that when @program triggers an attribute, the enactor\n  of that triggered attribute is &lt;player&gt;, and is inserted into %#.\n  r-registers are NOT preserved when @program triggers an attribute.  This\n  is an unfortunate side-effect from allowing @program to be done across\n  reboots and shutdowns.  Keep in mind that this will work differently \n  than MUX's @program by splitting up arguments that were seperated by \n  commas into %0 - %9.  Any argument after the 10th is ignored.  \n  Check @list options to see if it is using this method, or the MUX method \n  where it's only %0.\n   \n  An optional message, &lt;prefix&gt;, may be specified and will be output before\n  the @program prompt. This is useful for telling the user what information\n  they need to supply.\n \n  A player caught in @program may send a command through to the normal\n  command processor at the @program prompt by prefixing it with the '|'\n  character, for example, '|WHO'.  This may be disabled for that particular\n  player with the @toggle NOSHPROG or if globally set this way.  Check\n  @list options if shelling commands from within a program is allowed.\n \n{ 'help @program3' for more }\n  \n</PRE>\n<A HREF=\"#@program\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@program3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@program3\"><H3>@program3</H3></A><PRE>\n  There are extra things you may do with @program that is not avalable\n  anywhere else.  \n  \n  First, @program can be done across @reboots, @shutdowns, QUIT, LOGOUT,\n  or (heaven forbid) server crashes.  It remembers where the program was\n  last left off at when the player is next on.\n  \n  Secondly, there are @toggles in junction with @program.\n    1.  NOSHPROG -- specifies the target can not use | to access commands\n                    outside the program.\n    2.  PROG     -- specifies the target can use a @program on someone else\n    3   IMMPROG  -- specifies only an immortal can @quitprogram that player.\n  \n  Third, you can use pre-defined prompts instead of the default '&gt; ' for\n  players.  This is done via the @progprompt command.  \n    i.e.  @progprompt *player=This is your prompt&gt;\n  \n  Note that you need to specify the &gt; at the end if you want it.\n  \n  See @list options to see what config parameters are enabled for @program\n  on the RhostMUSH you're at.\n  \n  Help files borrowed from TinyMUX 2.0 with permission.\n  \n  See Also: @toggle, @progprompt, @quitprogram\n \n</PRE>\n<A HREF=\"#@program2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@protect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@protect\"><H3>@protect</H3></A><PRE>\n  Command: @protect[/&lt;switch&gt;] [&lt;player-name&gt;]\n  \n  This command 'protects' your current user name from being used by anyone\n  else.  Essentially this 'locks in' your name so that if you ever switch\n  your name to something else, no one else will be able to use the name\n  that you have marked for protection.  You have full access to any name\n  you protect.  You can only protect your currently active name.  You may\n  delete any name you, yourself, have protected.  Wizards may remove any\n  protected name.  Immortals bypass protected names.\n  \n  Switches available:\n    /list    - (default) - list the names you current have protected.  This\n               does not take any arguments.\n    /add     - Add your current name to your protected name list.  This does\n               not take any arguments.\n    /del     - Remove the specified name from your protected name list.  This\n               requires an argument.\n    /alias   - Adds the protected name as an alias.  This will work like \n               @alias with regards to player lookups.\n    /unalias - This removes the protected name as an alias.  You can not\n               remove the active playername as an alias.\n  \n  Examples:\n    &gt; say name(me)\n    You say &quot;Bob&quot;\n    &gt; @protect/add\n    Your current name has been added to your protect list.\n    &gt; @protect/del Bob\n    You have successfully deleted 'Bob' from your protect list.\n  \n  See Also: @name, @alias, listprotection()\n  \n</PRE>\n<A HREF=\"#@program3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ps\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ps\"><H3>@ps</H3></A><PRE>\n  Command: @ps[/&lt;switches&gt;] [&lt;object&gt;]\n  \n  Lists information about the commands you have on each of the queues.\n  Unless the /summary switch is used, this command lists all the commands you\n  have on the queues, optionally along with their enactor and arguments.\n  Commands scheduled to be executed at a later time (by the @wait command)\n  also show the number of seconds until they will be executed and/or the\n  semaphore on which they are waiting.  If &lt;object&gt; is specified, only\n  commands run by &lt;object&gt; are listed, otherwise all commands run by any of\n  your objects is listed.  A summary of the number of commands listed and the\n  total number of commands in the queues is also displayed.  This command is\n  useful for identifying infinite loops in programs.  You will find PID\n  processes by each job in the queue.  These can be killed by PID by using\n  the @halt/pid if you have control to kill that job.\n \n  The following switches are available:\n     /brief   - (default) Display a brief summary that shows the semaphore\n                number, time-to-wait, object running the command, and the\n                command to be run.\n     /long    - In addition to the information in the /brief report, display\n                the name and number of the object that caused the command\n                to be run (the enactor) and the arguments to the command.\n     /summary - Display just the queue counts.\n     /all     - this displays all the processes that you have control over.\n   \n  See Also: @notify, @wait, @drain, @halt, pid()\n  \n</PRE>\n<A HREF=\"#@protect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@quitprogram\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@quitprogram\"><H3>@quitprogram</H3></A><PRE>\n  Command: @quitprogram &lt;player&gt;\n  \n  Terminates the @program for player. If &lt;player&gt; is not specified, then it\n  works upon the enactor (a player may quit a program while they are in it\n  by piping out @quitprogram, see 'help @program').\n  \n  Example:\n    &gt; @quitprogram *TinyPlayer\n    @program cleared.\n \n  See also: @program, @progprompt.\n \n</PRE>\n<A HREF=\"#@ps\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@quota\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@quota\"><H3>@quota</H3></A><PRE>\n  Command: @quota\n  Two forms:\n \n  There are two forms of the @quota command.\n    ALTERNATE :  Alternate quota gives a more enhanced view and tighter player\n                 control over the use of their quota.  The draw back to this\n                 is it can be somewhat confusing and overpowering for new\n                 users.  This quota shows specific quota left and used for\n                 all areas of building (rooms, objects, exits, players) and\n                 allows the user to move around quota in various areas.\n  \n    STANDARD  :  Standard quota (the default) is the simple quota system \n                 that shows total quota, used quota,  and quota left.  This \n                 will not give you a breakdown of what quota is used where, \n                 but you can do this with the @stat command (help @stat) for \n                 a simplified showing.\n \n  For help on each of the quota systems, type in 'help @quota alternate' for\n  the alternate quota system or 'help @quota standard' for the standard\n  (and default) quota system.\n  \n  See Also: @quota standard, @quota alternate\n                \n</PRE>\n<A HREF=\"#@quitprogram\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@quota alternate\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@quota alternate\"><H3>@quota alternate</H3></A><PRE>\n  Command: @quota[[/&lt;switches&gt;] [&lt;arguments&gt;]] [&lt;player&gt;] [=&lt;value&gt;]\n  \n  @quota for RhostMUSH has been seriously revamped.  There exists a lot of \n  options not previously available.  For one, @quota now gives detailed areas \n  that quota is currently divided.  Secondly, it allows the user to move quota \n  into various areas or set up automatic transfer as they wish.  It gives the \n  players a better control of their quota use.  The following switches and \n  options are available:\n  \n  /take me=&lt;order&gt; - this allows the user to specify the order in which quota \n                     will be transferred when a given area runs out.  Note.\n                     Quota is automatically taken from your general pool, \n                     first.  Valid arguments are R, E, T, P for ROOM, EXIT, \n                     THING, PLAYER (robots).\n  /xfer me=#,x,y   - This allows you to manually transfer free quota from one \n                     area to another. The '#' is the amount of quota to move,\n                     'x' is the area to move from, and 'y' is the area to move\n                     to.  Valid arguments are R, E, T, P, G for 'x' and 'y'.\n                     They stand for [R]oom, [E]xit, [T]hing, [P]layer, and\n                     [G]eneral. \n  \n{ For more, type: help quota alternate2 }\n  \n</PRE>\n<A HREF=\"#@quota\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@quota standard\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@quota standard\"><H3>@quota standard</H3></A><PRE>\n  Command: @quota [&lt;player&gt;] [=&lt;value&gt;]\n \n  @quota in the standard system will show you either quota that you have or\n  quota that a given player has (if you have power over that player).\n \n  Typing either '@quota' (with no arguments) or '@quota me' \n  (or @quota &lt;yourname&gt;) will give you your own personal quota information.\n  \n  Staff who are able (or those empowered to do so) may at anytime change\n  the quota of a player by typing a numeric value after an equals.\n  IE:  @quota &lt;targetplayer&gt;=&lt;value&gt;\n  \n  See Also: @quota alternate, @quota\n  \n</PRE>\n<A HREF=\"#@quota alternate\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@race\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@race\"><H3>@race</H3></A><PRE>\n  Command: @race[/&lt;switch&gt;] &lt;player&gt;=&lt;string&gt;\n  \n  This sets the RACE attribute on the targeted player.  Only staff can set\n  this attribute.  The following switches are available:\n    /quiet - This suppresses the 'Set.' message when you set the attribute.\n    /noisy - This verbosely prints the setting message.\n  \n  See Also: @guild, race(), guild(), @set, &amp;\n  \n</PRE>\n<A HREF=\"#@quota standard\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@register\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@register\"><H3>@register</H3></A><PRE>\n  Command: @register &lt;character&gt;=&lt;email&gt;\n  This registers a character on-line and mails the specified &lt;email&gt; the \n  password for the character you created.  This can only be done by GUEST and\n  only if the autoregistration is enabled.  Depending on configurations, you\n  may be able to do this at the connect screen as well, except it's just\n  'register'.\n  \n</PRE>\n<A HREF=\"#@race\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@reject\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@reject\"><H3>@reject</H3></A><PRE>\n  Command: @reject[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Reject\n \n  This attribute is sent as a message to anyone who tries to page you but\n  you have prevented them from paging you via your page lock (@lock/page).\n  %# is used for the person paging you and does not represent you yourself.\n \n  This attribute is only meaningful for players, and will never be\n  automatically referenced on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @reject me = I _told_ you not to page me anymore...\n  \n  See Also: @away, @idle, page\n  \n</PRE>\n<A HREF=\"#@register\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@remit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@remit\"><H3>@remit</H3></A><PRE>\n  Command: @remit &lt;location&gt;=&lt;message&gt;\n           @pemit/contents &lt;location&gt;=&lt;message&gt;\n \n  Please see help on @pemit.\n  \n  This is an alias for @pemit/contents\n  \n  This function relies on the config parameter 'pemit_any_object' to\n  be enabled to allow remitting to any room, otherwise, it will only\n  work on rooms you control.\n  \n  See Also: @pemit\n \n</PRE>\n<A HREF=\"#@reject\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@rfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@rfail\"><H3>@rfail</H3></A><PRE>\n  Command: @rfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Rfail\n \n  Sets the message that a player sees when he tries to give an object to\n  someone else, but the receiver refuses to accept the object because\n  the object didn't pass its receive lock.\n \n  Function references and %-substitutions are allowed in receive failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the intended recipient of the object,\n  while %-substitutions that refer to the enactor (such as %n, %#, %p, etc)\n  refer to the (attempted) giver.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @gfail merchant = The merchant doesn't want your worthless trash.\n  \n  See Also: give, @agfail, @arfail, @gfail, @ogfail, @orfail, @lock\n  \n</PRE>\n<A HREF=\"#@remit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@robot\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@robot\"><H3>@robot</H3></A><PRE>\n  Command: @robot &lt;name&gt;=&lt;password&gt;\n  Creates a robot player owned by you.  The robot has its ROBOT flag set, so\n  it may use the OUTPUTPREFIX and OUTPUTSUFFIX commands that most publicly\n  available robot programs require.  This command costs 1000 coins.\n  Note that some sites do not restrict OUTPUTSUFFIX and OUTPUTPREFIX to\n  robots.\n  \n  See Also: OUTPUTPREFIX, OUTPUTSUFFIX, ROBOT, TYPES OF OBJECTS\n  \n</PRE>\n<A HREF=\"#@rfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@runout\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@runout\"><H3>@runout</H3></A><PRE>\n  Command: @runout[/&lt;switch&gt;] &lt;object&gt; = &lt;command list&gt;\n  Attribute: Runout\n \n  Sets the actions to be taken by &lt;object&gt; when another of its attributes is\n  triggered (either automatically or via the @trigger command) and its\n  Charges attribute is zero.  When this occurs, the Runout attribute is run\n  INSTEAD OF the attribute that would have run normally.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @runout magic wand = :fizzles and turns to dust.; @destroy me\n  \n  See Also: @charges\n  \n</PRE>\n<A HREF=\"#@robot\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@salisten\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@salisten\"><H3>@salisten</H3></A><PRE>\n  Command: @salisten[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: SAListen\n   \n  Sets the actions to be taken when &lt;object&gt; is listened to.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @salisten kitten = :purrs lovingly.\n  \n  See Also: listen, @slisten, @solisten, look, @adesc, touch, @satouch,\n            taste, @sataste, smell, @sasmell\n  \n</PRE>\n<A HREF=\"#@runout\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sasmell\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sasmell\"><H3>@sasmell</H3></A><PRE>\n  Command: @sasmell[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: SASmell\n   \n  Sets the actions to be taken when &lt;object&gt; is smelled.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sasmell kitten = :meows questionably as you sniff them.\n  \n  See Also: smell, @ssmell, @sosmell, look, @adesc, touch, @satouch,\n            taste, @sataste, listen, @salisten\n  \n</PRE>\n<A HREF=\"#@salisten\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sataste\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sataste\"><H3>@sataste</H3></A><PRE>\n  Command: @sataste[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: SATaste\n   \n  Sets the actions to be taken when &lt;object&gt; is tasted.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sataste kitten = :licks you back.\n  \n  See Also: taste, @staste, @sotaste, look, @adesc, touch, @satouch,\n            listen, @salisten, smell, @sasmell\n  \n</PRE>\n<A HREF=\"#@sasmell\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@satouch\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@satouch\"><H3>@satouch</H3></A><PRE>\n  Command: @satouch[/&lt;switch&gt;] &lt;object&gt; = &lt;command-list&gt;\n  Attribute: SATouch\n   \n  Sets the actions to be taken when &lt;object&gt; is touched.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @satouch kitten = :meows with the attention.\n  \n  See Also: touch, @stouch, @sotouch, look, @adesc, listen, @salisten,\n            taste, @sataste, smell, @sasmell\n  \n</PRE>\n<A HREF=\"#@sataste\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@saystring\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@saystring\"><H3>@saystring</H3></A><PRE>\n  Command: @saystring[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  \n  Sets the substitute string that is used instead of the default 'says' when\n  you talk in a location.  \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  The SAFELOG @toggle when set convers what you see from 'You say...' to\n  'yourname says' or whatever @saystring is set to.\n   \n  IN the example, when you talk, it would show:  Player barks &quot;Hello&quot;\n  \n  Example: \n  &gt; @saystring me=barks\n  Set.\n  &gt; &quot;hello\n  You say &quot;hello&quot;\n  &gt; @toggle me=SAFELOG\n  Set.\n  &gt; &quot;hello\n  Player barks &quot;hello&quot;\n  \n  See Also: say, &quot;, safelog toggle\n  \n</PRE>\n<A HREF=\"#@satouch\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@search\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@search\"><H3>@search</H3></A><PRE>\n  Command: @search[/&lt;switch&gt; [&lt;player&gt;] [&lt;class&gt;=&lt;restrict&gt;[,&lt;low&gt;[,&lt;high&gt;]]]\n \n  Displays information about objects that meet the search criteria.\n  Because this command is computationally expensive, it costs 200 coins.\n  &lt;player&gt; restricts the search to the named player, while &lt;class&gt;\n  and &lt;restrict&gt; control the objects listed.  Type 'help search classes'\n  for a list of the classes you may use.\n  \n  Except when getting lists of players ('@search type=player' or\n  '@search flags=P'), you may only search for objects that you own.\n  You may limit the range of the search with &lt;low&gt; and &lt;high&gt;, which specify\n  the objects to start and stop the search at, respectively.  The default for\n  &lt;low&gt; is #0 and the default for &lt;high&gt; is the last object in the database.\n  \n  The following switches exist for @search:\n      /nogarbage     - (immortal only) search without garbage/recover checks.\n  \n  Examples:\n    @search flags=PWc              &lt;-- search for connected wizards.\n    @search type=room              &lt;-- list all rooms owned by me.\n    @search eval=gt(money(##),10)  &lt;-- search for things worth more than 10.\n    @search type=room,100,300      &lt;-- Rooms between #100 and #300, inclusive\n    @search object=Test,5000       &lt;-- Things starting with Test from object\n                                       #5000 to the end of the database.\n  \n  See Also: @find, search(), searchng(), SEARCH CLASSES\n  \n</PRE>\n<A HREF=\"#@saystring\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@selfboot\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@selfboot\"><H3>@SELFBOOT</H3></A><PRE>\n  Command: @selfboot[/&lt;switch&gt;] [&lt;port&gt;]\n \n  This command will disconnect all ports except the port that you\n  initiate the command from. (IE: it will disconnect your hung logins)\n  \n  You may specify the following optional switches:\n     /list -- Will list what ports you're currently connected on.\n     /port -- When specified with the &lt;port&gt; will boot the specific\n              connection.\n  \n  If you have a single connection, it will not boot it.\n  \n  Note: @selfboot by itself will boot every connection that has a greater\n        idle time than the other connection.  Which, if you have two ACTIVE\n        connections may not be the result you want :)\n   \n  See Also: port()\n \n</PRE>\n<A HREF=\"#@search\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@set\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@set\"><H3>@set</H3></A><PRE>\n  Command: @set[/&lt;switches&gt;] &lt;object&gt;=[!]&lt;flag&gt; [[!]&lt;flag&gt; [!]&lt;flag&gt; ...]\n           @set[/&lt;switches&gt;] &lt;object&gt;=&lt;attribute&gt;:&lt;value&gt;\n           @set[/&lt;switches&gt;] &lt;object&gt;=&lt;attribute&gt;:_&lt;fromobj&gt;/&lt;fromattr&gt;\n           @set[/&lt;switches&gt;] &lt;object&gt;/&lt;attr&gt;=[!]&lt;attrflag&gt;\n  Synonym: &amp;&lt;attribute&gt; &lt;object&gt;[=&lt;value&gt;]\n \n  The available switches are:\n        /QUIET - sets/removes the target without the 'Set.' or 'Cleared.' \n        /NOISY - sets/removes the target with a verbose SET message.\n        /TREE  - sets a TREE (with branches) of a given attribute.\n   \n  The first form sets (or clears) the indicated flag(s) on &lt;object&gt;, It \n  accepts multiple flags for arguments if so desired. the second form sets \n  the &lt;attribute&gt; attribute on &lt;object&gt; to &lt;value&gt;, creating a new user-named \n  attribute if there is no attribute named &lt;attribute&gt;.  The third form \n  copies an attribute from another object, and the fourth form sets \n  (or clears) an attribute flag on the &lt;attr&gt; attribute of &lt;object&gt;.\n   \n  When setting attributes on an object, you may also use the command\n  '@&lt;attribute&gt; &lt;object&gt; = &lt;value&gt;' if the attribute is a predefined\n  attribute.  You may also use the command '&amp;&lt;attribute&gt; &lt;object&gt; = &lt;value&gt;'\n  to set either predefined attributes or user-named attributes.  Either of\n  these is equivalent to the second form of the @set command.\n  \n  Attributes must start with an alpha character, or in special cases any\n  of the following characters: ~_#.+\n  \n  The /tree switch is ignored on anything not regarding setting or clearing\n  attributes.  If any branch in the specified defined tree-attribute is \n  not allowed to be set, the entire attribute itself will not be set either. \n  \n{ 'help @set2' for more }\n</PRE>\n<A HREF=\"#@selfboot\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@set2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@set2\"><H3>@set2</H3></A><PRE>\n  The following flags may be set using the fourth form of the @set command:\n     no_command  ($) - Prevent $-commands and ^-patterns defined in the \n                       attribute from being performed.\n     no_inherit  (I) - Prevents children of the object from obtaining the \n                       attribute.  From their perspective the attribute does\n                       not exist.  This works on ZMO's as well.\n     visual      (V) - Anyone may see the attribute when they examine you, and\n                       may get the attribute with get().\n     no_clone    (N) - The attribute will not be copied to the @cloned object.\n     no_parse    (n) - The attribute will not parse %%0 to %%9 with $commands\n     hidden      (M) - The attribute is visual only to wizards.\n     god         (G) - Only #1 can modify the attribute.\n     dark        (D) - Only #1 can see the attribute.\n     pinvisible  (p) - Only wizard can see the attr, but anyone can modify it.\n     immortal    (i) - Only immortal and higher can modify the attribute.\n     royalty     (W) - Only wizard and higher can modify the attribute.\n     wizard          - This is an alias for 'royalty'\n     councilor   (a) - Only councilor and higher can modify the attribute.\n     architect   (B) - Only architect and higher can modify the attribute.\n     guildmaster (g) - Only guildmaster and higher can modify the attribute.\n     locked      (+) - This happens if you @lock thing/attr the attribute.\n     safe        (s) - The attribute can not be modified.\n                  \n  Please note, you can not set multiple attributes or flags at once this way.\n  Reference: ATTRIBUTE FLAGS\n  \n  See Also: @lock, examine, FLAGS, &amp;, @guild, @race, ATTRIBUTE FLAGS,\n            ATTRIBUTE TREES\n  \n</PRE>\n<A HREF=\"#@set\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sex\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sex\"><H3>@sex</H3></A><PRE>\n  Command: @sex[/&lt;switch&gt;] &lt;object&gt; = &lt;gender&gt;\n  Attribute: Sex\n \n  Sets the gender for &lt;object&gt;, which is used to determine which pronouns to\n  use when replacing %p, %o, %s, and %a parameters in messages that apply to\n  &lt;object&gt;.  Genders that start with M or m are considered male, those\n  starting with F, f, W, or w are considered female, those starting with\n  P or p are considered plural, and anything else is considered neuter.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @sex me = female\n           @sex me = No thank you (Silly, but possible.  Treated as neuter)\n  \n  See Also: GENDER\n  \n</PRE>\n<A HREF=\"#@set2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sfail\"><H3>@sfail</H3></A><PRE>\n  Command: @sfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Sfail\n  \n  Sets the message that is shown to someone who fails to pass a SpeechLock\n  on a room that is also set AUDITORIUM.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @sfail here = Don't talk.  There is a performance in progress.\n  \n  \n  See Also: AUDITORIUM, @lock, @asfail\n  \n</PRE>\n<A HREF=\"#@sex\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@skip\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@skip\"><H3>@skip</H3></A><PRE>\n  Command: @skip &lt;boolean expression&gt;=&lt;command&gt;\n           @skip/ifelse &lt;boolean expression&gt;=&lt;true command&gt;[,&lt;false command&gt;]\n  \n  The @skip command 'skips' the command from being executed if the boolean \n  logic presented to @skip is true.  The command will be processed in the\n  normal queue and not executed out of order.  Any value other than '0'\n  is considered 'true' and not a true boolean.  This only processes a single\n  command.  If multiple commands are required, please use @include.\n  \n  Notice if you specify the /ifelse switch the condition is reversed to match\n  how a normal if-else statement would work.  @skip/ifelse is aliased to\n  @if and @ifelse.\n  \n  Examples:\n    &gt; @wait 0={think 1;think 2;@skip 0=think 3;think 4}\n    1\n    2\n    3\n    4\n    &gt; @wait 0={think 1;think 2;@skip 1=think 3;think 4}\n    1\n    2\n    4\n  \n  See Also: @include, @force, @trigger, @skip, @break, @assert, @switch\n\n</PRE>\n<A HREF=\"#@sfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@slisten\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@slisten\"><H3>@slisten</H3></A><PRE>\n  Command: @slisten[/&lt;switch&gt;] &lt;object&gt; = &lt;description&gt;\n  Attribute: SListen\n   \n  Sets the listen message for &lt;object&gt;, which others see when they listen to\n  the object.  Giving all your objects, rooms, and exits good listens is\n  a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these listens, and\n  are evaluated when someone listens to the object.  In function references,\n  'me' refers to the object being listened to, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the listener.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    &lt;object&gt; @slisten vase = You hear the flowers gently move in the breeze.\n    &lt;exit&gt;   @slisten elevator = You hear a ring as the elevator opens.\n  \n  See Also: listen, @salisten, @solisten, look, @desc, touch, @stouch,\n            taste, @staste, smell, @ssmell\n  \n</PRE>\n<A HREF=\"#@skip\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@solisten\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@solisten\"><H3>@solisten</H3></A><PRE>\n  Command: @solisten[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: SOListen\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone listens to &lt;object&gt;.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @solisten vase = carefully listens to the vase.\n  \n  See Also: listen, @slisten, @salisten, look, @odesc, touch, @sotouch,\n            taste, @sotaste, smell, @sosmell\n  \n</PRE>\n<A HREF=\"#@slisten\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sosmell\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sosmell\"><H3>@sosmell</H3></A><PRE>\n  Command: @sosmell[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: SOSmell\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone smells the &lt;object&gt;.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sosmell vase = breathes in the fragrant flowers.\n  \n  See Also: smell, @ssmell, @sasmell, look, @odesc, touch, @sotouch,\n            taste, @sotaste, listen, @solisten\n  \n</PRE>\n<A HREF=\"#@solisten\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sotaste\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sotaste\"><H3>@sotaste</H3></A><PRE>\n  Command: @sotaste[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: SOTaste\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone tastes the &lt;object&gt;.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sotaste vase = licks the vase... why... you don't know.\n  \n  See Also: taste, @staste, @sataste, look, @odesc, touch, @sotouch,\n            listen, @solisten, smell, @sosmell\n  \n</PRE>\n<A HREF=\"#@sosmell\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sotouch\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sotouch\"><H3>@sotouch</H3></A><PRE>\n  Command: @sotouch[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: SOTouch\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone touches an &lt;object&gt;.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sotouch vase = carefully runs their fingers over the vase.\n  \n  See Also: touch, @stouch, @satouch, look, @odesc, listen, @solisten,\n            taste, @sotaste, smell, @sosmell\n  \n</PRE>\n<A HREF=\"#@sotaste\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sql\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sql\"><H3>@sql</H3></A><PRE>\n  Command: @sql &lt;query&gt;\n   \n  This command issues an SQL query if the MUSH supports SQL and can connect \n  to an SQL server. You must be wizard/immortal to use @sql.\n   \n  Generally, the sql() function is more useful for coding, as it delimits its\n  return values, but @sql is handy for INSERT-type queries and quick checks. \n  If you pass arbitrary data to @sql, be sure you call sqlescape() on it; \n  see the example in help sql().\n   \n  Example:\n    &gt; @sql SHOW TABLES\n   \n  See also: sql(), @sqlconnect, @sqldisconnect, sqlon(), sqloff(),\n            sqlescape(), sqlping(), esclist(), unesclist()\n\n\n</PRE>\n<A HREF=\"#@sotouch\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sqlconnect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sqlconnect\"><H3>@sqlconnect</H3></A><PRE>\n  Command: @sqlconnect\n  \n  This attempts to establish an SQL connection to the remote MySQL database.\n  Only wizards+ can use this feature.\n  \n  Example:\n    &gt; @sqlconnect\n  \n  See Also: sqlon(), @sqldisconnect, sqloff(), @sql, sql(), sqlescape(),\n            sqlping(), esclist(), unesclist()\n  \n</PRE>\n<A HREF=\"#@sql\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sqldisconnect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sqldisconnect\"><H3>@sqldisconnect</H3></A><PRE>\n  Command: @sqldisconnect\n  \n  This attempts to close an SQL connection to the remote MySQL database.\n  Only wizards+ can use this feature.\n  \n  Example:\n    &gt; @sqldisconnect\n  \n  See Also: sqloff(), @sqlconnect, sqlon(), @sql, sql(), sqlescape()\n            sqlping(), esclist(), unesclist()\n\n</PRE>\n<A HREF=\"#@sqlconnect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ssmell\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ssmell\"><H3>@ssmell</H3></A><PRE>\n  Command: @ssmell[/&lt;switch&gt;] &lt;object&gt; = &lt;description&gt;\n  Attribute: SSmell\n   \n  Sets the smell message for &lt;object&gt;, which others see when they smell \n  the object.  Giving all your objects, rooms, and exits good smells (or\n  bad smells for that matter) is a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these smells, and\n  are evaluated when someone smelling the object.  In function references,\n  'me' refers to the object being smelled, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the smeller.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    &lt;object&gt; @ssmell vase = The flowers give off a wonderful aroma.\n    &lt;exit&gt;   @ssmell elevator = The elevator smells like cigar smoke.\n  \n  See Also: smell, @sasmell, @sosmell, look, @desc, touch, @stouch,\n            taste, @staste, listen, @slisten\n  \n</PRE>\n<A HREF=\"#@sqldisconnect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@startup\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@startup\"><H3>@startup</H3></A><PRE>\n  Command: @startup[/&lt;switch&gt;] &lt;object&gt; = &lt;command list&gt;\n  Attribute: Startup\n \n  Sets a list of commands to be performed by &lt;object&gt; when the game is\n  started up.  Typical actions include going home, cleaning visitors out of\n  a room, resetting a puzzle or complex object to its initial state, or\n  starting up an object that wants to run continuously.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @startup me = @vz me=MUSH was last restarted at [time()].\n           @startup me = home\n  \n</PRE>\n<A HREF=\"#@ssmell\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@staste\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@staste\"><H3>@staste</H3></A><PRE>\n  Command: @staste[/&lt;switch&gt;] &lt;object&gt; = &lt;description&gt;\n  Attribute: STaste\n   \n  Sets the taste message for &lt;object&gt;, which others see when they taste \n  the object.  Giving all your objects, rooms, and exits good tastes is\n  a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these tastes, and\n  are evaluated when someone tastes the object.  In function references,\n  'me' refers to the object being tasted, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the taster.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    &lt;object&gt; @staste vase = The flowers don't taste very good.  You feel sick.\n    &lt;exit&gt;   @staste elevator = Lick an elevator? You pull back in disgust.\n  \n  See Also: taste, @sataste, @sotaste, look, @desc, touch, @stouch,\n            listen, @slisten, smell, @ssmell\n  \n</PRE>\n<A HREF=\"#@startup\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@stats\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@stats\"><H3>@stats</H3></A><PRE>\n  Command: @stats[/all] [&lt;player&gt;]\n  Display the number of objects in the game.  @stats/all gives a\n  breakdown by object types.  If &lt;player&gt; is specified, the breakdown\n  for the named player is given.  You may only list individual counts\n  for yourself.  If invoked with no arguments or switches this command is\n  free, but if you specify either /all or &lt;player&gt;, then this  command costs\n  200 coins to run, because it is computationally expensive.\n  \n  See Also: stats(), @search\n  \n</PRE>\n<A HREF=\"#@staste\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@stouch\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@stouch\"><H3>@stouch</H3></A><PRE>\n  Command: @stouch[/&lt;switch&gt;] &lt;object&gt; = &lt;description&gt;\n  Attribute: STouch\n   \n  Sets the touch message for &lt;object&gt;, which others see when they touch \n  the object.  Giving all your objects, rooms, and exits good touch messages\n  is a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these touches, and\n  are evaluated when someone touches the object.  In function references,\n  'me' refers to the object being touched, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the toucher.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    &lt;object&gt; @stouch vase = You feel the careful craftmanship.\n    &lt;exit&gt;   @stouch elevator = You push the button and the elevator moves.\n  \n  See Also: touch, @satouch, @sotouch, look, @desc, listen, @slisten,\n            taste, @staste, smell, @ssmell\n  \n</PRE>\n<A HREF=\"#@stats\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@success\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@success\"><H3>@success</H3></A><PRE>\n  Command: @success[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Succ\n \n  Sets the message that is shown to the player who successfully picks up the\n  named player or thing, goes through the named exit, or looks at the room\n  and passes the room's lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: &lt;object&gt; @succ vase = You carefully pick up the delicate vase.\n           &lt;exit&gt;   @succ doorway = You open the door and walk through the\n                                    doorway.\n  \n  See Also: get, look, @asuccess, @osuccess, SUCCESS\n  \n</PRE>\n<A HREF=\"#@stouch\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sudo\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sudo\"><H3>@sudo</H3></A><PRE>\n  Command: @sudo[&lt;/switch&gt;] &lt;target&gt;=&lt;command&gt;\n  \n  The @sudo allows you to execute a command through the target. This is\n  done through the normal command processor and while similiar permissions\n  to @force, does not suffer from the queue delay.  You can not @sudo to\n  something you have no control over.  @sudo performs the action according\n  to the target's viewpoint, including location. @sudo only works on a single\n  command.  If you wish to @sudo multiple commands, use in junction with\n  @include.  By default, all registers altered during the @sudo are considered\n  local.\n  \n  Available switches:\n    /globalize -- treat registers to target as non-localized.  Dangerous.\n    /clearregs -- clear the registers of the default localized registers.\n  \n  Examples:\n    &gt; @sudo *player=say boo\n    Player says &quot;boo&quot;\n    &gt; @va *player=say boo;say baa\n    &gt; @sudo *player=@include me/va  (notice it triggers @va based on target)\n    Player says &quot;boo&quot;\n    Player says &quot;baa&quot;\n  \n  See Also: @include, @force, @trigger, @skip \n  \n</PRE>\n<A HREF=\"#@success\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@sweep\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@sweep\"><H3>@sweep</H3></A><PRE>\n  Command: @sweep[/&lt;switches&gt;]\n  This command tells you all of the objects, players, and exits that are\n  listening in the room you are currently in, as well as the objects you are\n  carrying.  Most objects only listen for a particular string or phrase, so\n  they normally do not pose a problem if you need privacy.  You will have to \n  be careful of players, puppets, and audible exits since they will hear\n  everything you say and do.  There are several switches that may be used to\n  limit the type of listeners that are checked for.  They are:\n     /here      - Check the room I am in.\n     /inventory - Check my inventory.\n     /exits     - Check exits in the room.\n     /commands  - Check for objects that have $-commands set on them.\n     /connected - Check for connected players and their puppets.\n     /listeners - Check for objects with @listen set to something.\n     /players   - Check for players and their puppets, whether or not they\n                  are connected.\n \n  The default is to search for everything.  If you specify one or more\n  switches from either category (either location or listener type then only\n  that location or listener type is checked.\n  \n  See Also: @listen, AUDIBLE, PUPPETS\n  \n</PRE>\n<A HREF=\"#@sudo\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@switch\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@switch\"><H3>@switch</H3></A><PRE>\n  Command: @switch[/&lt;switches&gt;] &lt;string&gt;=&lt;t1&gt;,&lt;c1&gt; [,&lt;tN&gt;,&lt;cN&gt;]... [,&lt;cD&gt;]\n  Compares &lt;string&gt; against the targets &lt;t1&gt;, &lt;t2&gt;, etc, until a match is\n  found, at which time the corresponding list of commands is performed.\n  Wildcards, and the &lt; and &gt; operators are allowed in the targets.  By\n  default, any list whose target matches the string is executed (the targets\n  are not mutually exclusive). If no target matches, the default list\n  &lt;cD&gt; is executed.\n   \n  The following switches are available:\n     /all      - (default) Perform the actionlists associated with all targets\n                 that match &lt;string&gt;.\n     /first    - Perform only the actionlist associated with the first target\n                 that matches &lt;string&gt;.\n     /case     - Allow case sensitivity in matches.  Only for /first and /all.\n     /regall   - Same as /all but use regular expression matching. \n     /regfirst - Same as /first but use regular expression matching.\n     /notify   - This issues a @notify on the object after @switch executes.\n     /inline   - process command 'inline' and don't queue it.\n     /clearreg - if inline, clear registers for each arguement\n     /localize - if inline, localize registers for each argument\n     /nobreak  - if inline, keep breaks localized per argument\n  \n  If configured, you may use #$ as a substition.   #$ is substituted with \n  the value of &lt;string&gt;. In this way, the commands in &lt;c1&gt;..&lt;cN&gt;..&lt;cD&gt; \n  have a short-hand way of getting at the matched value.  Case does not do\n  wildcard matches.\n  \n  Please check @list options if this has been enabled. \n  \n{ help @switch2 for examples }\n\n</PRE>\n<A HREF=\"#@sweep\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@switch2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@switch2\"><H3>@switch2</H3></A><PRE>\n  Command: @switch[/&lt;switches&gt;] &lt;string&gt;=&lt;t1&gt;,&lt;c1&gt; [,&lt;tN&gt;,&lt;cN&gt;]... [,&lt;cD&gt;]\n  CONTINUED:\n  \n  Example:\n    &gt; @switch 1=1,say yes\n    You say &quot;yes&quot;\n    &gt; @switch/first [add(1,1)]=2,say yes,2,say maybe,say no\n    You say &quot;yes&quot;\n    &gt; @switch/all [add(1,1)]=2,say yes,2,say maybe,say no\n    You say &quot;yes&quot;\n    You say &quot;maybe&quot;\n    &gt; @switch/all [add(1,1)]=3,say yes,3,say maybe,say no\n    You say &quot;no&quot;\n    &gt; @switch/first FooFoo=*boo*,say yes,*oo*,say maybe,say no\n    You say &quot;maybe&quot;\n  \n  See Also: switch(), case(), ifelse()\n  \n</PRE>\n<A HREF=\"#@switch\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@teleport\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@teleport\"><H3>@teleport</H3></A><PRE>\n  Simple:  @teleport [&lt;object&gt;=] &lt;location&gt;\n  Complex: @teleport[/switch] [&lt;obj1,obj2,...&gt;=[dest1, dest2,...]] &lt;room/thing&gt;\n           @teleport[/switch] [&lt;obj1,obj2,...&gt;=[dest1, dest2,...]] &lt;exit&gt;\n           @teleport[/switch] [&lt;obj1,obj2,...&gt;=[dest1, dest2,...]] home\n   \n  The first form of the complex command moves &lt;object&gt; (or you) to the named\n  room or thing.  The second form sends &lt;object&gt; (or you) to the destination\n  of the named exit, while the third form sends &lt;object&gt; (or you) home.\n  If the destination room has a drop-to, the object will go to the drop-to\n  instead of the named location.\n  \n  For the first form of the @teleport command, the object being teleported \n  must pass its location's TeloutLock; and you must control the destination,\n  or it must be JUMP_OK and you must pass the destination's TportLock.\n \n  The second and third forms let you remove any object from locations you\n  control by sending them through an exit or to their home.\n  \n  The following switches exist for @teleport:\n     /list  - specify a list of things to teleport\n     /quiet - teleports the target quietly bypassing all messages on them.\n              (This is only available to councilor and higher)\n  \n{ help @teleport2 for help on using /list with @teleport - including examples }\n  \n</PRE>\n<A HREF=\"#@switch2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@teleport2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@teleport2\"><H3>@teleport2</H3></A><PRE>\n  Simple:  @teleport [&lt;object&gt;=] &lt;location&gt;\n  Complex: @teleport[/switch] [&lt;obj1,obj2,...&gt;=[dest1, dest2,...]] &lt;room/thing&gt;\n           @teleport[/switch] [&lt;obj1,obj2,...&gt;=[dest1, dest2,...]] &lt;exit&gt;\n           @teleport[/switch] [&lt;obj1,obj2,...&gt;=[dest1, dest2,...]] home\n  \n  With the use of the /list, you are able to specify multiple objects.\n  You can either specify a single destination for all of them, or\n  separate destinations for each one.  If you have more objects than\n  destinations (minus the fact of having one single destination), than\n  the excess objects are ignored.  Likewise, if you have more destinations\n  than objects, the excess destinations are ignored.  The destination list\n  must be separated by commas as shown if more than one destination is\n  given.\n \n  Examples:\n    @tel/list #45 #54 #46=home    - teleport #45 #54 #46 all home\n    @tel/list #45 #54=#0,#584     - teleport #45 to #0 and #54 to #584\n    @tel #45=home                 - teleport #45 home\n    @tel home                     - teleport the enactor home\n    @tel/list/quiet #45 #56=#59   - teleport #45 and #56 to #59 quietly\n    @tel/quiet #45=home           - teleport #45 home quietly\n  \n  See Also: JUMP_OK, @lock (tport and telout), @tfail, @otfail, @atfail\n  \n</PRE>\n<A HREF=\"#@teleport\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@tfail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@tfail\"><H3>@tfail</H3></A><PRE>\n  Command: @tfail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Tfail\n \n  Sets the message that a player sees when he tries to teleport to somewhere\n  he does not have permission.  You do not see this message if you couldn't\n  teleport out of your present location.\n \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport to the\n  specified destination.  In function references, 'me' refers to the teleport\n  destination, while %-substitutions that refer to the enactor (such as %n,\n  %#, %p, etc) refer to the player attempting the teleport.\n \n  When a player teleports another object (@tel &lt;object&gt;=&lt;destination&gt;), the\n  lock is checked against the player, not the object.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @tfail here=A psychic barrier prevents you from teleporting there.\n  \n  See Also: @teleport, @atfail, @otfail, @lock\n \n</PRE>\n<A HREF=\"#@teleport2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@titlecaption\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@titlecaption\"><H3>@titlecaption</H3></A><PRE>\n  Command: @titlecaption[/&lt;switch&gt;] &lt;object&gt; = &lt;string&gt;\n  Attribute: Title_Name\n  \n  This attribute sets up a title (prefix) for the target player when\n  they are looked at or looked at in a given location.  You may set\n  a large title, but only the first 40 characters will be displayed.\n  No carrage returns are allowed in this string and it is only useful\n  for players.\n  \n  Example:\n    &gt; lo me\n    Tinyplayer(#123Pc)\n    You see nothing special.\n    &gt; @titlecaption me=Doctor\n    &gt; lo me\n    Doctor Tinyplayer(#123Pc)\n    You see nothing special.\n  \n  See Also: @ansiname, @extansi, @name, @caption\n\n</PRE>\n<A HREF=\"#@tfail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@tofail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@tofail\"><H3>@tofail</H3></A><PRE>\n  Command: @tofail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Tofail\n  \n  Sets the message that a player sees when he tries to teleport out of\n  somewhere he does not have permission.  You do not see this message if you\n  couldn't teleport to your destination location.\n  \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport to the\n  specified destination.  In function references, 'me' refers to the\n  current location, while %-substitutions that refer to the enactor (such\n  as %n, %#, %p, etc) refer to the player attempting the teleport.\n  \n  When a player teleports another object (@tel &lt;object&gt;=&lt;destination&gt;), the\n  lock is checked against the player, not the object.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:    @tofail here = A psychic barrier keeps you from teleporting out.\n  \n  See Also: @teleport, @atofail, @otofail, @lock\n \n</PRE>\n<A HREF=\"#@titlecaption\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@toggle\"><H3>@toggle</H3></A><PRE>\n  Command: @toggle[/switches] &lt;object&gt; = &lt;toggle(s)&gt;\n \n  Turns toggles on and off on an object. To turn a toggle on you specify\n  it's name, to turn it off you specify it's name prefixed with a '!'.\n \n  The following switches exist for @toggle:\n      /check &lt;me&gt;     : checks your toggle list\n      /clear          : clears the toggle list\n \n  Examples:\n    @toggle me=monitor            &lt;Would turn on monitor for you&gt;\n    @toggle me=!monitor           &lt;Would turn monitor off for you&gt;\n   \n  See Also: toggle list, toggles\n \n</PRE>\n<A HREF=\"#@tofail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@tport\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@tport\"><H3>@tport</H3></A><PRE>\n  Command: @tport[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Tport\n \n  Sets the message that an object sees whenever it teleports.\n  The message is displayed after the object moves to its new location.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @tport me = Hey! I teleported. Wow!\n   \n  See Also: @atport, @otport, @oxtport, @teleport\n  \n</PRE>\n<A HREF=\"#@toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@trigger\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@trigger\"><H3>@trigger</H3></A><PRE>\n  Command: @trigger &lt;object&gt;/&lt;attr&gt; [=&lt;param&gt; [, &lt;param&gt;]... ]\n  Invokes an action list stored in an attribute on an object.  The triggering\n  object becomes the enactor and the positional parameters %0 through %9\n  are set to the supplied parameters.  If a @charges attribute exists on \n  the object being triggered, that attribute is reduced by one and when\n  it reaches 0, can no longer be triggered.  You may specify the /command\n  switch to trigger attributes that start with $command sequences.  This\n  switch is ignored on attributes without $command sequences.\n  \n  The following switches exist for @trigger:\n      /quiet   - Don't report the 'trigger' message when triggering.  \n      /command - Trigger attributes that are $command/^listen attributes.\n  \n  Examples:\n    &gt; @va me=$foo:@emit whee\n      Set\n    &gt; @tr/quiet/command me/va\n      whee\n  \n  See Also: LOOPING, u(), @include\n  \n</PRE>\n<A HREF=\"#@tport\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@ufail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@ufail\"><H3>@ufail</H3></A><PRE>\n  Command: @ufail[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Ufail\n \n  Sets the message that someone sees when they try to use object but fail\n  the object's use lock.  Note that the other functions controlled by the use\n  lock (paying, listening, and $-commands) do not trigger Oufail.  This\n  behavior is overridden with the SHOWFAILCMD flag.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ufail robot = The robot pointedly ignores you.\n   \n  See Also: @aufail, @oufail, @use\n  \n</PRE>\n<A HREF=\"#@trigger\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@unlink\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@unlink\"><H3>@unlink</H3></A><PRE>\n  Command: @unlink &lt;room/exit&gt;\n  This command removes drop-tos on rooms and clears the destination on exits.\n  Once unlinked, an exit may be taken over by anyone with the @link command.\n  \n  See Also: @link, LINKING, @destroy\n  \n</PRE>\n<A HREF=\"#@ufail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@unlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@unlock\"><H3>@unlock</H3></A><PRE>\n  Command: @unlock[/&lt;whichlock&gt;] &lt;object&gt;\n           @unlock &lt;object&gt;/&lt;attrib&gt;\n  \n  The first form removes the lock on &lt;object&gt;, so that anyone may pass\n  through (if an exit) or pick it up (if a player or an object).\n  \n  The second form clears the locked flag on the indicated attribute of the\n  named object.  This allows the attribute to change ownership to the new\n  owner automatically when the object is @chowned, and allows the owner\n  of the object to @chown the attribute to itself or to overwrite it.\n  You must own the attribute to be unlocked, but you do not need to own the\n  object.  For a listing of locks to use in &lt;whitchlock&gt; please see:\n  \n         help mail lock   - help on how to remove a mail lock.\n         help @lock locks - list of available locks you can @unlock.\n  \n  See Also: @chown, @lock, ATTRIBUTE OWNERSHIP\n  \n</PRE>\n<A HREF=\"#@unlink\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@uptime\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@uptime\"><H3>@uptime</H3></A><PRE>\n  This is an alias for the +uptime command.\n  \n</PRE>\n<A HREF=\"#@unlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@use\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@use\"><H3>@use</H3></A><PRE>\n  Command: @use[/&lt;switch&gt;] &lt;object&gt; = &lt;message&gt;\n  Attribute: Use\n \n  Sets the message that is shown to the player who uses &lt;object&gt;.\n \n  This attribute is only meaningful for players and things, and will never\n  be automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @use camera = You take a picture with the camera.  Click.\n  \n  See Also: use, @ause, @ouse\n  \n</PRE>\n<A HREF=\"#@uptime\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@verb\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@verb\"><H3>@verb</H3></A><PRE>\n  Command: @verb &lt;victim&gt;=&lt;actor&gt;,&lt;what&gt;,&lt;def&gt;,&lt;owhat&gt;,&lt;odef&gt;,&lt;awhat&gt;,&lt;args&gt;\n \n  This command provides a way to do user-defined verbs with associated\n  @attr/@oattr/@aattr groups. Invoking it does the following:\n  \n  &lt;actor&gt; sees the contents of &lt;victim&gt;'s &lt;what&gt; attribute. The &lt;def&gt; string\n  argument is currently ignored.  It served a purpose in a past version\n  of @verb, and has been left in to minimize problems with old objects.\n  \n  Everyone in the same room as &lt;actor&gt; sees the contents of\n    &lt;victim&gt;'s &lt;owhat&gt; attribute, with &lt;actor&gt;'s name prepended.\n  \n  &lt;victim&gt; then executes the contents of his &lt;awhat&gt;\n    attribute.\n  \n  By supplying up to nine &lt;args&gt;, you may pass those values on\n  the stack (i.e. %0, %1, %2, etc. up through %9).\n \n  You must control the victim, but need not control the actor.\n \n{ 'help @verb2' for more }\n</PRE>\n<A HREF=\"#@use\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@verb2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@verb2\"><H3>@verb2</H3></A><PRE>\n  Here is a description of the arguments to @verb:\n    victim - The object that is searched for attributes, and which runs the\n             &lt;awhat&gt; attribute if it is found.\n    actor  - The object that 'did' the verb, this is the value for %#/%n/etc\n             in substitutions, and this object's name is included in the\n             message to others in the same location.\n    what   - The name of the attribute containing the message to be delivered\n             to the actor.\n    whatd  - No purpose now. Left in for compatibility.\n    owhat  - The name of the attribute containing the message (prefixed by the\n             actor's name) that is sent to everyone in the room with actor.\n    owhatd - No purpose now. Left in for compatibility.\n    awhat  - The name of the attribute that is to be executed by the victim.\n    args   - The comma-separated arguments to be passed for substitution\n             (%0-%9).  If there is more than one argument, enclose all the\n             arguments within curly braces.  Any argument that contains an\n             embedded comma needs to be enclosed in curly braces as well.\n \n{ 'help @verb3' for more }\n</PRE>\n<A HREF=\"#@verb\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@verb3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@verb3\"><H3>@verb3</H3></A><PRE>\n  Examples:\n    &gt; &amp;xtest test1=You just tested test1.\n    &gt; &amp;oxtest test1=just xtested test1.\n    &gt; &amp;axtest test1=&quot;I was xtested.  Yikes.  Arg1=%0, Arg2=%1, Arg3=%2.\n    &gt; @verb test1=me,xtest,XTEST DFLT,oxtest,OXTEST DFLT,axtest,{a,b c,de}\n    You just xtested test1.\n    test1 says &quot;I was xtested. Yikes. Arg1=a, Arg2=b c, Arg3=de.&quot;\n    &gt; &amp;xtest test1\n    &gt; &amp;test test1=$test:@verb test1=%n,xtest,nil,oxtest,nil,axtest,{a,b c,de}\n    TEST\n    You just tested test1.\n    test1 says &quot;I was xtested. Yikes. Arg1=a, Arg2=b c, Arg3=de.&quot;\n  \n</PRE>\n<A HREF=\"#@verb2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@version\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@version\"><H3>@version</H3></A><PRE>\n  This is an alias for the version command.\n  \n</PRE>\n<A HREF=\"#@verb3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@wait\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@wait\"><H3>@wait</H3></A><PRE>\n  Command: @wait &lt;seconds&gt;=&lt;command&gt;\n           @wait &lt;object&gt;[/&lt;seconds&gt;]=&lt;command&gt;\n           @wait/pid &lt;PID&gt;=[+|-]&lt;new seconds&gt;\n           @wait/until &lt;real time&gt;=&lt;command&gt;\n           @wait &lt;object&gt;[/&lt;real time&gt;]=&lt;command&gt;\n           @wait/pid/until &lt;PID&gt;=&lt;real time&gt;\n           @wait/recpid &lt;REG&gt; &lt;time&gt;=&lt;command&gt;\n           @wait/recpid/until &lt;REG&gt; &lt;real time&gt;=&lt;command&gt;\n           @wait/recpid &lt;REG&gt; &lt;object&gt;[/&lt;seconds&gt;]=&lt;command&gt;\n  \n  The first form of @wait executes &lt;command&gt; after &lt;seconds&gt; seconds.  \n  \n  The second form increments the semaphore count for &lt;object&gt; and executes\n  &lt;command&gt; after &lt;object&gt; is notified with the @notify command.  If the\n  semaphore count for &lt;object&gt; is negative (because it has been notified more\n  times than it has been waited on), then &lt;command&gt; is run immediately.\n  If &lt;seconds&gt; is specified in the second form, the command is automatically\n  run after &lt;seconds&gt; seconds even if the semaphore isn't notified.  This\n  command charges a deposit of 10 coins, which is refunded when &lt;command&gt;\n  is executed.\n  \n  You may specify miliseconds instead of whole numbers.\n  \n{ see 'help @wait2' to continue }\n  \n</PRE>\n<A HREF=\"#@version\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@wait2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@wait2\"><H3>@wait2</H3></A><PRE>\n  Command: -- CONTINUED\n           @wait &lt;seconds&gt;=&lt;command&gt;\n           @wait &lt;object&gt;[/&lt;seconds&gt;]=&lt;command&gt;\n           @wait/pid &lt;PID&gt;=[+|-]&lt;new seconds&gt;\n           @wait/until &lt;real time&gt;=&lt;command&gt;\n           @wait &lt;object&gt;[/&lt;real time&gt;]=&lt;command&gt;\n           @wait/pid/until &lt;PID&gt;=&lt;real time&gt;\n           @wait/recpid &lt;REG&gt; &lt;time&gt;=&lt;command&gt;\n           @wait/recpid/until &lt;REG&gt; &lt;real time&gt;=&lt;command&gt;\n           @wait/recpid &lt;REG&gt; &lt;object&gt;[/&lt;seconds&gt;]=&lt;command&gt;\n  \n  The third form of @wait will re-specify the seconds of a waited or semaphored\n  queue entry.  It does this by referencing the PID of the process that is \n  returned when you do a '@ps'.  You may specify a + or - to increment or \n  decrement the existing time of the wait state.  The total time can't exceed\n  the maximum time event (maximum time possible) or be less than 10 seconds\n  from the current system clock time.\n  \n  The /until switch will specify that you want to use a real-time (futurebased)\n  instead of a time offset.  This time would be in seconds.\n  \n  The /recpid switch allows you to specify a register that the PID of the \n  process is stored into.  With this PID, you may then optionally use @notify, \n  @halt, or any other command that recognizes PIDS to handle the queued job.  \n  The register can be any of the SETQ registers (0-9 default) that you wish to\n  use.\n  \n  See Also: @drain, @notify, @ps, SEMAPHORES, setq(), setr(), r(), nameq(), \n            pid()\n  \n</PRE>\n<A HREF=\"#@wait\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@wall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@wall\"><H3>@wall</H3></A><PRE>\n  Command: @wall &lt;message&gt;\n  This command allows even mortals (if set at RhostMUSH default) to\n  @wall to everyone on the mush.  Keep in mind this is expensive.\n  (default of 500 gold - @list costs shows how much it is currently worth)\n  And also keep in mind to not abuse it, else the wizards may show their\n  wrath.\n  \n  See Also: NO_YELL, NO_WALLS, COSTS\n  \n</PRE>\n<A HREF=\"#@wait2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@whereall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@whereall\"><H3>@whereall</H3></A><PRE>\n  Command: @whereall\n  \n  This command, like @whereis, will show the locations of all connected \n  players not set UNFINDABLE.  Anyone set UNFINDABLE will show that they\n  wish to have privacy and their location will not be shown.\n  \n  See Also: @whereis, loc()\n  \n</PRE>\n<A HREF=\"#@wall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@whereis\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@whereis\"><H3>@whereis</H3></A><PRE>\n  Command: @whereis &lt;player&gt;\n  \n  This command will relate to the player the location of the specified player.\n  Any player hidden will show to the user that he/she wishes to have privacy\n  and their location will not be given.\n  \n  See Also: @whereall, loc()\n  \n</PRE>\n<A HREF=\"#@whereall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@wipe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@wipe\"><H3>@wipe</H3></A><PRE>\n  Command: @wipe[/&lt;switch&gt;] &lt;object&gt;[/&lt;wild-attr&gt;]\n \n  This command erases attributes from an object.  All attributes that match\n  &lt;wild-attr&gt; (or all attributes, if &lt;wild-attr&gt; is not specified) are removed\n  from &lt;object&gt;.  Attributes that you do not have permission to modify (such\n  as read-only or locked attributes) are not removed.\n\n  This only works on objects set SAFE if the config options safe_wipe is set\n  to 0.\n  \n  The following switches exist:\n    /preserve    - wipe everything EXCEPT the wild-attr matches.  This in \n                   effect does the reverse of normal @wipe.\n    /regexp      - use regular expression instead of standard glob-matching\n  \n  Example:\n    &gt; @wipe me/va*\n    Wiped - 1 attributes.\n    &gt; @wipe/reg me/^.a$\n    Wiped - 4 attributes.\n  \n  See Also: wipe(), @edit, @grep  \n\n</PRE>\n<A HREF=\"#@whereis\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#@zone\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"@zone\"><H3>@zone</H3></A><PRE>\n Usage:\n  1) @zone &lt;object or zonemaster&gt;\n  2) @zone/add &lt;object&gt;=&lt;zonemaster&gt;\n  3) @zone/del &lt;object or zonemaster&gt;=&lt;zonemaster or object&gt;\n  4) @zone/purge &lt;object or zonemaster&gt;\n  \n  The @zone command adds and removes zone master entries from objects.\n  An object may be a member of multiple zones.\n \n  * Usage 1 will list the zones an object belongs to, or the objects that\n    belong to a zonemaster.\n  * Usage 2 will add a zone to an object.\n  * Usage 3 will delete an object from a zone, or zone from an object. These\n    are essentially the same, but from different directions.\n  * Usage 4 will remove all references to zones from an object or\n    zone master.  \n \n  See Also: @lock, ZONES, lzone(), ZONEMASTER, ZONECONTENTS\n  \n</PRE>\n<A HREF=\"#@wipe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#\\\\\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"\\\\\"><H3>\\\\</H3></A><PRE>\n  Command: \\\\&lt;message&gt;\n  Outputs &lt;message&gt; to everyone in your current room without embellishment.\n  Example: the command '\\\\A chill falls over the room.' produces\n  'A chill falls over the room.'\n  \n  See Also: @emit, @oemit, NOSPOOF\n  \n</PRE>\n<A HREF=\"#@zone\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#]\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"]\"><H3>]</H3></A><PRE>\n  Command: ]&lt;command&gt;\n  \n  This tells the parser that the command following it is to not be parsed.\n  \n  See Also: train\n\n</PRE>\n<A HREF=\"#\\\\\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#abode\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"abode\"><H3>ABODE</H3></A><PRE>\n  ABODE(A)  If a room is set ABODE, players can set their homes there, \n  and can set the homes of objects there.  It does not mean that a \n  player can open an exit to that room, only that they can set their \n  home there.\n  \n  See Also: LINK_OK\n  \n</PRE>\n<A HREF=\"#]\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#abs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"abs()\"><H3>ABS()</H3></A><PRE>\n  Function: abs(&lt;number&gt;)\n \n  Returns the absolute value of its argument.\n  &lt;number&gt; may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    &gt; say abs(4)\n    You say &quot;4&quot;\n    &gt; say abs(-4)\n    You say &quot;4&quot;\n    &gt; say abs(0)\n    You say &quot;0&quot;\n   \n  See Also: sign()\n \n</PRE>\n<A HREF=\"#abode\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#accent()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"accent()\"><H3>ACCENT()</H3></A><PRE>\n  Function: accent(&lt;string&gt;,&lt;template&gt;)\n  \n  The accent() function will return &lt;string&gt;, with characters in it\n  possibly changed to accented ones according to &lt;template&gt;. Both\n  arguments must be the same number of characters.\n  \n  Whether or not the resulting string is actually displayed correctly\n  is client-dependent. Some OSes uses different character sets than\n  the one assumed (ISO 8859-1), and some clients strip these 8-bit\n  characters.\n  \n  You may also use the markup character %f to specify accents.\n  To do that you would specify the &lt;template&gt; character after %f\n  and then a 'n' to normalize it.\n   \n  You must be @toggled ACCENTS to be able to use accents. \n  \n  ZENTY_ANSI must be compiled in to be able to use accents.\n  \n{ &quot;help accent2&quot; for more }\n  \n</PRE>\n<A HREF=\"#abs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#accent2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"accent2\"><H3>ACCENT2</H3></A><PRE>\n  CONTINUE\n  Function: accent(&lt;string&gt;,&lt;templatet&gt;)\n  \n  For each character in &lt;string&gt;, the corresponding character of\n  &lt;template&gt; is checked according to the table below, and a replacement\n  done. If either the current &lt;string&gt; or &lt;template&gt; characters aren't\n  in the table, the &lt;string&gt; character is passed through unchanged.\n  \n  Accent                         Template   String\n  Name       Description         Character  Character\n  -----------------------------------------------------------------\n  grave      Backward slant      `          A,E,I,O,U,a,e,i,o,u\n             above letter\n  acute      Forward slant       '          A,E,I,O,U,Y,a,e,i,o,u,y\n             above letter\n  tilde      Wavy line above     ~          A,N,O,a,n,o\n             letter\n  circumflex carat above         ^          A,E,I,O,U,a,e,i,o,u\n             letter\n  umlaut     Two dots above      :          A,E,I,O,U,a,e,i,o,u\n  diaeresis  letter\n  ring       Small circle above  o          A,a\n             letter\n  cedilla    Small tail below    ,          C,c\n             letter\n  \n{ &quot;help accent3&quot; for more }\n\n</PRE>\n<A HREF=\"#accent()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#accent3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"accent3\"><H3>ACCENT3</H3></A><PRE>\n  CONTINUED\n  Function: accent(&lt;string&gt;,&lt;template&gt;)\n  \n  These are non-accent special characters, mostly punctuation and\n  non-roman letters.\n  \n                      Template   String\n  Description         Character  Character\n  --------------------------------------------------------------\n  Upside-down ?       u          ?\n  Upside-down !       u          !\n  &lt;&lt; quote mark       &quot;          &lt;\n  &gt;&gt; quote mark       &quot;          &gt;\n  German sharp s      B          s\n  Capital thorn       |          P\n  Lower-case thorn    |          p\n  Capital eth         -          D\n  Lower-case eth      &amp;          o\n   \n{ &quot;help accent4&quot; for examples }\n</PRE>\n<A HREF=\"#accent2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#accent4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"accent4\"><H3>ACCENT4</H3></A><PRE>\n  CONTINUED\n  Function: accent(&lt;string&gt;,&lt;template&gt;)\n  \n  Examples:\n    &gt; say accent(Aule, ---:)\n    You say &quot;Aul(e-with-diaeresis)&quot;\n    &gt; say accent(The Nina was a ship, The Ni~a was a ship)\n    You say &quot;The Ni(n-with-~)a was a ship&quot;\n    &gt; say accent(Khazad ai-menu!, Khaz^d ai-m^nu!)\n    You say &quot;Khaz(a-with-^)d ai-m(e-with-^)nu!&quot;\n    &gt; say %f^Khazad ai-menu!%fn\n    You say &quot;Kh(a-with-^)z(a-with-^)d (ai-with-^)-m(e-with-^)n(u-with-^)!&quot;\n  \n  See Also: ACCENTS, chr(), asc(), tr(), stripaccents(), substitutions.\n\n</PRE>\n<A HREF=\"#accent3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#accents toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"accents toggle\"><H3>ACCENTS TOGGLE</H3></A><PRE>\n  Toggle: ACCENTS\n  \n  When set on a player, and as long as ZENTY_ANSI has been compiled\n  into the RhostMUSH in question, this allows the player to see\n  accented strings (umlauts, ticks, tildas, etc).\n  \n  Accents are displayed by using the accent() function or the %f\n  substitution.\n\n</PRE>\n<A HREF=\"#accent4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#acos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"acos()\"><H3>ACOS()</H3></A><PRE>\n  Function: acos(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the arc-cosine of &lt;number&gt;, expressed in radians.\n   \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say acos(0)\n    You say &quot;1.570796&quot;\n    &gt; say acos(1)\n    You say &quot;0&quot;\n    &gt; say acos(0.707101)\n    You say &quot;0.785406&quot;\n    &gt; say acos(0.866025)\n    You say &quot;0.5236&quot;\n  \n  See Also: asin(), atan(), atan2(), cos(), pi(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()\n  \n</PRE>\n<A HREF=\"#accents toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#add()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"add()\"><H3>ADD()</H3></A><PRE>\n  Function: add(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN&gt;]...)\n   \n  Returns the result of adding its arguments together.\n  You may add up to 30 numbers in one add() call.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Example:\n    &gt; say add(2,4)\n    You say &quot;6&quot;\n    &gt; say add(5,3,7,-4)\n    You say &quot;11&quot;\n  \n  See Also: div(), mod(), mul(), sub()\n  \n</PRE>\n<A HREF=\"#acos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#after()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"after()\"><H3>AFTER()</H3></A><PRE>\n  Function: after(&lt;string1&gt;, &lt;string2&gt; [,&lt;key&gt;])\n \n  Returns the portion of &lt;string1&gt; that occurs after &lt;string2&gt;.  If &lt;string2&gt;\n  does not occur in &lt;string1&gt;, a null string is returned.\n  If you want to return the portion of the string after the first space,\n  use the rest() function instead.  This function is case sensitive.\n  \n  You may specify a &lt;key&gt; of 1 to disable ansi handling which will speed\n  this function up.  The default is '0' which allows ansi handling.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n   \n  Examples:\n    &gt; say after(This is a test,a)\n    You say &quot; test&quot;\n    &gt; say after(This is a test,is)\n    You say &quot; is a test&quot;\n    &gt; say after(This is a test, nope)\n    You say &quot;&quot;\n  \n  See Also: before(), first(), rest()\n  \n</PRE>\n<A HREF=\"#add()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#aiindex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"aiindex()\"><H3>AIINDEX()</H3></A><PRE>\n  Function: aiindex(&lt;list&gt;, &lt;string&gt;, &lt;position&gt;, &lt;delimiter&gt;)\n  \n  This function is similar to index(), except that it inserts the &lt;string&gt;\n  at the &lt;position&gt; in the given &lt;list&gt;.  You must specify a delimiter.\n  For a space, use a '%b' as a delimiter.  This works exactly like iindex()\n  except it allows you to 'add insert' to an empty list.\n  \n  Example:\n    &gt; say aiindex(this is a test,another cat and,3,%b)\n    You say &quot;this is another cat and a test&quot;\n    &gt; say aiindex(,another test,1,|)\n    You say &quot;another test&quot;\n    &gt; say aiindex(another test,a test,1,|)\n    You say &quot;a test|another test&quot;\n  \n  See Also: index(), rindex(), aindex()\n  \n</PRE>\n<A HREF=\"#after()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#aindex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"aindex()\"><H3>AINDEX()</H3></A><PRE>\n  Function: aindex(&lt;list&gt;, &lt;string&gt;, &lt;position&gt;, &lt;delimiter&gt;)\n  \n  This function is similar to index(), except that it appends the &lt;string&gt;\n  after the &lt;position&gt; in the given &lt;list&gt;.  You must specify a delimiter.\n  For a space, use a '%b' as a delimiter.\n  \n  Example:\n    &gt; say aindex(this is a test,was and,1,%b)\n    You say &quot;this was and is a test&quot;\n  \n  See Also: index(), rindex, iindex()\n  \n</PRE>\n<A HREF=\"#aiindex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#aliased functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"aliased functions\"><H3>aliased functions</H3></A><PRE>\n  Function Lists: Aliased Functions.\n     \n  flip()        - An alias of revwords()\n  items()       - &lt;&lt;Change: Not in help.&gt;&gt;\n  matchall()    - &lt;&lt;Not in help.&gt;&gt;\n  squish()      - An alias of strip()\n  lparent()     - Returns all the parents of an object.\n  die()         - Rolls a set of dice for random number generation.\n\n</PRE>\n<A HREF=\"#aindex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#align()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"align()\"><H3>ALIGN()</H3></A><PRE>\n  RhostMUSH has no built in align(). \n  \n  See 'help printf()'\n\n</PRE>\n<A HREF=\"#aliased functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#allof()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"allof()\"><H3>ALLOF()</H3></A><PRE>\n  Function: ofparse(&lt;type&gt;, [&lt;eval1&gt; [,&lt;eval2&gt; ... &lt;evalN or delim&gt;]])\n\n  Type 1&amp;3: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 2&amp;4: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Type 5&amp;7: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 6&amp;8: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  \n  This function will take each &lt;eval&gt; and returns it based on the &lt;type&gt;.\n  \n  The following types exist:\n    1  -- Issue a firstof().  Essentially return the first &lt;eval&gt; that is\n          a true boolean.  This stops evaluation on first true &lt;eval&gt;.\n          The &lt;default&gt; is returned if no evals are met.  The &lt;default&gt;\n          is the assumed argument if only passed a single argument.\n    2  -- Issue an allof().  Essentially returning every &lt;eval&gt; that is\n          a true boolean.  This evaluates every argument.\n    3  -- This is the reverse of '1'.  It returns the first &lt;eval&gt; that\n          is a false boolean.  IT stops evaluation on first false &lt;eval&gt;.\n          This again assumes &lt;default&gt; if no other arguments.\n    4  -- This is the reverse of '2'.  It returns every false &lt;eval&gt;\n          boolean. This evaluates every argument.\n    5  -- Issue a strfirstof().  Essentially returns the first &lt;eval&gt; that\n          is a non-null string.  This stops evaluation on first non-null\n          &lt;eval&gt;.\n    6  -- Issues a strallof().  Essentially returns every &lt;eval&gt; that is\n          a non-null string.  This evaluates everyu argument.\n    7  -- This is the reverse of '5'.  It essentially will either return\n          a null or the default value.\n    8  -- This is the reverse of '6'.  It essentially will return\n          a list of nulls if you have such in your list.  This evaluates\n          every argument.\n  \n  For PennMUSH function lineup:\n      firstof(x,y)    == ofparse(1,x,y)\n      allof(x,y,z)    == ofparse(2,x,y,z)\n      strfirstof(x,y) == ofparse(5,x,y)\n      strallof(x,y,z) == ofparse(6,x,y,z)\n  \n{ see 'help ofparse2' for examples }\n\n</PRE>\n<A HREF=\"#align()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#alphamax()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"alphamax()\"><H3>ALPHAMAX()</H3></A><PRE>\n  Function: alphamax(&lt;word1&gt;, &lt;word2&gt;, &lt;word3&gt;, ...)\n  Takes up to ten word arguments, and returns the word which is\n  lexicographically biggest.\n  \n  Example:\n    &gt; say alphamax(this,thix,thiz)\n    You say &quot;thiz&quot;\n  \n  See Also: alphamin(), min(), max()\n  \n  \n</PRE>\n<A HREF=\"#allof()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#alphamin()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"alphamin()\"><H3>ALPHAMIN()</H3></A><PRE>\n  Function: alphamin(&lt;word1&gt;, &lt;word2&gt;, &lt;word3&gt;, ...)\n  Takes up to ten word arguments, and returns the word which is\n  lexicographically smallest.\n  \n  Example:\n    &gt; say alphamin(this,those,these)\n    You say &quot;this&quot;\n  \n  See Also: alphamax(), min(), max()\n  \n</PRE>\n<A HREF=\"#alphamax()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#alt inventories\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"alt inventories\"><H3>ALT INVENTORIES</H3></A><PRE>\n  RhostMUSH has the option of allowing alternate inventories.  Alternate\n  inventories are seen by the 'worn' and 'wielded' commands.  There are\n  various ways to configure this that wizards have to do but to see what\n  is currently allowed on the mush, type '@list options' and it'll be\n  listed in that information.  Items that are wielded will have to be\n  toggled WIELDED (by a wizard) and items that are worn will have to\n  be toggled WORN (by a wizard).  Sorry, there are no 'wield' or 'wear'\n  commands to wield weapons or wear equipment.  It was felt this would\n  be too limiting for various enviornments so look to see if there\n  exists a specialized +wear or +wield on the mush you are on or talk\n  to a local staff about this feature.\n  \n</PRE>\n<A HREF=\"#alphamin()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#altnames\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"altnames\"><H3>ALTNAMES</H3></A><PRE>\n  RhostMUSH allows alternate names of items.  This is done through the\n  '@altname' attribute.  If you pass the lock for altnames (@lock/altname)\n  then you will see the true name of the object followed by the altname\n  in {}'s.  An example would be:  Book(#123) {Tome}\n  \n  Both @altname and @lock/altname are wizard only.\n  \n  This will only effect look.  If you try to reference the altname of \n  the item with any other command, it will not recognize it as a valid\n  name.  This is meant to avoid abusiveness.\n  \n  See Also: look\n  \n</PRE>\n<A HREF=\"#alt inventories\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ancestors\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ancestors\"><H3>ANCESTORS</H3></A><PRE>\n  Topic: PARENT OBJECTS (continued)\n \n  A parent object may itself have a parent, up to a configurable limit\n  (usually 10 levels).  The parent need not be the same type as its children,\n  and flags are not inherited from parent objects.  However, a UseLock\n  is inherited.  IE: if the parent is uselocked against you, you can not\n  use it's functionality.  You may not create parent loops.\n \n  The parent system inheritance in RhostMUSH is rather robust.  When \n  attributes are looked up it follows a chain of inheritance rules.\n  Lookups are in the following order for attribute lookups:\n  \n    1.  Does attribute exist on object?\n    2.  Does attribute exist in physical parent?\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  See: help @parent\n    3.  Does attribute exist in any of the zones it belongs to?\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  The zonemaster must be set ZONEPARENT for inheritance.\n        C.  If object is toggled NOZONEPARENT this is ignored.\n        D.  See: help zones and help zoneparent\n    4.  Does attribute exist on any by-type global parents (virtual).\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  If object is toggled NOGLOBPARENT this is ignored.\n        C.  See: wizhelp global_parent_&lt;type&gt; (room|thing|player|exit).\n    5.  Does attribute exist on the generic global parent (virtual).\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  If object is toggled NOGLOBPARENT this is ignored.\n        C.  See: wizhelp global_parent_obj\n  \n  All attribute fetches take normal rules regarding normal attribute\n  permissions in addition to the rules previously mentioned.\n  \n  See Also: @parent, parent(). parents(), children()\n  \n</PRE>\n<A HREF=\"#altnames\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#and()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"and()\"><H3>AND()</H3></A><PRE>\n  Function: and(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n   \n  Takes two or more booleans, and returns 1 if they are all each equivalent\n  to true(1).\n  \n  Example:\n    &gt; say [and(1,0)] @ [and(0,0)] @ [and(0,1)] @ [and(1,1)]\n    You say &quot;0 @ 0 @ 0 @ 1&quot;\n  \n  See Also: BOOLEAN VALUES, or(), not(), xor(), nand(), nor(), xnor()\n  \n</PRE>\n<A HREF=\"#ancestors\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#andchr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"andchr()\"><H3>ANDCHR()</H3></A><PRE>\n  Function: andchr(&lt;string&gt;,&lt;listofcharacters&gt;)\n  \n  This function returns true(1) if the specified &lt;string&gt; contains\n  at least one of every character in &lt;listofcharacters&gt;.  If one\n  of the characters does not exist, it'll return false(0).\n  \n  Examples:\n    &gt; say andchr(wizards,zdi)\n    You say &quot;1&quot;\n    &gt; say andchr(wizards,zdx)\n    You say &quot;0&quot;\n  \n  See Also: orchr(), xorchr(), notchr()\n  \n</PRE>\n<A HREF=\"#and()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#andflag()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"andflag()\"><H3>ANDFLAG()</H3></A><PRE>\n  Function: andflag(&lt;target&gt;,&lt;flag1&gt;[,&lt;flag2&gt;,...,&lt;flagN&gt;])\n  \n  This function checks if the target has ALL the specified flags.  You\n  may also specify !FLAG to check if it does not have that specified flag.\n  \n  Examples:\n    &gt; say lflags(me)\n    You say &quot;PLAYER OPAQUE ANSI ANSICOLOR ALTQUOTA TERSE&quot;\n    &gt; say andflag(me,ansi,ansicolor,!inherit)\n    You say &quot;1&quot;\n    &gt; say andflag(me,ansi,terse,going)\n    You say &quot;0&quot;\n  \n  See Also: orflag(), hasflag(), lflags(), flags()\n  \n</PRE>\n<A HREF=\"#andchr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#andflags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"andflags()\"><H3>ANDFLAGS()</H3></A><PRE>\n  Function: andflags(&lt;target&gt;,&lt;flag-list&gt;)\n  \n  This function checks if the target has ALL the specified flags.  You\n  may also specify !&lt;letter&gt; to check if it does not have the specified\n  flag.  Since the GUEST flag is the '!' character as well, if you wish\n  to match against the guest flag, you just escape it out like '\\\\!'.\n  \n  RhostMUSH also has a high-order of flags.  These show up between []'s\n  when you do a flags().  To check against these flags, you must proceed\n  it with a '2'.  To return back to the normal-order of flags, proceed\n  it with a '1' (default).  You must escape out the '1' and the '2' if\n  you wish to specify the MARKER flags (1 and 2).  Ie: '\\\\1', '\\\\2'.\n  \n  Examples:\n    &gt; say flags(me)\n    You say &quot;PDcW[I]&quot;\n    &gt; say andflags(me,PD!o)]\n    You say &quot;1&quot;\n    &gt; say andflags(me,PI)]\n    You say &quot;0&quot;\n    &gt; say andflags(me,P2I)]\n    You say &quot;1&quot;\n    &gt; say andflags(me,P2I1c)]\n    You say &quot;1&quot;\n  \n  See Also: andflag(), orflag(), orflags(), hasflag(), flags(), lflags()\n  \n</PRE>\n<A HREF=\"#andflag()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi\"><H3>ANSI</H3></A><PRE>\n  Flag: ANSI(&lt;)\n  \n  This flag is only meaningful for players.  When set, it allows ansi\n  control codes to be sent to the player's terminal.  This does not in\n  itself enable ansi color codes, but must be set in addition to the\n  ANSICOLOR flag.  Without this flag, all ansi codes are stripped before\n  you see them.\n  \n  You need both the ANSI and ANSICOLOR flags to see ansi color.\n  \n  See Also: ANSICOLOR, XTERMCOLOR, SUBSTITUTIONS, ANSI(), NOFLASH, COLORS()\n  \n</PRE>\n<A HREF=\"#andflags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi functions\"><H3>ansi functions</H3></A><PRE>\n  Function Lists: Ansi Functions\n      \n  ansi()        - ANSI formats a string.\n  stripansi()   - Strips ANSI characters from a string.\n  colors()      - List colors or optionally display value of color.\n\n</PRE>\n<A HREF=\"#ansi\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi quirks\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi quirks\"><H3>ANSI QUIRKS</H3></A><PRE>\n  Function: ansi(&lt;codes&gt;,&lt;string&gt;)   -- CONTINUED\n            ansi(&lt;FG&gt;/&lt;BG&gt;,&lt;string&gt;) -- CONTINUED\n  \n  Ansi, since all special characters (including those accented!) are passed \n  around the parser as % codes (%c/%x/%f), and the parser USES %'s and \\'s \n  as escape codes, this means that when you try to ansi backslashes (\\) or \n  percents (%) the parser and ansi-translater could misinterprete your \n  intention as escaping out that ansi and not actually mean colorize my \n  escape character. \n  \n  Don't worry!  Not all is lost!  You may specify the percent(%) character \n  as chr(37) and the backslash(\\) as chr(92) and these will be passed \n  through the parser as 'special' substitutions, meaning once it hits the \n  ansi-translater, you get to see your percent and/or backslash in the nice \n  pretty color you wanted.  The percent and backslash issue usually only \n  happens when it's at the very end of the string you are trying to colorize \n  or accent.  \n  \n  Also, any use of chr() will padd out any alignment by 5 characters.  So any\n  that you use, make sure to keep this in mind.  All the formatting functions\n  take this into account automatically so should be invisible to you, but\n  the overhead does exist.\n  \n  Examples:\n    &gt; say ansi(hr,\\\\)\n    You say &quot;\\%cn&quot;                             (the \\%cn is highlight red)\n    &gt; say ansi(hr,chr(92))\n    You say &quot;\\&quot;                                (the \\ is highlight red)\n    &gt; say ansi(hr,%%)\n    You say &quot;%cn&quot;                              (the %cn is highlight red)\n    &gt; say ansi(hr,chr(37))                     \n    You say &quot;%&quot;                                (the % is highlight red)\n    \n  See Also: ansi(), stripansi(), ANSI, ANSICOLOR, XTERMCOLOR, NO_FLASH, \n            SUBSTITUTIONS, XTERMCOLOR LIST, COLORS()\n\n</PRE>\n<A HREF=\"#ansi functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi()\"><H3>ANSI()</H3></A><PRE>\n  Function: ansi(&lt;codes&gt;,&lt;string&gt;[,&lt;codes&gt;,&lt;string&gt;,...,&lt;codes&gt;,&lt;string&gt;])\n            ansi(FG/BG,&lt;string&gt;[,&lt;codes&gt;,string&gt;,...,FG/BG,&lt;string&gt;])\n   \n  *NOTE* : You MUST have both the ANSI and ANSICOLOR flags set to see color!\n           ANSI-NORMAL (n) has priority in any ansi string!\n  \n  This allows you to highlight a string using ANSI terminal effects. The\n  string is terminated with a &quot;return to normal&quot; code, and the codes are\n  utilized in the order they are specified. You may specify multiple\n  arguments as shown to ansi().  The 16 color codes are:\n   \n    f - flash                           i - inverse\n    h - hilite                          n - normal\n    u - underscore\n   \n    x - black foreground                X - black background\n    r - red foreground                  R - red background\n    g - green foreground                G - green background\n    y - yellow foreground               Y - yellow background\n    b - blue foreground                 B - blue background\n    m - magenta foreground              M - magenta background\n    c - cyan foreground                 C - cyan background\n    w - white foreground                W - white background\n  \n  For example, &quot;ansi(fc, Test)&quot; would hilight &quot;Test&quot; in flashing cyan.\n  \n  See: 'XTERMCOLOR LIST' for the 256 color list.\n  \n{ 'help ansi2' for more -- The 256 Color Support}\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n\n</PRE>\n<A HREF=\"#ansi quirks\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi2\"><H3>ANSI2</H3></A><PRE>\n  Function: ansi(&lt;codes&gt;,&lt;string&gt;)   -- CONTINUED\n            ansi(&lt;FG&gt;/&lt;BG&gt;,&lt;string&gt;) -- CONTINUED\n  \n  For 256 color support, we offer multiple methods to handle it.  This needs\n  the XTERMCOLOR flag to be set in addition to the normal ANSI and ANSICOLOR.\n  \n  First, you may specify the color with the + prefix.  This does not require \n  the '/' in the second option unless you intend to use background  colors.\n  \n  For 256 Color support we offer for the &lt;FG&gt; and &lt;BG&gt; options:\n    0x&lt;hex&gt;     -- example: ansi(0xC4/,string) for 256 color foreground support\n                            ansi(/0xC4,string) for 256 color background support\n                            ansi(0xC4/0xC1,string) for FG and BG support\n                   This does NOT require / for FG colors, but does for BG.\n    0-255       -- example: ansi(196/,string) instead of '0xC4' for decimal.\n                   This does NOT require / for FG colors, but does for BG.\n    +color      -- example: ansi(+pink,string) for the 256 foreground 'pink'.\n                   This does NOT require / for FG colors, but does for BG.\n    #FFFFFF     -- example: ansi(#FF0000,string) to specify the RGB values.\n                   This does NOT require / for FG colors, but does for BG.\n    &lt;#FFFFFF&gt;   -- example: ansi(&lt;#FF0000&gt;,string) to specify the RGB values.\n                   This does NOT require / for FG colors, but does for BG.\n    &lt;R G B&gt;     -- example: ansi(&lt;255 0 0&gt;,string) to specify the RGB values.\n                   This does NOT require / for FG colors, but does for BG.\n    /           -- foreground/background indicator -- required where mentioned.\n   \n  You may mix and match the methods of the 256 color support.  As ansi() \n  supports multiple arguments, you may also use multiple types in different\n  arguments.\n  \n  You may also use the %c/%x substitution (depending what is configured) to\n  display 256 colors by using the '0x##' for foreground and '0X##' for \n  background.  Example: %c0xc4%c0X20whee%cn.  This allows you to even mix\n  and match different ansi types like: %c0xc4%c0X20%cuwhee%cn to underline.\n  0x## is foreground, and 0X## is background when using percent substitutions.\n     \n{ 'help ansi3' for more -- about XTERMCOLOR and ANSI examples }\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n  \n</PRE>\n<A HREF=\"#ansi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi3\"><H3>ANSI3</H3></A><PRE>\n  Function: ansi(&lt;codes&gt;,&lt;string&gt;)   -- CONTINUED\n            ansi(&lt;FG&gt;/&lt;BG&gt;,&lt;string&gt;) -- CONTINUED\n  \n  You may also use the XTERM color support if your client supports it.\n  You must set the XTERMCOLOR flag to see the extended color set.\n  \n  See XTERMCOLOR LIST for the extended color list and codes used for it.\n  \n  hex like ansi(0xca/0xab,string).  ansi(+colorname/+colorname) is allowed \n  for foreground and background.  Hex is case-insensitive.\n  \n  There is also a substitution for colors.  This is '%c' and works just\n  as '%n' would for your name.  %crred%cn is red, %c0x01red%cn is also red.\n  If you use %c substitutions, the 'x' after the '0' IS CASE SENSITIVE.  \n  0x01 would be foreground, 0X01 would be background.\n  \n  Examples: \n    &gt; say I like %cbblue %cnrocks and %crred %cnballs\n    You say &quot;I like &lt;blue&gt; rocks and &lt;red&gt; balls&quot;\n    &gt; say I like [ansi(b,blue)] rocks and [ansi(r,red)] balls\n    You say &quot;I like &lt;blue&gt; rocks and &lt;red&gt; balls&quot;\n    &gt; say I like [ansi(38/,skyblue)] rocks and [ansi(203/,indianred)] balls\n    You say &quot;I like &lt;skyblue&gt; rocks and &lt;indianred&gt; balls&quot;\n    &gt; say I like [ansi(0x26/,skyblue)] [ansi(0xcB/,indianred)] ballons\n    You say &quot;I like &lt;skyblue&gt; &lt;indianred&gt; balls&quot;\n    &gt; say I like [ansi(+skyblue,skyblue)] [ansi(+indianred,indianred)] balls\n    You say &quot;I like &lt;skyblue&gt; &lt;indianred&gt; balls&quot; (note / not needed for +FG)\n    &gt; say I like [ansi(+skyblue/,skyblue)] [ansi(+indianred/,indianred)] balls\n    You say &quot;I like &lt;skyblue&gt; &lt;indianred&gt; balls&quot;\n  \n  The words 'blue' and 'red' being their respected colors.  Any ansi\n  sequence can be substituted using percent substitutions, and will\n  continue till either the end of the line or until a normalization ansi \n  code is entered (the %cn).\n   \n{ 'help ansi4' for more -- Flags required and information }\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n\n</PRE>\n<A HREF=\"#ansi2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansi4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansi4\"><H3>ANSI4</H3></A><PRE>\n  Function: ansi(&lt;codes&gt;,&lt;string&gt;)   -- CONTINUED\n            ansi(&lt;FG&gt;/&lt;BG&gt;,&lt;string&gt;) -- CONTINUED\n  \n  NOTE:  The ANSI flag is used to see base ansi sequences (flash,highlight,etc)\n         The ANSICOLOR flag is used _with_ ANSI to see color.\n         The XTERMCOLOR flag is used _with_ ANSICOLOR to see extended colors.\n         You must have both of the first flags set to see ansi color.\n         You must have all three flags to see extended colors.\n         \n  Keep in mind that the functionality of %c and %x may be reversed.  \n  Check '@list options' on the server you are on to see if this has\n  been reversed or not.\n  \n  See Also: ansi(), stripansi(), ANSI, ANSICOLOR, XTERMCOLOR, NO_FLASH, \n            SUBSTITUTIONS, XTERMCOLOR LIST, COLORS()\n\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n  \n</PRE>\n<A HREF=\"#ansi3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansicolor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansicolor\"><H3>ANSICOLOR</H3></A><PRE>\n  Flag: ANSICOLOR(&gt;)\n  \n  This flag is only meaningful for players.  When set in conjunction with\n  the ANSI flag, this will allow ansi color codes to be sent to the \n  player's terminal.\n  \n  You need both the ANSI and ANSICOLOR flags to see ansi color.\n  \n  See Also: ANSI, XTERMCOLOR, SUBSTITUTIONS, ANSI(), NOFLASH, COLORS()\n  \n</PRE>\n<A HREF=\"#ansi4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ansinames\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ansinames\"><H3>ANSINAMES</H3></A><PRE>\n  An addition to the code allows you to have ansi colors on ALL data types.\n  This includes THINGs, EXITs, ROOMs, and yes, even PLAYERs.  This is done\n  by setting ansi letter codes in the @ansiname attribute.  As long as\n  the wizards haven't disabled you in particular or the mush as a whole\n  from using ansi codes in that data type, it will now be colorized.\n  \n  See Also: @ansiname\n  \n</PRE>\n<A HREF=\"#ansicolor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#aposs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"aposs()\"><H3>APOSS()</H3></A><PRE>\n  Function: aposs(&lt;object&gt;)\n \n  Returns the proper absolute possessive pronoun (his, hers, its, theirs) for\n  referring to &lt;object&gt;, based on the object's Sex attribute.  You must either\n  control or be near &lt;object&gt;.\n  \n  Example:\n    &gt; @sex me=male\n    Set.\n    &gt; say aposs(me)\n    You say &quot;his&quot;\n   \n  See Also: SUBSTITUTIONS, obj(), subj(), poss()\n  \n</PRE>\n<A HREF=\"#ansinames\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#arbitrary commands\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"arbitrary commands\"><H3>ARBITRARY COMMANDS</H3></A><PRE>\n  Topic: ARBITRARY COMMANDS\n \n  You may define commands that are triggered whenever someone enters a command\n  that matches the command template (wildcarding allowed).  These commands\n  are called arbitrary commands, user-defined commands, or $-commands (for how\n  they are defined), and they are checked for only after the check for\n  single-character commands, exits, and internal commands have been performed\n  and have failed (so an arbitrary command that matches 'page *' will never\n  be performed).\n \n  You define an arbitrary command by storing a string of the form\n  '$&lt;template&gt;:&lt;commandlist&gt;' in an attribute of an object, then the command\n  will be available to anyone who carries the object, is in the same room as\n  the object, or is inside the object.  Only use user-named attributes and\n  VA-VZ for arbitrary commands, as many of the predefined attributes are not\n  for arbitrary commands.  &lt;template&gt; is the pattern to check for (it may\n  contain wildcards), and &lt;commandlist&gt; is a semicolon-separated list of\n  commands to perform.  The text that the wildcard characters matched are\n  available in the variables %0 through %9.\n  \n{ 'help arbitrary2' for more }\n  \n</PRE>\n<A HREF=\"#aposs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#arbitrary2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"arbitrary2\"><H3>arbitrary2</H3></A><PRE>\n  Example:\n    &gt; @va testobj = $foobar *:&quot;I was foobar'ed with %0.\n    Set.\n    &gt; foobar xyzzy\n    testobj says &quot;I was foobar'ed with xyzzy&quot;\n \n  You can prevent individual attributes from being checked for $-commands\n  with the command '@set &lt;obj&gt;/&lt;attr&gt; = no_command'.  Attributes so set\n  are reported with ($) following the attribute name when examined.\n  The command '@set &lt;obj&gt;/&lt;attr&gt; = !no_command' clears the flag.\n \n  The following attributes are never checked for $-commands: ALIAS CHARGES\n  DESC DROP FAIL IDESC ODESC ODROP OFAIL OSUCC SEX SUCC.\n  \n  All $commands and ^listen pairs may be parsed using regular expressions.   \n  \n  See Also: @set, &amp;, VATOVZ, ZATOZZ, $-COMMANDS, REGEXPS\n  \n</PRE>\n<A HREF=\"#arbitrary commands\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#architect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"architect\"><H3>ARCHITECT</H3></A><PRE>\n  Flag: ARCHITECT(B)  \n  \n  If a player is ARCHITECT, they have various wizard powers\n  available to them and fewer restrictions to do things.  They can\n  do anything equal to or less than their power using #&lt;number&gt; or\n  *&lt;player&gt;.  Only ROYALTY, SUPER-ROYALTY, or #1 can set this flag\n  on players.\n  \n  See Also: GUILDMASTER, COUNCILOR, ROYALTY, IMMORTAL\n  \n</PRE>\n<A HREF=\"#arbitrary2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#arithmetic functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"arithmetic functions\"><H3>arithmetic functions</H3></A><PRE>\n  Function lists: Arithmetic Functions\n  \n  abs()       - Returns absolute value of its argument.\n  add()       - Adds two values together.\n  avg()       - Returns the average of a set of numbers.\n  between()   - Returns true if a value is between two others.\n  bound()     - Bounds a number between a min and max value.\n  dec()       - Decreases a value held in a register by 1.\n  dice()      - Simulates a roll of dice to generate a random number.\n  div()       - Divides an integer value with another.\n  ee()        - Engineering notation of a number.\n  fbetween()  - Returns true if a floating point value is between two others.\n  fbound()    - Returns a floating point between a min and max value.\n  fdiv()      - Division with floating point support.\n  floordiv()  - Returns the integer quotient from dividing two values.\n  inc()       - Increases a value held in a register by 1.\n  mod()       - Returns the integer remainder from dividing two values.\n  modulo()    - Returns the modulo of two values\n  mul()       - Multiplies two values.\n  ncomp()     - Compares integer values.\n  rand()      - Returns a random number.\n  remainder() - Returns the remainder of a division.\n  sign()      - Returns the sign of an integer value.\n  strmath()   - Applies math to a string.\n  sub()       - Subtracts two values from eachother.\n  xdec()      - Decreases the value passed by 1.\n  xinc()      - Increases the value passed by 1.\n\n</PRE>\n<A HREF=\"#architect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#array()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"array()\"><H3>ARRAY()</H3></A><PRE>\n  Function: array(&lt;string&gt;, &lt;reg count&gt;, &lt;width&gt; [[,&lt;delim&gt; [,&lt;type&gt; [,&lt;sep&gt;]])\n  \n  This function will take an input string and split it out, based on width,\n  rounding to the first viable word (if possible) and spit it out into setq\n  registers based on the number of registers you wish to split it in based\n  on &lt;reg count&gt;.  Registers start from 0-9 then go to a-z.  Registers\n  are cleared automatically before being utilized.\n  \n  You may specify an optional delimiter.  By default, it takes any white\n  space.  You may optionally specify the type.  A type of '1' will take\n  the virtual register count down then over.  The default '0' does it\n  in a normal sequential order.\n  \n  If you specify width of '0' and specify a delimeter, then it will ignore\n  width of the values and split the array based on the delimiter only.\n  \n  If you wish to store the setq registers prior to this function, please\n  utilize the pushregs() function to back-up your registers.\n  \n  The defaults seperator is '%r' (carrage return + line feed).  If you do\n  not wish this to be the case, you may specify your own seperator &lt;sep&gt;\n  which can be one or more characters.\n  \n  This function is ansi aware. \n  \n  Examples:\n    &gt; think array(abcdefghij,2,2)%q0\n    ab\n    ef\n    ij\n    \n    &gt; think array(abcdefghij,2,2,,,%b)%q0\n    ab ef ij\n\n    &gt; think array(abcdefgh,2,2)%q1\n    cd\n    eh\n\n    &gt; think array(abcdefghij,2,2,,1)%q0\n    ab\n    cd\n    ef\n\n    &gt; think array(abcdefghij,2,2,,1)%q1\n    gh\n    ij\n  \n  See Also: printf(), setq(), setr(), r(), substitutions\n\n</PRE>\n<A HREF=\"#arithmetic functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#art()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"art()\"><H3>ART()</H3></A><PRE>\n  Function: art(&lt;string&gt; [,&lt;key&gt;])\n  This returns the string prefixed with an 'a' or an 'an' article depending\n  if the first letter in the string is a consonant or a vowel.\n  \n  If you specify a &lt;key&gt; of '1', then only the article will be displayed. \n  \n  Examples:\n    &gt; say art(apple)\n    You say &quot;an apple&quot;\n    &gt; say art(bear)\n    You say &quot;a bear&quot;\n    &gt; say art(bear,1)\n    You say &quot;a&quot;\n \n  See Also: poss(), subj(), obj()\n  \n</PRE>\n<A HREF=\"#array()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#asc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"asc()\"><H3>ASC()</H3></A><PRE>\n  Function: asc(&lt;character&gt;)\n  \n  This function returns the ASCII numerical value of the given character.\n  \n  Examples:\n  &gt; say asc(a)\n  You say &quot;97&quot;\n  \n  See Also: CHR()\n  \n</PRE>\n<A HREF=\"#art()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#asin()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"asin()\"><H3>ASIN()</H3></A><PRE>\n  Function: asin(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the arcsine of &lt;number&gt;, expressed in radians.\n  \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say asin(0)\n    You say &quot;0&quot;\n    &gt; say asin(1)\n    You say &quot;1.570796&quot;\n    &gt; say asin(0.707101)\n    You say &quot;0.78539&quot;\n    &gt; say asin(0.5)\n    You say &quot;0.523599&quot;\n  \n  See Also: acos(), atan(), atan2(), cos(), pi(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()\n  \n</PRE>\n<A HREF=\"#asc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#atan()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"atan()\"><H3>ATAN()</H3></A><PRE>\n  Function: atan(&lt;number&gt; [,&lt;units&gt;])\n            atan2(&lt;number1&gt;, &lt;number2&gt; [,&lt;units&gt;]\n  \n  ATAN Returns the arctangent of &lt;number&gt;, expressed in radians.\n  \n  ATAN2 Returns the arctangent of &lt;number1&gt; divided by &lt;number2&gt; in radians.\n  This is equivelant to atan(fdiv(&lt;number1&gt;,&lt;number2&gt;)[,&lt;units&gt;]) but allows\n  a '0' divider without a divide by zero error.\n   \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n  \n  Examples:\n    &gt; say atan(0)\n    You say &quot;0&quot;\n    &gt; say atan(1)\n    You say &quot;0.785398&quot;\n    &gt; say atan2(90,90)\n    You say &quot;0.785398&quot;\n    &gt; say atan(1.557408)\n    You say &quot;1&quot;\n    &gt; say atan2(90,25)\n    You say &quot;1.299849&quot;\n  \n  See Also: acos(), asin(), cos(), pi(), sin(), tan(), ctu(), cosh(), sinh(),\n            tanh(), atan2()\n  \n</PRE>\n<A HREF=\"#asin()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#atan2()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"atan2()\"><H3>ATAN2()</H3></A><PRE>\n  Function: atan(&lt;number&gt; [,&lt;units&gt;])\n            atan2(&lt;number1&gt;, &lt;number2&gt; [,&lt;units&gt;]\n  \n  ATAN Returns the arctangent of &lt;number&gt;, expressed in radians.\n  \n  ATAN2 Returns the arctangent of &lt;number1&gt; divided by &lt;number2&gt; in radians.\n  This is equivelant to atan(fdiv(&lt;number1&gt;,&lt;number2&gt;)[,&lt;units&gt;]) but allows\n  a '0' divider without a divide by zero error.\n   \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n  \n  Examples:\n    &gt; say atan(0)\n    You say &quot;0&quot;\n    &gt; say atan(1)\n    You say &quot;0.785398&quot;\n    &gt; say atan2(90,90)\n    You say &quot;0.785398&quot;\n    &gt; say atan(1.557408)\n    You say &quot;1&quot;\n    &gt; say atan2(90,25)\n    You say &quot;1.299849&quot;\n  \n  See Also: acos(), asin(), cos(), pi(), sin(), tan(), ctu(), cosh(), sinh(),\n            tanh(), atan2()\n  \n</PRE>\n<A HREF=\"#atan()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attrcnt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attrcnt()\"><H3>ATTRCNT()</H3></A><PRE>\n  Function: attrcnt(&lt;object&gt; [,&lt;key&gt;])\n  This returns the total number of attributes that the target object has.\n  This gets around some limitations of words(lattr(&lt;object&gt;)) due to the\n  parser limitation.  This attribute has the sideeffect of repairing\n  attribute corruption on the target.\n  \n  The following keys exist:\n      0 - (default) - list attributes and delete corrupted attributes.\n      1 - list attributes and attempt to repair corrupted attributes.\n      2 - list attributes but do not touch corrupted attributes.\n      3 - remove any IS_LOCK on any attribute that is user-defined.\n  \n  If there is attribute corruption, the value returned will be '-1'.\n  \n  Examples:\n    &gt; say attrcnt(me)\n    You say &quot;20&quot;\n    &gt; say words(lattr(me))\n    You say &quot;20&quot;\n  \n  See Also: words(), lattr(), vattrcnt()\n  \n</PRE>\n<A HREF=\"#atan2()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag architect\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag architect\"><H3>ATTRIBUTE FLAG ARCHITECT</H3></A><PRE>\n  Attribute Flag: ARCHITECT(A)\n  Set by: @set #obj/attr=architect (only by architect+)\n  \n  Only architect or higher may modify the attribute.\n\n</PRE>\n<A HREF=\"#attrcnt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag atrlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag atrlock\"><H3>ATTRIBUTE FLAG ATRLOCK</H3></A><PRE>\n  Attribute Flag: ATRLOCK(l)\n  Set by: @set #obj/attr=atrlock\n  \n  This specifies that the attribute has a content lock.  Content locks mean\n  that you must match specific patterns to set or clear that attribute.\n  See wizhelp on ATTRIB CONTLOCKS for more information.\n\n</PRE>\n<A HREF=\"#attribute flag architect\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag councilor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag councilor\"><H3>ATTRIBUTE FLAG COUNCILOR</H3></A><PRE>\n  Attribute Flag: COUNCILOR(C)\n  Set by: @set #obj/attr=councilor (only by councilor+)\n  \n  Only councilor or higher may modify the attribute.\n\n</PRE>\n<A HREF=\"#attribute flag atrlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag dark\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag dark\"><H3>ATTRIBUTE FLAG DARK</H3></A><PRE>\n  Attribute Flag: DARK(D)\n  Set by: @set #obj/attr=dark (only by #1)\n  \n  The attribute is system-hidden.  This is intended as an internal flag only.\n\n</PRE>\n<A HREF=\"#attribute flag councilor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag default\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag default\"><H3>ATTRIBUTE FLAG DEFAULT</H3></A><PRE>\n  Attribute Flag: DEFAULT(F)\n  Set by: @set #obj/attr=default\n  \n  The attribute will inherit formatting from the global format parents.\n  See wizhelp on ATTRIB FORMATTING for more information.\n\n</PRE>\n<A HREF=\"#attribute flag dark\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag god\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag god\"><H3>ATTRIBUTE FLAG GOD</H3></A><PRE>\n  Attribute Flag: GOD(G)\n  Set by: @set #obj/attr=god (only by #1)\n  \n  Only #1 may modify the attribute.\n\n</PRE>\n<A HREF=\"#attribute flag default\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag guildmaster\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag guildmaster\"><H3>ATTRIBUTE FLAG GUILDMASTER</H3></A><PRE>\n  Attribute Flag: GUILDMASTER(g)\n  Set by: @set #obj/attr=guildmaster (only by guildmaster+)\n  \n  Only guildmaster or higher may modify the attribute.\n\n</PRE>\n<A HREF=\"#attribute flag god\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag hidden\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag hidden\"><H3>ATTRIBUTE FLAG HIDDEN</H3></A><PRE>\n  Attribute Flag: MDARK(M)       [HIDDEN]\n  Set by: @set #obj/attr=hidden\n\n  This attribute will be hidden.  If used in junction with the bitlevel flags,\n  then it will be hidden to anyone below that bitlevel.\n\n</PRE>\n<A HREF=\"#attribute flag guildmaster\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag immortal\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag immortal\"><H3>ATTRIBUTE FLAG IMMORTAL</H3></A><PRE>\n  Attribute Flag: IMMORTAL(i)\n  Set by: @set #obj/attr=immortal (only by immortal+)\n\n  Only immortal or #1 may modify the attribute.\n\n</PRE>\n<A HREF=\"#attribute flag hidden\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag lock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag lock\"><H3>ATTRIBUTE FLAG LOCK</H3></A><PRE>\n  Attribute Flag: LOCK(+)\n  Set by: @lock #obj/attr\n  \n  The attribute has been locked.  Locked attributes by default can not be \n  modified.\n  \n  Exeptions:  \n  wizards/immortals by default override this limitation on anything they \n  control.\n\n</PRE>\n<A HREF=\"#attribute flag immortal\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag logged\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag logged\"><H3>ATTRIBUTE FLAG LOGGED</H3></A><PRE>\n  Attribute Flag: LOGGED(m)\n  Set by: @set #obj/attr=logged\n  \n  This attribute is logged.  Any and all changes to this attribute are system\n  logged with relevant information.\n\n</PRE>\n<A HREF=\"#attribute flag lock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag mdark\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag mdark\"><H3>ATTRIBUTE FLAG MDARK</H3></A><PRE>\n  Attribute Flag: MDARK(M)       [HIDDEN]\n  Set by: @set #obj/attr=hidden\n\n  This attribute will be hidden.  If used in junction with the bitlevel flags,\n  then it will be hidden to anyone below that bitlevel.\n\n</PRE>\n<A HREF=\"#attribute flag logged\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag no_clone\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag no_clone\"><H3>ATTRIBUTE FLAG NO_CLONE</H3></A><PRE>\n  Attribute Flag: NO_CLONE(N)\n  Set by: @set #obj/attr=no_clone\n  \n  The attribute is not copied over when the object is @cloned.\n\n</PRE>\n<A HREF=\"#attribute flag mdark\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag no_command\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag no_command\"><H3>ATTRIBUTE FLAG NO_COMMAND</H3></A><PRE>\n  Attribute Flag: NOPROG($)       [NO_COMMAND]\n  Set by: @set #obj/attr=no_command\n  \n  When set on an attribute, it will not evaluate listens or commands.\n \n</PRE>\n<A HREF=\"#attribute flag no_clone\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag no_inherit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag no_inherit\"><H3>ATTRIBUTE FLAG NO_INHERIT</H3></A><PRE>\n  Attribute Flag: NO_INHERIT(I)\n  Set by: @set #obj/attr=no_inherit\n  \n  The attribute will not inherit attributes to the children.\n  \n</PRE>\n<A HREF=\"#attribute flag no_command\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag no_parse\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag no_parse\"><H3>ATTRIBUTE FLAG NO_PARSE</H3></A><PRE>\n  Attribute Flag: NO_PARSE(n)\n  Set by: @set #obj/attr=no_parse\n  \n  The attribute does not parse input the player types.  All %0-%9 attributes\n  are taken 'as-is' from the player.  This is useful to $command and ^listen\n  attributes.\n  \n</PRE>\n<A HREF=\"#attribute flag no_inherit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag noprog\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag noprog\"><H3>ATTRIBUTE FLAG NOPROG</H3></A><PRE>\n  Attribute Flag: NOPROG($)       [NO_COMMAND]\n  Set by: @set #obj/attr=no_command\n  \n  When set on an attribute, it will not evaluate listens or commands.\n \n</PRE>\n<A HREF=\"#attribute flag no_parse\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag pinvisible\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag pinvisible\"><H3>ATTRIBUTE FLAG PINVISIBLE</H3></A><PRE>\n  Attribute Flag: PINVISIBLE(p)\n  Set by: @set #obj/attr=pinvisible\n  \n  The attribute is cloaked, meaning that it can not be seen through examine,\n  lattr, or any method of listing attributes on an object, but can still\n  be called directly with a get() or u() if you know the attribute name.\n\n</PRE>\n<A HREF=\"#attribute flag noprog\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag private\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag private\"><H3>ATTRIBUTE FLAG PRIVATE</H3></A><PRE>\n  Attribute Flag: PRIVATE(null)\n  This is automatically added and can not be set individually.\n  \n  The attribute is private and can only be seen by the owner or anyone who \n  controls that attribute and/or object.\n\n</PRE>\n<A HREF=\"#attribute flag pinvisible\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag regexp\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag regexp\"><H3>ATTRIBUTE FLAG REGEXP</H3></A><PRE>\n  Attribute Flag: REGEXP(R)\n  Set by: @set #obj/attr=regexp\n  \n  This is only useful for listens or commands.  It stipulates that wildcard\n  matching is done through regular expression matching instead of the default\n  of glob pattern matching.\n\n</PRE>\n<A HREF=\"#attribute flag private\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag royalty\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag royalty\"><H3>ATTRIBUTE FLAG ROYALTY</H3></A><PRE>\n  Attribute Flag: ROYALTY(W)      [WIZARD]\n  Set by: @set #obj/attr=royalty (or wizard) (only by wizard+)\n  \n  Only wizard (royalty) or higher may modify the attribute.\n\n</PRE>\n<A HREF=\"#attribute flag regexp\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag safe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag safe\"><H3>ATTRIBUTE FLAG SAFE</H3></A><PRE>\n  Attribute Flag: SAFE(s)\n  Set by: @set #obj/attr=safe\n  \n  The attribute is set safe and by default can not be touched when @wiped or\n  removed or modified in any way.\n\n</PRE>\n<A HREF=\"#attribute flag royalty\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag singlethread\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag singlethread\"><H3>ATTRIBUTE FLAG SINGLETHREAD</H3></A><PRE>\n  Attribute Flag: SINGLETHREAD(S)\n  Set by: @set #obj/attr=singlethread\n  \n  If set on an attribute with a $command or ^listen, that attribute will be\n  single-thread evaluated.  Essentially, it automatically sets the attribute\n  NO_COMMAND upon execution of the command/listen, and will remain set\n  NO_COMMAND until you manually unset the attribute flag.\n\n</PRE>\n<A HREF=\"#attribute flag safe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag uselock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag uselock\"><H3>ATTRIBUTE FLAG USELOCK</H3></A><PRE>\n  Attribute Flag: USELOCK(u)\n  Set by: @set #obj/attr=uselock\n  \n  The attribute will be checked against attribute uselocks.  Please see\n  the section on ATTRIBUTE USELOCk for more information.\n\n</PRE>\n<A HREF=\"#attribute flag singlethread\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag visual\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag visual\"><H3>ATTRIBUTE FLAG VISUAL</H3></A><PRE>\n  Attribute Flag: VISUAL(V)\n  Set by: @set #obj/attr=visual\n  \n  When set on an attribute, that attribute will be visible to anything/anyone.\n  \n  Exceptions:  \n  Anyone depowered from examine may not be able to see this.\n  \n\n</PRE>\n<A HREF=\"#attribute flag uselock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flag wizard\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flag wizard\"><H3>ATTRIBUTE FLAG WIZARD</H3></A><PRE>\n  Attribute Flag: ROYALTY(W)      [WIZARD]\n  Set by: @set #obj/attr=royalty (or wizard) (only by wizard+)\n  \n  Only wizard (royalty) or higher may modify the attribute.\n\n</PRE>\n<A HREF=\"#attribute flag visual\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flags\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flags\"><H3>ATTRIBUTE FLAGS</H3></A><PRE>\n  Topic: ATTRIBUTE FLAGS\n  \n  Attribute flags are flags a person sees when they use lflags() or flags()\n  to grab the given flag off an attribute.  They are:\n  \n    NOPROG($)       (this shows up when you set an attribute NO_COMMAND)\n    VISUAL(V)       (this shows up when you set an attribute VISUAL)\n    NO_INHERIT(I)   (this shows up when you set an attribute NO_INHERIT)\n    LOCK(+)         (this shows when an attribute is @locked)\n    GUILDMASTER(g)  (this shows when an attribute is set GUILDMASTER)\n    ARCHITECT(A)    (this shows when an attribute is set ARCHITECT)\n    COUNCILOR(C)    (this shows when an attribute is set COUNCILOR)\n    ROYALTY(W)      (this shows when an attribute is set WIZARD)    \n    IMMORTAL(i)     (this shows when an attribute is set IMMORTAL)\n    GOD(G)          (this shows when an attribute is set GOD)\n    MDARK(M)        (this shows when an attribute is set HIDDEN)\n    PRIVATE         (this shows when an attribute is set PRIVATE)\n    NO_CLONE(N)     (this shows when an attribute is set NO_CLONE)\n    NO_PARSE(n)     (this shows when an attribute is set NO_PARSE)\n    SAFE(s)         (this shows when an attribute is set SAFE)\n    PINVISIBLE(p)   (this shows when an attribute is set PINVISIBLE)\n    DARK(D)         (this shows when an attribute is set DARK)\n    USELOCK(u)      (this shows when an attribute has a USELOCK)\n    SINGLETHREAD(S) (this shows when an attribute is set SINGLETHREAD)\n    DEFAULT(F)      (this shows when an attribute is set DEFAULT)\n    ATRLOCK(l)      (this shows when an attribute is set ATRLOCK)\n    LOGGED(m)       (this shows when an attribute is set LOGGED)\n    REGEXP(R)       (this shows when REGEXP are enabled on attributes)\n    UNSAFE(U)\t    (this shows when attributes bypass safer_ufun)\n   \n{See 'help attribute flags2' for meanings of the attribute flags}\n  \n</PRE>\n<A HREF=\"#attribute flag wizard\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute flags2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute flags2\"><H3>ATTRIBUTE FLAGS2</H3></A><PRE>\n  Topic: ATTRIBUTE FLAGS - DEFINITION (continued)\n  \n  The following attribute flags result in the following behavior.\n  \n    NOPROG (NO_COMMAND) - The attribute will not execute $commands/^listens\n    VISUAL              - The attribute is visual to anyone.\n    NO_INHERIT          - The attribute is not inherited to it's children\n    LOCK                - The attribute was @locked.\n    GUILDMASTER         - The attribute is modifyable by GuildMaster or higher\n    ARCHITECT           - The attribute is modifyable by Architect or higher\n    COUNCILOR           - The attribute is modifyable by Councilor or higher\n    ROYALTY             - The attribute is modifyable by Wizard or higher\n    IMMORTAL            - The attribute is modifyable by Immortal or higher\n    GOD                 - The attribute is modifyable only by #1\n    MDARK (HIDDEN)      - The attribute is wizard-hidden.\n    PRIVATE             - The attribute is private to the item.\n    NO_CLONE            - The attribute is not copied on a @clone\n    NO_PARSE            - The attribute does not parse %0-%9 with $commands\n    SAFE                - The attribute is safe from modification.\n    PINVISIBLE          - The attribute is seeable by wizards/modifyable to any\n    DARK                - The attribute is #1 seeable only\n    USELOCK             - The attribute can have an ~attribute uselock\n                          (See help on 'attribute uselock' for more info)\n    SINGLETHREAD        - The attribute must wait for completion before re-ran\n    DEFAULT             - The attribute 'inherits' built-in attr globals.\n    ATRLOCK             - The attribute has a format lock.\n    LOGGED              - The attribute is logged for sets/edits/clears.\n    REGEXP              - The attribute $/^ command/listen use regexp parsing\n    UNSAFE              - The attribute evaluates at object's permission level.\n                          (this is the default behavior w/o safer_ufun set)\n    \n  See Also: FLAG LIST\n \n</PRE>\n<A HREF=\"#attribute flags\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute ownership\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute ownership\"><H3>ATTRIBUTE OWNERSHIP</H3></A><PRE>\n  Topic: ATTRIBUTE OWNERSHIP\n  The attributes on an object may be owned independently from the object.\n  Normally, the owner of the object owns all of its attributes.\n  In addition to an owner, each attribute also has a locked flag,\n  set or cleared with @lock &lt;obj&gt;/&lt;attr&gt; and @unlock &lt;obj&gt;/&lt;attr&gt;.\n  This flag controls whether or not the owner of the object may\n  @chown the attribute to himself with @chown &lt;object&gt;/&lt;attrib&gt;,\n  as well as whether or not the attribute is automatically @chowned to\n  the new owner when the object is @chowned.\n \n  You may lock and unlock attributes that you own on any object (whether\n  you own the object or not), and you may @chown an attribute that you own\n  to the owner of the object if it is unlocked.  The examine command\n  will show you all attributes that you own on an object, even if you\n  don't own the object.\n  \n{ 'help attribute ownership2' for more }\n  \n</PRE>\n<A HREF=\"#attribute flags2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute ownership2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute ownership2\"><H3>attribute ownership2</H3></A><PRE>\n  Locked attributes may not be modified or removed, and do not change \n  ownership when the object containing them is @chowned.\n \n  You may not modify or remove attributes that you own that are stored\n  on objects that you do not own, but you may modify or remove attributes\n  owned by others on your objects (if you do this, the attribute becomes owned\n  by you).\n \n  If an attribute is owned by someone other than the object's owner, then\n  the number of the attribute's owner is shown in parentheses immediately\n  after the attribute name.  If there are any flags set on the attribute,\n  those flags are indicated in the parentheses too.\n \n  The + flag means that the attribute is locked (so that it will not\n  change ownership of the object is @chowned), the $ flag means that\n  $-commands are not checked for that attribute.  The I flag indicates that\n  the attribute is not inherited by children of the object, and the V flag\n  shows that the attribute is publicly visible.\n  \n{ 'help attribute ownership3' for more }\n  \n</PRE>\n<A HREF=\"#attribute ownership\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute ownership3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute ownership3\"><H3>attribute ownership3</H3></A><PRE>\n \n  When checking an attribute lock against an object, the lock will always\n  fail if the locked object is not owned by the same player as the attribute\n  being tested.  The comparison specified in the lock is only performed if\n  the owner of the locked object also owns the attribute on the object\n  being checked.\n \n  See Also: @chown, @lock, @set, @unlock, examine\n  \n</PRE>\n<A HREF=\"#attribute ownership2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute tree limitations\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute tree limitations\"><H3>ATTRIBUTE TREE LIMITATIONS</H3></A><PRE>\n  Topic: Attribute Trees/limitations\n  \n  There are caveats of using 'attribute trees' in RhostMUSH.  The largest of\n  which, is the fact, that natively RhostMUSH does not support attribute \n  trees.  This is the case because of the binary database and the absolute\n  overhead we would have implimenting a fully featured attribute tree system\n  that would match (or exceed) what Penn offers.  The second, and larger\n  issue is for the large amount of overhead this would cause, there really\n  is very little gain out of it other than attribute organization. \n  \n  Every time an attribute tree would be looked up, every conceiveable branch\n  would have to be checked to see if permissions were granted.  While in\n  Penn this would be less costly (but likely still costly for all the\n  branch checks) in Rhost it would be doubly so.  We have to consider reality\n  levels, the multiple bitlevel checks, all the various locks, all the various\n  @powers, all the various @depowers, all the various built-in capping and\n  conditionals, and do a hash lookup of every single attribute on the object\n  for every single branch of every single pattern on the object itself for \n  every single branch in every single chain for every single lookup.  \n  That would be a horrible waste of resources for minimal gains.\n  \n  So with that in mind, these are the limitations of Rhost with Attrib Trees:\n    1.  @cluster/@wipe/wipe() is not attribute tree aware.  It likely won't be.\n    2.  You can orphan a branch from a trunk if a further branch is locked.\n        Remember, these are not true trees, just an imitation of them.\n    3.  The set()/@set/lattr/examine/decompile honors the attribute tree\n        permissions but only if the tree option is specified for them.\n        Otherwise, it sees it just like any other attribute.\n    4.  You can orphan a tree branch by setting an empty attribute (removing)\n        it as it doesn't check branches of that attribute for permissions.\n        So be careful.\n    5.  This is intended to emulate the most used feature sets of Penn and\n        was able to be done with minimal overhead.  Again, we have no\n        interests nor desire to duplicate Penn's capabilities in this\n        avenue as we see it directly opposite of our own agendas and goals.\n\n</PRE>\n<A HREF=\"#attribute ownership3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute tree permission\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute tree permission\"><H3>ATTRIBUTE TREE PERMISSION</H3></A><PRE>\n  Topic: Attribute Trees/permission\n  \n  The following ways allows you to set permissions on various tree branches.\n  Please be aware, @clusters and @wipe ARE NOT TREE AWARE!!!\n  \n  Locking Attributes:\n    @lock -- Yup.  You can @lock an attribute and if it won't have permission\n             to the branch, you won't have permission to the entire tree.\n             All it takes is one branch of the tree to block the entire thing.\n           &gt; Example: @lock MyObj/A`TREE=me\n  \n    @aflag-- The @aflags wiz command allows you to set up attribute prefixes\n             globally, individually, per owner, per object, or per enactor.\n             Trees would check for these locks as well.\n           &gt; Example: See: wizhelp @aflags\n   \n    VLIMIT-- If you hit the maximum number of attributes or will hit the\n             maximum number by setting all the trunks before the attribute,\n             it will not set the attribute.\n           &gt; Example: See: wizhelp @admin, wizhelp vlimit\n  \n  See Also: @set, &amp;, set(), rset(), lattr()\n{ wiz help: @aflags, @admin, vlimit, @attribute, lattrp() }\n\n</PRE>\n<A HREF=\"#attribute tree limitations\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute tree setting\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute tree setting\"><H3>ATTRIBUTE TREE SETTING</H3></A><PRE>\n  Topic: Attribute Trees/setting\n  \n  The following ways allow you to set trees and follow branching.\n  Please be aware, @clusters and @wipe ARE NOT TREE AWARE!!!\n  \n  Setting Attributes:\n    @set  -- @set has a /tree switch, that when used with attribute setting,\n             will set the entire branch list included in the attribute.  The\n             /tree switch is ignored for anything not involving setting or\n             clearing attributes.\n           &gt; Example:  @set/tree MyObj=A`TREE`ATTRIB:Boo!\n  \n    &amp;     -- &amp;, when using ` as the first char, will tell &amp; to set the attrib\n             as if it was setting the tree.  \n           &gt; Example:  &amp;`A`TREE`ATTRIB MyObj=Boo!\n  \n    set() -- set() has a third optional argument to tell it it's to set a\n             tree.  The rset() function has this option as well.\n           &gt; Example:  set(MyObj,A`TREE`ATTRIB:Boo!,1)\n  \n  See Also: @set, &amp;, set(), rset(), lattr()\n{ wiz help: @aflags, @admin, vlimit, @attribute, lattrp() }\n  \n</PRE>\n<A HREF=\"#attribute tree permission\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute tree viewing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute tree viewing\"><H3>ATTRIBUTE TREE VIEWING</H3></A><PRE>\n  Topic: Attribute Trees/viewing\n  \n  The following ways allow you to view/examine trees and follow branching.\n  Please be aware, @clusters and @wipe ARE NOT TREE AWARE!!!\n  \n  Viewing Attributes:\n    ex    -- The examine command has a /tree option that lets you examine just\n             the specified branch level itself.  If you want the tree and all\n             branches, specify ex without the /tree switch.\n           &gt; Example: ex/tree MyObj/A`TREE*\n  \n    @dec  -- The @decompile command has a /tree option that lets you \n             @decompile the specified branch level itself.  If you want the\n             tree and all branches, specify @decomile without the /tree switch.\n           &gt; Example: @decompile/tree MyObj/A`TREE*\n  \n    lattr -- lattr() as well as lattrp() has a key option that lets you specify\n             if it should only give you trees per wildcarding.  This works like\n             ex and @dec.\n           &gt; Example: lattr(MyObj/A`TREE*,,,,,1)\n  \n  See Also: @set, &amp;, set(), rset(), lattr()\n{ wiz help: @aflags, @admin, vlimit, @attribute, lattrp() }\n\n</PRE>\n<A HREF=\"#attribute tree setting\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute trees\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute trees\"><H3>ATTRIBUTE TREES</H3></A><PRE>\n  Topic: Attribute trees\n  \n  For ease of documentation, the attribute tree character for this\n  documentation will be the ` character.\n  \n  Attribute trees are defined by attributes that contain ` to break up each\n  branch in a tree.  Example:  THIS`IS`A`TREE`ATTRIBUTE\n  \n  Note:  The tree character, while defaulting to ` can be defined as any\n         character, and may be changed depending on the whim of the admin\n         running your game.  Please check '@list options system' on what the\n         current tree character is defined as.  \n  \n  @clusters and @wipe are not tree aware.  This is intentional, and will \n  not be worth the effort to make them so.  Please do not ask for it to happen.\n   \n  RhostMUSH does not, specifically, have attribute trees as you would define\n  them as.  Rhost does, however, allow you to mimic the feature set with\n  some relative ease to allow some compatibility to PennMUSH (and any other\n  codebase that may pick up that option in the future).  It does that by\n  the following ways:\n  \n  Please be aware while /tree will follow permissions on attribute branches,\n  directly @setting it without the /tree will bypass a branch check.  This\n  is, again, intentional, as this is just a method to allow trees in an\n  environment that is not designed around, nor intended to, fully implement\n  PennMUSH style trees.\n  \n  For detailed information on what support RhostMUSH has for trees:\n     ATTRIBUTE TREE SETTING     -- Help on attribute tree setting. \n     ATTRIBUTE TREE VIEWING     -- Help on attribute tree viewing.\n     ATTRIBUTE TREE PERMISSION  -- Help on attribute tree locking/perms.\n  \n  For detailed information on limitations of what RhostMUSH does not:\n     ATTRIBUTE TREE LIMITATIONS -- Limitations of attribute trees.\n  \n  For showing what the current TREE character is:\n     @list options system\n  \n  See Also: @set, &amp;, set(), rset(), lattr()\n{ wiz help: @aflags, @admin, vlimit, @attribute, lattrp() }\n\n</PRE>\n<A HREF=\"#attribute tree viewing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute uselock2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute uselock2\"><H3>ATTRIBUTE USELOCK2</H3></A><PRE>\n  Topic: Attribute uselocks (continued)\n  \n  As you could see, this can be very handy if you want multiple control\n  on the same object.  The following specifies if you pass or fail an\n  attribute uselock:\n    For Passing:\n          - If the uselock attribute does not exist.\n          - If the uselock attribute returns a null (empty string).\n          - If the uselock attribute returns a '1'.\n  \n    For failure:\n          - If the uselock attributes returns anything except '1' or null.\n  \n  See @list options to see if USELOCKS are available for attributes.  \n  Depending on the configuration of the rhostmush in question, uselocks may\n  be disabled or you may need a wizard to set one up for you.\n  \n</PRE>\n<A HREF=\"#attribute trees\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#attribute uselocks\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"attribute uselocks\"><H3>ATTRIBUTE USELOCKS</H3></A><PRE>\n  Topic: Attribute uselocks\n  \n  Attribute uselocks are a method where you can specify individual uselocks\n  per command per object.  The path it takes to check uselocks are as \n  follows:\n          No Command? -&gt; Halted? -&gt; Object Uselock -&gt; Attribute Uselock\n  \n  To set up a uselock on a command, the attribute that houses the $command\n  must first be set USELOCK.  Once the attribute is set USELOCK, you may\n  then specify a lock for that attribute.  Attribute locks are created by\n  setting an attribute with a '~' before the attribute name. Here's an\n  example that you can look at:\n    &gt; @va me=$tryme:@pemit %#=You tried your command.\n      Set.\n    &gt; @set me/va=uselock\n      Set.\n    &gt; &amp;~VA me=[match(%#,owner(me))]\n      Set.\n    &gt; tryme\n      You tried your command.\n    &gt; &amp;~VA me=[match(#-1,owner(me))]\n      Set.\n    &gt; tryme\n      Huh?  (Type 'help' for help.)\n  \n{ See 'help attribute uselock2' to continue (and a description)}\n  \n</PRE>\n<A HREF=\"#attribute uselock2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#audible\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"audible\"><H3>AUDIBLE</H3></A><PRE>\n  Flag: AUDIBLE(n) (all types)\n \n  When set on an object, player, or room everything from a say, pose, or emit\n  inside the object will be sent to every object in the location of that\n  object (except for rooms which have no location) as well as to all objects\n  mentioned in the object's Forwardlist attribute.  When set on an exit,\n  everything from a say, pose, or emit in the room the exit is in will be\n  forwarded to the room the exit points to.  In both cases the @prefix\n  attribute will be inserted in front of the text, or a default prefix if no\n  @prefix attribute is set.  If the @filter attribute is present, it will be\n  used to suppress those messages matching any of the patterns specified.\n \n  See Also: @filter, @forwardlist, @prefix, PUPPET, MONITOR\n \n</PRE>\n<A HREF=\"#attribute uselocks\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#auditorium\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"auditorium\"><H3>AUDITORIUM</H3></A><PRE>\n  Flag: AUDITORIUM([a])   \n  \n  If a room or location is set AUDITORIUM, it checks\n  the location's SpeechLock to see if you have permission to talk in\n  that room otherwise it will not let you.  It stops @oemits, @emits,\n  says, @pemit/contents, poses, and related commands.\n  \n  See Also: @lock, @sfail, @asfail\n  \n</PRE>\n<A HREF=\"#audible\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#avg()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"avg()\"><H3>AVG()</H3></A><PRE>\n  Function: avg(&lt;value1&gt;,&lt;value2&gt;[,&lt;value3&gt;,...])\n           mean(&lt;value1&gt;,&lt;value2&gt;[,&lt;value3&gt;,...])  (aliased)\n  \n  This function takes two more more values and returns the average of\n  the values.\n  \n  Example:\n    &gt; say avg(5,6)\n    You say &quot;5.5&quot;\n    &gt; say avg(5,6,7)\n    You say &quot;6&quot;\n  \n  See Also: round(), trunc(), floor(), ceil()\n  \n</PRE>\n<A HREF=\"#auditorium\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#bang notation\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"bang notation\"><H3>BANG NOTATION</H3></A><PRE>\n  Bang notation allows you to use '!' and '!!' in functions for 'not' and\n  'not-not' functionality.  This works similiarilly to the C equivelant of\n  using 'bangs'.  You may also specify '!$' and '!!$' for FALSE or TRUE\n  conditions on functions that return string values.  Finally, you may\n  specify '!^' and '!!^' for true-boolean FALSE or TRUE conditions on\n  functions that return true-boolean based on the function t()'.\n  \n  \n  Example:\n    &gt; say match(one two three four five,four)\n    You say &quot;4&quot;\n    &gt; say !match(one two three four five,four)\n    You say &quot;0&quot;\n    &gt; say !!match(one two three four five,four)\n    You say &quot;1&quot;\n    &gt; say !!$grab(this is a test,was)\n    You say &quot;0&quot;\n    &gt; say !!$grab(this is a test,this)\n    You say &quot;1&quot;\n    &gt; say !!^space(1000)                  (spaces are non-boolean strings)\n    You say &quot;0&quot;\n    &gt; say !!$space(1000)                  (spaces are not-null strings)\n    You say &quot;1&quot; \n  \n  Bang notation may or may not be enabled based on the RhostMUSH that you are\n  on.  Please check @list options to see if it is currently enabled.\n  \n</PRE>\n<A HREF=\"#avg()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#before()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"before()\"><H3>BEFORE()</H3></A><PRE>\n  Function: before(&lt;string1&gt;, &lt;string2&gt; [,&lt;key&gt;])\n \n  Returns the portion of &lt;string1&gt; that occurs before &lt;string2&gt;.  If &lt;string2&gt;\n  does not occur in &lt;string1&gt;, the entire string is returned.\n  If you want to return the portion of the string after the first space,\n  use the first() function instead.  This function is case sensitive.\n  \n  You may specify a &lt;key&gt; of 1 to disable ansi handling which will speed\n  this function up.  The default is '0' which allows ansi handling.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n   \n  Examples:\n    &gt; say before(This is a test,a)\n    You say &quot;This is &quot;\n    &gt; say before(This is a test,is)\n    You say &quot;Th&quot;\n    &gt; say before(This is a test, nope) \n    You say &quot;This is a test&quot;\n  \n  See Also: after(), first(), rest()\n  \n</PRE>\n<A HREF=\"#bang notation\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#being killed\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"being killed\"><H3>BEING KILLED</H3></A><PRE>\n  Topic: BEING KILLED  \n \n  Getting killed is no big deal. If you are killed, you return to your home,\n  and  all things you carry return to their homes. You also collect 50 coins\n  in insurance money (unless you have &gt;= 10000 coins or you were killed via\n  the Wizard slay command).  Generally, killing is not encouraged unless \n  absolutely necessary. (Note: Killing a wizard is a quick way to discover\n  the many uses of the @boot command...  and killing anyone can be very\n  rude.  However, on the RhostMUSH server, wizards are usually more inventive)\n  \n  See Also: kill, @akill, @kill, @okill, IMMORTAL, ROYALTY\n  \n</PRE>\n<A HREF=\"#before()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#between()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"between()\"><H3>BETWEEN()</H3></A><PRE>\n  Function: between(&lt;value1&gt;,&lt;value2&gt;,&lt;number&gt;[,&lt;boolean&gt;])\n  \n  This function will return TRUE (1) if &lt;number&gt; is between\n  the values &lt;value1&gt; and &lt;value2&gt;.  If you specify the \n  optional boolean '1', it will see if the &lt;number&gt; is \n  between OR the values &lt;value1&gt; and &lt;value2&gt;.\n  \n  Example:\n    &gt; say between(10,15,14)\n    You say &quot;1&quot;\n    &gt; say between(10,15,15)\n    You say &quot;0&quot;\n    &gt; say between(10,15,15,1)\n    You say &quot;1&quot;\n  \n  See Also: fbetween(), fbound(), bound(), gt(), lt(), gte(), lte()\n  \n</PRE>\n<A HREF=\"#being killed\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#bittype()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"bittype()\"><H3>BITTYPE()</H3></A><PRE>\n  Function: bittype(&lt;object&gt; [,&lt;type&gt;])\n \n  Returns a number from the following table based on the owner of &lt;object&gt;.\n  You may specify a &lt;type&gt; of '1' to enforce wiz-inheritance checks on\n  the target &lt;object&gt; otherwise the default of '0' is applied which just\n  checks ownership.\n  \n  The following permission levels are shown:\n    God (#1)        7\n    Super-Royalty   6\n    Royalty         5\n    Councilor       4\n    Architect       3\n    Guildmaster     2\n    Citizen         1\n    Wanderer/Guest  0\n    ERROR           #-1\n \n  If a player has more than one bit flag set, their highest one takes\n  precedence.\n \n</PRE>\n<A HREF=\"#between()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#blind\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"blind\"><H3>BLIND</H3></A><PRE>\n  Flag: BLIND([g])  \n  \n  This flag, when set on a room, will make it so arrival\n  or leaving messages, on that room, are not seen.  If it is on an\n  exit, then any movement through that exit will not show the arrived\n  or left messages.  Again, this flag is only useful for locations\n  or exits.  \n  \n  If the config blind_snuffs_cons is enabled, this will also snuff\n  the connect and disconnect messages.\n  \n  Note:  If the RhostMUSH is configured to make the BLIND flag \n         always in effect, then the BLIND flag will do the reverse\n         of it's normal behavior, and make exit movement visible.\n         @list options to see if it's in effect or not.\n  \n  See Also: CLOAK, DARK, UNFINDABLE\n  \n</PRE>\n<A HREF=\"#bittype()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#bogus commands\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"bogus commands\"><H3>BOGUS COMMANDS</H3></A><PRE>\n  Topic: BOGUS COMMANDS    \n  \n  Bogus commands can be made using exits. For example, to make a 'sit'\n  command, one could &quot;@open sit&quot;, then &quot;@link sit=here&quot; (because unlinked\n  exits can be stolen), &quot;@lock sit=#0&quot; (impossible for a room to pass a lock,\n  #0 is always a room, therefore the lock always fails), and &quot;@fail sit=You\n  sit on the chair.&quot;; &quot;@ofail sit=sits on the chair.&quot;.  Since nobody can go\n  through it, it always fails. The @fail message is displayed  to the player,\n  and the @ofail message (preceded by the player's name) to  everyone else.  \n  \n  For bogus commands, you may look at $commands instead as it doesn't take up\n  valuable quota. (see help for $-commands)\n  \n  See Also: @afail, @fail, @link, @lock, @ofail, @open, $-COMMANDS\n  \n</PRE>\n<A HREF=\"#blind\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#boolean values\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"boolean values\"><H3>BOOLEAN VALUES</H3></A><PRE>\n  Topic: BOOLEAN VALUES\n \n  Boolean values are internally considered to be either 1, generally\n  interpreted as being true, and 0, which is generally interpreted as being\n  false. Now, any string is interpreted as true(1), except for the null\n  string (whose length is 0), which is false(0).  A #-1 is interpreted as\n  false(0), and any other #&lt;dbref&gt; is interpreted as true(1).  Any number\n  except 0 is interpreted as true(1), except 0 which is false(0). (Yes, even\n  negative numbers are true(1))\n \n  Examples:\n  not(foo) = 0             not(&lt;null string&gt;) = 1   not(-66) = 0\n  not(0) = 1               not(#-1) = 1             not(#12) = 0\n  And so on...\n \n  Note: These rules only apply when a function expects a Boolean \n  value, not for strings that expect other values.\n  \n  See Also: FUNCTION CLASSES\n  \n</PRE>\n<A HREF=\"#bogus commands\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#bounce\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"bounce\"><H3>BOUNCE</H3></A><PRE>\n  Flag: BOUNCE([o])  \n  Attribute: BOUNCEFORWARD\n  \n  Note:  The attribute is set with @set or &amp;.\n  \n  This flag redirects the output that the target receives\n  and sends it to all of it's contents.  This is handy if you don't want\n  to mess with @listens or @forwards.  This allows players to have \n  'listens' without having to enable 'player_listen' which can be \n  dangerous.\n  \n  The target set BOUNCE may have a BOUNCEFORWARD attribute that will\n  redirect everything that object would have seen to the list of\n  dbref#'s specified in BOUNCEFORWARD.  The list must be dref#'s\n  and valid player objects.  Be aware that the source forwarding\n  notifies the targets in the BOUNCEFORWARD where the text is\n  originating from, so no abusing it :)\n  \n  Examples:\n    &gt; @set thing=bounce\n    Set.\n    &gt; &amp;bounceforward thing=#12 #34 #4567\n    Set.\n  \n</PRE>\n<A HREF=\"#boolean values\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#bounceforward\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"bounceforward\"><H3>BOUNCEFORWARD</H3></A><PRE>\n  Flag: BOUNCE([o])  \n  Attribute: BOUNCEFORWARD\n  \n  Note:  The attribute is set with @set or &amp;.\n  \n  This flag redirects the output that the target receives\n  and sends it to all of it's contents.  This is handy if you don't want\n  to mess with @listens or @forwards.  This allows players to have \n  'listens' without having to enable 'player_listen' which can be \n  dangerous.\n  \n  The target set BOUNCE may have a BOUNCEFORWARD attribute that will\n  redirect everything that object would have seen to the list of\n  dbref#'s specified in BOUNCEFORWARD.  The list must be dref#'s\n  and valid player objects.  Be aware that the source forwarding\n  notifies the targets in the BOUNCEFORWARD where the text is\n  originating from, so no abusing it :)\n  \n  Examples:\n    &gt; @set thing=bounce\n    Set.\n    &gt; &amp;bounceforward thing=#12 #34 #4567\n    Set.\n  \n</PRE>\n<A HREF=\"#bounce\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#bound()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"bound()\"><H3>BOUND()</H3></A><PRE>\n  Function: bound(&lt;number&gt;,&lt;min-value&gt;[,&lt;max-value&gt;])\n  \n  This function will return &lt;number&gt; if greater than min-value, else it will \n  return min-value.  If max-value exists, and number is greater than max-value\n  then max-value is used.\n  \n  Example:\n    &gt; say bound(8,12)\n    You say &quot;12&quot;\n    &gt; say bound(8,12,10)\n    You say &quot;10&quot;\n  \n  See Also: between(), fbetween(), fbound(), gt(), lt(), gte(), lte()\n\n</PRE>\n<A HREF=\"#bounceforward\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#brackets()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"brackets()\"><H3>BRACKETS()</H3></A><PRE>\n  Function: brackets([&lt;string&gt;])\n   \n  Returns a count of the number of left and right square brackets,\n  parentheses, and curly braces in the string, in that order, as a\n  space-separated list of numbers. This is useful for finding missing\n  or extra brackets in MUSH code.\n   \n  Example:\n  &gt; @desc me=This is [ansi(h,a test)] of the { brackets() function.\n  Set.\n  &gt; think brackets(v(desc))\n  1 1 2 2 1 0             (This is: 1-[, 1-], 2-(, 2-), 1-{, 0-})\n  \n  See Also: totpos(), numpos(), nummatch(), totmatch()\n  \n</PRE>\n<A HREF=\"#bound()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#brandy_mail toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"brandy_mail toggle\"><H3>BRANDY_MAIL TOGGLE</H3></A><PRE>\n  Toggle: BRANDY_MAIL\n  \n  When this toggle is set on the target, whenever that target starts\n  a message with 'mail &lt;string1&gt;=&lt;string2&gt;' it will mimic the brandy\n  mailer by making string2 be the SUBJECT of the message instead of\n  making it the body of the message and immediately sending it \n  (which is the default).  See help on 'mail send' for more info on\n  how this works.\n  \n  See Also: mail send, penn_mail toggle, mail_stripreturn toggle\n  \n</PRE>\n<A HREF=\"#brackets()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#byeroom\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"byeroom\"><H3>BYEROOM</H3></A><PRE>\n  Flag: BYEROOM(=)  \n  \n  This flag, when set on rooms, is meant to depict that your\n  room is about to be destroyed.  This is used instead of the GOING \n  flag as the server has been heavily modified and now will allow\n  for one thing the recovery of destroyed players/rooms/things under\n  a set period of time.  The syntax is @set #room=!BYEROOM\n  \n  See Also: GOING, @destroy\n  \n</PRE>\n<A HREF=\"#brandy_mail toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cand()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cand()\"><H3>CAND()</H3></A><PRE>\n  Function: cand(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n   \n  Takes two or more booleans, and returns 1 if they are all each equivalent\n  to true(1).  Unlike and(), this function stops after the FIRST false\n  statement.\n  \n  Example: \n    &gt; say [cand(1[setq(0,test)],0,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say &quot;1 - test / &quot;\n    &gt; say [cand(1[setq(0,test)],1,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say &quot;1 - test / test2&quot;\n  \n  See Also: BOOLEAN VALUES, or(), not(), xor(), nand(), nor(), xnor(), cor()\n  \n</PRE>\n<A HREF=\"#byeroom\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#caplist()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"caplist()\"><H3>CAPLIST()</H3></A><PRE>\n  Function: caplist(&lt;list&gt;[,&lt;delim&gt;[,&lt;osep&gt;[,&lt;key&gt;[,&lt;type&gt;]]]])\n\n  Returns &lt;list&gt; with the first character of each word capitalized.  You may\n  specify an optional &lt;delim&gt; as a delimiter for the list input, otherwise the\n  default of space will be used.  You may also specify an optional &lt;osep&gt;\n  as a separator for the list that is returned.\n  \n  Additionally, an optional &lt;key&gt; may be specified which alters the behavior\n  of the function slightly.  The key must be one of the following characters:\n    - L:    Reduces the entire list to lower case before capitalization is\n            performed.\n    - N:    Performs capitalization naturally, and does not affect any other\n            characters in the list (default).\n    - T:    Performs a 'true' capitalization based on currently English\n            definition for titles.\n  \n  A &lt;type&gt; of '1' will work with &lt;key&gt; values of 'L' or 'T' to optionally \n  capitalize all words contained in a hyphon, optionally.  The default\n  behavior is to capitalize only the start of the word.  This &lt;type&gt; value\n  has no influence on the 'N' &lt;key&gt; type.\n   \n  Example:\n    &gt; say caplist(the mAn in thE mOon).\n    You say &quot;The MAn In ThE MOon.&quot;\n\n    &gt; say caplist(the mAn in thE mOon,,|,L).\n    You say &quot;The|Man|In|The|Moon.&quot;\n  \n  See Also: capstr()\n\n</PRE>\n<A HREF=\"#cand()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#capstr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"capstr()\"><H3>CAPSTR()</H3></A><PRE>\n  Function: capstr(&lt;string&gt;)\n \n  Returns &lt;string&gt; with the first character capitalized.  If the first\n  character is not a letter, this function returns the string unmodified.\n \n  Example:\n    &gt; say capstr(this is a string I want capitalized)\n    You say &quot;This is a string I want capitalized&quot;\n  \n  See Also: lcstr(), ucstr(), caplist()\n\n</PRE>\n<A HREF=\"#caplist()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#case()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"case()\"><H3>case()</H3></A><PRE>\n  Function: case(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;]...[,&lt;dflt&gt;])\n  case() is like switch() but does not do wildcard matching (i.e., using *).\n  In cases where wildcards are not needed, it performs marginally faster.\n  This function is also case sensitive.\n   \n  Example:\n    &gt; say case(c,a,A,b,B,c,C,d,D,E)\n    You say &quot;C&quot;\n    &gt; say case(f,a,A,b,B,c,C,d,D,E)\n    You say &quot;E&quot;\n  \n  See Also: @switch, match(), ifelse(), switch()\n  \n</PRE>\n<A HREF=\"#capstr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#caseall()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"caseall()\"><H3>caseall()</H3></A><PRE>\n  Function: caseall(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;]...[,&lt;dflt&gt;])\n  caseall() is like switchall() but does not do wildcard matching \n  (i.e., using *).  In cases where wildcards are not needed, it performs \n  marginally faster.  This function is also case sensitive.\n   \n  Example:\n    &gt; say caseall(c,a,A,b,B,c,C,d,D,c,X,E)\n    You say &quot;CX&quot;\n    &gt; say caseall(f,a,A,b,B,c,C,d,D,E)\n    You say &quot;E&quot;\n  \n  See Also: @switch, match(), ifelse(), switch(), switchall()\n  \n</PRE>\n<A HREF=\"#case()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cat()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cat()\"><H3>cat()</H3></A><PRE>\n  Function: cat(&lt;string&gt;[,&lt;stringN&gt;])\n \n  cat returns a string made up of the contents of string1 through stringN,\n  with each string separated from its neighbors by a space.\n \n  Example:\n    &gt; say cat(this is, a test)\n    You say &quot;this is a test&quot;\n    &gt; say cat(This is,another,test of the,CAT function)\n    You say &quot;This is another test of the CAT function&quot;\n  \n  See Also: setunion(), setinter(), strcat()\n  \n</PRE>\n<A HREF=\"#caseall()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cd\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cd\"><H3>cd</H3></A><PRE>\n  Command: co &lt;name&gt; &lt;password&gt;\n           cd &lt;name&gt; &lt;password&gt;\n           ch &lt;name&gt; &lt;password&gt;\n  \n  These commands are only useful on the connect screen.  They are used to\n  connect to your account &lt;name&gt; with the provided &lt;password&gt;.  There are\n  currently three methods to do so.\n  \n  They are as follows:\n     co  -- This option is the default and normal method to connect.\n            This option has no special conditions or privilages.\n     ch  -- Wizards and anyone with the NOWHO @power (to @hide) can use this.\n            This option will auto-hide the player when connecting.\n            It defaults to the 'co' option if you can't @hide.\n     cd  -- Wizards and higher can use this to connect dark to the game.\n            This effectively connects wiz-cloaked to the game.\n            Immortals get auto-added to supercloak.\n  \n  See Also: @aconnect, @adisconnect, @hide\n            \n</PRE>\n<A HREF=\"#cat()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ceil()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ceil()\"><H3>CEIL()</H3></A><PRE>\n  Function: ceil(&lt;number&gt;)\n \n  Returns the smallest integer greater than or equal to &lt;number&gt;.  &lt;number&gt;\n  may be a floating point number, and an integer result is returned.\n \n  Examples:\n    &gt; say ceil(5)\n    You say &quot;5&quot;\n    &gt; say ceil(5.2)\n    You say &quot;6&quot;\n    &gt; say ceil(5.8)\n    You say &quot;6&quot;\n    &gt; say ceil(-5)\n    You say &quot;-5&quot;\n    &gt; say ceil(-5.2)\n    You say &quot;-5&quot;\n  \n  See Also: div(), floor(), mod(), round(), trunc()\n  \n</PRE>\n<A HREF=\"#cd\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#center()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"center()\"><H3>CENTER()</H3></A><PRE>\n  Function: center(&lt;string&gt;,&lt;width&gt;[,&lt;fill&gt;])\n \n  This function will center a string in a string &lt;width&gt; characters wide,\n  using &lt;fil&gt; characters for padding on either end of the string for\n  centering.  If no fill character is specified then a space is used.\n  If &lt;string&gt; is longer than &lt;width&gt; characters, the string is returned\n  unmodified.  The &lt;fill&gt; may contain more than one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Example:\n    &gt; say center(a,5,-)\n    You say &quot;--a--&quot;\n    &gt; say center(*BAMF*,15)\n    You say &quot;    *BAMF*     &quot;\n  \n  Alternate:\n    &gt; say printf($:-:^5s,a)            (the '^' specifies center justify)\n    You say &quot;--a--&quot;\n  \n  See Also: ljust(), rjust(), ljc(), rjc(), printf()\n  \n</PRE>\n<A HREF=\"#ceil()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ch\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ch\"><H3>ch</H3></A><PRE>\n  Command: co &lt;name&gt; &lt;password&gt;\n           cd &lt;name&gt; &lt;password&gt;\n           ch &lt;name&gt; &lt;password&gt;\n  \n  These commands are only useful on the connect screen.  They are used to\n  connect to your account &lt;name&gt; with the provided &lt;password&gt;.  There are\n  currently three methods to do so.\n  \n  They are as follows:\n     co  -- This option is the default and normal method to connect.\n            This option has no special conditions or privilages.\n     ch  -- Wizards and anyone with the NOWHO @power (to @hide) can use this.\n            This option will auto-hide the player when connecting.\n            It defaults to the 'co' option if you can't @hide.\n     cd  -- Wizards and higher can use this to connect dark to the game.\n            This effectively connects wiz-cloaked to the game.\n            Immortals get auto-added to supercloak.\n  \n  See Also: @aconnect, @adisconnect, @hide\n            \n</PRE>\n<A HREF=\"#center()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#changes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"changes\"><H3>changes</H3></A><PRE>\n  For a list of actual changes, see 'help revis'.\n  \n  RhostMUSH, first originating in 1989/1990, was founded as a TinyMUD.\n  Though the current code runs a MUSH compatible kernal, we still use\n  the exact same database from that period.  You will find RhostMUSH\n  is nothing like a MUD, MUSH or a MUSE.  It is a hybrid of many systems.\n  The coders for RhostMUSH have put a lot of effort into adding changes \n  and modifying the server.  You will find that pretty much any code \n  will work properly here on RhostMUSH.  Another major change is error \n  messages are randomized.  So if you see something strange, you're \n  not being spoofed.  Also, if you notice a strange response, don't \n  think it's a problem.  Talk to a staff person as the option you \n  may be trying may be disabled.\n  \n  The list of changes done to this server goes beyond any document\n  can describe.  The only resemblance this has to TinyMUSH or any\n  other variety of server is in its backward compatibility with\n  how it parses and functionality returns.\n   \n  For help on these people, look at CREDITS\n  \n  See Also: CREDITS\n  \n</PRE>\n<A HREF=\"#ch\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#channel\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"channel\"><H3>channel</H3></A><PRE>\n  Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The built in channel system that RhostMUSH has is a simple design\n  based off standard MUSE com systems.  The format for each is\n  as follows:\n  \n       +chan[nel] +channel-name  (add yourself to a channel)\n       +chan[nel] -channel-name  (remove yourself from a channel)\n       +chan[nel]                (display all your channels)\n       +com channel=who          (see who is on a given channel)\n       +com channel=message      ('talk' on a given channel)\n  \n  (help channel2 to continue)\n\n</PRE>\n<A HREF=\"#changes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#channel2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"channel2\"><H3>channel2</H3></A><PRE>\n  Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The channel system is case sensitive and does recognize various\n  formatting by the following special cases.\n  \n       :     this poses a message on the channel.\n       ;     this possessive poses on the channel.\n       &quot;     this speaks on the channel.\n  \n          Syntax:  +com channel=[format]message\n          Example: +com channel=:message (poses on the channel)\n  \n  All channels cost money (currently 5 gold a pop) except for\n  'sting' (a flame-type channel for insults) and 'public' for\n  general discussions.  Please note that any insults slung on\n  sting REMAIN on sting.  This will be enforced. \n  \n</PRE>\n<A HREF=\"#channel\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#charin()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"charin()\"><H3>CHARIN()</H3></A><PRE>\n  Function: charin(&lt;player&gt;[,&lt;type&gt;])\n  \n  Charin returns the total number of characters of input that character has\n  received.  If the type is '1', it will return the information in the form\n  of PORT:CHARIN.  \n  \n  Example:\n    &gt; charin(me)\n    You say &quot;4328&quot;\n \n  This is generally only accessable by wizards.\n  \n</PRE>\n<A HREF=\"#channel2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#charout()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"charout()\"><H3>CHAROUT()</H3></A><PRE>\n  Function: charout(&lt;player&gt;[,&lt;type&gt;])\n  \n  Charout returns the total number of characters of output that the character\n  has sent.  If the type is '1', it will return the information in the form\n  of PORT:CHAROUT.\n  \n  Examples:\n    &gt; say charout(me)\n    You say &quot;12959&quot;\n    &gt; say charout(me,1)\n    You say &quot;10:12000 11:959&quot;  \n   \n  This is generally only accessable to wizards.\n  \n</PRE>\n<A HREF=\"#charin()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#children()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"children()\"><H3>CHILDREN()</H3></A><PRE>\n  Function: children(&lt;obj&gt; [,&lt;key&gt;])\n  \n  Returns all children (objects parented to &lt;obj&gt;) that can be found.\n  As this is somewhat extensive on the CPU, it may be limited to wizards\n  only in the future.\n  \n  The following optional keys are available:\n    0 - list all children of the target (default)\n    n - List 'n'th 400 children of the target. \n        NOTE: 'n' will be any number from 1 to however many 'pages'\n              So '1' would be first 400, '2' would be second 400, etc.\n    l - List total pages and total children of target.\n    ~ - [~#1-#2] list children starting at #1 until count of #2.\n     \n  Example:\n  &gt; @parent #10=#5\n  Parent set.\n  &gt; @parent #15=#5\n  Parent set.\n  &gt; say children(#5)\n  You say &quot;#10 #15&quot;\n  \n  See Also: parents(), parent()\n  \n</PRE>\n<A HREF=\"#charout()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#chkreality()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"chkreality()\"><H3>CHKREALITY()</H3></A><PRE>\n  Function: chkreality(&lt;victom&gt;, &lt;target&gt;)\n  \n  This checks if &lt;victom&gt; is able to see &lt;target&gt; through the reality.\n  Reality Levels must be enabled for this function to work.  This also\n  takes into account the @lock/user Reality Level Lock enhancement.\n  You must control both the &lt;victom&gt; and the &lt;target&gt; to be able to get\n  the reality, otherwise, it will return #-1.\n  \n  See Also: txlevel(), rxlevel()\n  \n</PRE>\n<A HREF=\"#children()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#chkreality()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"chkreality()\"><H3>CHKREALITY()</H3></A><PRE>\n  Function: chkreality(&lt;victim&gt;,&lt;target&gt;)\n  \n  Returns '1' if &lt;victim&gt; can see &lt;target&gt; in the reality.  This takes into\n  account the optional reality lock (settable by @lock/user) as well as\n  any realities that the player(s) belong to.  You must control both the\n  target and the victim to get the result, else it will return #-1.\n  \n  Reality levels must be enabled for this function to be of use.\n  \n  See Also: hasrxlevel(), hastxlevel(), rxlevel(), txlevel()\n  \n</PRE>\n<A HREF=\"#chkreality()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#chktrace()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"chktrace()\"><H3>CHKTRACE()</H3></A><PRE>\n  Function: chktrace()\n  \n  This function returns '1' (true) or '0' (false) if the parser is currently\n  in trace (debug) mode.  This is handy for dynamically enabling or disabling\n  trace on the fly.\n  \n  See Also: trace(), TRACE\n\n</PRE>\n<A HREF=\"#chkreality()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#chomp()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"chomp()\"><H3>CHOMP()</H3></A><PRE>\n  Function: chomp(&lt;string&gt; [,&lt;option&gt;])\n  \n  The chomp() function is used to strip carrage returns from the start,\n  end, or both sides of a string.\n  \n  The following options are available:\n    l - strip carrage returns on left side of string.\n    r - strip carrage returns on right side of string.\n    b - strip carrage returns on both sides of string (default).\n   \n  Examples:\n  &gt; say chomp(%rthis is a test%r)\n  You say &quot;this is a test&quot;\n  &gt; say chomp(%rthis is a test%r,l)\n  You say &quot;this is a test\n  &quot;\n  &gt; say chomp(%rthis is a test%r,r)\n  You say &quot;\n  this is a test&quot;\n  \n  See Also: strip(), edit(), editansi(), pedit(), regedit()\n  \n</PRE>\n<A HREF=\"#chktrace()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#chown_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"chown_ok\"><H3>CHOWN_OK</H3></A><PRE>\n  Flag: CHOWN_OK(C)\n  \n  This flag, when set, allows you to transfer ownership to\n  another player. To set it, you must be carrying the object. You \n  also have to be in the room if you want to set this flag on rooms \n  or exits.  After this flag is set, the new player may gain \n  ownership of the object by using the @chown command (See @chown).\n  \n  See Also: @chown\n  \n</PRE>\n<A HREF=\"#chomp()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#chr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"chr()\"><H3>CHR()</H3></A><PRE>\n  Function: chr(&lt;number&gt;)\n  \n  This function returns the character representation of the ASCII value\n  entered.  Naturally, only printable characters are allowed and will\n  notify you if a number is out of range.\n  \n  Examples:\n  &gt; say chr(97)\n  You say &quot;a&quot;\n  \n  Note:  Using chr() on 37, 92, and any character between 160 and 255\n         will padd out any padding you have by an additional 5 characters\n         per use.  While the padding functions take this into account\n         automatically, it's something to keep in mind.\n    \n  See Also: ASC()\n  \n</PRE>\n<A HREF=\"#chown_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#citer()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"citer()\"><H3>CITER()</H3></A><PRE>\n  Function: citer(&lt;list&gt;, &lt;eval&gt;[, &lt;delim&gt;])\n  \n  &lt;list&gt; is a list of characters that you wish to iterate.  The list can\n  be any regular character (including spaces).  &lt;eval&gt; is a string that is\n  to be evaluated once for each character in &lt;list&gt;.  It returns a SPACE\n  (or optional delimited) separated list of these evaluations.  The effect\n  is similar to that of iter(), except it takes it as a character by \n  character basis instead of a word by word basis.  The special substitution\n  of '##' is used for the current item of the list.  #@ is used for the\n  positional match of that item in that list.  This is similar to \n  the explode function found on other mushes or in PHP.\n  \n  This function does not handle itext/inum/%i.  \n   \n  Examples:\n    &gt; say citer(boo!,##)\n    You say &quot;b o o !&quot;\n    &gt; say citer(boo!,##-#@)\n    You say &quot;b-1 o-2 o-3 !-4&quot;\n    &gt; say citer(testing,strlen(##))\n    You say &quot;1 1 1 1 1 1 1&quot;\n    &gt; say citer(bob,## WHEE ##,@)\n    You say &quot;b WHEE b@o WHEE o@b WHEE b&quot;\n  \n  See Also: iter(), nsiter(), list(), @dolist, creplace(), foreach()\n  \n</PRE>\n<A HREF=\"#chr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cloak\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cloak\"><H3>CLOAK</H3></A><PRE>\n  Flag: CLOAK(b)  \n  \n  This flag when set on a player will quiet all 'has arrived',\n  'has left', 'has connected' and 'has disconnected' messages by that\n  player.  Note, however, that that player still triggers action\n  variables like @aenter.  This is settable by ROYALTY and SUPER-ROYALTY\n  only.  You must be DARK as well to make this flag effectively work.\n  \n  See Also: DARK, UNFINDABLE, BLIND\n  \n</PRE>\n<A HREF=\"#citer()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#clone()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"clone()\"><H3>CLONE()</H3></A><PRE>\n  Function: clone(&lt;object&gt;[[,&lt;new name&gt;][,&lt;key&gt;])\n  \n  The clone() function will clone &lt;object&gt; with the optional new name of\n  &lt;new name&gt;.  It follows all permissions and restrictions that the @clone\n  command requires.  The SIDEFX flag is required to be able to use this\n  function.\n  \n  The following keys are available for clone():\n      1 - issue a PARENT clone                (normal rules apply)\n      2 - issue a PRESERVE clone              (wizard only)\n      3 - issue a PARENT and PRESERVE clone   (wizard only)\n  \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    &gt; say clone(An Object)\n    You say &quot;&quot;\n  \n  See Also: create(), dig(), open(), @clone, SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#cloak\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster commands\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster commands\"><H3>CLUSTER COMMANDS</H3></A><PRE>\n  Currently the only cluster command is @cluster.  This topic is intended\n  for future growth of the cluster environment.\n  \n  See Also: @cluster, cluster functions\n  \n</PRE>\n<A HREF=\"#clone()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster functions\"><H3>cluster functions</H3></A><PRE>\n  cluster_add()        - Add new target into cluster.\n  cluster_attrcnt()    - Returns attribute count of cluster\n  cluster_default()    - Issues a default() on the cluster.\n  cluster_edefault()   - Issues an edefault() on the cluster.\n  cluster_flags()      - Return flags of cluster.\n  cluster_get()        - Issues a get() attribute on the cluster.\n  cluster_get_eval()   - Issues an evaluated get() attribute on the cluster.\n  cluster_grep()       - Greps the attribute on the cluster.\n  cluster_hasattr()    - Checks if attribute exists on the cluster.\n  cluster_hasflag()    - Check flag(s) of target cluster.\n  cluster_lattr()      - Lists all attributes on the cluster.\n  cluster_regrep()     - Regular expression grep for the cluster (case).\n  cluster_regrepi()    - Regular expression grep for the cluster (non-case).\n  cluster_set()        - Sets flags/attribute(s) on the cluster.\n  cluster_stats()      - Shows statistics for the cluster.\n  cluster_u()          - Issues a u() on the cluster.\n  cluster_u2()         - Issues a u2() on the cluster.\n  cluster_u2default()  - Issues a u2default() on the cluster.\n  cluster_u2ldefault() - Issues a u2ldefault() on the cluster.\n  cluster_u2local()    - Issues a u2local() on the cluster.\n  cluster_udefault()   - Issues a udefault() on the cluster.\n  cluster_ueval()      - Issues a ueval() on the cluster.\n  cluster_uldefault()  - Issues a uldefault() on the cluster.\n  cluster_ulocal()     - Issues a ulocal() on the cluster.\n  cluster_vattrcnt()   - Lists the count of all user-defined attrs on cluster.\n  cluster_wipe()       - Wipe matching attributes from the cluster.\n  cluster_xget()       - Issues an xget() attribute get on the cluster.\n  iscluster()          - Returns '1' if target belongs to a cluster.\n\n</PRE>\n<A HREF=\"#cluster commands\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_add()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_add()\"><H3>CLUSTER_ADD()</H3></A><PRE>\n  Function: cluster_add(&lt;cluster&gt;, &lt;object&gt;)\n  \n  This function adds the target object into the cluster specified.\n  \n  This is a sideeffect function.\n  \n  Example:\n    &gt; say cluster_add(#1234,#9876)\n    Cluster object #9876 has been added to #1234\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_attrcnt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_attrcnt()\"><H3>CLUSTER_ATTRCNT()</H3></A><PRE>\n  Function: cluster_attrcnt(&lt;object&gt; [,&lt;key&gt;])\n  \n  This function returns the total attributes in the given cluster.\n  \n  The following keys exist:\n      0 - (default) - list attributes and delete corrupted attributes.\n      1 - list attributes and attempt to repair corrupted attributes.\n      2 - list attributes but do not touch corrupted attributes.\n      3 - remove any IS_LOCK on any attribute that is user-defined.\n  \n  If there is attribute corruption, the value returned will be '-1'.\n  \n  Examples:\n    &gt; say cluster_attrcnt(cluster#1)\n    You say &quot;20192&quot;\n    &gt; say words(cluster_lattr(cluster#1))\t(this will hit the LBUF limit)\n    You say &quot;622&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_add()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_default()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_default()\"><H3>CLUSTER_DEFAULT()</H3></A><PRE>\n  Function: cluster_default(&lt;obj&gt;/&lt;attr&gt;,&lt;default case&gt;)\n   \n  This function returns the value of &lt;obj&gt;/&lt;attr&gt;, as if retrieved via\n  the cluster_get() function, if the attribute exists and is readable by you.\n  This works like the normal default() function but is geared to clusters.\n  \n  Examples:\n    &gt; &gt;TEST cluster#1=apple orange banana\n    &gt; say cluster_default(cluster#1/Test, No fruits!)\n    You say &quot;apple orange banana&quot;\n    &gt; &gt;TEST cluster#1\n    &gt; say cluster_default(cluster#1/Test, No fruits!)\n    You say &quot;No fruits!&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_attrcnt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_edefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_edefault()\"><H3>CLUSTER_EDEFAULT()</H3></A><PRE>\n  Function: cluster_edefault(&lt;obj&gt;/&lt;attr&gt;,&lt;default case&gt;)\n \n  This function returns the evaluated value of &lt;obj&gt;/&lt;attr&gt; for the cluster,\n  as if retrieved via the cluster_get_eval() function, if the attribute \n  exists and is readable by you. Otherwise, it evaluates the default case, \n  and returns that. The default case is only evaluated if the attribute\n  does not exist or cannot be read.\n \n  Example:\n    &gt; &amp;TEST cluster#1=You have lost [rand(10)] marbles.\n    &gt; say cluster_edefault(cluster#1/Test,You have no marbles.)\n    You say &quot;You have lost 6 marbles.&quot;\n    &gt; &amp;TEST me\n    &gt; say cluster_edefault(cluster#1/Test,You have no marbles.)\n    You say &quot;You have no marbles.&quot;\n  \n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_default()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_flags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_flags()\"><H3>CLUSTER_FLAGS()</H3></A><PRE>\n  Function: cluster_flags(&lt;object&gt;[/&lt;attribute&gt;])\n  \n  This function gets the flags of the specified cluster object, or if specified\n  the attribute in the cluster.\n  \n  Example:\n    &gt; say cluster_flags(cluster#1)\n    You say &quot;is&quot;\n    &gt; say cluster_flags(cluster#1/myattrib)\n    You say &quot;p&quot;\n    &gt; say cluster_flags(me/asdfadsfasdfaf)\n    You say &quot;&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n  \n</PRE>\n<A HREF=\"#cluster_edefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_get()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_get()\"><H3>CLUSTER_GET()</H3></A><PRE>\n  Function: cluster_get(&lt;object&gt;/&lt;attribute&gt;)\n \n  The get function fetches the specified attribute from the cluster object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on cluster &lt;object&gt;, it will continue through every object\n  in the cluster.\n \n  Example:\n    &gt; read me\n    &gt; say get(cluster#1/desc)\n  \n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_flags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_get_eval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_get_eval()\"><H3>CLUSTER_GET_EVAL()</H3></A><PRE>\n  Function: cluster_get_eval(&lt;object&gt;/&lt;attribute&gt;)\n \n  The get_eval function returns the specified attribute from the named cluster\n  (just like the get function), except that function references and\n  %-substitutions have already been performed.  In function references, \n  'me' refers to the object being looked at, and %-substitutions that refer\n  to the enactor (such as %n, %#, etc) refer to the object making the get_eval\n  call.  If the attribute is not present on &lt;object&gt;, it searches all clusters\n  for the attribute.\n \n  Example:\n    &gt; @va cluster#1 = This is a get_eval test on %n.  The vb is [get(me/vb)]\n    &gt; @vb cluster#1 = VB from test\n    &gt; say cluster_get(cluster#1/va)\n    You say &quot;This is a get_eval test on %n. The vb is [get(me/vb)]&quot;\n    &gt; say cluster_get_eval(cluster#1/va)\n    You say &quot;This is a get_eval test on Foobar. The vb is VB from test&quot;\n  \n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_get()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_grep()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_grep()\"><H3>CLUSTER_GREP()</H3></A><PRE>\n  Function: cluster_grep(&lt;object&gt;, &lt;attribute(s)&gt;, &lt;pattern&gt;[,&lt;type&gt; [,&lt;key&gt;]])\n   \n  This returns a list of any matching attribute in a cluster that matches the\n  &lt;attribute(s)&gt; that contain &lt;pattern&gt;.  The &lt;attribute&gt; may be wildcarded\n  with a '*' or a '?' for multiple character matches and single character\n  matches respectively.  In addition, the pattern may also be wildcarded.\n  The following types exist:\n    0 - show attributes matching pattern (default)\n    1 - show the dbref# then all matching attributes after it\n    2 - show the attributes in the form dbref#/pattern\n  \n  You may specify 'key' to '1' to remove assumed wildcard matches and require\n  literal wildcard placements.\n   \n  Examples:\n    &gt; @va cluster#1=This is a test\n    &gt; @vb cluster#2=This is another test.\n    &gt; @vc cluster#3=Test Test Test whisooo!\n    &gt; say cluster_grep(cluster#1,v*,is)\n    You say &quot;VA VB VC&quot;\n    &gt; say cluster_grep(cluster#1,v*,is,,1)\n    You say &quot;VA VB&quot;\n    &gt; say cluster_grep(cluster#2,v*,*is*)\n    You say &quot;VA VB VC&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_get_eval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_hasattr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_hasattr()\"><H3>CLUSTER_HASATTR()</H3></A><PRE>\n  Function: cluster_hasattr(&lt;object&gt;/&lt;attribute name&gt;)\n            cluster_hasattr(&lt;object&gt;,&lt;attribute name&gt;)\n  \n  This function checks if the cluster has the matched attribute.  It will \n  search every object in the cluster for the matching attribute returning a\n  1 (true) if it exists or a 0 (false) if it does not.\n  \n  Examples:\n    &gt; say cluster_hasattr(cluster#1,desc)\n    You say &quot;1&quot;\n    &gt; say cluster_hasattr(cluster#1,rubberbabybuggybumper)\n    You say &quot;0&quot; \n   \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_grep()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_hasflag()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_hasflag()\"><H3>CLUSTER_HASFLAG()</H3></A><PRE>\n  Function: cluster_hasflag(&lt;object&gt;[/&lt;attrib&gt;], &lt;flag&gt;)\n  \n  This function returns a '1' if the flag exists in the cluster, a '0' if it\n  does not.  You may specify an attribute for the cluster for the flag match.\n  If specifying a cluster object, it chooses the cluster object you specified.\n     \n  Example:\n    &gt; say cluster_hasflag(cluster#1, wizard)\n    You say &quot;0&quot;\n    &gt; say cluster_hasflag(cluster#1, safe) \n    You say &quot;1&quot;\n    &gt; say cluster_hasflag(cluster#1/desc, NOPROG)\n    You say &quot;1&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_hasattr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_lattr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_lattr()\"><H3>CLUSTER_LATTR()</H3></A><PRE>\n  Function: cluster_lattr(&lt;obj&gt;[/&lt;wild&gt;][,&lt;tgt&gt;[,&lt;tp&gt;][,&lt;flg&gt;][,&lt;rexp&gt;][,&lt;tr&gt;])\n \n  Returns a list of the attributes set on cluster &lt;obj&gt;ect.  If &lt;wild&gt;pattern\n  is given, only attributes matching it are returned.  If you have the regexp\n  toggle &lt;rexp&gt; as true (1), the matching &lt;wild&gt; is evaluated as a regular\n  expression instead of the default matching algorithem.  You may specify the \n  optional target &lt;tgt&gt; if you wish to return attributes that only the target\n  could see.  If you do not have control over target, it defaults to yours.\n  This searches all objects that are contained in the cluster.\n  You may specify tree &lt;tr&gt; viewing if you set it to '1'.\n  \n  You may specify a type &lt;tp&gt; to check against.  The following types exist:\n    + - List existing lock attributes on player.\n    $ - list all attributes that are $commands.\n    ^ - list all attributes that are ^listens.\n    &amp; - list all attributes that contain all attribute flags &lt;flg&gt;.\n    | - list all attributes that contain any attribute flags &lt;flg&gt;.\n    l - list total attributes and pages of attributes.\n    # - page (1, 2, etc) for attribute listing.  118 for 32byte attrs.\n    &gt; - find the alphanumerical largest attribute name.\n    &lt; - find the alphanumerical smallest attribute name.\n    ~ - [~#1-#2] list attribs starting at #1 until count of #2.\n  \n  { see 'help cluster_lattr2' to continue }\n\n</PRE>\n<A HREF=\"#cluster_hasflag()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_lattr2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_lattr2 \"><H3>CLUSTER_LATTR2 </H3></A><PRE>\n  CONTINUED\n  Function: cluster_lattr(&lt;obj&gt;[/&lt;wild&gt;][,&lt;tgt&gt;[,&lt;tp&gt;][,&lt;flg&gt;][,&lt;rexp&gt;][,&lt;tr&gt;])\n  \n  Example:\n    &gt; @va cluster#1=$whee:@pemit %#=you did a whee.\n    &gt; @vb cluster#1=^*wow*:@pemit %#=You're hearing a wow.\n    &gt; say cluster_lattr(cluster#1)\n    You say &quot;Desc VA VB VC VE Last VV Domain XX&quot;\n    &gt; say cluster_lattr(cluster#1/v*)\n    You say &quot;VA VB VC VE VV&quot;\n    &gt; say cluster_lattr(cluster#1/v*,*TinyPlayer)\n    You say &quot;VC VE VV&quot;\n    &gt; say cluster_lattr(cluster#1/v*,,$)\n    You say &quot;VA&quot;\n    &gt; say cluster_lattr(cluster#1/v*,,^)\n    You say &quot;VB&quot;\n    &gt; say cluster_lattr(cluster#1/^..$,,,1)\n    You say &quot;VA VB VC VE VV XX&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_lattr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_regrep()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_regrep()\"><H3>CLUSTER_REGREP()</H3></A><PRE>\n  Function: cluster_regrep(&lt;object&gt;, &lt;attrs&gt;, &lt;regexp&gt; [,&lt;key&gt;])\n  \n  This function returns a list of attributes on cluster &lt;object&gt; containing\n  &lt;pattern&gt; (or matching &lt;regexp&gt;).  &lt;attrs&gt; is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use &quot;*&quot;.\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  &quot;special&quot; characters will need to be escaped out.   This searches all\n  objects contained in the specified cluster.\n  \n  If &lt;key&gt; is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?).\n  \n  This function is case-sensitive. \n  \n  Examples:\n    &gt; @va cluster#1=This is a test\n    &gt; @vb cluster#2=This is another test.\n    &gt; @vc cluster#3=Test Test Test whisooo!\n    &gt; say cluster_regrep(cluster#1,v*,is)\n    You say &quot;VA VB&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_lattr2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_regrepi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_regrepi()\"><H3>CLUSTER_REGREPI()</H3></A><PRE>\n  Function: cluster_regrepi(&lt;object&gt;, &lt;attrs&gt;, &lt;regexp&gt; [,&lt;key&gt;])\n  \n  This function returns a list of attributes on cluster &lt;object&gt; containing\n  &lt;pattern&gt; (or matching &lt;regexp&gt;).  &lt;attrs&gt; is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use &quot;*&quot;.\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  &quot;special&quot; characters will need to be escaped out.  This searches all\n  objects contained in the cluster.\n  \n  If &lt;key&gt; is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?).\n  \n  This function is case-insensitive.\n  \n  Examples:\n    &gt; @va cluster#1=This is a test\n    &gt; @vb cluster#2=This is another test.\n    &gt; @vc cluster#3=Test Test Test whisooo!\n    &gt; say regrepi(cluster#1,v*,is)\n    You say &quot;VA VB&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_regrep()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_set()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_set()\"><H3>CLUSTER_SET()</H3></A><PRE>\n  Function: cluster_set(&lt;object&gt;,&lt;[!]&lt;flag&gt; [[!]&lt;flag&gt; [!]&lt;flag&gt; ...]&gt;)\n            cluster_set(&lt;object&gt;,&lt;&lt;attribute&gt;:&lt;value&gt;&gt;)\n            cluster_set(&lt;object&gt;,&lt;&lt;attribute&gt;:_&lt;fromobj&gt;/&lt;fromattr&gt;&gt;)\n            cluster_set(&lt;object&gt;/&lt;attr&gt;,[!]&lt;attrflag&gt;)\n  \n  The cluster_set() function is a side-effect for the @cluster/set command.  \n  Everything that worked with @cluster/set will work with cluster_set().  It \n  follows the same permissions and restrictions of the command.  The SIDEFX \n  flag is required to use cluster_set().  For flags, this will set the flags \n  on ALL objects in the cluster.\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; @cluster/set cluster#1=safe\n  Cluster: Flags (safe) set on cluster members #3672 #3667 #3683\n  &gt; say cluster_set(me,safe)\n  You say &quot;&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_regrepi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_stats()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_stats()\"><H3>CLUSTER_STATS()</H3></A><PRE>\n  Function: cluster_stats(&lt;object&gt;,&lt;type&gt; [,&lt;attribute name&gt;])\n  \n  This function returns various statistics for the cluster specified.  The \n  following &lt;type&gt; is available for the cluster:\n      0 - return 1 if specified object is a cluster, 0 if not (default).\n      1 - return the list of objects contained in the specified cluster.\n      2 - return the action list for the specified cluster.\n      3 - return the threshold value for the specified cluster.\n      4 - return dbref# where the attribute name exists in the specified \n          cluster.  Third option must be used for this option.\n  \n  Examples:\n    &gt; &amp;FOOBAR #234=Boo\n    Set.\n    &gt; say [cluster_stats(cluster#1,0)] | [cluster_stats(cluster#1,1)]\n    You say &quot;1 | #123 #234 #345&quot;\n    &gt; say cluster_stats(cluster#1,2)\n    You say &quot;@pemit owner(me)=Cluster exceeded!&quot;\n    &gt; say cluster_stats(cluster#1,3)\n    You say &quot;700&quot;\n    &gt; say cluster_stats(cluster#1,4,foobar)\n    You say &quot;#234&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_set()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_u()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_u()\"><H3>CLUSTER_U()</H3></A><PRE>\n  Function: cluster_u([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n   \n  The cluster_u function evaluates an attribute, either from the object \n  performing the function or from another object you own, passing in arguments\n  and returning the result.  It searches the entire cluster for the matching \n  attribute.\n  \n  See '@list options' to see if this functionality switched with u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  Examples:\n    &gt; @va cluster#1=Word is [extract(cluster_get(me/vb),add(%0,1),1)], arg2:%1.\n    &gt; @vb cluster#2=This is a test of the u function.\n    &gt; say cluster_u(cluster#3/va,4,Testing 123)\n    You say &quot;Word is of, arg2:Testing 123.&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_stats()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_u2()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_u2()\"><H3>CLUSTER_U2()</H3></A><PRE>\n  Function: cluster_u2([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n  \n  This is nearly exactly like the original cluster_u() function except it \n  parses in an object-dependant way like the old mushes.  It works by \n  evaluating the function(s) by the power of the owner of the item it's \n  on, and not by the power of the enactor.  \n  \n  This command is also very handy to keep security.\n  \n  See '@list options' to see if this functionality switched with cluster_u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  For examples or more information, look at cluster_u()\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_u()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_u2default()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_u2default()\"><H3>CLUSTER_U2DEFAULT()</H3></A><PRE>\n  Function:  cluster_u2default([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n   \n  Works like cluster_udefault() but uses the u2() function instead of u()\n  \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the cluster_u2() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    &gt; &amp;TEST cluster#1=[center(%0,5,*)]\n    &gt; say cluster_u2default(cluster#1/Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_u2()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_u2ldefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_u2ldefault()\"><H3>CLUSTER_U2LDEFAULT()</H3></A><PRE>\n  Function:  cluster_u2ldefault([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n   \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the cluster_u2local() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike cluster_u2default(), it doesn't clobber\n  %q0-%q9 registers.\n   \n  Examples:\n    &gt; &amp;TEST cluster#1=[center(%0,5,*)]\n    &gt; say cluster_u2ldefault(cluster#1/Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_u2default()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_u2local()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_u2local()\"><H3>CLUSTER_U2LOCAL()</H3></A><PRE>\n  Function:  cluster_u2local([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n \n  The cluster_u2local() function is almost identical to u2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n \n  However, unlike the u2() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  &quot;below&quot; the level of the u2() can reset global registers for temporary\n  calculations, without needing to worry about &quot;clobbering&quot; the original\n  values.\n \n  This makes cluster_u2local() particularly useful for global or shared code \n  which calls arbitrary u2() functions, where global register values need to be\n  preserved from accidental user clobbering.\n  \n  This function searches all objects in the cluster for the matching attribute.\n   \n{ See &quot;help cluster_u2local2&quot; for examples. }\n \n</PRE>\n<A HREF=\"#cluster_u2ldefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_u2local2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_u2local2\"><H3>CLUSTER_U2LOCAL2</H3></A><PRE>\n  Example of cluster_u2local():\n    &gt; &amp;FRUIT cluster#1=apples bananas oranges pears\n    &gt; &amp;SUB-FUNCTION cluster#2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    &gt; &amp;TOP-FUNCTION cluster#3=[setq(0,are delicious!)]\n                              [cluster_u2local(SUB-FUNCTION,%0)] %q0\n    &gt; say cluster_u2(cluster#1/TOP-FUNCTION,b*)\n    You say &quot;bananas are delicious!&quot;\n   \n  If SUB-FUNCTION had been called with cluster_u2() and not cluster_u2local():\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are yummy!)][cluster_u2(SUB-FUNCTION,%0)] %q0\n    &gt; say cluster_u2(TOP-FUNCTION,b*)\n    You say &quot;bananas apples bananas oranges pears&quot;\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to &quot;apples bananas\n  oranges pears&quot;, so that when the cluster_u2() &quot;returned&quot; and TOP-FUNCTION \n  evaluated %q0, this is what was printed. In the first example, \n  cluster_u2local() reset the value of %q0 to its original &quot;are delicious!&quot;\n \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_u2local()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_udefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_udefault()\"><H3>CLUSTER_UDEFAULT()</H3></A><PRE>\n  Function:  cluster_udefault([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the cluster_u() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.  This searches all objects in the cluster.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n   \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say cluster_udefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_u2local2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_ueval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_ueval()\"><H3>CLUSTER_UEVAL()</H3></A><PRE>\n  Function: cluster_ueval([&lt;obj&gt;/]&lt;attr&gt;/permission[,&lt;arg&gt;],...)\n  \n  The cluster_ueval function evaluates an attribute, either from the object \n  performing the function or from another object you own, passing in \n  arguments and returning the result.  In this way it works just like \n  'cluster_u()', except you pass in a permission to specify what permission \n  level you wish to use for evaluation.  \n   \n  The available permission levels are CIT[IZEN], GUILD[MASTER], ARCH[ITECT],\n  COUN[CILOR], ROY[ALTY], IMM[ORTAL].  You must have the permissions of the\n  given level in order to use it else it defaults to your permission level.\n  The permission must be included for the function to work.\n  \n  Examples:\n    &gt; @set cluster#1=royalty (let's assume you're a wizard)\n    &gt; @va cluster#1=[num(*Miriar)] (the ghod character - #1)\n    &gt; say cluster_ueval(va/royalty)\n    You say &quot;#1&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_udefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_uldefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_uldefault()\"><H3>CLUSTER_ULDEFAULT()</H3></A><PRE>\n  Function:  cluster_uldefault([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n   \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the cluster_u() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.  This searches all objects in the cluster.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  %q registers are not clobbered with this function\n  unlike the cluster_udefault().\n   \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say cluster_uldefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_ueval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_ulocal()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_ulocal()\"><H3>CLUSTER_ULOCAL()</H3></A><PRE>\n  Function:  cluster_ulocal([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n   \n  The cluster_ulocal() function is almost identical to u() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n   \n  However, unlike the cluster_u() function, the global registers r(0) through \n  r(9) (%q0 - %q9) are preserved in their initial state. This means that \n  functions &quot;below&quot; the level of the u() can reset global registers for \n  temporary calculations, without needing to worry about &quot;clobbering&quot; the \n  original values.\n   \n  This makes cluster_ulocal() particularly useful for global or shared code \n  which calls arbitrary cluster_u() functions, where global register values \n  need to be preserved from accidental user clobbering.\n   \n{ See &quot;help cluster_ulocal2&quot; for examples. }\n \n</PRE>\n<A HREF=\"#cluster_uldefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_ulocal2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_ulocal2\"><H3>CLUSTER_ULOCAL2</H3></A><PRE>\n  Example of cluster_ulocal():\n    &gt; &amp;FRUIT cluster#1=apples bananas oranges pears\n    &gt; &amp;SUB-FUNCTION cluster#2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    &gt; &amp;TOP-FUNCTION cluster#3=[setq(0,are delicious!)]\n                              [cluster_ulocal(SUB-FUNCTION,%0)] %q0\n    &gt; say cluster_u(TOP-FUNCTION,b*)\n    You say &quot;bananas are delicious!&quot;\n   \n  If SUB-FUNCTION had been called with cluster_u() instead of cluster_ulocal():\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][cluster_u(SUB-FUNCTION,%0)] %q0\n    &gt; say cluster_u(TOP-FUNCTION,b*)\n    You say &quot;bananas apples bananas oranges pears&quot;\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to &quot;apples bananas\n  oranges pears&quot;, so that when the cluster_u() &quot;returned&quot; and TOP-FUNCTION \n  evaluated %q0, this is what was printed. In the first example, ulocal() \n  reset the value of %q0 to its original &quot;are delicious!&quot;\n   \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_ulocal()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_vattrcnt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_vattrcnt()\"><H3>CLUSTER_VATTRCNT()</H3></A><PRE>\n  Function: cluster_vattrcnt(&lt;object&gt;)\n  This function counts just the user-defined attributes that exist on\n  a cluster.  User defined attributes are attributes that are set\n  with the &amp;attr object=string or @set object=attr:string commands and\n  have no @&lt;attribute&gt; ability. (like @va, @desc, etc)\n  \n  To set attributes on clusters, you would use &gt;attr object=string or\n  @cluster/set cluster=attr:string.\n  \n  Examples:\n    &gt; say vattrcnt(cluster#1)\n    You say &quot;714&quot;\n    &gt; say cluster_vattrcnt(cluster#1)\n    You say &quot;7123&quot;\n    &gt; say cluster_attrcnt(cluster#1)\n    You say &quot;9175\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_ulocal2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_wipe()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_wipe()\"><H3>CLUSTER_WIPE()</H3></A><PRE>\n  Function: cluster_wipe(&lt;object&gt;[/wildattr] [,&lt;regxp&gt;])\n  \n  The cluster_wipe() function will remove all matching attributes \n  specified by a wildcard, or, if no attribute is specified, \n  remove all attributes of the specified cluster.  This function \n  works like @cluster/wipe and follows all permissions and \n  restrictions of the matching command.\n  \n  If &lt;regexp&gt; is specified as '1', then &lt;wildattr&gt; is evaluated as a\n  regular expresion instead of the default expresion.\n  \n  Check @list options to see if this side-effect is enabled.\n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Examples:\n    &gt; say cluster_wipe(#123)\n    You say &quot;&quot;\n    &gt; say cluster_wipe(#123/*foo*)\n    You say &quot;&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n  \n</PRE>\n<A HREF=\"#cluster_vattrcnt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cluster_xget()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cluster_xget()\"><H3>CLUSTER_XGET()</H3></A><PRE>\n  Function: cluster_xget(&lt;object&gt;,&lt;attribute&gt;)\n   \n  The xget function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on &lt;object&gt;, its parent is searched for the attribute.\n  This searches all objects in the specified cluster.\n   \n  Example:\n    &gt; read cluster#1\n    &gt; say cluster_xget(cluster#1,desc)\n    You say &quot;My Desc&quot;\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()\n\n</PRE>\n<A HREF=\"#cluster_wipe()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#clusters\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"clusters\"><H3>CLUSTERS</H3></A><PRE>\n  Clusters are a method to have 1 or more real dbref#'s defined as a single\n  virtual 'container' or entity to house attributes.  Using cluster related\n  commands and functions, you can target any dbref# contained in a cluster\n  and it will reference the cluster as a whole.  This is useful for shared\n  attribute storage, large data warehousing, or role play/player based\n  statistical information where you need a large variety of attributes\n  to be housed over a period of time.  The attributes are written to\n  the cluster in a weighted method and not a round robin where the item\n  in the cluster chosen is always the one with the least number of \n  attributes.\n  \n  Clusters require wizard access to create, but can be added to by the\n  cluster themselves.  You must control both the cluster and the item\n  to be added to the cluster to add to the cluster.\n  \n  See Also:  @cluster, cluster functions\n\n</PRE>\n<A HREF=\"#cluster_xget()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cmds()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cmds()\"><H3>CMDS()</H3></A><PRE>\n  Function: cmds(&lt;player&gt;[,&lt;type&gt; [,&lt;port&gt;]])\n  \n  Cmds returns the number of commands the player has typed during their current\n  connected session.  If the player is not connected, it returns the commands\n  typed since their last connected session.\n  \n  If the type is '1', then it gives an expanded cmd() listing if the player is\n  connected by returning the information in the form PORT:CMD.\n  \n  You may specify the specified port of the player for an exact cmdlist based\n  on port.\n  \n  If the type is '1' and the player is not connected, it returns the default\n  behavior.\n  \n  Note: Only wizards may retreive command info on other players.\n  \n  Examples:\n    &gt; say cmds(me)\n    You say &quot;111&quot;\n    &gt; say cmds(me,1)\n    You say &quot;10:99 11:12&quot;\n      \n  See Also: totcmds()\n  \n</PRE>\n<A HREF=\"#clusters\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cname()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cname()\"><H3>CNAME()</H3></A><PRE>\n  cname(&lt;dbref&gt;)\n   \n  This function returns the name of the indicated object with any special\n  colorization or accents that they may have.  When called with an exit \n  it returns the only the first alias.\n  \n  Example:\n    &gt; say cname(me)\n    You say &quot;TinyPlayer&quot;  (this would be colorized and/or accented)\n   \n  See Also: fullname(), @alias, @name, name()\n\n</PRE>\n<A HREF=\"#cmds()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#co\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"co\"><H3>co</H3></A><PRE>\n  Command: co &lt;name&gt; &lt;password&gt;\n           cd &lt;name&gt; &lt;password&gt;\n           ch &lt;name&gt; &lt;password&gt;\n  \n  These commands are only useful on the connect screen.  They are used to\n  connect to your account &lt;name&gt; with the provided &lt;password&gt;.  There are\n  currently three methods to do so.\n  \n  They are as follows:\n     co  -- This option is the default and normal method to connect.\n            This option has no special conditions or privilages.\n     ch  -- Wizards and anyone with the NOWHO @power (to @hide) can use this.\n            This option will auto-hide the player when connecting.\n            It defaults to the 'co' option if you can't @hide.\n     cd  -- Wizards and higher can use this to connect dark to the game.\n            This effectively connects wiz-cloaked to the game.\n            Immortals get auto-added to supercloak.\n  \n  See Also: @aconnect, @adisconnect, @hide\n            \n</PRE>\n<A HREF=\"#cname()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#colors\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"colors\"><H3>colors</H3></A><PRE>\n  \n  RhostMUSH has your standard ANSI sequences and colors.  These can be\n  gotten by using the ansi() function, or by using the '%c' substitution.\n  You are incapable of seeing ansi sequences without having the ANSI\n  flag set.  Furthermore, you are incapable of seeing color without\n  having the ANSICOLOR flag set.  Help is available on both of these\n  flags.   Please note, that the functions of '%c' and '%x' can be switched\n  at runtime.  Check @list options to see which is which.\n  \n  Do note that if your terminal is not able to display ansi codes, then\n  you will not notice any change with either flag.\n  \n  For more help on the %c substitution, look at SUBSTITUTIONS\n  \n  See Also: SUBSTITUTIONS, ANSI, ANSICOLOR, XTERMCOLOR, ANSI()\n  \n</PRE>\n<A HREF=\"#co\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#colors()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"colors()\"><H3>COLORS()</H3></A><PRE>\n  Function: colors([[&lt;value&gt;], [&lt;key&gt;]])\n   \n  This function displays the pallet of colors available on the RhostMUSH.  This\n  function is only available if ZENTY_ANSI is enabled (@version shows '(A)').\n  The valid arguments are as follows.\n  \n  Valid optional &lt;value&gt; parameters:\n    0-2     - page value of the total list of colornames available. (0 def)\n    string  - the string of the color name you wish to see the value of.\n    *wild*  - the list of colors that match the wildcard (* and ? accepted)\n  \n  Valid &lt;key&gt; parameters:\n    d       - show the decimal value (0-255) of the XTERM specific color (def).\n    h       - show the hex value (0x00-0xFF) of the XTERM specific color.\n    c       - show the 16 color code translation of the XTERM specific color.\n    x       - show the 24bit (#000000-#FFFFFF) color code XTERM translation.\n    r       - show the RGB (0 0 0 - 255 255 255) color code XTERM translation.\n  \n  Examples:\n    &gt; say colors()\n    You say &quot;aliceblue antiquewhite ... grey88&quot;\n    &gt; say colors(1)\n    You say &quot;grey89 grey90 ... xterm43&quot;\n    &gt; say [colors(pink)] [colors(pink,h)] [colors(pink,c)]\n    You say &quot;218 0xda wh&quot;\n  \n  See Also: XTERMCOLOR, XTERMCOLOR LIST, ANSI()\n  \n</PRE>\n<A HREF=\"#colors\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#columns()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"columns()\"><H3>COLUMNS()</H3></A><PRE>\n  Function: columns()  Syntax follows:\n  columns(&lt;tx&gt;,&lt;wd&gt;,&lt;co&gt;,&lt;js&gt;,&lt;crp&gt;,&lt;ct&gt;,&lt;lb&gt;,&lt;mb&gt;,&lt;rb&gt;,&lt;dsp&gt;,&lt;del&gt;,&lt;fil&gt;,&lt;ext&gt;)\n  \n  This function has a huge number of uses, and all help will be given to show\n  examples for what this function can do.  The arguments to this function are\n  as follows.\n    &lt;tx&gt;     - The text that you will be passing into columns.\n    &lt;wd&gt;     - The maximum column size you desire.\n    &lt;co&gt;     - The total number of columns you wish per line.\n  * &lt;js&gt;     - The justification of text in the columns (default left) \n               Arguments: (l)eft, (c)enter, or (r)ight\n  * &lt;crp&gt;    - Specifies if you want the columns cropped to the longest word or\n               the max columns size whatever is smaller.\n               Arguments: 1 to crop, 0 for no cropping (default).\n  * &lt;ct&gt;     - Specifies that the word be cut off if over maximum columns size.\n               Arguments: 1 to cut, 0 for no cutting (default).\n  * &lt;lb&gt;     - What text you want displayed as the left border of the line.\n  * &lt;mb&gt;     - What text you want as the seperator between columns on the line.\n  * &lt;rb&gt;     - What text you want displayed as the right border of the line.\n  * &lt;dsp&gt;    - What display type you want.  Down then over or over then down.\n               Arguments: 1 for over then down, 0 for down then over (default)\n  * &lt;del&gt;    - Optional delimiter (default is space)\n  * &lt;fil&gt;    - Optional filler string.\n  * &lt;ext&gt;    - Extend partial columns to the end of the columns (if available)\n  \n  Anything with an '*' are optional *only* if the first three arguments are \n  used.\n  \n{ type 'help columns2' for extremely useful examples }\n  \n</PRE>\n<A HREF=\"#colors()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#columns2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"columns2\"><H3>COLUMNS2</H3></A><PRE>\n  Function: columns()  (CONTINUED)\n  columns(&lt;tx&gt;,&lt;wd&gt;,&lt;co&gt;,&lt;js&gt;,&lt;crp&gt;,&lt;ct&gt;,&lt;lb&gt;,&lt;mb&gt;,&lt;rb&gt;,&lt;dsp&gt;,&lt;del&gt;,&lt;fil&gt;,&lt;ext&gt;)\n \n  There are various syntax possibilities for this command.  \n  Examples:\n    &gt; @emit columns(this is a test of columns,10,3)\n      this      a         of\n      is        test      columns\n    &gt; @emit columns(this is a test of columns,10,3,L,,,,,,1)\n      this      is        a \n      test      of        columns\n    &gt; @emit columns(this is a test of columns,10,3,R)\n            this         a        of\n              is      test   columns \n    &gt; @emit columns(this is a test of columns,10,3,R,0)\n            this         a        of\n              is      test   columns \n    &gt; @emit columns(this is a test of columns,10,3,R,1)\n         this       a     of\n           is    testcolumns\n  \n{ type 'help columns3' for more examples }\n  \n</PRE>\n<A HREF=\"#columns()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#columns3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"columns3\"><H3>COLUMNS3</H3></A><PRE>\n  Function: columns()  (CONTINUED)\n  columns(&lt;tx&gt;,&lt;wd&gt;,&lt;co&gt;,&lt;js&gt;,&lt;crp&gt;,&lt;ct&gt;,&lt;lb&gt;,&lt;mb&gt;,&lt;rb&gt;,&lt;dsp&gt;,&lt;del&gt;,&lt;fil&gt;,&lt;ext&gt;)\n  \n    &gt; @emit columns(this is a test of columns,3,3,R,0,0)\n      thitescol\n        s  tumn\n       is of  s\n        a\n    &gt; @emit columns(this is a test of columns,3,3,R,0,1)\n      thi  a of\n       istescol\n    &gt; @emit columns(this is a test of columns,10,3,R,0,0,&lt;*,|,*&gt;,0)\n      &lt;*      this|         a|        of*&gt;\n      &lt;*        is|      test|   columns*&gt;\n    &gt; @emit columns(this is a test of columns,10,3,R,0,0,&lt;*,|,*&gt;,1)\n      &lt;*      this|        is|         a*&gt;\n      &lt;*      test|        of|   columns*&gt;\n    &gt; @emit columns(this@is@a@test@of@columns,10,3,R,0,0,&lt;*,|,*&gt;,1,@)\n      &lt;*      this|        is|         a*&gt;\n      &lt;*      test|        of|   columns*&gt;\n    &gt; @emit columns(this@is@a@test@of@columns,10,3,R,0,0,&lt;*,|,*&gt;,1,@,-=*=-)\n      &lt;*-=*=--this|-=*=--=*is|-=*=--=*=a*&gt;\n      &lt;*-=*=--test|-=*=--=*of|-=*columns*&gt;\n  \n  See Also: wrapcolumns(), wrap(), array(), printf()\n  \n</PRE>\n<A HREF=\"#columns2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#combat\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"combat\"><H3>COMBAT</H3></A><PRE>\n  Flag: COMBAT([X])\n \n  (*note this flag is meaningless on RhostMUSH*)\n  When this flag is set on a player or object AND the IC flag is set, it \n  denotes that they are willing to participate in combat. If this flag is\n  set on a room it denotes that the room is fair ground for combat to occur.\n  If this flag is set on a zonemaster, it denotes that all the rooms in the\n  zone are fair ground for combat. (this is not yet implemented)\n  \n  See Also: IC\n  \n</PRE>\n<A HREF=\"#columns3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#command evaluation\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"command evaluation\"><H3>COMMAND EVALUATION</H3></A><PRE>\n  Topic: COMMAND EVALUATION\n \n  When you submit a command to be executed by MUSH (whether by typing it in or\n  by having a machine run it, the following steps are performed, in sequence.\n  If the command matches something in a step, the matching actions are\n  performed and the walk down the list stops.  Note the STOP and NO_STOP flags\n  effect the sequence.\n \n  - If the command was typed in, it is checked against the uppercase-only\n    commands (QUIT, WHO, etc).  If so, the command is executed.\n  - The first letter of the command is checked to see if it is a single-\n    character command (&quot;, :, etc).  If so, %-substitution and function\n    evaluation may be performed (depending on the command), and the command\n    is executed.\n  - The command is checked to see if it is the 'home' command.  If so, the\n    player or object performing the command goes home.\n  - The command is checked against the exits in its current room.  If one\n    matches, it is performed.  If more than one matches, one is picked \n    randomly from the exits for which the player passes the lock (If the \n    player does not pass any locks, then the exit to be tried is picked \n    randomly.\n  \n{ 'help command evaluation2' for more }\n  \n</PRE>\n<A HREF=\"#combat\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#command evaluation2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"command evaluation2\"><H3>command evaluation2</H3></A><PRE>\n  - The first word of the command is checked to see if it is an internal MUSH\n    command.  If so, the remainder of the command is broken up into arguments,\n    %-substitution and function evaluation may be performed on the (split up)\n    arguments, and the command is executed.\n  - %-substitution and function evaluation is performed on the command.\n  - All objects in the player's inventory, all objects in the player's\n    location, and the location itself are searched for $-commands that match\n    the command.  All that match are performed.  The player may or may not be\n    checked, depending on how the MUSH is configured.\n \n  Note: Commands that can cause other commands to be executed (such as @wait,\n  @switch, @trigger, etc) never perform substitution on their arguments, they\n  leave the evaluation to the command that is to be executed.  This prevents\n  most of the problems with getting objects to perform unintended commands by\n  putting a ';', '}', or ',' in an argument.  The @force command is an\n  exception in that it evaluates its argument, so it should be used with\n  caution (preferably by never using it to pass information that someone else\n  entered, use @trigger instead).\n \n  Also, the construct '$xx *:%0' does not work (and is very dangerous\n  programming), use '$xx *:@force me=%0' if you need this functionality.\n  \n  Command evaluation may be effected by the NO_COMMAND, STOP, or NO_STOP flags.\n  \n</PRE>\n<A HREF=\"#command evaluation\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#commands\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"commands\"><H3>commands</H3></A><PRE>\n  Help available for RhostMUSH Commands:\n   \n  ]          &quot;            :            ;            &amp;              #\n  \\\\         &gt;\n  \n  +channel   doing        drop         enter        examine        folder     \n  get        give         goto         grab         help           +help \n  idle       INFO         inventory    join         kill           leave      \n  listen     LOGOUT       look         lpage        mail           move       \n  mrpage     news         OUTPUTPREFIX OUTPUTSUFFIX page           pose       \n  QUIT       read         rpage        say          score          SESSION    \n  smell      take         taste        think        throw          touch      \n  train      use          version      wield        whisper        who        \n  worn\n  \n  @@         @break       @chown       @clone       @create        @decompile\n  @destroy   @dig         @doing       @dolist      @drain         @edit \n  @emit      @entrances   @eval        @extansi     @femit         @find      \n  @force     @fpose       @fsay        @halt        @hide          @include\n  @last      @link        @list        @listmotd    @lfunction     @lock      \n  @mailsig   @mvattr      @name        @notify      @oemit         @open      \n  @parent    @password    @pemit       @pipe        @program       @protect   \n  @ps        @quitprogram @quota       @register    @robot         @search    \n  @set       @skip        @sql         @sqlconnect  @sqldisconnect @stats     \n  @sudo      @sweep       @switch      @teleport    @trigger       @unlink    \n  @unlock    @verb        @wait        @wall        @wipe        \n  \n{ 'help commands2' for more (attribute-commands) }\n</PRE>\n<A HREF=\"#command evaluation2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#commands flag\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"commands flag\"><H3>COMMANDS FLAG</H3></A><PRE>\n  Flag: COMMANDS([$])  \n  \n  If the mush requires this flag then you must set this \n  flag on anything that you wish to be able to access $commands.\n  \n  By default, this is disabled on RhostMUSH.\n  \n  Please check '@list options' to see if the COMMANDS flag is required\n  or not on the RhostMUSH you are on.\n  \n</PRE>\n<A HREF=\"#commands\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#commands2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"commands2\"><H3>commands2</H3></A><PRE>\n  Help available for RhostMUSH Commands (continued):\n \n  @aahear    @aclone      @aconnect    @adescribe  @adfail       @adisconnect\n  @adrop     @aefail      @aenter      @afail      @agfail       @ahear\n  @akill     @aleave      @alfail      @alias      @amhear       @amove\n  @ansiname  @apay        @arfail      @asfail     @asuccess     @atfail    \n  @atofail   @atport      @aufail      @ause       @away         @caption \n  @charges   @conformat   @cost        @cpattr     @describe     @dfail\n  @door      @drop        @ealias      @efail      @enter        @exitformat\n  @fail      @filter      @forwardlist @gfail      @grep         @guild \n  @idesc     @idle        @infilter    @inprefix   @kill         @lalias    \n  @leave     @lfail       @listen      @move       @nameformat   @odescribe \n  @odfail    @odrop       @oefail      @oenter     @ofail        @ogfail    \n  @okill     @oleave      @olfail      @omove      @opay         @orfail    \n  @osuccess  @otfail      @otofail     @otport     @oufail       @ouse\n  @oxenter   @oxleave     @oxtport     @pay        @prefix       @race      \n  @reject    @rfail       @runout      @salisten   @sasmell      @sataste\n  @satouch   @saystring   @selfboot    @sex        @sfail        @slisten     \n  @solisten  @sosmell     @sotaste     @sotouch    @ssmell       @startup   \n  @staste    @stouch      @success     @tfail      @titlecaption @tofail\n  @toggle    @tport       @ufail       +uptime     @use          @whereall  \n  @whereis   @zone        \n  \n  \n  See Also: @list\n  \n</PRE>\n<A HREF=\"#commands flag\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#comp()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"comp()\"><H3>COMP()</H3></A><PRE>\n  Function: comp(&lt;string1&gt;, &lt;string2&gt;)\n \n  Comp compares two strings.  It returns 0 if they are the same, 1 if\n  string2 is less than/precedes alphabetically string1, and -1 \n  otherwise.\n  \n  Example:\n    &gt; say comp(is,is)\n    You say &quot;0&quot;\n  \n  See Also: alphamin(), alphamax(), ncomp(), strdistance()\n  \n</PRE>\n<A HREF=\"#commands2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#con()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"con()\"><H3>CON()</H3></A><PRE>\n  Function: con(&lt;object&gt;)\n   \n  Con returns the first object in the list of objects carried by \n  thing. Just the first, and only the first.  See NEXT.\n  \n  Example:\n    &gt; inv\n    You are carrying:\n    Glove(#123)\n    Bat(#124)\n    You have 200 gold pieces.\n    &gt; say con(me) \n    You say &quot;#123&quot;\n  \n  See Also: next()\n  \n</PRE>\n<A HREF=\"#comp()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#config()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"config()\"><H3>CONFIG()</H3></A><PRE>\n  Function: config(&lt;parameter&gt;)\n   \n  With no arguments, this function returns a list of config option names.\n  \n  Given a config option name, this function returns its value.\n  \n  The available special arguments can be used:\n    0 - show all config options pushing extras on additional stack (default)\n    1 - show all config options that can be placed in a single LBUF\n  \n  Example:\n    &gt; say config(money_name_singular) \n    You say 'Gold Piece'\n    &gt; say config()\n    You say &quot;alt_inventories ... who_wizlevel&quot;     (where ... is a lot of info)\n  \n  See Also: @list options \n \n</PRE>\n<A HREF=\"#con()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#conn()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"conn()\"><H3>CONN()</H3></A><PRE>\n  Function: conn(&lt;player&gt; [,&lt;boolean&gt; [,&lt;port&gt;]])\n \n  Returns the number of seconds that &lt;player&gt; has been connected.  If &lt;player&gt;\n  is not connected then -1 is returned.  If &lt;player&gt; is connected more than\n  once, the longest connect time is returned.\n  \n  You may specify an optional boolean value of '1' to return the result in\n  the form '&lt;port&gt;:&lt;conntime&gt;'.  You may also specify the port of the player\n  for an exact match of their conn() time.\n   \n  Example:\n    &gt; WHO\n    Player Name          On For Idle  Doing\n    Wizard                00:04   1m\n    Evinar                00:12   6m  \n    Wizard                00:32   6s  \n    3 Players logged in.\n    &gt; say conn(wiz)\n    You say &quot;2125&quot;\n    &gt; say conn(wiz,1)\n    You say &quot;12:251 14:2125&quot;\n    &gt; say conn(e)\n    You say &quot;770&quot;\n  \n  See Also: WHO, idle(), lwho()\n  \n</PRE>\n<A HREF=\"#config()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#connected\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"connected\"><H3>CONNECTED</H3></A><PRE>\n  Flag: CONNECTED(c)   \n  \n  This flag applies only to players and it shows if the \n  player is connected or not. Thus, each time you are connected to \n  the game, you should see the 'c' flag set, otherwise, you are DEAD!\n  You cannot reset this flag, and it is used internally by the code \n  for things like tabulating players for the WHO list, etc.\n  \n</PRE>\n<A HREF=\"#conn()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#control\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"control\"><H3>CONTROL</H3></A><PRE>\n  Topic: CONTROL      \n \n  There are 6 rules to controlling objects:\n   1) You control anything you own as long as it's not set NOMODIFY/NOEXAMINE.\n   2) Anything you own that has its INHERIT flag set controls anything you \n      own (including you).\n   3) Anything you own that does not have its INHERIT flag set only controls\n      other things that you own that do not have their INHERIT flag set and\n      do not control you, unless YOU have your inherit flag set.\n   4) A wizard controls everything.\n   5) Anybody controls an unlinked exit, even if it is locked.\n   6) You have attribute-modification control on anything with a twinklock\n      which you pass.\n \n  Builders should beware of 5, lest their exits be linked or stolen.\n  Coders should beware of 6, lest their code be modified.\n   \n  Most of the commands for altering the database and many commands and\n  functions that retrieve information only work on objects that you control.\n  \n</PRE>\n<A HREF=\"#connected\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#control_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"control_ok\"><H3>CONTROL_OK</H3></A><PRE>\n  Flag: CONTROL_OK(z)  \n  \n  This flag currently serves no purpose within RhostMUSH.\n  \n</PRE>\n<A HREF=\"#control\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#controls()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"controls()\"><H3>controls()</H3></A><PRE>\n  Function: controls(&lt;object&gt;,&lt;victim&gt;)\n \n  Returns 1 if &lt;object&gt; controls &lt;victim&gt;, 0 otherwise.\n \n  Examples:\n  &gt; say controls(me,me)\n  You say &quot;1&quot;\n  &gt; say controls(me,#1)\n  You say &quot;0&quot;\n  &gt; say controls(#1,me)\n  You say &quot;1&quot;\n \n  See Also: CONTROL\n  \n</PRE>\n<A HREF=\"#control_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#convsecs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"convsecs()\"><H3>CONVSECS()</H3></A><PRE>\n  Function: convsecs(&lt;seconds&gt;)\n \n  This function converts seconds to a time string, based on how many\n  seconds the number is after Jan 1, 1970.\n \n  Example:\n    &gt; say secs()\n    You say &quot;709395750&quot;\n    &gt; say convsecs(709395750)\n    You say &quot;Wed Jun 24 10:22:54 1992&quot;\n  This function may also be called as secs2time().\n  \n  See Also: convtime(), secs(), time(), timefmt()\n  \n</PRE>\n<A HREF=\"#controls()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#convtime()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"convtime()\"><H3>CONVTIME()</H3></A><PRE>\n  Function: convtime(&lt;time string&gt;)\n \n  This functions converts a time string to the number of seconds since\n  Jan 1, 1970. A time string is of the format: Ddd MMM DD HH:MM:SS YYYY\n  where Ddd is the day of the week, MMM is the month, DD is the day\n  of the month, HH is the hour in 24-hour time, MM is the minutes,\n  SS is the seconds, and YYYY is the year.\n  If you supply an incorrectly formatted string, it will return -1.\n \n  Example:\n    &gt; say time()\n    You say &quot;Wed Jun 24 10:22:54 1992&quot;\n    &gt; say convtime(Wed Jun 24 10:22:54 1992)\n    You say &quot;709395774&quot;\n  \n  This function may also be called as time2secs().\n  \n  This function, if allowing enhanced time formats, can handle a\n  varying method of other formats.  Please see '@list options convtime'\n  to see the available extra formats (if available).\n  \n  Enhanced date checking is handled with the 'enhanced_convtime' param.\n  \n  See Also: convsecs(), secs(), time(), timefmt()\n  \n</PRE>\n<A HREF=\"#convsecs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#copyright\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"copyright\"><H3>COPYRIGHT</H3></A><PRE>\n  All modifications and changes to the hardcode of this mush called RhostMUSH\n  are privileged. Any copying of code in part or in full of the changes we have\n  done is not allowed.  If concepts or ideas are borrowed, it is requested\n  that permission be gotten first and required that credits be given to this\n  mush for ideas gotten from this server.  This text can not be modified,\n  changed, or removed on other servers.\n  \n</PRE>\n<A HREF=\"#convtime()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cor()\"><H3>COR()</H3></A><PRE>\n  Function: cor(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n   \n  Takes two or more booleans, and returns 1 if at least one is equivalent\n  to true(1).  This works like or() however execution is stopped after the\n  FIRST true occurance.\n  \n  Example: \n    &gt; say [cor(0[setq(0,test)],1,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say &quot;1 - test / &quot;\n    &gt; say [cor(0[setq(0,test)],0,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say &quot;1 - test / test2&quot;\n  \n  See Also: BOOLEAN VALUES, and(), not(), xor(), nand(), nor(), xnor(), cand()\n            ofparse()\n  \n</PRE>\n<A HREF=\"#copyright\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cos()\"><H3>COS()</H3></A><PRE>\n  Function: cos(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the cosine of &lt;number&gt;, expressed in radians.\n  \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say cos(0)\n    You say &quot;1&quot;\n    &gt; say cos(fdiv(pi(),2))\n    You say &quot;0&quot;\n    &gt; say cos(fdiv(pi(),4))\n    You say &quot;0.707107&quot;\n    &gt; say cos(fdiv(pi(),6))\n    You say &quot;0.866025&quot;\n  \n  See Also: acos(), asin(), atan(), atan2(), pi(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()\n  \n</PRE>\n<A HREF=\"#cor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cosh()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cosh()\"><H3>COSH()</H3></A><PRE>\n  Function: cosh(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the hyperbolic cosine of &lt;number&gt;, expressed in radians.\n  \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say cosh(0)\n    You say &quot;1&quot;\n    &gt; say cosh(fdiv(pi(),2))\n    You say &quot;2.509178&quot;\n    &gt; say cosh(fdiv(pi(),4))\n    You say &quot;1.324609&quot;\n    &gt; say cosh(fdiv(pi(),6))\n    You say &quot;1.140238&quot;\n  \n  See Also: acos(), asin(), atan(), atan2(), pi(), sin(), tan(), ctu(), \n            sinh(), tanh()\n\n</PRE>\n<A HREF=\"#cos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#costs \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"costs \"><H3>COSTS </H3></A><PRE>\n  Topic: COSTS\n \n  Certain commands cost money to use, they will fail if you don't have\n  enough.  Use the @list costs command to find out what these commands are\n  and how much they cost.\n  \n  See Also: @list\n  \n</PRE>\n<A HREF=\"#cosh()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#councilor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"councilor\"><H3>COUNCILOR</H3></A><PRE>\n  Flag: COUNCILOR(a)  \n  \n  This flag, when set on players, will allow them most\n  wizard powers and the ability to effect anything equal to or less\n  in power.  They can basically effect anything within their power\n  by #&lt;object&gt; or *&lt;player&gt;.  Only ROYALTY or SUPER-ROYALTY can\n  set or unset this flag.\n  \n  See Also: GUILDMASTER, ARCHITECT, ROYALTY, IMMORTAL\n  \n</PRE>\n<A HREF=\"#costs \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cpattr2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cpattr2\"><H3>CPATTR2</H3></A><PRE>\n  Command: @cpattr (Continued 2 of 3)\n  Syntax:  @cpattr &lt;object&gt;/&lt;attribute&gt;=&lt;object1&gt;/&lt;attr1&gt;/&lt;attr2&gt;\n    \n      - This will copy the given attribute to 'attr1' and 'attr2' of the\n        the destination object.  You may specify from one to any number\n        of destination attributes.\n  \n  Syntax: @cpattr &lt;object&gt;/&lt;attribute&gt;=&lt;object1&gt;,&lt;object2&gt;/&lt;attr1&gt;\n  \n      - This will copy the given attribute to an attribute of the same name\n        on the first object and copy it with the name 'attr1' on the second\n        object.  Any number of objects may be listed.  You may specify\n        multiple attributes per object as well.\n \n  Syntax: @cpattr &lt;object&gt;/&lt;wildcard&gt;=&lt;object1&gt;,...,&lt;objectX&gt;\n \n      - This will copy all attributes matching the wildcard to the destination\n        object(s).  You may specify from one to any number of destination\n        objects but must control the objects to copy the attributes.\n   \n{ 'help cpattr3' for more }\n  \n</PRE>\n<A HREF=\"#councilor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cpattr3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cpattr3\"><H3>CPATTR3</H3></A><PRE>\n  Command: @cpattr (Continued 3 of 3)\n  Syntax: @cpattr &lt;attribute&gt;=&lt;object&gt;/&lt;attrib&gt;,...\n  \n      - This copies the attribute on the ENACTOR to the target.  You can\n        specify multiple targets.\n  \n  Syntax: @cpattr/clear &lt;args&gt;\n \n      - The clear switch is usable with all the previous mentioned @cpattr\n        commands. (help cpattr2 for help on these).  This will work just like\n        the prior, except this will also purge (remove) the attributes that\n        are being copied from the original object.  This acts basically like\n        a move.\n \n  @cpattr returns detailed information of objects copied from and to and\n  any attributes successfully copied.\n   \n  See Also: @mvattr, @set, &amp;\n  \n</PRE>\n<A HREF=\"#cpattr2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cputime toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cputime toggle\"><H3>CPUTIME TOGGLE</H3></A><PRE>\n  Toggle: CPUTIME\n  \n  The CPUTIME toggle is designed to aid coders in evaluating the efficiency\n  of their code, and to determine if changes which are made are helping\n  or hurting their execution time. When this toggle is set on an object, \n  all commands that it executes are profiled by time, evaluation count, \n  function call count, and attribute fetch count. It is recommended that \n  you set the PUPPET flag on your object to enable you to see the profiling \n  information which the CPUTIME toggle presents. You can also set the CPUTIME\n  toggle on yourself in which case the PUPPET flag is not necessary.\n  \n  Example:\n    &gt; &amp;TIMEHOG Toy=$timehog:say [words(iter(lnum(1000),lnum(1000)))]\n    Set.\n    &gt; @toggle Toy=CPUTIME\n    Set.\n    &gt; @set Toy=PUPPET\n    Toy grows ears and can now hear.\n    Set.\n    &gt; timehog\n    Toy says &quot;1040&quot;\n    Toy&gt; [CPU:  7.74  EVALS: 2005  FUNCS: 1003  ATRFETCH:    1]\n  \n  For explanations of what CPU, EVALS, FUNCS, and ATRFETCH is, see CPUTIME2\n  \n</PRE>\n<A HREF=\"#cpattr3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#cputime2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"cputime2\"><H3>CPUTIME2</H3></A><PRE>\n  Toggle: CPUTIME (continued)\n  \n  CPU         - is the amount of CPU that the given process takes up on \n                the given machine.  The lower the number the better, \n                naturally.\n  \n  EVALS       - The number of function calls that gets parsed by the mush.\n                IE: the number of times the mush has to parse something.\n  \n  FUNCS       - The total number of MUSH functions called.\n  \n  ATRFETCH    - The total number of attribute fetches (IE: the number of\n                times it has to read any attribute)\n                \n</PRE>\n<A HREF=\"#cputime toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#crc32()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"crc32()\"><H3>CRC32()</H3></A><PRE>\n  Function: crc32(&lt;string1&gt;[, ..., &lt;stringN&gt;])\n   \n  Returns the Cyclic Redundancy Check of the strings or sequences of\n  strings as a positive number. The answer for the same sequence of\n  strings is always the same.  You may specify more than one string\n  to do a CRC check against.\n   \n  The usefulness of this number is broad, but could provide a unique\n  fingerprint, checksum pattern, or high-quality hash function.\n   \n  Example:\n    &gt; think crc32(MUX)\n    629126998\n  \n  See Also: pack(), unpack(), mask(), tobin(), tohex(), tooct(), todec(),\n            digest()\n  \n</PRE>\n<A HREF=\"#cputime2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#create()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"create()\"><H3>CREATE()</H3></A><PRE>\n  Function: create(&lt;name&gt;, [&lt;arguments&gt; [,&lt;type&gt;]])\n  \n  @create:  create(&lt;name&gt;,&lt;value&gt;,t) (default)\n    This will create an object with name &lt;name&gt; of value &lt;value&gt;.  The 't'\n    &lt;type&gt; is optional for this as it is the default.  For more help on\n    creating objects, please refer to 'help @create'.  If &lt;value&gt; is null\n    it assumes the default.  All objects made are sent to enactor's location.\n  \n    If no arguments are given, the default money value is taken for this \n    option only.\n  \n  @dig:     create(&lt;name&gt;,&lt;[exit-in],[exit-out]&gt;,r)\n    This will dig a room with name &lt;name&gt; and OPTIONAL in-exit 'exit-in' and\n    OPTIONAL out-exit 'exit-out'.  You may specify both, either, or no exits.\n    For more help on digging rooms, please refer to 'help @dig'.\n  \n  @open:    create(&lt;name&gt;,&lt;link&gt;,e)\n    This will open an exit with name &lt;name&gt; to OPTIONAL target &lt;link&gt;.  If\n    &lt;link&gt; is unspecified, then the exit will be un-linked and will need to\n    be @linked later (if so desired).\n  \n  The SIDEFX flag needs to be set to use this function. \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; say create(An Object,10)  (this will create 'An Object' with value of '10')\n  &gt; say create(An Object)     (this will create 'An Object' with default cost)\n  \n  See Also: @create, @dig, @open, dig(), open(), SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#crc32()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#createtime()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"createtime()\"><H3>CREATETIME()</H3></A><PRE>\n  Function: createtime(&lt;target&gt;)\n  \n  This function returns the time the target was created.  You must be able\n  to examine the object to get the attribute.\n  \n  Example:\n    &gt; say createtime(me)\n    You say &quot;Mon Jul 14 12:23:17 2000&quot;\n  \n  See Also: modifytime()\n  \n</PRE>\n<A HREF=\"#create()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#credits\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"credits\"><H3>CREDITS</H3></A><PRE>\n  Topic: CREDITS\n   \n  RhostMUSH derived directly on code from TinyMUD.  Thanks to the authors \n  of TinyMUD for the start code.  \n  \n  Features and ideas borrowed from TinyMUSH/MUX/MUSE/MUCK/LP/DIKU/Penn\n  Credits for these platforms follow.\n  \n  TinyMUSH 2.0 is derived from Larry Foard's TinyMUSH (which was itself \n  derived from TinyMUD, written by Jim Aspnes).  Ideas for features \n  (and occasionally code) came from many places, including TinyMUSE, \n  PernMUSH, and TinyTIM.  \n   \n  We would like to thank the following people:\n   \n  - Jim Aspnes, for the original TinyMUD (from which TinyMUSH was derived)\n   \n  - Larry Foard, for the original implementation of TinyMUSH.\n   \n  - Marcus Ranum for the original Untermud database layer code, and  Andrew\n    Molitor for getting it to work with TinyMUSH.\n   \n  - Andrew Molitor (again) for the VMS port.\n  \n{ 'help credits2' for more }\n  \n</PRE>\n<A HREF=\"#createtime()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#credits2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"credits2\"><H3>credits2</H3></A><PRE>\n  Topic: CREDITS (continued)\n  \n  - Russ(Random) and Jennifer(Moira) Smith, for ideas, comments, and coding\n    help.\n   \n  - R'nice(TinyTIM) for more good ideas than we could shake a wand of coding\n    at.  (@doing, @edit enhancements, a REAL use command, lotsa minor fixes\n    and tweaks)\n  \n  - Coyote(TinyTIM, DungeonMUSH, NarniaMUSH), for finding some nasty bugs and\n    NOT using them for evil purposes.\n \n  - Ambar, Amberyl, Sh'dow, Jellan, and Miritha (all from PernMUSH) for \n    numerous bug fixes, enhancements, and ideas.\n \n  - Sketch(TinyTIM) for rewriting some of the more confusing help file\n    entries.\n \n  - Hcobb(TinyTIM) and Furie(DungeonMUSH) for inspiring the parser rewrite and\n    other security-related fixes and enhancements.\n   \n{ 'help credits3' for more }\n  \n</PRE>\n<A HREF=\"#credits\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#credits3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"credits3\"><H3>credits3</H3></A><PRE>\n  Topic: CREDITS (continued - Where RhostMush split off from the rest)\n  \n  - Nyctasia(Rhostshyl, Micro) for bringing the ideas and creating the story\n    behind Rhostshyl with your imagination and your MUSH.  Thanks also for the\n    work done on setting up the first Rhostshyl that the code today is based\n    on including the MUSE ideas you originally inserted.\n  \n  - Seawolf(Rhostshyl, Pern, Discordia, etc) for converting the MUSE database \n    to MUSH, installing Nyctasia's patches, installing a mailsystem better \n    than anything past, present, and future.  Thanks also for the many bug \n    fixes and enhancements.\n  \n  - Thorin(Rhostshyl, Swords, etc) for adding in the many features and \n    additions along with a server and queue rewrite for speed and performance.\n    Thanks also for the rewrite of the master-room code into something logical\n    and securing the errors in the original code with string manipulations.\n    \n{ 'help credits4' for more }\n  \n</PRE>\n<A HREF=\"#credits2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#credits4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"credits4\"><H3>credits4</H3></A><PRE>\n  Topic: CREDITS (continued)\n  \n  - Ashen-Shugar(Rhostshyl, Veil, Apex, Discordia, Etc) for rewriting the com\n    system, adding and enhancing it, ideas and bug fixes, and various\n    enhancements and modifications to the server for better performance and\n    overflowing control.\n  \n  - Thanks also to all the vanilla MUSH/MUSE/LP/DIKU/ETC's that gave us some\n    of the ideas.\n  \n  - Thanks also to the numerous people who have offered suggestions and ideas\n    that have helped make RhostMush one of the best servers in existence.\n  \n  - Thanks to Seawolf, Thorin, and Ashen-Shugar for rewriting all components\n    of the code and redesigning the queue, parser, eval, matching, stack,\n    memory, database, networking, and all other features that make the code\n    different in every way except in it's backward compatibility with \n    TinyMUSH.\n  \n  - Thanks to MyrkaMUX for the idea that lead to our @lock/open\n  \n  - Thanks to Akallabeth (A PennMUSH) for ideas for new functions.\n  \n{ 'help credits5' for more }\n  \n</PRE>\n<A HREF=\"#credits3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#credits5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"credits5\"><H3>credits5</H3></A><PRE>\n  - Thanks to ChaoticMUX for the idea of the SIDEFX flag and function ideas.\n  \n  - Thanks to Javelin and the other developers of the PennMUSH code for \n    working with us in helping with ideas and code for RhostMUSH.  Also thanks\n    for permission to use code from PennMUSH for our server.\n  \n  - Thanks to Zenty of TDragonD/Omni for permission fixes.\n  \n  - Thanks to Stormwolf of Children for numerious ideas\n  \n  - Thanks to Medwyn of The Underground for finding some buggies.\n  \n  - Thanks to Brazil(TinyMUX 2.0) for open permission in sharing ideas and\n    code, and letting us know first hand any new bugs that could impact\n    RhostMUSH.  It is and always will be appreciated.\n  \n  - Thanks to TinyMUSH 3.0 for some useful functions.\n  \n  - Thanks to Rolestra(Rhostshyl) and the developers of Taz for new ideas.\n  \n  - Thanks to Shade@Mediteranian for the Reality Levels Patch\n  \n  - Thanks to Exaurdon for endless braincells fried helping Lensman with bugs.\n  \n  - Thanks to several people and organizations that are too numerous to mention\n  \n</PRE>\n<A HREF=\"#credits4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#creplace()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"creplace()\"><H3>CREPLACE()</H3></A><PRE>\n  Function: creplace(&lt;string&gt;, &lt;position&gt;, &lt;string2&gt;[, &lt;type&gt;][,&lt;range&gt;])\n            creplace(&lt;string&gt;, &lt;position list&gt;, &lt;character&gt;)\n  \n  The creplace function will replace characters starting at position\n  &lt;position&gt; and based on the type, will continue to overwrite till\n  end of one of the strings.  You can replace one or more characters.\n  \n  If you specify the range, it will give the number of characters to enact\n  upon.  Default is length of string2.\n  \n  The second option only allows three arguments, and will replace the \n  character positions specfied in the space delimited &lt;position list&gt;\n  with the character(s) specified with &lt;character&gt;.  If you specify more\n  than one character, it will continue to wrap around the list until\n  the end of the string is met.\n  \n  Note:  The second option can use output from totpos() to stage and prep\n         the values you want to replace depending on the situation.\n  \n  Valid types are: \n        o - overwrite : starting at position it'll continue to overwrite\n            until the end of the &lt;string2&gt;. (this is the default behavior)\n        c - overwrite and cut: starting at position it'll continue to\n            overwrite up to the maximum length of the original string.\n        i - insert : starting at position it'll insert all of string2\n            into the string.\n  \n  Examples:\n    &gt; say creplace(this is a test,4,whee)\n    You say &quot;thiwhee a test&quot;\n    &gt; say creplace(this is a test,4,wheewheewhoowha!)\n    You say &quot;thiwheewheewhoowha!&quot;\n    &gt; say creplace(this is a test,4,wheewheewhoowha!,c)\n    You say &quot;thiwheewheewho&quot; \n    &gt; say creplace(this is a test,4,wheewheewhoowha!,i)\n    You say &quot;thiwheewheewhoowha!s is a test&quot;\n  \n  Option 2 Example:\n    &gt; say creplace(this is a test,1 3 4,X)\n    You say &quot;XhXX is a test&quot;\n    &gt; say creplace(this is a test,1 3 4,XYZ)\n    You say &quot;XhYZ is a test&quot;\n  \n  See Also: replace(), lreplace(), totpos(), elementpos()\n  \n</PRE>\n<A HREF=\"#credits5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ctu()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ctu()\"><H3>CTU()</H3></A><PRE>\n  Function: ctu(&lt;number&gt;, &lt;units-from&gt;, &lt;units-to&gt;)\n  \n  The ctu() function will convert &lt;number&gt; that was originally in\n  the units of &lt;units-from&gt; into the units of &lt;units-to&gt;.\n  \n  The units available are (r)adians, (g)radians, and (d)egrees.\n  \n  180 degrees = PI (3.141593) radians = 200 gradians.\n  \n  Examples:\n    &gt; say ctu(180,d,g)\n    You say &quot;200&quot;\n    &gt; say ctu(180,d,r)\n    You say &quot;3.141593&quot;\n  \n  See Also: sin(), cos(), tan(), asin(), acos(), atan(), atan2(), pi(), \n            cosh(), sinh(), tanh()\n  \n</PRE>\n<A HREF=\"#creplace()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dark\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dark\"><H3>DARK</H3></A><PRE>\n  Flag: DARK(D)   \n  \n  If a room is DARK, then no items are shown when a person \n  'looks' there. If a thing is DARK, then &quot;look&quot; does not list that \n  object in the room's Contents:, and if an exit is DARK, it doesn't \n  show up in the Obvious Exits: list.  Puppets and objects that can \n  listen cannot be DARK.\n  \n  The RhostMUSH default however, allows puppets and listening devices\n  to be dark as well as players.  However, on players, DARK does not\n  hide them from the WHO listing.  Use the UNFINDABLE flag for this.\n  Dark objects/things can still be seen by examine/looking at the object\n  and @sweep picks up all dark things.\n  \n  RhostMUSH can be set up to mimic TinyMUSH in how it handles the dark\n  flag for backward compatibility.  Check with your local wizards to\n  see how it is set up here.\n  \n  See Also: UNFINDABLE, @sweep, look, examine\n  \n</PRE>\n<A HREF=\"#ctu()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#database information functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"database information functions\"><H3>database information functions</H3></A><PRE>\n  Function Lists: Database Information Functions\n    \n  con()            - Returns the connection time of the specified player.\n  createtime()     - Returns the timestamp the object was created.\n  entrances()      - List exits linked to the specified object.\n  exit()           - Lists the first exit in an object.\n  foldercurrent()  - List current folders of a target player.\n  folderlist()     - Lists all folders of target player.\n  globalroom()     - Returns the dbref of the global room.\n  loc()            - Returns the dbref of your location.\n  locate()         - Attempts to locate an object by name in a specified scope.\n  lrooms()         - Lists an iterative sequence of connected rooms.\n  mailquick()      - Returns information about a mailbox.\n  modifytime()     - Returns the timestamp the object was last modified.\n  nearby()         - Tests if two different objects are near eachother.\n  next()           - Returns the next object in a con()/exit() list.\n  num()            - Returns the DbRef of an object.\n  owner()          - Returns the owner of an object or an attribute.\n  rloc()           - Returns the location of an objects location.\n  room()           - Returns the dbref of the (absolute) room an object is in.\n  search()         - Returns a list of objects that match search criteria.\n  searchng()       - Like search but do not search garbage/recover.\n  sees()           - Returns true if an object is able to see a target object.\n  stats()          - Shows information about the number of objects on the MUSH.\n  where()          - Returns the true location of an object.\n  listcommands()   - Lists all commands that you have access to.\n  listflags()      - Lists all flags that you have access to.\n  listtoggles()    - List all togglees you have access to.\n  pmatch()         - Returns the dbref of a matching player.\n  rnum()           - Returns the dbref of an object, from a target perspective.\n  valid()          - Tests validity of certain values for various options.\n  xcon()           - Returns a constrained list of &lt;object&gt;'s contents.\n  listfunctions()  - Lists all functions you have access to.\n  listnewsgroups() - Lists all newsgroups that you have access to.\n\n</PRE>\n<A HREF=\"#dark\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#debug\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"debug\"><H3>DEBUG</H3></A><PRE>\n  Flag: TRACE(T)\n \n  When a thing is set TRACE, it will report to its owner the result of all\n  substitutions that it performs that change the original string.  The order\n  for displaying nested evaluations (such as when evaluating the arguments to\n  a function) is a site-selected configuration parameter.\n  \n  You may specify a TRACE_GREP attibute on yourself (&amp;TRACE_GREP me=&lt;string&gt;)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.\n   \n  Example:\n  &gt; @set object = trace\n  &gt; @va object = say The result is [add(4,mul(3,%0))].\n  &gt; @trig object/va = 7\n  object(#322)} '%0' -&gt; '7'\n  object(#322)} 'mul(3,%0)' -&gt; '21'\n  object(#322)} 'add(4,mul(3,%0))' -&gt; '25'\n  object(#322)} 'The result is [add(4,mul(3,%0))].' -&gt; 'The result is 25.'\n  object says &quot;The result is 25.&quot;\n  \n{ 'help trace2' for more } \n</PRE>\n<A HREF=\"#database information functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dec()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dec()\"><H3>DEC()</H3></A><PRE>\n  Function: dec(&lt;number&gt;)\n  \n  The dec() function is used to decrement numerical values in local registers.\n  The valid registers are 0 through 9.  If the value in the register is a\n  string, it will return the string without any changes.\n  \n  Example:\n    &gt; say [setq(0,10)] 1: [r(0)] [dec(0)] 2: [r(0)]\n    You say &quot; 1: 10  2: 11&quot;\n    &gt; say [setq(0,The)] 1: [r(0)] [dec(0)] 2: [r(0)]\n    You say &quot; 1: The #-1 GLOBAL REGISTER NOT AN INTEGER 2: The\n  \n  See Also: inc(), setq(), setr(), r()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.\n  \n</PRE>\n<A HREF=\"#debug\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#decode64()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"decode64()\"><H3>DECODE64()</H3></A><PRE>\n  Function: encode64(&lt;string&gt;)\n            decode64(&lt;string&gt;)\n  \n  encode64() returns &lt;string&gt; encoded using base-64 format.\n  \n  decode64() converts a base-64 encoded &lt;string&gt; back to its original form.\n  \n  Any invalid characters fed to the string will cause the entire string to be\n  ignored.\n  \n  Examples:\n    &gt; say encode64(test 1 2 3)\n    You say &quot;dGVzdCAxIDIgMw==&quot;\n    &gt; say decode64(dGVzdCAxIDIgMw==)\n    You say &quot;test 1 2 3&quot;\n  \n  See Also: encrypt(), decrypt(), pack(), digest()\n  \n</PRE>\n<A HREF=\"#dec()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#decrypt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"decrypt()\"><H3>DECRYPT()</H3></A><PRE>\n  Function: decrypt(&lt;string&gt;,&lt;seed&gt;)\n  \n  Returns a decrypted string based on the given seed and encrypted string.\n  You have to match the seed (case sensitive) to be able to decrypt the\n  string properly.  Due to cryptology laws around the world, this function\n  can only be enabled with a compile-time option.\n  \n  This function may not be available outside of the United States.\n  \n  Example:\n    &gt; say encrypt(VJKUaKUaCaVGUV,a)\n    You say &quot;this is a test&quot;\n  \n  See Also: encrypt(), encode64(), decode64(), digest()\n  \n</PRE>\n<A HREF=\"#decode64()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#default()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"default()\"><H3>default()</H3></A><PRE>\n  Function:  default(&lt;obj&gt;/&lt;attr&gt;,&lt;default case&gt;)\n \n  This function returns the value of &lt;obj&gt;/&lt;attr&gt;, as if retrieved via\n  the get() function, if the attribute exists and is readable by you.\n  Otherwise, it evaluates the default case, and returns that.\n  Note that the default case is only evaluated if the attribute does\n  not exist or cannot be read.\n \n  This is useful for code that needs to return the value of an attribute,\n  or an error message or default case, if that attribute does not exist.\n \n  Examples:\n    &gt; &amp;TEST me=apple orange banana\n    &gt; say default(me/Test, No fruits!)\n    You say &quot;apple orange banana&quot;\n    &gt; &amp;TEST ME\n    &gt; say default(me/Test, No fruits!)\n    You say &quot;No fruits!&quot;\n \n  See Also: get(), get_eval(), u(), edefault(), u2(), ueval(), objeval()\n \n</PRE>\n<A HREF=\"#decrypt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#delete()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"delete()\"><H3>DELETE()</H3></A><PRE>\n  Function: delete(&lt;string&gt;, &lt;first&gt;, &lt;len&gt; [,&lt;key&gt;])\n  \n  Returns &lt;string&gt;, but with &lt;len&gt; characters starting after the character\n  at position &lt;first&gt; removed.  In other words, this function copies &lt;first&gt;\n  characters, skips &lt;len&gt; characters, and then copies the remainder of the \n  string.\n  \n  You may specify a &lt;key&gt; of 1 to tell mid() to take the string raw and\n  not do ansi-aware processing.  This will speed up the function.\n  The default is '0' which does ansi processing.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n   \n  Example:\n    &gt; say delete(abcdefgh, 3, 2)\n    You say &quot;abcfgh&quot;\n    &gt; say delete(Would you like coffee or perhaps tea?, 15, 18)\n    You say &quot;Would you like tea?&quot;\n  \n  See Also: ldelete(), mid(), replace(), remove()\n  \n</PRE>\n<A HREF=\"#default()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#delextract()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"delextract()\"><H3>delextract()</H3></A><PRE>\n  Function: delextract(&lt;string&gt;, &lt;first&gt;, &lt;length&gt;[, &lt;delim&gt;])\n  \n  Delextract returns a string of words that were not in the list that you\n  specified.  This in effect works exactly opposite of extract.  Delim\n  may be used to specify a delimiter other than space if desired.\n  \n  Examples:\n    &gt; say delextract(This is a really neat example, 4, 2)\n    You say &quot;This is a example&quot;\n    &gt; say extract(Another@funky@test@for@extract, 3, 3, @)\n    You say &quot;Another@funky&quot;\n  \n  See Also: extract(), extractword(), index(), insert(), ldelete(), replace(),\n            randextract()\n  \n</PRE>\n<A HREF=\"#delete()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#destroy()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"destroy()\"><H3>DESTROY()</H3></A><PRE>\n  Function: destroy(&lt;object&gt;)\n  \n  The destroy() function will destroy the targetted object.  You can not\n  destroy anything set SAFE or INDESTRUCTABLE with the destroy() function.\n  You have to use @destroy for these.  This is for security percautions.\n  This will immediately halt anything that the object may be evaluating.\n  \n  Check @list options to see if this side-effect is enabled.\n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Example:\n    &gt; say destroy(#123)\n    You say &quot;&quot;\n   \n  See Also: @destroy, wipe(), create()\n  \n</PRE>\n<A HREF=\"#delextract()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#destroy_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"destroy_ok\"><H3>DESTROY_OK</H3></A><PRE>\n  DESTROY_OK(d)   \n  \n  When set on an object, it allows any player to destroy\n  it as long as the object is not locked against them. This is good \n  for things like notes, whereby the recipient can destroy the note \n  after reading it, instead of having to look for you to destroy it.\n  The DESTROY_OK flag overrides the SAFE flag, so that you do not need to\n  give the /override switch to @destroy to destroy a thing that is both\n  DESTROY_OK and SAFE.   The INDESTRUCTIBLE flag makes this meaningless.\n  \n  See Also: @destroy, SAFE, INDESTRUCTIBLE\n  \n</PRE>\n<A HREF=\"#destroy()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dice()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dice()\"><H3>DICE()</H3></A><PRE>\n  Function: dice(&lt;val1&gt;,&lt;val2&gt;[[[[[,&lt;type&gt;],&lt;botval&gt;],&lt;sep&gt;],&lt;fail&gt;],&lt;crit&gt;])\n   \n  This function rolls the dice.  It works as if you were rolling dice and \n  returns the result.  &lt;val1&gt; is the number of dice and &lt;val2&gt; is the \n  sides of the dice.  For example dice(2,4) would specify you rolling 2 \n  4-sided dice.   The following 'type' values exist.\n     0 - default.  Just display the total of both dice.\n     1 - Display all the rolls of the dice.\n     2 - Display the totals, then display all the roles of the dice.\n     3 - Display the totals, then all normal rolls of dice, then display \n         failures/criticals after with the default '|' seperator.\n     4 - Display all the normal rolls of the dice, then display the\n         failures, then the criticals seperated by the default '|' character.\n     5 - Display just the totals, then failures/criticals after with\n         the default '|' seperator.\n\n  &lt;botval&gt; specifies low ceiling masks for the dice.  You may specify an \n  optional output seperator for the numbers.  If the seperator you specify\n  is the '|' character, the seperator used for failure/criticals becomes ':'.\n  \n  You may specify offset values to the 'fail'ure or for 'crit'ical success.\n  The offset increases the range of failure or success.\n   \n  Examples:\n    &gt; say dice(2,4)        [give me the total of rolling 2 4-sided dice]\n      You say &quot;3&quot;\n    &gt; say dice(2,4,1)      [give me the total and individual dice rolls]\n      You say &quot;3 1 2&quot;\n    &gt; say dice(2,4,2)      [give me just the individual dice rolls]\n      You say &quot;1 2&quot;\n    &gt; say dice(2,4,2,3)    [give me just the dice rolls with MIN value of 3]\n      You say &quot;3 3&quot;\n    &gt; say dice(2,4,2,,@)   [give me just the dice rolls with a seperator '@']\n      You say &quot;1@2&quot;\n   \n  See Also: rand()\n  \n</PRE>\n<A HREF=\"#destroy_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#die()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"die()\"><H3>DIE()</H3></A><PRE>\n  Function: dice(&lt;val1&gt;,&lt;val2&gt;[[[[[,&lt;type&gt;],&lt;botval&gt;],&lt;sep&gt;],&lt;fail&gt;],&lt;crit&gt;])\n   \n  This function rolls the dice.  It works as if you were rolling dice and \n  returns the result.  &lt;val1&gt; is the number of dice and &lt;val2&gt; is the \n  sides of the dice.  For example dice(2,4) would specify you rolling 2 \n  4-sided dice.   The following 'type' values exist.\n     0 - default.  Just display the total of both dice.\n     1 - Display all the rolls of the dice.\n     2 - Display the totals, then display all the roles of the dice.\n     3 - Display the totals, then all normal rolls of dice, then display \n         failures/criticals after with the default '|' seperator.\n     4 - Display all the normal rolls of the dice, then display the\n         failures, then the criticals seperated by the default '|' character.\n     5 - Display just the totals, then failures/criticals after with\n         the default '|' seperator.\n\n  &lt;botval&gt; specifies low ceiling masks for the dice.  You may specify an \n  optional output seperator for the numbers.  If the seperator you specify\n  is the '|' character, the seperator used for failure/criticals becomes ':'.\n  \n  You may specify offset values to the 'fail'ure or for 'crit'ical success.\n  The offset increases the range of failure or success.\n   \n  Examples:\n    &gt; say dice(2,4)        [give me the total of rolling 2 4-sided dice]\n      You say &quot;3&quot;\n    &gt; say dice(2,4,1)      [give me the total and individual dice rolls]\n      You say &quot;3 1 2&quot;\n    &gt; say dice(2,4,2)      [give me just the individual dice rolls]\n      You say &quot;1 2&quot;\n    &gt; say dice(2,4,2,3)    [give me just the dice rolls with MIN value of 3]\n      You say &quot;3 3&quot;\n    &gt; say dice(2,4,2,,@)   [give me just the dice rolls with a seperator '@']\n      You say &quot;1@2&quot;\n   \n  See Also: rand()\n  \n</PRE>\n<A HREF=\"#dice()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#differences\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"differences\"><H3>DIFFERENCES</H3></A><PRE>\n  First we'll touch on the TinyMUX differences.\n  1) Paging.\n     In mux, you can type: page &lt;player-list&gt;=topic, but you need to \n     surround players with spaces in their name within quotes.\n  \n     In Rhost, you can type: page &lt;player-list&gt;=topic, but if you intend\n     to page people with spaces in their names, the first character MUST\n     start with a comma.  i.e.:  page ,player1, player with space = message\n     \n     You may also @toggle yourself MUXPAGE to have paging work the same.\n    \n  2) Re-paging\n     In mux, you could do page &lt;message&gt; to re-page a player.\n  \n     In Rhost, you have to use 'lp &lt;message&gt; to re-page a player.  You\n     may also use 'rp &lt;message&gt;' to re-page a player who last paged you.\n     They can be used interactively from each other.\n  \n     You may also @toggle yourself MUXPAGE to have paging work the same.\n  \n  3) Mail\n     In mux, you could do @mail &lt;player-list&gt;=&lt;subject&gt; then use '-' to\n     write new lines and '--' to send.\n  \n     In Rhost, you need to first set the BRANDY_MAIL toggle.  To set this,\n     type:  @toggle me=brandy_mail (use !brandy_mail to unset)\n     You can now use:  mail &lt;player-list&gt;=&lt;subject&gt; then use '-' to\n     write new lines and '--' to send like you're used to.\n  \n  { type 'help differences2' for tinymush differences. }\n  \n</PRE>\n<A HREF=\"#die()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#differences2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"differences2\"><H3>DIFFERENCES2</H3></A><PRE>\n  Welp, there's not many differences to be honest.  However, as most TinyMUSH's\n  use the brandy mailer, you may use the mail method above to make a syntax\n  that you'd be compatible with.\n  \n  For PENN, there's some subtle differences.     \n  1) Mail\n     In Penn you can do:  mail &lt;user-list&gt;=subject/body\n     \n     In Rhost you need to do: mail &lt;user-list&gt;=subject//body\n     (notice the need of two //'s)\n  \n  For all other platforms:\n  1) BBS\n     Rhost's hardcoded bbs system is *totally* different than any other\n     system.  Softcode interfaces can be coded to make it into a more\n     familiar interface if desired, as it is a very powerful system.\n  \n  2) Flags\n     Rhost's flags have different letters for the staff.  Anything ported\n     with softcode will probably need to be twinked.  However, all the\n     functions/commands should work similiarilly to what you're used to.\n  \n  3) Com system.\n     Rhost's current hardcoded comsystem is very archiac.  I'd suggest\n     a softcoded alternative until a better one is coded.  And yes, it\n     is both in the works and should be backward compatible to both\n     PENN *and* MUX.\n  \n</PRE>\n<A HREF=\"#differences\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dig()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dig()\"><H3>DIG()</H3></A><PRE>\n  Function: dig(&lt;room&gt;[[,&lt;in exit&gt;][,&lt;out exit&gt;][,&lt;location&gt;][,&lt;type&gt;]])\n  \n  This side-effect function mimics the full range of functionality that @dig \n  uses.  It also follows all restrictions and permissions of the @dig command.\n  You can dig room name &lt;room&gt; with optional exit from your current location \n  to that room &lt;in exit&gt; and optional exit from the room being created to your\n  current room &lt;out exit&gt;.  Neither of the exits are required.  \n  \n  The optional &lt;location&gt; specifies what location the dig() function is to\n  open exits &lt;in exit&gt; from and &lt;out exit&gt; back to.  You must control the\n  location, it must be specified as a dbref#, and it must be an object or room.\n  \n  The optional &lt;type&gt; specifies if the default behavior (with a '0') returns\n  just the dbref# of the room created, or if a '1' specifies if the room# with\n  the exit TO and the exit FROM be listed on a single line.\n  \n  This function requires the SIDEFX flag.\n  \n  Type @list options to see if this side-effect function is enabled.\n   \n  Examples:\n    &gt; say dig(My Room)\t\t\t(without sidefx return values enabled)\n    You say &quot;&quot;\n    &gt; say dig(Another Room,In &lt;I&gt;;i;in) (with sidefx return values enabled)\n    You say &quot;#123&quot;\n    &gt; say dig(Yet Another Room,In &lt;I&gt;;i;in,Out &lt;O&gt;;o;out)\n    You say &quot;#124&quot;\n    &gt; say dig(Yet Another Room,In &lt;I&gt;;i;in,Out &lt;O&gt;;o;out,,1)\n    You say &quot;#127 #128 #129&quot;\n  \n  See Also: create(), open(), @dig, SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#differences2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#digest()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"digest()\"><H3>DIGEST()</H3></A><PRE>\n  Function: digest(&lt;algorithm&gt;, &lt;string&gt;)\n   \n  Returns a checksum (Hash, digest, etc.) of &lt;string&gt; using the given\n  &lt;algorithm&gt;.  If the mush is compiled with SSL support &lt;algorithm&gt; \n  can be one of:\n   \n           md2 md4 md5 sha sha1 dss1 mdc2 ripemd160\n   \n  Without SSL, only the sha algorithm is enabled. \n  \n  See '@list options' on what algorithms are supported.\n  \n  Examples: \n    &gt; say digest(md5, test123)\n    You say &quot;cc03e747a6afbbcbf8be7668acfebee5&quot;\n    &gt; say digest(sha, test123)\n    You say &quot;3a589de6214fd40ae461313fd81dfd1edb7eae70&quot;\n   \n  See also: crc32(), pack(), roman(), encrypt(), decrypt(), encode64(),\n            decode64()\n\n</PRE>\n<A HREF=\"#dig()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dist2d()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dist2d()\"><H3>DIST2D()</H3></A><PRE>\n  Function: dist2d(x1, y1, x2, y2)\n   \n  Returns the integer distance between the Cartesian points in two dimensions\n  (x1,y1) and (x2,y2).\n   \n  Example:\n    &gt; say dist2d(0,0,3,4)\n    You say &quot;5&quot;\n    \n  See Also: dist3d()\n  \n</PRE>\n<A HREF=\"#digest()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dist3d()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dist3d()\"><H3>DIST3D()</H3></A><PRE>\n  Function: dist3d(x1, y1, z1, x2, y2, z2)\n   \n  Returns the integer distance between the Cartesian points in three\n  dimensions (x1,y1,z1) and (x2,y2,z2).\n   \n  Example:\n    &gt; say dist3d(0,0,0,10,15,20)\n    You say &quot;27&quot;\n  \n  See Also: dist2d()\n  \n</PRE>\n<A HREF=\"#dist2d()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#div()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"div()\"><H3>DIV()</H3></A><PRE>\n  Function: div(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN&gt;]...)\n   \n  Returns the integer quotient from dividing &lt;number1&gt; by &lt;number2&gt;.\n  \n  For floating point numbers, please use the fdiv() function. \n   \n  Example:\n    &gt; say div(15,3)\n    You say &quot;5&quot;\n    &gt; say div(16,3)\n    You say &quot;5&quot;\n    &gt; say div(17,3)\n    You say &quot;5&quot;\n    &gt; say div(18,3)\n    You say &quot;6&quot;\n    &gt; say div(-17,3)\n    You say XXXXX\n  \n  This function may also be called as idiv().\n  \n  See Also: add(), fdiv(), mod(), mul(), round(), sub(), trunc()\n  \n</PRE>\n<A HREF=\"#dist3d()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#doing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"doing\"><H3>doing</H3></A><PRE>\n  Command: DOING &lt;prefix&gt;\n  Displays a list of players currently connected to the MUSH.\n  The DOING report tells you how long a player has been on, how long they\n  have been inactive, and what they are doing (if they have used the @doing\n  command).  If &lt;prefix&gt; is specified, only players whose names start with\n  &lt;prefix&gt; are listed.  There are two forms of the DOING listing.  One\n  shows GUILDS (an arbitrary attribute called 'guild' on a player) and\n  the other has just the basic information.  The GUILD field in the DOING\n  can be optionally changed to another field.  If you see another field than\n  'Guilds' the default value has been changed.\n  \n  Also, if enabled, you may see either a '*' or the actual bit of the staff\n  when you do a DOING.\n  \n  Note:  DOING must be in all caps to work.\n   \n  See Also: @doing, WHO\n  \n</PRE>\n<A HREF=\"#div()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door syntax\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door syntax\"><H3>DOOR SYNTAX</H3></A><PRE>\n  Command: @door\n  \n  The following commands exist:\n    @door[/list]  -- List the available doors.  This is the default switch:\n        Syntax: @door/list\n  \n    @door/full    -- List full statistics of the specified door.\n        Syntax: @door/full &lt;doorname&gt;\n    \n    @door/status  -- Gives the status of the current door.\n        Syntax: @door/status &lt;doorname&gt;=&lt;setting&gt;\n        Settings: closed -- forces the door closed and drops all connections.\n                  online -- sets the door for allowing connections.\n                  offline -- forces the door offline, drops all connections\n                             plus disables the door from further connections.\n  \n   @door/open    -- Opens the specified door.               \n        Syntax: @door/open &lt;doorname&gt; [=&lt;arguments&gt;]\n        Door: MUSH\n           Arguments: mushname -- For the MUSH door, argument is the mush name\n                                  no arguments just lists the available mushes.\n        Door: EMPIRE\n           Arguments: login,password -- First arg is login, second is password\n  \n   @door/push    -- Pushes the target player into the door.\n        Syntax: @door/push &lt;player&gt;|&lt;doorname&gt; [=&lt;arguments&gt;]\n        Door: MUSH\n           Arguments: mushname -- For the MUSH door, argument is the mush name\n                                  no arguments just lists the available mushes.\n        Door: EMPIRE\n           Arguments: login,password -- First arg is login, second is password\n  \n   @door/close   -- Closes the specified door.\n        Syntax: @door/close &lt;doorname&gt;\n   \n   @door/kick    -- Closes the specified door to the target player.\n        Syntax: @door/kick &lt;target&gt;|&lt;doorname&gt;\n         \n   For custom doors, please check the help the maintainer provides.        \n  \n  See Also: DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, \n            DOOR_KICK, DOOR_WRITING, INTERNAL_DOORS, DOORED, DOOR SYNTAX\n  \n</PRE>\n<A HREF=\"#doing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_close\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_close\"><H3>DOOR_CLOSE</H3></A><PRE>\n  Command: @door/close &lt;door&gt;\n  \n  This command will close an existing door connection providing it's \n  currently open.\n  \n  If you're caught in a door and need to abort it then type:\n  &gt; !@door/close &lt;door&gt;\n  \n  Please notice the '!' at the start of the command!\n   \n  Example:\n    &gt; !@door/close mush   -- This will close the current active door\n    &gt; !!@door/close mush  -- This will close the outermost door (if chained)\n    &gt; !!!@door/close mush -- The third door (and so forth with more !'s)   \n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED\n\n</PRE>\n<A HREF=\"#door syntax\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_kick\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_kick\"><H3>DOOR_KICK</H3></A><PRE>\n  Command: @door/kick &lt;player&gt;|&lt;door&gt;\n  \n  This command will close the specified &lt;door&gt; that the current &lt;player&gt; is\n  connected to.\n  \n  It will error out if the player is not a player or player is not connected.\n  \n  Example:\n    &gt; @door/kick TinyPlayer|mush\n  \n  This will close the door 'mush' from the player 'TinyPlayer'.\n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED\n  \n</PRE>\n<A HREF=\"#door_close\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_list\"><H3>DOOR_LIST</H3></A><PRE>\n  Command: @door/list [&lt;door&gt;]\n  \n  This command lists information with regards to which doors are configured\n  on this system.\n  \n  @door/list without any arguments will return the same as just typing @door.\n  @door/list &lt;door&gt; will return information for the named door only.\n  \n  Example:\n    &gt; @door/list\n    &gt; @door/list mush\n  \n  Continued in DOOR_LIST2 which will explain the details of the output.\n  \n  See Also: @door, DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_STATUS, DOOR_WRITING,\n            INTERNAL_DOORS, DOORED\n  \n</PRE>\n<A HREF=\"#door_kick\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_list2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_list2\"><H3>DOOR_LIST2</H3></A><PRE>\n  Command: @door/list [&lt;door&gt;]\n  .. DOOR_LIST continued\n  \n    NUM  NAME       STATUS      P  LOC\n   (# 0) MUSH       OFFLINE    (0) #PLAYER\n  \n  The above is an example of information returned by @door/list.\n  -  The number is the internal identifier for the given door-type.\n  -  The STATUS will be one of OFFLINE, ONLINE, CLOSED, OPEN, INTERNAL\n  -  'P' stands for 'permission' and means that you must have a bittype()\n     of at least this high to use or see the door.\n  -  'LOC' will be one of #PLAYER, #ROOM, #EXIT, #THING, #&lt;DBREF&gt;.\n     If #PLAYER, then any player matching the required permission may open\n     this door.\n     If #ROOM, then any room that matches the required permission can trigger\n     this door upon a player. #EXIT and #THING work in a similar way.\n     If the value is a dbref then only the specified dbref can access the door\n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_CLOSE, DOOR_STATUS, DOOR_WRITING,\n            INTERNAL_DOORS, DOORED, BITTYPE()\n  \n</PRE>\n<A HREF=\"#door_list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_open\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_open\"><H3>DOOR_OPEN</H3></A><PRE>\n  Command: @door/open &lt;door&gt; [=&lt;arguments&gt;]\n  \n  Use this command to open a connection to a named door. The door's status\n  must be set to 'ONLINE' or already be 'OPEN' for this to work.\n  \n  Certain doors may require additional arguments before they can be opened.\n  \n  In addition some doors may have bitlevel requirements or may only be \n  triggered by certain people, rooms, or exits. Check @door/list for details.\n  \n  Example:\n    &gt; @door/open mush=RhostMUSH\n  \n  This will open door called 'mush' with the argument target 'RhostMUSH'\n  \n  See Also: @door, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED, BITTYPE()\n  \n</PRE>\n<A HREF=\"#door_list2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_push\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_push\"><H3>DOOR_PUSH</H3></A><PRE>\n  Command: @door/push &lt;player&gt;|&lt;door&gt; [=&lt;arguments&gt;]\n  \n  Use this command to push another player through the door with any specific\n  arguments that you wish.  This is great for automated procedures.\n  \n  &lt;player&gt; must be a valid player, and must be connected.  If they are\n  connected more than once, it uses the connection with the least idle time.\n  \n  Example:\n    &gt; @door/push TinyPlayer|mush=RhostMUSH\n  \n  This will open door called 'mush' with the argument target 'RhostMUSH' and\n  push the player 'TinyPlayer' into it.\n  \n  See Also: @door, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED, BITTYPE()\n\n</PRE>\n<A HREF=\"#door_open\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_status\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_status\"><H3>DOOR_STATUS</H3></A><PRE>\n  Command : @door/status &lt;name&gt; = &lt;status&gt;\n  Note    : This switch is restricted to immortals only.\n  \n  Used to change the status of a door. Valid statuses are ONLINE, OFFLINE, and\n  CLOSED. If CLOSED or OFFLINE is chosen then all existing connections are\n  terminated.\n  \n  Example:\n    &gt; @door/status mush=online       -- Brings the door online\n    &gt; @door/status mush=closed       -- shutdowns the sockets for the door\n    &gt; @door/status mush=offline      -- Brings the door offline\n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_CLOSE, DOOR_LIST, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED\n  \n</PRE>\n<A HREF=\"#door_push\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_writing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_writing\"><H3>DOOR_WRITING</H3></A><PRE>\n  \n  API Version: 0.2\n  \n  The following is meant as a quick-guide to writing your own door modules.\n  Examples and even the API may change after the writing of this document, and\n  can be found by looked at http://lensman.the-wyvern.net/rhost/doors.html\n  \n  The door API is meant to be an easy to use way by which new doors can be\n  created and plugged into the Mush.\n  \n  In essence only one function -MUST- be written, although for most doors up\n  to 5 may need to be provided.\n  \n  The functions will be detailed on the next page. See DOOR_WRITING2\n   \n</PRE>\n<A HREF=\"#door_status\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_writing2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_writing2\"><H3>DOOR_WRITING2</H3></A><PRE>\n  These functions are defined as:\n    typedef void (*doorInit_t)   (void);\n    typedef void (*doorOpen_t)   (DESC *d, int nargs, char *cargs[], int id);\n    typedef void (*doorClose_t)  (DESC *d);\n    typedef void (*doorOutput_t) (DESC *d, char *pText);\n    typedef void (*doorInput_t)  (DESC *d, char *pText);\n  \n  doorInit is called when the door is first registered with the mush.\n  doorOpen is called when a request is made to open the door.\n  doorClose is called when a request is made to close the door.\n  doorOutput: Output is defined as text going from the mush through the door.\n              As such this function is called when the user inputs some text\n              that needs sending over through the door.\n  doorInput : Input is defined as text going from the door through to the \n              mush.  As such this function is called when information comes \n              through the door for the player.\n  \n  See DOOR_WRITING3\n  \n</PRE>\n<A HREF=\"#door_writing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#door_writing3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"door_writing3\"><H3>DOOR_WRITING3</H3></A><PRE>\n  Once the functions are written to the above interface, they are registered\n  with the mush by adding the following line to the end of door.c within the\n  registerDoors function.\n  \n  addDoor(&lt;name&gt;, initFunc, openFunc, closeFunc, inputFunc, outputFunc, P, L);\n  \n  *Func should be the name of your implementation function. P is the \n  permission, or bittype level, at which this door should be usable. And L \n  should be one of PLAYER_e, ROOM_e, EXIT_e, or dbref. It corresponds to the\n  LOC field on @door/list\n  \n  initFunc, closeFunc, inputFunc and outputFunc may all be null. If the \n  inputFunc and/or outputFunc is null then the mush will simply pass bytes \n  back and forth between the door and the player. This is most suited for a \n  'telnet' style protocol.\n  \n  For examples of door code, take a look at door_mush.c and door_mail.c, \n  included with your RhostMUSH.\n  \n</PRE>\n<A HREF=\"#door_writing2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#doored\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"doored\"><H3>DOORED</H3></A><PRE>\n  Flag: DOORED([R])  \n  \n  This is used in junction with the @door command.  This\n  sets it so that you will receive no output from the MUSH while you\n  are in the external door. (This can be overridden with wizard\n  broadcasts for security/information reasons)\n  \n  See Also: @door\n  \n</PRE>\n<A HREF=\"#door_writing3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#drop\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"drop\"><H3>drop</H3></A><PRE>\n  Command: drop[/&lt;switch&gt;] &lt;object&gt;\n           drop[/&lt;switch&gt;] &lt;exit&gt;\n \n  The first form removes &lt;object&gt; from your inventory and puts it in your\n  location, except for the following special cases: Dropping a STICKY thing\n  sends it home, and dropping a thing in a room with a drop-to sends the thing\n  to the drop-to location.\n \n  The second form removes &lt;exit&gt; from your list of exits and adds it to the\n  list of exits for the current location.  Anyone in the same location as\n  you may then use the exit to travel to the exit's destination.  You can\n  only drop exits when you own the location where you are dropping them.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @odrop/@adrop attributes on the dropped\n                 object.  This switch only works if you control the object.\n   \n  'throw' is the same as 'drop'.\n  \n  See Also: get, @adrop, @drop, @odrop, DROP-TO, STICKY\n  \n</PRE>\n<A HREF=\"#doored\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#dropMINUStos\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"dropMINUStos\"><H3>DROP-TOS</H3></A><PRE>\n  Topic: DROP-TOS\n \n  When the @link command is used on a room, it sets a drop-to location.  Any\n  object dropped in the room (if it isn't STICKY) will go to that location.\n  If the room is STICKY, the drop-to will be delayed until the last person in\n  the room has left.\n  \n  See Also: @link, STICKY\n  \n</PRE>\n<A HREF=\"#drop\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#e()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"e()\"><H3>E()</H3></A><PRE>\n  Function: e([&lt;arg&gt;])\n  Returns the value of the numeric constant e to nine decimal places.\n  \n  If you specify an &lt;arg&gt; it takes that as the percision to the number of\n  decimal places you want.  The value must be greater than zero, and less\n  than the current maximum value specified as floating point precision.\n  \n  Please see:  @list options system \n   \n  Example:\n    &gt; say e()\n    You say &quot;2.718281828&quot;\n  \n  See Also: exp(), ln(), log(), power(), power10()\n  \n</PRE>\n<A HREF=\"#dropMINUStos\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#edefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"edefault()\"><H3>edefault()</H3></A><PRE>\n  Function:  edefault(&lt;obj&gt;/&lt;attr&gt;,&lt;default case&gt;)\n \n  This function returns the evaluated value of &lt;obj&gt;/&lt;attr&gt;, as if\n  retrieved via the get_eval() function, if the attribute exists and\n  is readable by you. Otherwise, it evaluates the default case, and\n  returns that. The default case is only evaluated if the attribute\n  does not exist or cannot be read.\n \n  Example:\n    &gt; &amp;TEST me=You have lost [rand(10)] marbles.\n    &gt; say edefault(me/Test,You have no marbles.)\n    You say &quot;You have lost 6 marbles.&quot;\n    &gt; &amp;TEST me\n    &gt; say edefault(me/Test,You have no marbles.)\n    You say &quot;You have no marbles.&quot;\n  \n  See Also:  get(), get_eval(), u(), default(), u2(), ueval(), objeval() \n  \n</PRE>\n<A HREF=\"#e()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#edit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"edit()\"><H3>EDIT()</H3></A><PRE>\n  Function: edit(&lt;string&gt;, &lt;from&gt;, &lt;to&gt; [[,&lt;type&gt;] [,&lt;strict&gt;]])\n \n  This function edits &lt;string&gt;, replacing all occurrences of the substring\n  &lt;from&gt; with the string &lt;to&gt;.  If &lt;from&gt; is '$', then &lt;to&gt; is appended to\n  &lt;string&gt;, while if &lt;from&gt; is '^', then it is prepended.\n  \n  &lt;type&gt; has the following values that are allowed:\n    1 - enable single edit (where it edits the first match no sequent matches)\n  \n  &lt;strict&gt; has the following values that are allowed:\n    1 - strict mode will keep ansi alignment to original strings values.\n    2 - raw mode will allow you to edit ansi markup in a string.\n  \n  Note: option 2 (raw mode) was the original method ansi worked.\n   \n  Examples:\n    &gt; say edit(This is a test,is,x)   \n    You say &quot;Thx x a test&quot;\n    &gt; say edit(Atlantic,^,Trans)\n    You say &quot;TransAtlantic&quot;\n  \n  See Also: @edit, editansi(), strip(), garble(), pedit(), chomp(), regedit()\n  \n</PRE>\n<A HREF=\"#edefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#editansi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"editansi()\"><H3>EDITANSI()</H3></A><PRE>\n  Function: editansi(&lt;string&gt;, &lt;search&gt;, &lt;replace&gt; [,&lt;search&gt;, &lt;replace&gt;,...])\n  \n  This function will take a string, and replace all searched for ansi codes\n  and replace them with the specified replaced ansi codes.  You may specify\n  more than one search/replace segment for ansi codes, but they must always\n  be in a paired set.\n  \n  The following logic works for the search and replace in order of priority:\n    1.  If &lt;search&gt; is just ansi-normal (n), then it assumes you want an\n        exact match on any character that has no previous encoding, and will\n        replace with &lt;replace&gt; ALL encoding specified.\n    2.  If &lt;search&gt; is an exact match, it substitutes &lt;replace&gt; overwriting\n        all previous encoding.\n    3.  If &lt;search&gt; is a FG color match only, it substitutes &lt;replace&gt; FG\n        color and anything else in replacement encoding.\n    4.  If &lt;search&gt; is a BG color match only, it substitutes &lt;replace&gt; BG\n        color and anything else in replacement encoding.\n    5.  If &lt;search&gt; is a special encoding (flash, normal, etc) it will\n        replace anything in replacement encoding.\n    6.  Specifying 'n' for any special encoding replacement will nullify \n        the special but will NOT nullify the color.  \n    7.  Specifying 'n' for any color encoding replacement will nullify\n        the color encoding but will NOT nullify the special encoding.\n  \n  The following ansi exclusions are allowed for search and replaces.\n    H - anything NOT set hilite.\n    I - anything NOT set inverse.\n    U - anything NOT set underscore.\n    F - anything NOT set flash.\n    N - anything NOT using ansi colors.\n  \n  If these are specified in replace, it will strip those specified ansi\n  special encodings. \n    \n  Examples:\n    &gt; say editansi([ansi(hb,abc,n,def)],n,hr)\n    You say &quot;abcdef&quot;    (abc is hilight blue, def is hilight red)\n    &gt; say editansi([ansi(hb,abc,n,def)],hb,hy)\n    You say &quot;abcdef&quot;    (abc is hilight yellow, def is non-ansified)\n    &gt; say editansi([ansi(hb,abc,hg,xyz,n,def)],hb,y,hg,b)\n    You say &quot;abcxyzdef&quot; (abc is yellow, xyz is blue, def is non-ansi)\n  \n  See Also: accents(), edit(), regedit(), pemit(), @edit\n\n</PRE>\n<A HREF=\"#edit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ee()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ee()\"><H3>EE()</H3></A><PRE>\n  ee(&lt;number&gt; [, &lt;precision&gt;])\n  \n  The ee() function turns the number into an engineering value based on\n  the specified precision.  If no precision is given, it defaults to 2.\n  \n  Example:\n    say ee(123456789012345)\n    You say &quot;1.23E+14&quot;\n  \n  See Also: mul(), fdiv(), strmath()\n\n</PRE>\n<A HREF=\"#editansi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#elementpos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"elementpos()\"><H3>ELEMENTPOS()</H3></A><PRE>\n  Function: elementpos(&lt;string&gt;, &lt;positions&gt; [,&lt;delim&gt;])\n  \n  This function works a bit reverse of totpos() and like elements()\n  but based on character position instead of word position.  You \n  may specify more than one position, and the position may be \n  repeated as many times as you want.  The position starts at '1'.\n  A value less than 1 or larger than the length of the string is\n  ignored.\n  \n  This function is ansi-aware.\n  \n  You may specify a null delimiter (default is a space).\n  \n  Example:\n    &gt; say elementpos(abcdefg,1 4)\n    You say &quot;a d&quot;\n    &gt; say elementpos(abcdefg,1 4 7,)\n    You say &quot;adg&quot;\n  \n  See Also: pos(), totpos(), elements(), elementsmux(), strip(),\n            creplace()\n\n</PRE>\n<A HREF=\"#ee()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#elements()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"elements()\"><H3>elements()</H3></A><PRE>\n  Function: elements(&lt;list of words&gt;,&lt;list of numbers&gt;[[,&lt;delim&gt;][,&lt;sep&gt;]])\n \n  This function returns the words in &lt;list of words&gt; that are in the\n  positions specified by &lt;list of numbers&gt;. Optionally, a list delimiter\n  other than a space can be separated.  This function does not assume a null\n  to be a valid argument.  For that, use elementsmux().\n \n  Examples:\n    &gt; say elements(Foo Ack Beep Moo Zot,2 4)\n    You say &quot;Ack Moo&quot;\n    &gt; say elements(Foof|Ack|Beep|Moo,3 1,|)\n    You say &quot;Beep|Foof&quot;\n    &gt; say elements(this is a test,2 4 2 2 2 2)\n    You say &quot;is test is is is is&quot;\n    &gt; say elements(this@is@a@test,2 4 2 2 2 2,@)\n    You say &quot;is@test@is@is@is@is&quot;\n    &gt; say elements(this@is@a@test,2 4 2 2 2 2,@,)\n    You say &quot;is test is is is is&quot;\n \n  See Also: extract(), extractword(), elementsmux(), elementpos()\n  \n</PRE>\n<A HREF=\"#elementpos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#elementsmux()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"elementsmux()\"><H3>elementsmux()</H3></A><PRE>\n  Function: elementsmux(&lt;list of words&gt;,&lt;list of numbers&gt;[[,&lt;delim&gt;][,&lt;sep&gt;]])\n \n  This function returns the words in &lt;list of words&gt; that are in the\n  positions specified by &lt;list of numbers&gt;. Optionally, a list delimiter\n  other than a space can be separated.  This function assumes 'null' arguments\n  are valid arguments while elements() does not.\n \n  Examples:\n    &gt; say elementsmux(Foo Ack Beep Moo Zot,2 4)\n    You say &quot;Ack Moo&quot;\n    &gt; say elementsmux(Foof|Ack|Beep|Moo,3 1,|)\n    You say &quot;Beep|Foof&quot;\n    &gt; say elementsmux(this is a test,2 4 2 2 2 2)\n    You say &quot;is test is is is is&quot;\n    &gt; say elementsmux(this@is@a@test,2 4 2 2 2 2,@)\n    You say &quot;is@test@is@is@is@is&quot;\n    &gt; say elementsmux(this@is@a@test,2 4 2 2 2 2,@,)\n    You say &quot;is test is is is is&quot;\n \n  See Also: extract(), extractword(), elements(), elementpos()\n  \n  \n</PRE>\n<A HREF=\"#elements()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#elist()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"elist()\"><H3>elist()</H3></A><PRE>\n  Function: elist(&lt;str&gt;[,&lt;phrase&gt;[,&lt;delim&gt;[,&lt;sep&gt;[,&lt;punctuation&gt;[,&lt;munge&gt;]]]]])\n  \n  The elist function is used to return a list of words into an english\n  recognizable format.  You may specify an output delimiter to use if\n  you wish but it makes the format rather unique.  You may specify a seperate\n  punctuation instead of the default comma (,).  The punctuation may be\n  more than one character.  You may specify the seperator if not a space as \n  well.\n  \n  You can also supply a munging function to apply for each argument passed to\n  elist.  So that if you passed in dbref#'s, you can munge to the name()\n  function.  All arguments are passed as %0.  The order number of how they're\n  passed is %1.\n  \n  Examples:\n    &gt; say elist(test)\n    You say &quot;test&quot;\n    &gt; say elist(this test)\n    You say &quot;this and test&quot;\n    &gt; say elist(this test again)\n    You say &quot;this, test, and again&quot;\n    &gt; say elist(this test again,,,,;)\n    You say &quot;this; test; and again&quot;\n    &gt; say elist(this test again,at least I think)\n    You say &quot;this, test, at least I think again&quot;\n    &gt; say elist(one/two/three,what a life,/)\n    You say &quot;one, two, what a life three&quot;\n    &gt; say elist(one/two/three,what a life,/,/)\n    You say &quot;one,/two,/what a life/three&quot;\n  \n  See Also: iter(), citer(), nsiter(), list()\n  \n</PRE>\n<A HREF=\"#elementsmux()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#elock()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"elock()\"><H3>elock()</H3></A><PRE>\n  Function: elock(&lt;object&gt;[/&lt;whichlock&gt;],&lt;victim&gt;)\n  Checks if &lt;victim&gt; would pass the named lock on &lt;object&gt;.  Only the object's\n  owner may test locks other than the default lock.\n  \n  Example:\n    &gt; @lock me/page=!*Twinklock\n      Set.\n    &gt; say elock(me/pagelock,*twink)\n      You say &quot;0&quot;\n    &gt; @unlock me/page\n      Set.\n    &gt; say elock(me/pagelock,*twink)\n      You say &quot;1&quot;\n  \n  See Also: @lock, lock(), lockencode(), lockdecode(), lockcheck()\n  \n</PRE>\n<A HREF=\"#elist()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#emit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"emit()\"><H3>EMIT()</H3></A><PRE>\n  Function: emit(&lt;text&gt;)\n  \n  The emit() function returns 'text' to your location exactly as the @emit\n  command does.  It follows all restrictions and permissions of @emit.\n  The SIDEFX flag is required to use this function.\n   \n  Type @list options to see if this side-effect function is enabled.\n   \n  Examples:\n    &gt; say emit(boo!)\n    boo!\n    You say &quot;&quot;\n  \n  See Also: lemit(), pemit(), oemit(), @emit, SIDEEFFECTS\n    \n</PRE>\n<A HREF=\"#elock()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#enactor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"enactor\"><H3>ENACTOR</H3></A><PRE>\n  Topic: ENACTOR\n \n  The enactor is the object that caused an action list to be performed.\n  So, the enactor of the Ahear action list is the player or object who\n  said/emoted/etc the message that matched the Listen attribute, the\n  enactor of the Apay attribute is the player who gave the object money, etc.\n  The enactor of an attribute that is run by a @trigger command is the \n  object that ran the @trigger command.  The following substitutions can be\n  performed in an action list to return information about the enactor:\n \n    %# or [v(#)]           - Database number of the enactor\n    %N/%n or [v(N)]/[v(n)] - Name of the enactor.\n    %O/%o ...              - Objective pronoun for the enactor\n                             (him her it them)\n    %P/%p ...              - Possessive pronoun (his her its their)\n    %S/%s ...              - Subjective pronoun (he she it they)\n    %A/%a ...              - Absolute possessive pronoun (his hers its theirs)\n  \n  See Also: SUBSTITUTION\n  \n</PRE>\n<A HREF=\"#emit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#encode64()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"encode64()\"><H3>ENCODE64()</H3></A><PRE>\n  Function: encode64(&lt;string&gt;)\n            decode64(&lt;string&gt;)\n  \n  encode64() returns &lt;string&gt; encoded using base-64 format.\n  \n  decode64() converts a base-64 encoded &lt;string&gt; back to its original form.\n  \n  Any invalid characters fed to the string will cause the entire string to be\n  ignored.\n  \n  Examples:\n    &gt; say encode64(test 1 2 3)\n    You say &quot;dGVzdCAxIDIgMw==&quot;\n    &gt; say decode64(dGVzdCAxIDIgMw==)\n    You say &quot;test 1 2 3&quot;\n  \n  See Also: encrypt(), decrypt(), pack(), digest()\n  \n</PRE>\n<A HREF=\"#enactor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#encrypt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"encrypt()\"><H3>ENCRYPT()</H3></A><PRE>\n  Function: encrypt(&lt;string&gt;,&lt;seed&gt;)\n  \n  Returns an encrypted string based on the given seed.  The longer the seed,\n  the better the password.  Due to cryptology laws around the world, this\n  function can only be enabled with a compile-time option.\n  \n  This function may not be available outside of the United States.\n  \n  Example:\n    &gt; say encrypt(this is a test,a)\n    You say &quot;VJKUaKUaCaVGUV&quot;\n  \n  See Also: decrypt(), encode64(), decode64(), digest()\n  \n</PRE>\n<A HREF=\"#encode64()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#enter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"enter\"><H3>enter</H3></A><PRE>\n  Command: enter[/&lt;switch&gt;] &lt;object&gt;\n  The enter command is used to enter an object. Insides of objects are best\n  used for vehicles, or storage spaces when you don't have a home (or even\n  as a floating home).  In order to enter an object you must either own it or\n  it must have its ENTER_OK flag set, and you must also pass the object's\n  EnterLock (if it has one).\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @oenter/@aenter or @oefail/@aefail\n                attributes on the entered object, and don't perform the\n                @oxleave attribute on your current location.  This switch\n                only works if you control the object being entered.\n \n  See Also: leave, @aefail, @aenter, @efail, @enter, @idesc, @lock, @oefail,\n            @oenter, @oxleave, ENTER_OK\n  \n</PRE>\n<A HREF=\"#encrypt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#enter_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"enter_ok\"><H3>ENTER_OK</H3></A><PRE>\n  Flag: ENTER_OK(e)   \n  \n  If an object or person is ENTER_OK, other players may \n  enter the object or person by using 'enter &lt;object/person&gt;. Players\n  must also have the ENTER_OK set if they wish to be able to receive \n  things given to them by other players via the \n  'give &lt;player&gt; = &lt;object&gt;'. \n  \n  See Also: enter, give\n  \n</PRE>\n<A HREF=\"#enter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#entrances()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"entrances()\"><H3>ENTRANCES()</H3></A><PRE>\n  entrances([&lt;object&gt; [,&lt;type&gt; [,&lt;begin&gt; [,&lt;end&gt;]]]])\n   \n  With no arguments, the entrances() function returns a list of all\n  exits, things, players, and rooms linked to your location, like\n  @entrances. You can specify an object other than your current location\n  with &lt;object&gt;. You can limit the type of objects found by specifying\n  &lt;type&gt; as follows:\n        a        all (default)\n        e        exits\n        t        things\n        p        players\n        r        rooms\n  You can also limit the range of the dbrefs searched by giving &lt;begin&gt;\n  and &lt;end&gt;.  This function is computationally expensive and costs the same\n  as @find. \n  \n  Example:\n    &gt; say entrances(here) \n    You say &quot;#123 #456&quot;\n  \n  See Also: @entrances, lrooms(), lexits(), lcon() \n  \n</PRE>\n<A HREF=\"#enter_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#eq()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"eq()\"><H3>eq()</H3></A><PRE>\n  Function: eq(&lt;integer1&gt;,&lt;integer2&gt;)\n \n  Takes two integers, and returns 1 if they are equal and 0 if they are not.\n  Warning: passing anything but integers will produce unexpected results,\n  as non-numeric strings usually are treated as numeric 0.\n \n  Example:\n    &gt; say eq(1,-1)\n    You say &quot;0&quot;\n    &gt; say eq(5,5)\n    You say &quot;1&quot;\n    &gt; say eq(foo, bar)\n    You say &quot;1&quot;\n  \n  See Also: lt(), lte(), gte(), gt(), neq()\n  \n</PRE>\n<A HREF=\"#entrances()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#error()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"error()\"><H3>ERROR()</H3></A><PRE>\n  Function: error([&lt;target&gt;])\n  \n  This function takes either no arguments or an optional target player.  \n  It returns one of the random error messages in a standard format.  \n  If you, or the target specified, have the toggle 'VANILLA_ERRORS' \n  enabled, you will only get the default error message.\n  \n  If a target is specified, you must control the target player, or\n  the target player must exist.  If neither of these conditions are\n  met, it defaults back to the enactor (or you) for how the error\n  processes.\n  \n  Example:\n    &gt; say error()\n    You say &quot;Huh?  (Type 'help' for help.)&quot;\n    &gt; say error(*tinyplayer)\n    You say &quot;Huh?  (Type 'help' for help.)&quot;\n    \n  See Also: @toggle\n  \n</PRE>\n<A HREF=\"#eq()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#escape()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"escape()\"><H3>ESCAPE()</H3></A><PRE>\n  Function: escape(&lt;string&gt;)\n \n  Returns &lt;string&gt; after adding an escape character (\\) at the start of the\n  string and also before each of the characters %;[]{}\\ that appear in the\n  string.  This prevents strings entered by players from causing undesired\n  side effects when used, such as making your object perform unintended\n  commands or give out information to which you have access.  Note that this\n  function is only needed when the resulting string is to be passed through\n  the @force command or be used as an attribute for an object (like the\n  success message for a mail message object).  This function has the \n  advantage over the secure() function in that the string the user sees\n  after evaluating it is the same as the original string.\n \n  Example:\n    &gt; say escape(Sneak a peak at Wiz's desc... [get($1/desc)])\n    You say &quot;\\Sneak a peek at Wiz's desc... \\[get\\(#1/desc\\)\\]&quot;\n \n  Note: 'say escape(Sneak a peek at Wiz's desc... [get(#1/desc)])' does not\n  produce the expected result because the argument is evaluated BEFORE being\n  processed by escape(), therefore the [get()] call has already been\n  performed.\n  \n  See Also: secure(), securex(), escapex(), esclist(), unesclist()\n  \n</PRE>\n<A HREF=\"#error()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#escapex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"escapex()\"><H3>ESCAPEX()</H3></A><PRE>\n  Function: escapex(&lt;string&gt; [,&lt;omission&gt;])\n  \n  This functions exactly like escape(), except you may specify what characters\n  you wish to omit from being escaped through &lt;omition&gt;.  The optional special\n  characters can be used when looking to escape out fields:\n     f - omit the first escape (backslash) from the string.\n     a - omit all forms of ansi subsitutions from the string.\n  \n  Example:\n    &gt; say escapex(Hey, Sneak a peak at Wiz's desc... [get($1/desc)],\\[\\])\n    You say &quot;\\Hey \\,Sneak a peek at Wiz's desc... [get\\(#1/desc\\)]&quot;\n  \n  See Also: escape(), secure(), securex(), esclist(), unesclist()\n  \n</PRE>\n<A HREF=\"#escape()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#esclist()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"esclist()\"><H3>ESCLIST()</H3></A><PRE>\n  Function: esclist(&lt;list of characters to escape&gt;|&lt;string&gt;)\n  \n  This function takes an optional list of characters you wish to escape and\n  then escapes them (via adding a \\ character before it) to every character\n  that you specified.  This is intended to be used with weird escape \n  situations like calling external sources.\n  \n  Examples:\n    &gt; @va me=Test: 'A string' and &quot;anoter string&quot;, I say.\n    Set.\n    &gt; say esclist('&quot;,|[v(va)])\n    You say &quot;Test: \\'A string\\' and \\&quot;anoter string\\&quot;\\, I say.&quot;\n    &gt; say esclist('|[v(va)])\n    You say &quot;Test: \\'A string\\' and &quot;anoter string&quot;, I say.&quot;\n  \n  See Also: escape(), escapex(), unesclist(), esclist(), unesclist()\n  \n</PRE>\n<A HREF=\"#escapex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#eval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"eval()\"><H3>EVAL()</H3></A><PRE>\n  Function: eval(&lt;string&gt;)\n            eval(&lt;object&gt;,&lt;attribute&gt;)\n  \n  The first form of this function will evaluate the passed string.  All \n  substitutions are evaluated and functions called with proper permissions.\n  \n  The second form of this function works similiar to the get_eval() function.\n  \n  Examples:\n    &gt; say eval(1 plus 1 equals [add(1,1)])\n    You say &quot;1 plus 1 equals 2&quot;\n    &gt; @va me=1+1=[add(1,1)]\n    Set.\n    &gt; say eval(me,va)\n    You say &quot;1+1=2&quot;\n  \n  See Also: s(), get_eval(), get(), u(), u2(), zfun()\n  \n</PRE>\n<A HREF=\"#esclist()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#examine\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"examine\"><H3>examine</H3></A><PRE>\n  Command: examine[/&lt;switches&gt;] &lt;object&gt;[/&lt;wild-attrib&gt;]\n  \n  Displays all available information about &lt;object&gt;.  &lt;object&gt; may be an\n  object, 'me' or 'here'. You must control the object to examine it, or it\n  must be set VISUAL.  If you do not own the object, you will just see the\n  name of the object's owner, and optionally any public attributes and \n  attributes owned by you set on the object.\n \n  If an attribute is owned by a player other than the owner of the object,\n  the number of the attribute owner is shown in parentheses immediately\n  following the attribute name.  Flag letters may appear in parentheses also,\n  to indicate the status of the attribute.  The list of flag letters that\n  show up is shown in 'help examine2'\n  \n{ 'help examine2' for more }\n  \n</PRE>\n<A HREF=\"#eval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#examine2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"examine2\"><H3>examine2</H3></A><PRE>\n  The following flag letters show up with attributes when examined:\n    + - The attribute is locked, it does not change ownership when the\n        object is @chowned and may not be modified.\n    $ - The attribute is not checked when looking for $-commands.  Note\n        that the predefined attributes DESC, IDESC, ODESC, FAIL, OFAIL,\n        SUCC, OSUCC, DROP, ODROP, SEX, and CHARGES are never checked.\n    I - This attribute is not inherited by children of the object.\n    V - The attribute is visible to anyone who examines you.  Note that\n        the predefined attributes DESC, SEX, and LAST are always VISUAL.\n    N - The attribute will not be @cloned.\n    n - The attribute will not evaluate %0-%9 ($commands only)\n    s - The attribute can not be removed/wiped.\n    u - The attribute is set up to handle attribute-based uselocks.\n    M - The attribute is dark/inaccessable to anyone below wizard.\n    p - The attribute is INVISIBLE but accessable to anyone below wizard.\n    G - The attribute is modifiable by #1 only.\n    i - The attribute is modifiable by Immortal or higher only.\n    W - The attribute is modifiable by Wizard (Royalty) or higher only.\n    a - The attribute is modifiable by Councilor (admin) or higher only.\n    B - The attribute is modifiable by Architect or higher only.\n    g - The attribute is modifiable by Guildmaster or higher only.\n  \n{ 'help examine3' for more }\n  \n</PRE>\n<A HREF=\"#examine\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#examine3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"examine3\"><H3>examine3</H3></A><PRE>\n  If expanded looks are enabled (@list options to verify), you may also\n  see global attributes on attributes.  These are surrounded by []'s.\n  The following global attributes can exist:\n    + - The attribute is locked, it does not change ownership when the\n        object is @chowned and may not be modified.\n    $ - The attribute is not checked when looking for $-commands.  Note\n        that the predefined attributes DESC, IDESC, ODESC, FAIL, OFAIL,\n        SUCC, OSUCC, DROP, ODROP, SEX, and CHARGES are never checked.\n    I - This attribute is not inherited by children of the object.\n    V - The attribute is visible to anyone who examines you.  Note that\n        the predefined attributes DESC, SEX, and LAST are always VISUAL.\n    N - The attribute will not be @cloned.\n    n - The attribute will not evaluate %0-%9 ($commands only)\n    s - The attribute can not be removed/wiped.\n    u - The attribute is set up to handle attribute-based uselocks.\n    M - The attribute is dark/inaccessable to anyone below wizard.\n    p - The attribute is INVISIBLE but accessable to anyone below wizard.\n    G - The attribute is modifiable by #1 only.\n    i - The attribute is modifiable by Immortal or higher only.\n    W - The attribute is modifiable by Wizard (Royalty) or higher only.\n    a - The attribute is modifiable by Councilor (admin) or higher only.\n    B - The attribute is modifiable by Architect or higher only.\n    g - The attribute is modifiable by Guildmaster or higher only.\n  \n{ 'help examine4' for more }\n</PRE>\n<A HREF=\"#examine2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#examine4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"examine4\"><H3>examine4</H3></A><PRE>\n  If you specify a wildcarded attribute name, then only those attributes\n  that match are shown.  So, 'exam me/v?' will show all your attributes that\n  start with v and are two characters long.\n \n  The following switches are available:\n     /brief  - Show everything but the attributes.\n     /quick  - When examining an object you don't control, show only the\n               owner's name. \n     /full   - When examining an object you don't control, show any public\n               attributes set on the object in addition to the owner's name.\n     /parent - Includes attributes that are not present on the object itself\n               but which are inherited from the object's parent.  This only\n               works if you have permission to see it.\n     /tree   - Examine per Penn-Tree output separating trees with '`'.\n               Only useful with using #obj/attr format.\n     /regexp - Use regular expression for wildcard matches.\n  \n  See Also: look, @decompile, VISUAL, ATTRIBUTE OWNERSHIP, FLAG LIST,\n            ATTRIBUTE FLAGs\n  \n  \n</PRE>\n<A HREF=\"#examine3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#exit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"exit()\"><H3>EXIT()</H3></A><PRE>\n  Function: exit(&lt;object&gt;)\n \n  Exit returns the first exit on the list of exits in the object.  Dark exits\n  are not listed, unless you own the object.  Unlike LEXITS(), this function\n  does not provide information about exits in parent objects.\n  \n  Example:\n    &gt; say exit(here)\n    You say &quot;#123&quot;\n   \n  See Also: con(), lcon(), lexits(), next()\n  \n</PRE>\n<A HREF=\"#examine4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#exits\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"exits\"><H3>EXITS</H3></A><PRE>\n  Topic: EXITS (E)\n \n  An exit links one location to another location, providing a way to travel\n  on the MUSH.  Although normally used to link rooms together, exits can be\n  made to and from players and objects.\n \n  You may pick up exits that you own, and drop exits into locations that\n  you own.  When you pick up or drop an exit, anyone in the exit's new\n  location may use the exit and travel to its destination.\n \n  If an exit is set DARK it will not show up in the list of obvious exits in\n  a room.\n  \n  See Also: @link, @open\n  \n</PRE>\n<A HREF=\"#exit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#exp()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"exp()\"><H3>EXP()</H3></A><PRE>\n  Function: exp(&lt;power&gt;)\n \n  Returns the result of raising the numeric constant e to &lt;power&gt;.\n  &lt;power&gt; may be a floating point number, and a floating point result\n  is returned.\n \n  Examples: \n    &gt; say exp(0)\n    You say &quot;1&quot;\n    &gt; say exp(1)\n    You say &quot;2.718282&quot;\n    &gt; say exp(2)\n    You say &quot;7.389056&quot;\n  \n  See Also: e(), log(), ln(), power(), power10()\n  \n</PRE>\n<A HREF=\"#exits\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#extansi toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"extansi toggle\"><H3>EXTANSI TOGGLE</H3></A><PRE>\n  Toggle: EXTANSI\n  \n  When this toggle is set on the target, that target is allowed to use\n  extended ansi (ie: the actual ansi codes) in the @ansiname attribute,\n  thereby, allowing multi-color names.  This is done through the command\n  '@extansi' in combination with this toggle.  \n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Note: The name of the item in '@extansi' MUST match the name that \n        was given by @name.\n  \n  See Also: @extansi, ansi()\n  \n</PRE>\n<A HREF=\"#exp()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#extract()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"extract()\"><H3>EXTRACT()</H3></A><PRE>\n  Function: extract(&lt;string&gt;, &lt;first&gt;, &lt;length&gt;[, &lt;delim&gt;])\n \n  Extract returns a string of length words, starting with the first \n  word. Unlike letters, the first word in a string is number 1, \n  instead of 0.\n \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n  \n  Examples:\n    &gt; say extract(This is a really neat example, 4, 2)\n    You say &quot;really neat&quot;\n    &gt; say extract(Another@funky@test@for@extract, 3, 3, @)\n    You say &quot;test@for@extract&quot; \n  \n  See Also: extractword(), index(), insert(), ldelete(), replace(), \n            randextract()\n  \n</PRE>\n<A HREF=\"#extansi toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#extractword()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"extractword()\"><H3>EXTRACTWORD()</H3></A><PRE>\n  Function: extractword(&lt;string&gt;, &lt;first&gt;, &lt;length&gt;[, &lt;delim&gt;], &lt;sep&gt;] ,&lt;del&gt;])\n  \n  Extractword returns a string of length words, starting with the first\n  word.  This works effectively like extract(), however, the deliminiter \n  &lt;delim&gt; and seperator &lt;sep&gt; can be multi-character.  In addition, the\n  seperator may also contain ansi or special characters.\n  \n  If you specify the &lt;del&gt; toggle to '1' it assumes delextract() compatibility\n  where the words choosen are all the words EXCEPT the range specified.\n   \n  Unlike extract(), extractword() is also ansi-aware.\n  \n  The default &lt;delim&gt; is a space.  The default &lt;sep&gt; is whatever &lt;delim&gt;\n  is defined as.\n  \n  Examples:\n    &gt; say extractword(This is a really neat example, 4, 2)\n    You say &quot;really neat&quot;\n    &gt; say extractword(a@@@multi@@@char@@@delimiter, 2, 2, @@@)\n    You say &quot;multi@@@char&quot;\n    &gt; say extractword(a@@@multi@@@char@@@delimiter, 2, 2, @@@,%b)\n    You say &quot;multi char&quot;\n  \n  See Also: extract(), extractword(), index(), insert(), ldelete(), replace(),\n            randextract() \n  \n</PRE>\n<A HREF=\"#extract()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#failure\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"failure\"><H3>FAILURE</H3></A><PRE>\n  Topic: FAILURE  \n \n  You fail to use a player or a thing when you cannot take it (because it's\n  lock fails).  You fail to use an exit when you cannot go through it\n  (because it is unlinked or locked). You fail to use a room when you fail\n  to look around (because it's locked).\n  \n  See Also: get, look, @afail, @fail, @lock, @ofail\n  \n</PRE>\n<A HREF=\"#extractword()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fbetween()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fbetween()\"><H3>FBETWEEN()</H3></A><PRE>\n  Function: fbetween(&lt;value1&gt;,&lt;value2&gt;,&lt;number&gt;[,&lt;boolean&gt;])\n  \n  This function will return TRUE (1) if &lt;number&gt; is between\n  the values &lt;value1&gt; and &lt;value2&gt;.  If you specify the \n  optional boolean '1', it will see if the &lt;number&gt; is \n  between OR the values &lt;value1&gt; and &lt;value2&gt;.  This works\n  like between() but handles floating point numbers.  This\n  will round the values to the nearest significant 6th digit.\n  \n  Example:\n    &gt; say fbetween(10.01,15.01,14.5)\n    You say &quot;1&quot;\n    &gt; say fbetween(10.5,15.20,15.20)\n    You say &quot;0&quot;\n    &gt; say fbetween(10.5,15.20,15.20,1)\n    You say &quot;1&quot;\n  \n  See Also: between(), fbound(), bound(), gt(), lt(), gte(), lte()\n\n</PRE>\n<A HREF=\"#failure\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fbound()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fbound()\"><H3>FBOUND()</H3></A><PRE>\n  Function: fbound(&lt;number&gt;,&lt;min-value&gt;[,&lt;max-value&gt;])\n  \n  This function will return &lt;number&gt; if greater than min-value, else it will \n  return min-value.  If max-value exists, and number is greater than max-value\n  then max-value is used.  This works like bound() but takes floating point\n  values.  All floating point values are rounded to the 6th digit.\n  \n  Example:\n    &gt; say fbound(8.1,12.1)\n    You say &quot;12.1&quot;\n    &gt; say fbound(8.1,12.1,10.1)\n    You say &quot;10.1&quot;\n  \n  See Also: between(), fbetween(), bound(), gt(), lt(), gte(), lte()\n  \n</PRE>\n<A HREF=\"#fbetween()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fdiv()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fdiv()\"><H3>FDIV()</H3></A><PRE>\n  Function: fdiv(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN&gt;]...)\n   \n  Returns the floating point quotient from dividing &lt;number1&gt; by &lt;number2&gt;.\n  \n  Numbers may be floating point numbers, and a floating point result is\n  returned.\n   \n  Results:\n    &gt; say fdiv(15,3)\n    You say &quot;5&quot;\n    &gt; say fdiv(16,3)\n    You say &quot;5.333333&quot;\n    &gt; say fdiv(17,3)\n    You say &quot;5.666667&quot;\n    &gt; say fdiv(18,3)\n    You say &quot;6&quot;\n    &gt; say fdiv(-17,3)\n    You say &quot;-5.666667&quot;\n    &gt; say fdiv(10,3.5)\n    You say &quot;2.857143&quot;\n  \n  See Also: add(), div(), mod(), mul(), round(), sub(), trunc()\n \n</PRE>\n<A HREF=\"#fbound()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#filter()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"filter()\"><H3>filter()</H3></A><PRE>\n  Function: filter([&lt;obj&gt;/]&lt;attr&gt;,&lt;list&gt;[,&lt;delim&gt;[,&lt;sep&gt;][,&lt;arg1&gt;,...,&lt;argN&gt;]])\n  \n  This function evaluates the contents of &lt;attr&gt; for each element of &lt;list&gt;,\n  passing it in as %0.  A &lt;delimiter&gt;-separated list is returned of those\n  elements for which the evaluation returns the value 1.  You may specify an\n  optional output seperator.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than space.\n  \n  You may specify 26 arguments to pass as %1 (or v(1)) though v(25) or may\n  utilize the shift() function.\n  \n  Examples:\n    &gt; &amp;IS_ODD object=mod(%0,2)\n    &gt; say filter(object/is_odd,1 2 3 4 5)\n    You say &quot;1 3 5&quot;\n    &gt; say filter(object/is_odd,1@2@3@4@5,@)\n    You say &quot;1@3@5&quot;\n    &gt; say filter(object/is_odd,1@2@3@4@5,@,|)\n    You say &quot;1|3|5&quot;\n  \n  See Also: u(), map(), fold(), citer(), nsiter(), munge(), list(), sortlist()\n  \n</PRE>\n<A HREF=\"#fdiv()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#findable()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"findable()\"><H3>findable()</H3></A><PRE>\n  Function: findable(&lt;object&gt;,&lt;victim&gt;)\n   \n  This function returns 1 if &lt;object&gt; can locate &lt;victim&gt;, or 0, if\n  it cannot. This function takes into account all permissions and\n  locational limitations.\n  \n  Example:\n    &gt; say findable(me,me)\n    You say &quot;1&quot;\n   \n  See Also: loc(), where(), visible(), sees()\n  \n</PRE>\n<A HREF=\"#filter()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#first()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"first()\"><H3>FIRST()</H3></A><PRE>\n  Function: first(&lt;string&gt;[, &lt;delim&gt; [, &lt;key&gt;]])\n \n  Returns the first word of a string, that is, everything to the left\n  of the first space in the string, or the entire string if there are\n  no spaces in the string.\n  \n  &lt;delim&gt; may be used to specify a word delimiter other than a space.\n  \n  &lt;key&gt; may be specified as '1' to allow first() to be ansi-aware.\n \n  Example:\n    &gt; say first(This is a test)\n    You say &quot;This&quot;\n    &gt; say first(Would you like coffee\\, or perhaps tea)\n    You say &quot;Would&quot;\n    &gt; say first(List&amp;with&amp;nonstandard&amp;delimiters,&amp;)\n    You say &quot;List&quot;\n  \n  See Also: rest(), before(), after(), extract(), extractword()\n  \n</PRE>\n<A HREF=\"#findable()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#firstof()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"firstof()\"><H3>FIRSTOF()</H3></A><PRE>\n  Function: ofparse(&lt;type&gt;, [&lt;eval1&gt; [,&lt;eval2&gt; ... &lt;evalN or delim&gt;]])\n\n  Type 1&amp;3: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 2&amp;4: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Type 5&amp;7: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 6&amp;8: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  \n  This function will take each &lt;eval&gt; and returns it based on the &lt;type&gt;.\n  \n  The following types exist:\n    1  -- Issue a firstof().  Essentially return the first &lt;eval&gt; that is\n          a true boolean.  This stops evaluation on first true &lt;eval&gt;.\n          The &lt;default&gt; is returned if no evals are met.  The &lt;default&gt;\n          is the assumed argument if only passed a single argument.\n    2  -- Issue an allof().  Essentially returning every &lt;eval&gt; that is\n          a true boolean.  This evaluates every argument.\n    3  -- This is the reverse of '1'.  It returns the first &lt;eval&gt; that\n          is a false boolean.  IT stops evaluation on first false &lt;eval&gt;.\n          This again assumes &lt;default&gt; if no other arguments.\n    4  -- This is the reverse of '2'.  It returns every false &lt;eval&gt;\n          boolean. This evaluates every argument.\n    5  -- Issue a strfirstof().  Essentially returns the first &lt;eval&gt; that\n          is a non-null string.  This stops evaluation on first non-null\n          &lt;eval&gt;.\n    6  -- Issues a strallof().  Essentially returns every &lt;eval&gt; that is\n          a non-null string.  This evaluates everyu argument.\n    7  -- This is the reverse of '5'.  It essentially will either return\n          a null or the default value.\n    8  -- This is the reverse of '6'.  It essentially will return\n          a list of nulls if you have such in your list.  This evaluates\n          every argument.\n  \n  For PennMUSH function lineup:\n      firstof(x,y)    == ofparse(1,x,y)\n      allof(x,y,z)    == ofparse(2,x,y,z)\n      strfirstof(x,y) == ofparse(5,x,y)\n      strallof(x,y,z) == ofparse(6,x,y,z)\n  \n{ see 'help ofparse2' for examples }\n\n</PRE>\n<A HREF=\"#first()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#flag aliases\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"flag aliases\"><H3>FLAG ALIASES</H3></A><PRE>\n  Topic: FLAG ALIASES\n  \n  The following flags have aliases to be compatible with either earlier \n  versions of RhostMUSH or with other codebases.\n  \n     NO_SPOOF     - NOSPOOF                  NO_COMMAND   - NOCOMMAND\n     NO_FLASH     - NOFLASH                  NO_SPOOF     - NOSPOOF         \n     NO_UNDERLINE - NOUNDERLINE              \n     \n</PRE>\n<A HREF=\"#firstof()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#flag list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"flag list\"><H3>FLAG LIST</H3></A><PRE>\n  Topic: FLAG LIST\n \n  Flag  Title        Flag  Title           Flag  Title        Flag  Title\n  -------------------------------------------------------------------------\n    A - ABODE          L - LINK_OK           X - FREE           m - MYOPIC\n    B - ARCHITECT      M - MONITOR           Y - PARENT_OK      n - AUDIBLE\n    C - CHOWN_OK       N - NO_SPOOF          a - COUNCILOR      o - NO_TEL\n    D - DARK           O - OPAQUE            b - CLOAK          p - PUPPET\n    E - EXIT           P - PLAYER            c - CONNECTED      r - ROBOT\n    F - FLOATING       Q - QUIET             d - DESTROY_OK     s - SAFE \n    G - GOING          R - ROOM              e - ENTER_OK       t - TERSE      \n    H - HAVEN          S - STICKY            f - FUBAR          v - VERBOSE\n    I - INHERIT        T - TRACE/TRANSPARENT g - GUILDMASTER    w - NO_WALLS\n    J - JUMP_OK        U - UNFINDABLE        h - HALTED         x - SLAVE   \n    K - KEY            V - VISUAL            i - IMMORTAL       y - NO_YELL    \n    ~ - INDESTRUCTIBLE W - ROYALTY           l - LIGHT          z - CONTROL_OK\n    = - BYEROOM        &lt; - ANSI              &gt; - ANSICOLOR      \n    - - NO_FLASH\n  \n  See Also: flag list2, attribute flags\n  \n  For information on a particular flag, type 'help &lt;flagname&gt;'.\n  If you do not receive the expected result, try: 'help &lt;flagname&gt; flag'\n  \n</PRE>\n<A HREF=\"#flag aliases\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#flag list2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"flag list2\"><H3>FLAG LIST2</H3></A><PRE>\n  Topic: FLAG LIST2\n   \n  This is a list of flags in the secondary flags field, they are surrounded\n  by []'s when you look at them.\n   \n    D - DOORED         a - AUDITORIUM     s - SIDEFX\n    I - IC             c - NO_COMMAND     y - ZONEPARENT  \n    P - PRIVATE        f - SHOWFAILCMD    z - ZONECONTENTS\n    T - TELOK          g - BLIND          t - XTERMCOLOR\n    X - COMBAT         o - BOUNCE\n    Z - ZONEMASTER     u - NO_UNDERLINE\n  \n    0 - MARKER0        1 - MARKER1        2 - MARKER2        3 - MARKER3\n    4 - MARKER4        5 - MARKER5        6 - MARKER6        7 - MARKER7\n    8 - MARKER8        9 - MARKER9        $ - COMMANDS\n  \n  See Also: flag list, attribute flags, flag aliases\n  \n  For information on a particular flag, type 'help &lt;flagname&gt;'.\n  If you do not receive the expected result, try: 'help &lt;flagname&gt; flag'\n  \n</PRE>\n<A HREF=\"#flag list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#flags\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"flags\"><H3>FLAGS</H3></A><PRE>\n  Topic: FLAGS\n \n  Everything in the universe of this MUSH (Rooms, Exits, Things, Players,\n  etc) are represented in the same way at the program level.  A room merely\n  has the room flag set and a player has the player flag set.  In addition,\n  flags also give objects abilities or qualities.  For instance, a wizard\n  has the wizard flag set.  That is what lets the program know he may use\n  wizard abilities.  An object or room may have the dark flag set. In the\n  case of an object, this makes the object invisible to normal eye-sight.\n  In the case of a room, the room becomes too dark to see other objects or\n  players.  To get a list of the flags that are available, type '@list flags'\n  or 'help flag list'. For more specific information on a particular flag,\n  request help on the flag's name, as in 'help ENTER_OK'.\n  \n  See Also: FLAG LIST\n  \n</PRE>\n<A HREF=\"#flag list2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#flags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"flags()\"><H3>FLAGS()</H3></A><PRE>\n  Function: flags(&lt;object&gt;[/&lt;attribute&gt;])\n \n  Flags returns a string consisting of the flags attached to the \n  object. The string is, however, just one word.  Note that @switch\n  is case-INsensitive.  i.e. p=P as far as it is concerned.  I wish\n  that P=NP....\n  \n  You may also do wildcard flags() matches on attributes.  It will\n  only return the first match it finds.  To see what the flag \n  letters are for the attribute flags, see 'help ATTRIBUTE FLAGS'.\n  \n  Example:\n    &gt; say flags(me)\n    You say &quot;Pc&quot;\n    &gt; say flags(me/desc)\n    You say &quot;p&quot;\n    &gt; say flags(me/asdfadsfasdfaf)\n    You say &quot;&quot;\n  \n  See Also: lflags(), hasflag()\n  \n</PRE>\n<A HREF=\"#flags\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#flip()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"flip()\"><H3>FLIP()</H3></A><PRE>\n  Function: flip(&lt;string&gt;)\n \n  Reverses the order of the characters of &lt;string&gt;.\n \n  Examples:\n    &gt; say flip(This is a test)\n    You say &quot;tset a si sihT&quot;\n    &gt; say flip(This is a test, Really...)\n    You say &quot;...yllaeR ,tset a si sihT&quot;\n    &gt; say flip(A man, a plan, a canal -- Panama!)\n    You say &quot;!amanaP -- lanac a ,nalp a ,nam A&quot;\n  \n  See Also: revwords()\n  \n</PRE>\n<A HREF=\"#flags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#floating\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"floating\"><H3>FLOATING</H3></A><PRE>\n  Flag: FLOATING(F) \n  \n  If a room is set floating, you will not be notified every 10 \n  minutes or so that you have a disconnected room.\n  \n  If the player is set FLOATING, then they will receive no floating \n  messages.\n \n  If master-room exits are set FLOATING, then they will not be displayed\n  in the global exit lists on rooms you enter.\n   \n  See Also: NOTIFY_LINK\n  \n</PRE>\n<A HREF=\"#flip()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#floor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"floor()\"><H3>FLOOR()</H3></A><PRE>\n  Function: floor(&lt;number&gt;)\n \n  Returns the largest integer less than or equal to &lt;number&gt;.  &lt;number&gt; may be\n  a floating point number, and an integer result is returned.\n \n  Examples:\n    &gt; say floor(5)\n    You say &quot;5&quot;\n    &gt; say floor(5.2)\n    You say &quot;5&quot;\n    &gt; say floor(5.8)\n    You say &quot;5&quot;\n    &gt; say floor(-5)\n    You say &quot;-5&quot;\n    &gt; say floor(-5.2)\n    You say &quot;-6&quot;\n   \n  See Also: ceil(), div(), mod(), round(), trunc()\n  \n</PRE>\n<A HREF=\"#floating\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#floordiv()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"floordiv()\"><H3>FLOORDIV()</H3></A><PRE>\n  Function: floordiv(&lt;number1&gt;,&lt;number2&gt;)\n   \n  Returns the integer quotient from dividing &lt;number1&gt; by &lt;number2&gt;.\n   \n  However, integer division for the case where either &lt;integer1&gt; or\n  &lt;integer2&gt; is negative is defined in a specific way -- by choosing\n  the largest integer that is less than or equal to the algebraic\n  quotient. If &lt;integer1&gt; and &lt;integer2&gt; are the same sign, then\n  idiv() and floordiv() are equivalent.\n   \n  For example, division of -9 by 5 would give -2 by this definition\n  instead of -1. idiv() would return -1. floordiv() would return -2.\n  The floordiv() function goes with the mod() function.\n   \n  floordiv(x,y)*y + mod(x,y) ==&gt; x\n   \n  Examples:\n    &gt; say floordiv(17,3)\n    You say &quot;5&quot;\n    &gt; say floordiv(18,3)\n    You say &quot;6&quot;\n    &gt; say floordiv(-17,3)\n    You say &quot;-6&quot;\n   \n  See Also: fdiv(), div(), mul(), sub(), mod()\n  \n</PRE>\n<A HREF=\"#floor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fmod()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fmod()\"><H3>FMOD()</H3></A><PRE>\n  Function: fmod(&lt;double1&gt;,&lt;double2&gt;[,&lt;doubleN&gt;]...)\n   \n  Returns the floating remainder from dividing &lt;double1&gt; by &lt;double2&gt;.\n  This works just like mod(), except it takes floating point numbers\n  instead of integers.\n  \n  You may specify more than two values.\n   \n  Example:\n    &gt; say fmod(15.1,3.1)\n    You say &quot;2.7&quot;\n    &gt; say fmod(16.1,3.1)\n    You say &quot;0.6&quot;\n    &gt; say fmod(17.1,3.1)\n    You say &quot;1.6&quot;\n    &gt; say fmod(18.1,3.1)\n    You say &quot;2.6&quot;\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc(), mod()\n  \n</PRE>\n<A HREF=\"#floordiv()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fold()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fold()\"><H3>fold()</H3></A><PRE>\n  Function: fold([&lt;obj&gt;/]&lt;attr&gt;, &lt;list&gt;[, &lt;base-case&gt;[, &lt;delim&gt;])\n  \n  This function iteratively processes a list through a function, feeding\n  the result of one step into the next step as %0, passing in the next element\n  from the list as %1.\n  \n  If a base case is provided, it is used as the initial %0.  If not, the first\n  list element is passed as %0 and the second is passed as %1, and subsequent\n  iterations proceed normally.\n  \n  &lt;delimiter&gt; may be used to specify a delimiter other than space, but you\n  must specify a base case in order to specify the delimiter.\n \n  Examples:\n    &gt; &amp;REP_NUM object=[%0][repeat(%1,%1)]\n    &gt; say fold(object/rep_num,1 2 3 4 5,-&gt;)\n    You say &quot;-&gt;122333444455555&quot;\n    &gt; &amp;ADD_NUMS object=add(%0,%1)\n    &gt; say fold(object/add_nums,1 2 3 4 5)\n    You say &quot;15&quot;\n  \n  See Also: u(), iter(), map(), filter(), citer(), nsiter(), list()\n  \n</PRE>\n<A HREF=\"#fmod()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder\"><H3>folder</H3></A><PRE>\n  The folder command allows you to work with mail folders.  For further\n  information on mail, see 'help mail'.  For general information about mail\n  folders, see 'help mail folders'.\n   \n  The folder command takes various switches to perform the various folder\n  sub-commands, as in: \n     folder/create\n   \n  To get help on a particular folder sub-command, enter:\n     help folder &lt;sub-command&gt;\n  \n  To get a list of all commands and a short syntax and description, enter:\n     help folder cmdlist\n  \n  where &lt;sub-command&gt; is one of the following sub-commands:\n     change     cshare     current     create     delete     list      move   \n     rename     share      cmdlist\n  \n</PRE>\n<A HREF=\"#fold()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder change\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder change\"><H3>folder change</H3></A><PRE>\n  Command: folder/change [&lt;folder&gt;]\n  \n  Change the current folder to &lt;folder&gt;.  If no folder is specified, your\n  current folder is reset to nothing.\n \n  Examples:\n    &gt; folder/change urgent\n    &gt; folder/change\n  \n  See Also: folder list\n  \n</PRE>\n<A HREF=\"#folder\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder cmdlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder cmdlist\"><H3>folder cmdlist</H3></A><PRE>\n  Topic: folder quick-reference help\n  \n  folder/change [&lt;folder&gt;]          - Either resets your folder (if \n                                      nothing specified) or will change to\n                                      the specified folder.\n  folder/cshare                     - Will display current folders shared.\n  folder/current                    - Will display your current folder.\n  folder/create [&lt;folder&gt;]          - Will create a user-named folder.  The\n                                      folder name has to be alphanumeric.\n  folder/delete [&lt;folder&gt;]          - Will delete the given folder.\n  folder/list                       - Will list all of your current folders.\n  folder/move &lt;arg&gt;=&lt;from&gt;,&lt;to&gt;     - Will move the specified mail into the\n                                      target folder from the specified folder.\n  folder/rename &lt;folder&gt;=&lt;newname&gt;  - Will rename the folder to the new name.\n  folder/share [&lt;folder&gt;]           - Will share a given folder to the people\n                                      matched in your mail/share.\n  \n  See Also: folder\n  \n</PRE>\n<A HREF=\"#folder change\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder create\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder create\"><H3>folder create</H3></A><PRE>\n  Command: folder/create &lt;folder name&gt;\n  \n  Create a folder with &lt;folder name&gt; as the name.  Folder names may be up\n  to 20 characters and may not have spaces in them.  Folder names must\n  be alphanumeric.\n   \n  Example:\n    &gt; folder/create loveletters\n  \n  See Also: folder list, folder share\n  \n</PRE>\n<A HREF=\"#folder cmdlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder cshare\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder cshare\"><H3>folder cshare</H3></A><PRE>\n  Command: folder/cshare\n  \n  This command will check your share folder(s).  Any folders you have marked\n  for sharing will be displayed.\n \n  See Also: folder share\n  \n</PRE>\n<A HREF=\"#folder create\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder current\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder current\"><H3>folder current</H3></A><PRE>\n  Command: folder/current\n  \n  This command reports your current folder.\n  \n  See Also: folder list, folder cshare\n  \n</PRE>\n<A HREF=\"#folder cshare\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder delete\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder delete\"><H3>folder delete</H3></A><PRE>\n  Command: folder/delete &lt;folder name&gt;\n  \n  This will delete &lt;folder name&gt;.  You may only delete empty folders.\n   \n  Example:\n    &gt; folder/delete love-letters\n</PRE>\n<A HREF=\"#folder current\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder list\"><H3>folder list</H3></A><PRE>\n  Command: folder/list\n  \n  List all your folders.\n  \n  See Also: folder share, folder cshare\n  \n</PRE>\n<A HREF=\"#folder delete\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder move\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder move\"><H3>folder move</H3></A><PRE>\n  Command: folder/move all=&lt;from&gt;,&lt;to&gt;\n           folder/move &lt;# list&gt;=&lt;from&gt;,&lt;to&gt;\n           folder/move &lt;dbref#&gt;=&lt;from&gt;,&lt;to&gt;\n           folder/move &lt;player&gt;=&lt;from&gt;,&lt;to&gt;\n   \n  You may move all or specified messages from one folder to another. 'all'\n  indicates to move all messages. &lt;# list&gt; refers to a list of message numbers\n  separated by spaces (or just one message number). &lt;player&gt; refers to \n  the player name of someone who sent you mail. &lt;dbref#&gt; refers to the dbref #\n  of someone who sent you mail. &lt;from&gt; indicates the source folder name, while\n  &lt;to&gt; indicates the destination folder name.  Only message numbers may be\n  listed (not players, etc.), and you may not combine the different types\n  (e.g. message numbers and a player).\n   \n  Examples:\n    &gt; folder/move all=tinypal,allfriends\n    &gt; folder/move 5=incoming,important\n    &gt; folder/move wizard=incoming,urgent\n    &gt; folder/move 2 4=urgent,completed\n    &gt; folder/move #12345=mystery,solved\n  \n  See Also: folder share, mail mark, mail save, folder list\n  \n</PRE>\n<A HREF=\"#folder list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder rename\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder rename\"><H3>folder rename</H3></A><PRE>\n  Command: folder/rename &lt;original name&gt;=&lt;new name&gt;\n  \n  Rename a folder from &lt;original name&gt; to &lt;new name&gt;.\n   \n  Example:\n    &gt; folder/rename love-letters=personal\n  \n  See Also: folder list\n  \n</PRE>\n<A HREF=\"#folder move\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folder share\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folder share\"><H3>folder share</H3></A><PRE>\n  Command: folder/share [&lt;folder&gt;]\n  \n  This command is only of use in conjunction with the mail/share command. If\n  you have enabled others to check your mail with the mail/share command, those\n  people who pass the share lock can only check the folder specified in the\n  folder/share command.  If you have mail/share set, but no share folder\n  set, anyone passing the mail/share can do a mail/number or mail/check on\n  any of your folders.  If you do not specify a folder on the folder/share\n  command, the share folder will be reset.\n   \n  Examples:\n    &gt; folder/share jokes\n    &gt; folder/share\n  \n  See Also: mail share, mail number, mail check, folder list\n \n</PRE>\n<A HREF=\"#folder rename\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#foldercurrent()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"foldercurrent()\"><H3>FOLDERCURRENT()</H3></A><PRE>\n  Function: foldercurrent(&lt;player&gt; [,&lt;type&gt;])\n  \n  This function lists the current folder of the target.  The following\n  types exist.\n     0 - this lists their current folder (default)\n     1 - this lists their current share folder.\n  \n  See Also: folder, folderlist()\n\n</PRE>\n<A HREF=\"#folder share\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#folderlist()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"folderlist()\"><H3>FOLDERLIST()</H3></A><PRE>\n  Function: folderlist(&lt;player&gt;)\n  \n  Returns all the folders that the target player has. \n  You must control target to see their folder list.\n  \n  See Also: folder, foldercurrent()\n\n</PRE>\n<A HREF=\"#foldercurrent()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#foreach()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"foreach()\"><H3>FOREACH()</H3></A><PRE>\n  Function: foreach([&lt;object&gt;/]&lt;attribute&gt;,&lt;string&gt;[,&lt;begin&gt;, &lt;end&gt;])\n   \n  Each character in &lt;string&gt; has the user-defined function of the first\n  argument performed on it; the character is passed to the function as\n  %0. The position of the argument is passed as %1.  The results are \n  concatenated. If &lt;begin&gt; and &lt;end&gt; are specified, only the characters \n  between &lt;begin&gt; and &lt;end&gt; are parsed, other characters are concatenated \n  as they are. This allows a rudimentary form of tokens and speeds up \n  the evaluation greatly if tokenizing is your purpose.\n   \n  Examples:\n    &gt; &amp;add_one me=[add(%0,1)]\n    Set.\n    &gt; say [foreach(add_one, 54321)]\n    You say, &quot;65432&quot;\n    &gt; &amp;add_one me=[add(%0,1)]\n    Set.\n    &gt; say [foreach(add_one, This adds #0# to numbers in this string,#,#)]\n    You say, &quot;This adds 1 to numbers in this string.&quot;\n    \n  See Also: @dolist, iter(), map(), citer(), nsiter(), list()\n  \n</PRE>\n<A HREF=\"#folderlist()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#free\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"free\"><H3>FREE</H3></A><PRE>\n  Flag: FREE(X)\n \n  If set on an object, that object doesn't use up the owner's money (but\n  can still give the owner's money away).\n \n  If set on a player, that player has infinite money (unless they try to\n  give money away, in which case they have normal money rules). This flag\n  is settable only by Councilors and above.\n  \n  This flag works like IMMORTAL does on vanilla mushes but gives better\n  monetary control.\n  \n  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, ROYALTY, IMMORTAL \n  \n</PRE>\n<A HREF=\"#foreach()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fubar\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fubar\"><H3>FUBAR</H3></A><PRE>\n  Flag: FUBAR(f)  \n  \n  This flag when set permits the user to only pose and say.\n  The user is incapable of doing anything else including QUIT.  Yet\n  another consequence of annoying the wizards.  Settable by ROYALTY and\n  SUPER-ROYALTY only.\n  \n  See Also: SLAVE\n  \n</PRE>\n<A HREF=\"#free\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#fullname()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"fullname()\"><H3>FULLNAME()</H3></A><PRE>\n  Function: fullname(&lt;dbref&gt;)\n  \n  This function returns the full name of the indicated object.  This is the\n  same as name() in all cases except when &lt;dbref&gt; is an exit, then all the\n  aliases are returned as well.\n  \n  Example:\n    &gt; look\n    A Room(#1234R)\n    You see a room.\n    Obvious exits:\n    An Exit &lt;AE&gt;\n    &gt; say exit(here)\n    You say &quot;#123&quot;\n    &gt; say name(#123)\n    You say &quot;An Exit &lt;AE&gt;&quot;\n    &gt; say fullname(#123)\n    You say &quot;An Exit &lt;AE&gt;;ae;an exit;exit&quot;\n  \n  See Also: name(), @alias, @name, cname()\n  \n</PRE>\n<A HREF=\"#fubar\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function aliases\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function aliases\"><H3>FUNCTION ALIASES</H3></A><PRE>\n  The following aliases exist for the following functions.  This is done\n  to help with portibility from MUSH to MUSH.  The following aliases\n  exist:\n  \n FLIP() ----&gt; reverse()  DIE() -------&gt; dice()      IF() ---------&gt; ifelse()\n MATCHALL() &gt; totmatch() LPARENT() ---&gt; parents()   NONZERO() ----&gt; ifelse()\n STRTRUNC() &gt; left()     SOUNDSLIKE() &gt; soundlike() FILTERBOOL() -&gt; filter()\n SUBEVAL() -&gt; eval()     GREPI() -----&gt; grep()      LANDBOOL() ---&gt; land()\n ZONE() ----&gt; lzone()    ELEMENT() ---&gt; elements()  LORBOOL() ----&gt; lor()\n LNORBOOL() &gt; lnor()     ANDBOOL() ---&gt; and()       ORBOOL() -----&gt; or()\n NOTBOOL() -&gt; not()      XORBOOL() ---&gt; xor()       LOOP() -------&gt; parse()\n MEAN()    -&gt; avg()      ENUMERATE() -&gt; elist()     MOD() --------&gt; remainder()\n LMATH()   -&gt; strfunc()\n  \n  To see the help on the aliased function, please check the help of the \n  function that it aliases.\n   \n  See Also: FUNCTION LIST\n  \n</PRE>\n<A HREF=\"#fullname()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes\"><H3>FUNCTION CLASSES</H3></A><PRE>\n  Topic: FUNCTION CLASSES\n   \n  Ansi:                 ANSI() STRIPANSI() COLORS()\n              See Also: help ansi functions\n  \n  Arithmetic:           ABS() ADD() AVG() BETWEEN() BOUND() DEC() DICE()\n                        DIV() EE() FBETWEEN() FBOUND() FDIV() FLOORDIV() INC()\n                        MOD() MODULO() MUL() NCOMP() RAND() REMAINDER() \n                        SIGN() STRMATH() SUB() XDEC() XINC() \n              See Also: help arithmetic functions\n  \n  Database Information: CON() CREATETIME() ENTRANCES() EXIT() FOLDERCURRENT()\n                        FOLDERLIST() GLOBALROOM() LOC() LOCATE() LROOMS() \n                        MAILQUICK() MODIFYTIME() NEARBY() NEXT() NUM() OWNER()\n                        RLOC() ROOM() SEARCH() SEARCHNG() SEES() STATS() \n                        WHERE() LISTCOMMANDS() LISTFLAGS() LISTFUNCTIONS() \n                        LISTNEWSGROUPS() LISTTOGGLES() PMATCH() RNUM() VALID()\n                        XCON()\n              See Also: help database information functions\n  \n  Numerical Conversion: CEIL() CRC32() DIGEST() FLOOR() PACK() ROMAN() ROUND()\n                        SPELLNUM() TOBIN() TODEC() TOHEX() TOOCT() TRUNC() \n                        UNPACK()\n              See Also: help numerical conversion functions\n  \n  { 'help function classes2' for more }    \n  \n</PRE>\n<A HREF=\"#function aliases\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes2\"><H3>FUNCTION CLASSES2</H3></A><PRE>\n  Topic: FUNCTION CLASSES &lt;continued&gt;\n  \n  Game Information:   CONFIG() MUDNAME() REBOOTSECS() REBOOTTIME() \n                      STARTSECS() STARTTIME() VERSION()\n            See Also: help game information functions\n  \n  Lists:              AINDEX() AIINDEX() ANDFLAG() ANDFLAGS() CITER() \n                      DELEXTRACT() ELEMENTS() ELEMENTSMUX() ELIST() EXTRACT()\n                      EXTRACTWORD() FILTER() FIRST() FLAGS() FOLD() FOREACH()\n                      IBREAK() IINDEX() ILEV() INDEX() INSERT() INUM() ITER()\n                      ITEXT() KEEPFLAGS() KEEPTYPE() LADD() LAND() LAST() \n                      LAVG() LDELETE() LDIV() LISTDIFF() LISTINTER() \n                      LISTMATCH() LISTUNION() LMAX() LMIN() LMUL() LNOR()\n                      LNUM() LNUM2() LOR() LRAND() LREPLACE() LSUB() LXNOR() \n                      LXOR() MAP() MATCH() MEMBER() MIX() MUNGE() NSITER() \n                      NUMMATCH() NUMMEMBER() NUMWILDMATCH() PARSE() RANDMATCH()\n                      RANDEXTRACT() REMFLAGS() REMOVE() REMTYPE() REST() \n                      REVERSE() REVWORDS() RINDEX() SAFEBUFF() SETDIFF() \n                      SETINTER() SETUNION() SORT() SORTBY() SORTLIST() STEP() \n                      STRFUNC() STRMATH() TOTMATCH() TOTMEMBER() TOTWILDMATCH()\n                      WHILE() WILDMATCH()\n            See Also: help list functions\n  \n  Logarithms:         E() EXP() LN() LOG() PI() POWER() POWER10() SHL() SHR()\n                      SQRT()\n            See Also: help logarithmic functions\n  \n  { 'help function classes3' for more }\n  \n</PRE>\n<A HREF=\"#function classes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes3\"><H3>FUNCTION CLASSES3</H3></A><PRE>\n  Topic: FUNCTION CLASSES &lt;continued&gt;\n  \n  Logical:            AND() MASK() NAND() NOR() OR() XOR() XNOR() CAND() COR()\n            See Also: help logical functions\n  \n  Miscellaneous:      ASC() CHR() CNAME() ERROR() LOCKCHECK() LOCKDECODE()\n                      LOCKENCODE() LOCALIZE() MOON() NAMEQ() NULL() \n                      PARENMATCH() PID() PRIVATIZE() PUSHREGS() R() \n                      SETQ() SETQ_OLD() SETQMATCH() SETR() SETR_OLD() \n                      SOUNDEX() SOUNDLIKE() TRACE()\n            See Also: help miscellaneous functions\n  \n  Object Information: APOSS() ART() ATTRCNT() CNAME() CONTROLS() DEFAULT() \n                      EDEFAULT() ELOCK() FULLNAME() GET() GET_EVAL() \n                      GRAB() GRABALL() GREP() GUILD() HASATTR() HASATTRP() \n                      HASFLAG() HASTOGGLE() HASTYPE() HOME() LASTCREATE() \n                      LATTR() LCMDS() LCON() LEXITS() LFLAGS() LOCK() \n                      LTOGGLES() LZONE() NAME() OBJ() OBJEVAL() ORFLAG() \n                      ORFLAGS() PARENT() PGREP() POSS() RACE() SHIFT() SUBJ() \n                      TYPE() U() U2() UDEFAULT() UDEFAULT2() UEVAL() \n                      ULDEFAULT() U2LDEFAULT() ULOCAL() ULOCAL2() V() \n                      VATTRCNT() VISIBLE() VISIBLEMUX() WRITABLE() XGET()\n            See Also: help object information functions\n  \n  { 'help function classes4' for more }\n  \n</PRE>\n<A HREF=\"#function classes2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes4\"><H3>FUNCTION CLASSES4</H3></A><PRE>\n  Topic: FUNCTION CLASSES &lt;continued&gt;\n                             \n  Player Information:  BITTYPE() CHARIN() CHAROUT() CMDS() CONN() HASQUOTA() \n                       IDLE() INPROGRAM() ISHIDDEN() LISTPROTECTION() LWHO() \n                       MONEY() MONEYNAME() PORT() PROGRAMMER() QUOTA() \n                       TOTCMDS()\n             See Also: help player information functions\n  \n  Reality Levels:      CHKREALITY() HASRXLEVEL() HASTXLEVEL() LISTRLEVELS() \n                       RXLEVEL() TXLEVEL()\n             See Also: help reality level functions  \n  \n  Relational:          ALPHAMAX() ALPHAMIN() MAX() MIN() EQ() GT() GTE() LT()\n                       LTE() NEQ() NOT() \n             See Also: help relational functions\n  \n  Regular Expression:  REGEDIT() REGEDITI() REGEDITALL() REGEDITALLI() \n                       REGMATCH() REGMATCHI() REGLMATCH() REGLMATCHI() \n                       REGLMATCHALL() REGLMATCHALLI() REGRAB() REGRABI() \n                       REGRABALL() REGRABALLI() REGREP() REGREPI() RESWITCH() \n                       RESWITCHI() RESWITCHALL() RESWITCHALLI()\n             See Also: help regular expression functions\n  \n  { 'help function classes5' for more }\n  \n</PRE>\n<A HREF=\"#function classes3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes5\"><H3>FUNCTION CLASSES5</H3></A><PRE>\n  Topic: FUNCTION CLASSES &lt;continued&gt;\n  \n  Strings:             ACCENT() AFTER() ANDCHR() BEFORE() BRACKETS() CAPSTR() \n                       CASE() CASEALL() CAT() CENTER() CHOMP() COLUMNS() \n                       COMP() CREPLACE() DECODE64() DECRYPT() DELETE() EDIT() \n                       EDITANSI() ELEMENTPOS() ENCODE64() ENCRYPT() ESCAPE() \n                       ESCAPEX() ESCLIST() EVAL() GARBLE() IFELSE() ISALNUM() \n                       ISALPHA() ISDBREF() ISDIGIT() ISNUM() ISPUNCT() \n                       ISSPACE() ISWORD() ISXDIGIT() LCSTR() LEFT() LIT() LJC()\n                       LJUST() MERGE() MID() NOSTR() NOTCHR() NUMPOS() ORCHR() \n                       PARSESTR() PEDIT() POS() PRINTF() RANDPOS() REPEAT() \n                       REPLACE() RIGHT() RJC() RJUST() ROTL() ROTR() S() \n                       SCRAMBLE() SECURE() SECUREX() SHL() SHR() SHUFFLE() \n                       SPACE() SPLICE() SQUISH() STR() STRDISTANCE() STREQ() \n                       STREVAL() STRIP() STRIPACCENTS() STRLEN() STRMATCH() \n                       SUBNETMATCH() SWITCH() SWITCHALL() T() TOTPOS() TR() \n                       TRANSLATE() TRIM() UCSTR() UNESCLIST() WORDPOS() \n                       WORDS() WRAP() WRAPCOLUMNS() XORCHR()\n             See Also: help string functions\n  \n  Time:                CONVSECS() CONVTIME() PTIMEFMT() SECS() SINGLETIME()\n                       TIME() TIMEFMT()\n             See Also: help time functions  \n  \n  { 'help function classes6' for more }\n  \n</PRE>\n<A HREF=\"#function classes4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes6\"><H3>FUNCTION CLASSES6</H3></A><PRE>\n  Topic: FUNCTION CLASSES &lt;continued&gt;\n  \n  Trigonometry:        ACOS() ASIN() ATAN() ATAN2() COS() CTU() DIST2D() \n                       DIST3D() SIN() TAN() VADD() VCROSS() VDIM() VDOT() \n                       VMAG() VMUL() VSUB() VUNIT()\n             See Also: help trigonometry functions  \n    \n  Aliased functions:   FLIP() FOREACH() ITEMS() MATCHALL() SQUISH() LPARENT() \n                       DIE()     \n             See Also: help aliased functions  \n  \n  Side-Effects:        CLONE() CREATE() DESTROY() DIG() EMIT() LEMIT() LINK() \n                       LIST() LOCK() NAME() NAMEQ() NPEMIT() OEMIT() OPEN() \n                       PARENT() PEMIT() R() REMIT() RSET() RXLEVEL() SET() \n                       SETQ() SETQ_OLD() SETR() SETR_OLD() TEL() TOGGLE() \n                       TXLEVEL() WIPE() ZEMIT()\n             See Also: help side effect functions  \n  \n  Dbase Side-Effects:  SQLITE_QUERY()\n             See Also: help side effect functions  \n  \n  { 'help function classes7' for more }\n  \n</PRE>\n<A HREF=\"#function classes5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function classes7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function classes7\"><H3>FUNCTION CLASSES7</H3></A><PRE>\n  Topic: FUNCTION CLASSES &lt;continued&gt;\n  \n  Zone Functions:     INZONE() ZFUN() ZFUN2() ZFUNDEFAULT() ZFUN2DEFAULT() \n                      ZFUNEVAL() ZFUNLDEFAULT() ZFUNL2DEFAULT() ZFUNLOCAL() \n                      ZFUN2LOCAL() ZWHO()\n            See Also: help zone functions\n  \n  Cluster Functions:  CLUSTER_ADD() CLUSTER_ATTRCNT() CLUSTER_DEFAULT() \n                      CLUSTER_EDEFAULT() CLUSTER_FLAGS() CLUSTER_GET() \n                      CLUSTER_GET_EVAL() CLUSTER_GREP() CLUSTER_HASATTR() \n                      CLUSTER_HASFLAG() CLUSTER_LATTR() CLUSTER_REGREP() \n                      CLUSTER_REGREPI() CLUSTER_SET() CLUSTER_STATS() \n                      CLUSTER_U() CLUSTER_U2() CLUSTER_U2DEFAULT() \n                      CLUSTER_U2LDEFAULT() CLUSTER_U2LOCAL() CLUSTER_UDEFAULT()\n                      CLUSTER_UEVAL() CLUSTER_ULDEFAULT() CLUSTER_ULOCAL() \n                      CLUSTER_VATTRCNT() CLUSTER_WIPE(), CLUSTER_XGET(), \n                      ISCLUSTER()\n            See Also: help cluster functions\n\n  See Also: FLAG LIST\n  \n</PRE>\n<A HREF=\"#function classes6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function list\"><H3>FUNCTION LIST</H3></A><PRE>\n  Topic: FUNCTION LIST\n \n  Help is available for the following functions:\n \n @@()               ABS()               ACCENT()             ACOS()        \n ADD()              AFTER()             AINDEX()             AIINDEX()         \n ALPHAMAX()         ALPHAMIN()          AND()                ANDCHR()        \n ANDFLAG()          ANDFLAGS()          ANSI()               APOSS()     \n ARRAY()            ART()               ASC()                ASIN()           \n ATAN()             ATAN2()             ATTRCNT()            AVG()            \n BEFORE()           BETWEEN()           BITTYPE()            BOUND()          \n BRACKETS()         CAND()              CAPSTR()             CASE()           \n CASEALL()          CAT()               CEIL()               CENTER()         \n CHARIN()           CHAROUT()           CHKREALITY()         CHKTRACE()       \n CHOMP()            CHR()               CITER()              CLONE()          \n CLUSTER_ADD()      CLUSTER_ATTRCNT()   CLUSTER_DEFAULT()    CLUSTER_EDEFAULT()\n CLUSTER_FLAGS()    CLUSTER_GET()       CLUSTER_GET_EVAL()   CLUSTER_GREP()   \n CLUSTER_HASATTR()  CLUSTER_HASFLAG()   CLUSTER_LATTR()      CLUSTER_REGREP() \n CLUSTER_REGREPI()  CLUSTER_SET()       CLUSTER_STATS()      CLUSTER_U()      \n CLUSTER_U2()       CLUSTER_U2DEFAULT() CLUSTER_U2LDEFAULT() CLUSTER_U2LOCAL()\n CLUSTER_UDEFAULT() CLUSTER_UEVAL()     CLUSTER_ULDEFAULT()  CLUSTER_ULOCAL() \n CLUSTER_VATTRCNT() CLUSTER_WIPE()      CLUSTER_XGET()       CMDS()           \n CNAME()            COLORS()            COLUMNS()            COMP()           \n CON()              CONFIG()            CONN()               CONTROLS()       \n CONVSECS()    \n  \n{ 'help function list2' for more }\n  \n</PRE>\n<A HREF=\"#function classes7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function list2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function list2\"><H3>FUNCTION LIST2</H3></A><PRE>\n\n  CONVTIME()      COR()          COS()         CRC32()         CREATE() \n  CREATETIME()    CREPLACE()     CTU()         DEC()           DECODE64()\n  DECRYPT()       DEFAULT()      DELETE()      DELEXTRACT()    DESTROY()     \n  DICE()          DIG()          DIGEST()      DIST2D()        DIST3D()      \n  DIV()           E()            EDEFAULT()    EDIT()          EDITANSI() \n  EE()            ELIST()        ELEMENTPOS()  ELEMENTS()      ELEMENTSMUX()\n  ELOCK()         EMIT()         ENCODE64()    ENCRYPT()       ENTRANCES() \n  EQ()            ERROR()        ESCAPE()      ESCAPEX()       ESCLIST()   \n  EVAL()          EXIT()         EXP()         EXTRACT()       EXTRACTWORD()\n  FBETWEEN()      FBOUND()       FDIV()        FILTER()        FINDABLE()  \n  FIRST()         FLAGS()        FLOOR()       FLOORDIV()      FOLD()      \n  FOLDERCURRENT() FOLDERLIST()   FOREACH()     FULLNAME()      GARBLE()    \n  GET()           GET_EVAL()     GLOBALROOM()  GRAB()          GRABALL()   \n  GREP()          GT()           GTE()         GUILD()         HASATTR()   \n  HASATTRP()      HASFLAG()      HASTOGGLE()   HASTYPE()       HASQUOTA()  \n  HASRXLEVEL()    HASTXLEVEL()   HOME()        IBREAK()        IDLE()      \n  IFELSE()        IINDEX()       ILEV()        INC()           INDEX()     \n  INPROGRAM()     INSERT()       INUM()        INZONE()        ISALNUM()   \n  ISALPHA()       ISCLUSTER()    ISDBREF()     ISDIGIT()       ISHIDDEN()  \n  ISNUM()         ISPUNCT()      ISSPACE()     ISWORD()        ISXDIGIT()  \n  ITER()          ITEXT()        KEEPFLAGS()   KEEPTYPE()      LADD()      \n  LAND()          LAST()         LASTCREATE()  LATTR()         LAVG()      \n  LCMDS()         LCON()         LCSTR()       LDELETE()       LDIV()      \n  LEMIT()         LEFT()         LEXITS()      LFLAGS()        LINK()      \n  LIST()          LISTCOMMANDS() LISTDIFF()    LISTFUNCTIONS() \n  \n{ 'help function list3' for more }\n  \n</PRE>\n<A HREF=\"#function list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function list3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function list3\"><H3>FUNCTION LIST3</H3></A><PRE>\n    \n  LISTFLAGS()   LISTINTER()    LISTMATCH()    LISTNEWSGROUPS() LISTPROTECTION()\n  LISTRLEVELS() LISTTOGGLES()  LISTUNION()    LIT()            LJC()          \n  LJUST()       LLOC()         LMAX()         LMIN()           LMUL()         \n  LN()          LNOR()         LNUM()         LNUM2()          LOC()          \n  LOCALFUNC()   LOCALIZE()     LOCATE()       LOCK()           LOCKCHECK()\n  LOCKDECODE()  LOCKENCODE()   LOG()          LOR()            LRAND()       \n  LREPLACE()    LROOMS()       LSUB()         LT()             LTE()         \n  LTOGGLES()    LWHO()         LXNOR()        LXOR()           LZONE()       \n  MAILQUICK()   MAP()          MATCH()        MASK()           MAX()         \n  MEMBER()      MERGE()        MID()          MIN()            MIX()         \n  MOD()         MODULO()       MODIFYTIME()   MONEY()          MONEYNAME()   \n  MOON()        MUDNAME()      MUL()          MUNGE()          MWORDS()\n  NAME()        NAMEQ()        NAND()         NCOMP()          NEARBY()       \n  NEQ()         NEXT()         NOR()          NOSTR()          NOT()          \n  NOTCHR()      NPEMIT()       NSITER()       NUM()            NUMMATCH()     \n  NULL()        NUMMEMBER()    NUMPOS()       NUMWILDMATCH()   OBJ()          \n  OBJEVAL()     OEMIT()        OPEN()         OR()             ORCHR()        \n  ORFLAG()      ORFLAGS()      OWNER()        PACK()           PARENMATCH()   \n  PARENT()      PARSE()        PARSESTR()     PEDIT()          PEMIT()        \n  PFIND()       PGREP()        PI()           PID()            PMATCH()       \n  PORT()        POS()          POSS()         POWER()          POWER10()      \n  PRINTF()      PRIVATIZE()    PROGRAMMER()   PTIMEFMT()       PUSHREGS()     \n  QUOTA()       R()            RACE()         RAND()           RANDPOS()      \n  RANDMATCH()   RANDEXTRACT() \n    \n{ 'help function list4' for more }\n \n</PRE>\n<A HREF=\"#function list2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function list4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function list4\"><H3>FUNCTION LIST4</H3></A><PRE>\n  \n  REBOOTSECS()    REBOOTTIME()    REGEDIT()      REGEDITI()     REGEDITALL()\n  REGEDITALLI()   REGMATCH()      REGMATCHI()    REGLMATCH()    REGLMATCHI()\n  REGLMATCHALL()  REGLMATCHALLI() REGRAB()       REGRABI()      REGREP()      \n  REGREPI()       RESWITCH()      RESWITCHI()    RESWITCHALL()  RESWITCHALLI()\n  REMAINDER()     REMIT()         REMFLAGS()     REMOVE()       REMTYPE()     \n  REPEAT()        REPLACE()       REST()         REVERSE()      REVWORDS()    \n  RIGHT()         RINDEX()        RJC()          RJUST()        RLOC()        \n  RNUM()          ROMAN()         ROOM()         ROTL()         ROTR()        \n  ROUND()         RSET()          RXLEVEL()      S()            SAFEBUFF()    \n  SCRAMBLE()      SEARCH()        SEARCHNG()     SECS()         SECURE()      \n  SECUREX()       SEES()          SET()          SETDIFF()      SETINTER()     \n  SETQ()          SETQ_OLD()      SETQMATCH()    SETR()         SETR_OLD()    \n  SETUNION()      SHIFT()         SHL()          SHR()          SHUFFLE()     \n  SIGN()          SIN()           SINGLETIME()   SORT()         SORTBY()      \n  SORTLIST()      SOUNDEX()       SOUNDLIKE()    SOUNDSLIKE()   SPACE()      \n  SPELLNUM()      SPLICE()        SQL()          SQLESCAPE()    SQLOFF()\n  SQLON()         SQLPING()       SQLITE_QUERY() SQRT()         SQUISH()     \n  STARTTIME()     STARTSECS()     STATS()        STEP()         STR()        \n  STRCAT()        STRDISTANCE()   STREQ()        STREVAL()      STRFUNC()    \n  STRIP()         STRIPACCENTS()  STRIPANSI()    STRLEN()       STRMATCH()   \n  STRMATH()       SUB()           SUBJ()         SUBNETMATCH()  SWITCH()     \n  SWITCHALL()     T()             TAN()          TEL()          TIME()       \n  TIMEFMT()       TOBIN()         TODEC()        TOGGLE()       TOHEX()      \n  TOOCT()         TOTCMDS()       TOTMATCH()     TOTMEMBER()    TOTPOS()     \n  TOTWILDMATCH()  TR()            TRACE()        TRANSLATE() \n\n{ 'help function list5' for more }\n\n</PRE>\n<A HREF=\"#function list3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function list5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function list5\"><H3>FUNCTION LIST5</H3></A><PRE>\n  \n  TRIM()         TRUNC()       TXLEVEL()       TYPE()          U() \n  U2()           UCSTR()       UDEFAULT()      UDEFAULT2()     UEVAL()\n  ULDEFAULT()    U2LDEFAULT()  ULOCAL()        ULOCAL2()       UNESCLIST()\n  UNPACK()       V()           VADD()          VALID()         VATTRCNT()   \n  VCROSS()       VDIM()        VDOT()          VERSION()       VISIBLE()    \n  VISIBLEMUX()   VMAG()        VMUL()          VSUB()          VUNIT()      \n  WHERE()        WHILE()       WILDMATCH()     WIPE()          WORDPOS()    \n  WORDS()        WRAP()        WRAPCOLUMNS()   WRITABLE()      XCON()       \n  XDEC()         XINC()        XGET()          XNOR()          XOR()        \n  XORCHR()       ZEMIT()       ZFUN()          ZFUN2()         ZFUNDEFAULT()\n  ZFUN2DEFAULT() ZFUNEVAL()    ZFUNLDEFAULT()  ZFUNL2DEFAULT() ZFUNLOCAL()  \n  ZFUN2LOCAL()   ZWHO() \n  \n{ 'help function aliases' for aliases on existing functions }\n  \n</PRE>\n<A HREF=\"#function list4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#function types\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"function types\"><H3>FUNCTION TYPES</H3></A><PRE>\n  Topic: FUNCTION TYPES\n  \n  The following sub-classes of functions list each catagory of functions\n  with a short description of each function in each given class.\n  \n  ansi functions                            arithmetic functions\n  database information functions            game information functions\n  list functions                            logarithmic functions\n  logical functions                         miscellaneous functions\n  numerical conversion functions            object information functions\n  player information functions              reality level functions\n  relational functions                      side effect functions\n  string functions                          time functions\n  trigonometry functions                    zone functions\n  regular expression functions              functions utilizing regexp\n  \n  \n  In addition:   You may specify 'function classes' to see each class.\n                 You may specify 'function list' for quick listings.\n\n\n</PRE>\n<A HREF=\"#function list5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"functions\"><H3>FUNCTIONS</H3></A><PRE>\n  Topic: FUNCTIONS\n   \n  Functions are specialized commands used to manipulate strings and other\n  input. The format for a function is of this form: [fun-name(&lt;input&gt;)]\n  Although usually the []'s indicate an input that is optional, in this case\n  they are necessary and tell the MUSH that this is a function, although\n  nested functions (like [first(rest(This is a nice day))] returns 'is') do\n  not require more than one pair of []'s.  Nested brackets may be used when\n  it is necessary to insert a function call in the middle of an argument,\n  like [get(me/[get(me/vz)])], which returns the contents of the attribute\n  named in the VZ attribute.\n   \n  For help on a particular function, type 'help &lt;functionname&gt;'.  You may\n  need to include the parentheses with the function name, IE.\n  'help &lt;functionname&gt;()'.  \n  \n  'help function list' or '@list functions'  - quick list available functions\n  'help function class'                      - listing of functions in classes\n  'help function type'                       - sub-types of each function\n   \n  See Also: @list functions, FUNCTION CLASSES, FUNCTION LIST, FUNCTION TYPES\n  \n</PRE>\n<A HREF=\"#function types\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#game information functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"game information functions\"><H3>game information functions</H3></A><PRE>\n  Function Lists: Game Information Functions\n    \n  config()      - Returns a list of config parameters, or a parameter value.\n  mudname()     - Returns the name of the game, as specified in config.\n  version()     - Returns version and build information.\n  \n  rebootsecs()  - Returns the unix seconds the MUSH was last restarted.\n  reboottime()  - Returns the time string of when the MUSH was rebooted.\n  startsecs()   - Returns the unix seconds at which the MUSH was started.\n  starttime()   - Returns the time string of when the MUSH was started.\n\n</PRE>\n<A HREF=\"#functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#garble()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"garble()\"><H3>GARBLE()</H3></A><PRE>\n  Function: garble(&lt;str&gt;,&lt;value&gt;[[,&lt;sep&gt;][,&lt;fill&gt;][,&lt;type&gt;][,&lt;key&gt;][,&lt;eval&gt;]])\n  \n  This function garbles the input from &lt;str&gt; and returns it garbled.  Each word\n  has a 1 in &lt;value&gt; chance of being garbled.  Normal garbled strings have a \n  random character assigned unless you specify the filler character.  You may \n  specify a seperator other than space.  If you specify the &lt;type&gt; of '1', it \n  assumes the value is a percentile instead of fractional.  A &lt;value&gt; '0' with\n  &lt;type&gt; '0' (1/0) returns nothing while &lt;type&gt; '1' (0%) returns the string.\n  The key field allows the following bitwise values:\n        1 - don't garble punctuation. (',!.?')\n        2 - don't garble spaces.\n        3 - (1 &amp; 2) - don't garble punctuation or spaces.\n        4 - takes 'eval' and parses it for each word in &lt;str&gt; (passed as %0)\n        5-8 (same as 1-4 but return character count instead of word itself)\n  \n  Note: If you plan to &lt;eval&gt;, you need to escape out (or use lit()) on the\n        argument as it passes the evaluated argument into the value.\n   \n  Examples:\n    &gt; say garble(this is a test!?,2)\n    You say &quot;this Z&amp; a ^pN0w)&quot;\n    &gt; say garble(this@is@a@test!?,2,@)\n    You say &quot;7u(9 is a %uNbn$&quot;\n    &gt; say garble(this is a test!?,2,,-) (1 out of 2)\n    You say &quot;this is a ------&quot;\n    &gt; say garble(this is a test!?,50,,-,1) (50 percent)\n    You say &quot;---- is a ------&quot;\n    &gt; say garble(this is a test!?,50,,-,1,1) (50 percent, no garble punct.)\n    You say &quot;---- is a ----!?&quot;\n  \n  See Also: strip(), edit(), editansi(), mask(), regedit()\n  \n</PRE>\n<A HREF=\"#game information functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#gender\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"gender\"><H3>GENDER</H3></A><PRE>\n  Topic: GENDER\n \n  A player's (virtual) gender is specified in the Sex attribute.  This\n  attribute controls how gender-specific pronoun substitutions are evaluated\n  for the player.  If the player's Sex attribute starts with an 'M' or an 'm'\n  then the player is assumed to be male,  'F', 'f', 'W', and 'w' indicate\n  female, and anything else indicates neuter.\n  \n  See Also: SUBSTITUTIONS\n  \n</PRE>\n<A HREF=\"#garble()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#get\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"get\"><H3>get</H3></A><PRE>\n  Command: get[/&lt;switch&gt;] &lt;object&gt;\n           get[/&lt;switch&gt;] &lt;exit&gt;\n           get[/&lt;switch&gt;] &lt;object&gt;'s &lt;sub-object&gt;\n  \n  The first form picks up &lt;object&gt; from your location and adds it to your\n  inventory.  It will fail if the object is locked against you, or if you\n  are inside a player or object that you don't control and which isn't\n  set ENTER_OK.\n \n  The second form takes an exit from your location and adds it to you.\n  Anyone inside you may then use the exit to travel to the exit's destination.\n  You may take exits that you own, and exits owned by others in locations that\n  you own.\n \n  The third form takes &lt;sub-object&gt; from &lt;object&gt; and adds it to your\n  inventory.  &lt;object&gt; must be ENTER_OK and &lt;sub-object&gt; must not be locked\n  against you for this to work.  The lock on &lt;object&gt; is not checked.\n  \n{ 'help get2' for more }\n  \n</PRE>\n<A HREF=\"#gender\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#get()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"get()\"><H3>GET()</H3></A><PRE>\n  Function: get(&lt;object&gt;/&lt;attribute&gt;)\n \n  The get function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on &lt;object&gt;, its parent is searched for the attribute.\n \n  Example:\n    &gt; read me\n    &gt; say get(me/desc)\n  \n  See Also: get_eval(), u(), xget()\n  \n</PRE>\n<A HREF=\"#get\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#get2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"get2\"><H3>get2</H3></A><PRE>\n  The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes\n                on the target object.  This switch only works if you control\n                the object.\n \n  &lt;object&gt; and &lt;sub-object&gt; may be either players or things.\n  'take' is the same as 'get'.\n  \n  See Also: drop, @afail, @asucc, @fail, @ofail, @osucc, @succ, ENTER_OK,\n            FAILURE, SUCCESS\n  \n</PRE>\n<A HREF=\"#get()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#get_eval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"get_eval()\"><H3>GET_EVAL()</H3></A><PRE>\n  Function: get_eval(&lt;object&gt;/&lt;attribute&gt;)\n \n  The get_eval function returns the specified attribute from the named object\n  (just like the get function), except that function references and\n  %-substitutions have already been performed.  In function references, \n  'me' refers to the object being looked at, and %-substitutions that refer\n  to the enactor (such as %n, %#, etc) refer to the object making the get_eval\n  call.  If the attribute is not present on &lt;object&gt;, its parent is searched\n  for the attribute.\n \n  Example:\n    &gt; @va test = This is a get_eval test on %n.  The vb is [get(me/vb)]\n    &gt; @vb test = VB from test\n    &gt; @vb me = VB from me\n    &gt; say get(test/va)\n    You say &quot;This is a get_eval test on %n. The vb is [get(me/vb)]&quot;\n    &gt; say get_eval(test/va)\n    You say &quot;This is a get_eval test on Foobar. The vb is VB from test&quot;\n  \n  See Also: get(), u()\n  \n</PRE>\n<A HREF=\"#get2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#give\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"give\"><H3>give</H3></A><PRE>\n  Command: give &lt;player&gt;=&lt;amount/object&gt;\n  Gives player the specified amount of money or &lt;object&gt;. You can't give\n  someone money if their new total would be greater than 10000 (No reason to\n  get greedy).  You may also give players objects, but the other player must\n  be set ENTER_OK to receive something you give. \n  \n  See Also: @apay, @cost, @opay, @pay, ENTER_OK\n  \n</PRE>\n<A HREF=\"#get_eval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#globalroom()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"globalroom()\"><H3>GLOBALROOM()</H3></A><PRE>\n  Function: globalroom()\n \n  Returns the dbnum of the global room to royalty and higher players.\n  \n  Example:\n    &gt; say globalroom()\n    You say &quot;#2&quot;\n \n</PRE>\n<A HREF=\"#give\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#goals\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"goals\"><H3>GOALS</H3></A><PRE>\n  Topic: GOALS\n \n  There is no ultimate goal to this game, except to have fun.  There are\n  objects and places to build, puzzles to solve, scenery to visit, and people\n  to meet. There are no winners or losers, only fellow players.  Enjoy.\n  \n</PRE>\n<A HREF=\"#globalroom()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#going\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"going\"><H3>GOING</H3></A><PRE>\n  Flag: GOING(G)  \n  \n  Used internally for the @destroy command, it is set on \n  anything that can be recycled. In the event that a player decides they \n  don't want to destroy the room after all then they can unset the BYEROOM\n  flag.  Due to server modifications, you would unset the BYEROOM\n  flag instead of the GOING flag to recover a room that has been\n  @destroyed.  See the help on BYEROOM for more.  If you destroyed something\n  you didn't intend, locate your nearest IMMORTAL (SUPER-ROYALTY) as soon\n  as you can.\n  \n  See Also: BYEROOM, @destroy\n  \n</PRE>\n<A HREF=\"#goals\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#goto\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"goto\"><H3>goto</H3></A><PRE>\n  Command: goto[/&lt;switch&gt;] &lt;direction&gt;\n           goto[/&lt;switch&gt;] home\n           &lt;direction&gt;\n           home\n \n  Moves you in the specified direction, assuming that the direction is not\n  locked against you.  'move home' is a special command that returns you to\n  your home. The word 'move' may be omitted.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc/@odrop/@adrop or @ofail/@afail\n                attributes on the exit being used.  This switch only works if\n                you control the exit.\n \n  'move' is the same as 'goto'.\n  \n  See Also: enter, home, leave, move()\n  \n</PRE>\n<A HREF=\"#going\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#grab\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"grab\"><H3>grab</H3></A><PRE>\n  Command: grab &lt;user&gt;\n  \n  The command will check your permissions over the target's location and\n  over your current location.  If you are found to have control over both\n  of those locations, and of the user itself, then the targeted user\n  will be brought to your location.\n  \n  See Also: join, @teleport  \n  \n</PRE>\n<A HREF=\"#goto\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#grab()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"grab()\"><H3>GRAB()</H3></A><PRE>\n  Function: grab(&lt;string&gt;, &lt;pattern&gt;[, &lt;delimeter&gt;])\n   \n  This function matches &lt;pattern&gt; against each word of &lt;string&gt;, returning\n  the first word it matches.  If no words are found to match the pattern,\n  then an empty string is returned.  &lt;pattern&gt; may consist of wildcards.\n  Wildcards being the use of '*' for any number of characters or '?' for\n  a single character.  An optional delimiter may be used.\n  \n  Examples:\n    &gt; grab(This is a test,*es*)\n    You say &quot;test&quot;\n    &gt; grab(players are cool.,*y*)\n    You say &quot;players&quot;\n    &gt; grab(this is@a test,*es*,@)\n    You say &quot;a test&quot;\n   \n  See Also: match(), member(), totmatch(), totmember(), grep(), graball()\n  \n</PRE>\n<A HREF=\"#grab\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#graball()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"graball()\"><H3>GRABALL()</H3></A><PRE>\n  Function: graball(&lt;string&gt;, &lt;pattern&gt;[, &lt;delimeter&gt;[, &lt;seperator&gt;]])\n   \n  This function matches &lt;pattern&gt; against each word of &lt;string&gt;, returning\n  the all the words it matches.  If no words are found to match the pattern,\n  then an empty string is returned.  &lt;pattern&gt; may consist of wildcards.\n  Wildcards being the use of '*' for any number of characters or '?' for\n  a single character.  An optional delimiter may be used as well as an\n  optional output seperator. \n  \n  Examples:\n    &gt; graball(This is a test,*es*)\n    You say &quot;test&quot;\n    &gt; graball(This is a test,*is*)\n    You say &quot;This is&quot;\n    &gt; graball(players are cool.,*y*)\n    You say &quot;players&quot;\n    &gt; graball(this is@a test,*es*,@)\n    You say &quot;a test&quot;\n    &gt; graball(this is@a test@2 test,*es*,|)\n    You say &quot;a test|2 test&quot;\n \n  See Also: match(), member(), totmatch(), totmember(), grep(), grab()\n  \n</PRE>\n<A HREF=\"#grab()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#grep()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"grep()\"><H3>GREP()</H3></A><PRE>\n  Function: grep(&lt;object&gt;, &lt;attribute(s)&gt;, &lt;pattern&gt; [,&lt;key&gt;])\n   \n  This returns a list of any matching attribute that matches the\n  &lt;attribute(s)&gt; that contain &lt;pattern&gt;.  The &lt;attribute&gt; may be wildcarded\n  with a '*' or a '?' for multiple character matches and single character\n  matches respectively.  In addition, the pattern may also be wildcarded.\n   \n  If &lt;key&gt; is specified as '1', it will no longer assume a wildcard match\n  unless explicitly given.\n   \n  Examples:\n    &gt; @va me=This is a test\n    &gt; @vb me=This is another test.\n    &gt; @vc me=Test Test Test whisooo!\n    &gt; say grep(me,v*,is)\n    You say &quot;VA VB VC&quot;\n    &gt; say grep(me,v*,is,1)\n    You say &quot;VA VB&quot;\n    &gt; say grep(me,v*,*is*)\n    You say &quot;VA VB VC&quot;\n    &gt; say grep(me,*,*)\n    You say &quot;VA VB VC&quot;\n    &gt; say grep(me,*,Bark?)\n    You say &quot;&quot;\n \n  See Also: pgrep(), regrep(), regrepi(), grab(), match(), lattr(), @grep\n  \n</PRE>\n<A HREF=\"#graball()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#gt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"gt()\"><H3>gt()</H3></A><PRE>\n  Function: gt(&lt;integer1&gt;,&lt;integer2&gt;)\n \n  Takes two integers, and returns 1 if and only if &lt;integer1&gt; is greater than\n  &lt;integer2&gt;, and 0 otherwise.  Warning: passing anything but integers will\n  produce unexpected results, as non-numeric strings usually are treated\n  as numeric 0.\n \n  Example:\n    &gt; say gt(4,5)\n    You say &quot;0&quot;\n    &gt; say gt(5,5)\n    You say &quot;0&quot;\n    &gt; say gt(6,5)\n    You say &quot;1&quot;\n    &gt; say gt(foo, bar)\n    You say &quot;0&quot;\n  \n  See Also: lt(), lte(), gte(), eq(), neq()\n  \n</PRE>\n<A HREF=\"#grep()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#gte()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"gte()\"><H3>gte()</H3></A><PRE>\n  Function: gte(&lt;integer1&gt;,&lt;integer2&gt;)\n \n  Takes two integers, and returns 1 if and only if &lt;integer1&gt; is greater than\n  or equal to &lt;integer2&gt;, and 0 otherwise.  Warning: passing anything but\n  integers will produce unexpected results, as non-numeric strings usually are\n  treated as numeric 0.\n \n  Example:\n    &gt; say gte(4,5)\n    You say &quot;0&quot;\n    &gt; say gte(5,5)\n    You say &quot;1&quot;\n    &gt; say gte(6,5)\n    You say &quot;1&quot;\n    &gt; say gte(foo, bar)\n    You say &quot;1&quot;\n  \n  See Also: lt(), lte(), gt(), eq(), neq()\n  \n</PRE>\n<A HREF=\"#gt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#guests\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"guests\"><H3>GUESTS</H3></A><PRE>\n  Guests are considered a temporary player bit on a mush.  They have severely\n  limited access and are essentially a look but do not touch type of player.\n  \n  As a guest, you can interact with the mush and the playerbase, but you can\n  not leave any lasting information into the game.  This includes, but is not\n  limited to sending mail, setting attributes, building of any type, altering\n  any data within the mush (except for global commands that the wizzes allow),\n  or setting/altering your player character in any way.\n  \n  If you wish to have a more flexible account, we recommend creating a player\n  then going through the methods on the mush to register your player or\n  whatever method they have for becoming a member player of that mush.\n  \n  Remember, guests CAN NOT MAIL.  This is something that will likely cause\n  confusion regardless of what game you are on.  This is also intentional.\n  \n</PRE>\n<A HREF=\"#gte()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#guild()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"guild()\"><H3>GUILD()</H3></A><PRE>\n  Function: guild(&lt;user&gt;)\n  \n  Returns the guild the given user currently has.  This works similar to\n  get(&lt;user&gt;/guild).\n  \n  Example:\n    &gt; say guild( me )\n    You say &quot;Citizen&quot;\n  \n  See Also: get(), u(), u2(), race()\n  \n</PRE>\n<A HREF=\"#guests\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#guildmaster\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"guildmaster\"><H3>GUILDMASTER</H3></A><PRE>\n  Flag: GUILDMASTER(g)   \n  \n  This flag, when set on a player, allows that player a \n  few extra permissions like @quota and examining other's objects.\n  This flag is settable only by ROYALTY and SUPER-ROYALTY.\n  \n  See Also: ARCHITECT, COUNCILOR, ROYALTY, IMMORTAL\n  \n</PRE>\n<A HREF=\"#guild()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#halted\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"halted\"><H3>HALTED</H3></A><PRE>\n  Flag: HALTED(h)  \n  \n  While this flag is set, the object cannot perform any mush \n  actions, listen, be triggered, etc.\n  \n  See Also: NOCOMMAND\n  \n</PRE>\n<A HREF=\"#guildmaster\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hasattr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hasattr()\"><H3>hasattr()</H3></A><PRE>\n  Function: hasattr(&lt;object&gt;/&lt;attribute name&gt;)\n            hasattr(&lt;object&gt;,&lt;attribute name&gt;)\n   \n  Returns 1 if the object has the named attribute, and 0 if it does\n  not. If the object does not exist or the player does not have the\n  ability to examine the object, #-1 will be returned.\n \n  Hasattr() doesn't check for attributes inherited from parent\n  objects. Use hasattrp() for that.\n  \n  Examples:\n    &gt; say hasattr(me/sex)\n    You say &quot;1&quot;\n    &gt; say hasattr(me/adsadf)\n    You say &quot;0&quot;\n    &gt; say hasattr(me,sex)\n    You say &quot;1&quot;\n  \n  See Also: hasattrp(), hasflag()\n  \n</PRE>\n<A HREF=\"#halted\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hasattrp()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hasattrp()\"><H3>hasattrp()</H3></A><PRE>\n  Function: hasattrp(&lt;object&gt;/&lt;attribute name&gt;)\n            hasattrp(&lt;object&gt;,&lt;attribute name&gt;)\n   \n  Returns 1 if any of it's parents has the named attribute,\n  and 0 if it does not. If the object does not exist or the player\n  does not have the ability to examine the object, #-1 will be returned.\n \n  Use hasattr() to check for attributes without checking parents.\n  If the config option hasattrp_compat is set, it will check the target\n  object for the attribute as well.\n  \n  Examples:\n    &gt; say hasattrp(me/desc)\n    You say &quot;1&quot;\n    &gt; say hasattrp(me,desc)\n    You say &quot;1&quot;\n  \n  See Also: hasattr(), hasflag()\n  \n</PRE>\n<A HREF=\"#hasattr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hasflag()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hasflag()\"><H3>hasflag()</H3></A><PRE>\n  Function: hasflag(&lt;object&gt;[/&lt;attribute&gt;],&lt;flag&gt;)\n  Returns true if object &lt;object&gt; has the flag named &lt;flag&gt; set on it.\n  You may not be able to retrieve information for objects that you do not\n  own.  You may also check if the given flag exists on the ATTRIBUTE.\n  For the TYPE of the item, (P, E, R), you need to use hastype().\n   \n  Example:\n    &gt; say hasflag(me, wizard)\n    You say &quot;0&quot;\n    &gt; say hasflag(me, connect) \n    You say &quot;1&quot;\n    &gt; say hasflag(me/desc, NOPROG)\n    You say &quot;1&quot;\n  \n  NOPROG is how the MUSH internally recognizes the NO_COMMAND flag.\n  Confusing, I know.  See 'help ATTRIBUTE FLAGS' on all of these flags.\n  \n  See Also: LIST FLAGS, ATTRIBUTE FLAGS, hastype()\n  \n</PRE>\n<A HREF=\"#hasattrp()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hasquota()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hasquota()\"><H3>hasquota()</H3></A><PRE>\n  Function: hasquota(&lt;player&gt;,&lt;amount&gt;[,&lt;type&gt;])\n  \n  The hasquota() function returns a TRUE(1) or a FALSE(0) depending if the\n  person has the specified amount &lt;amount&gt; of quota to actually be able to\n  make the specified type (default is THING).  The types are the same types\n  that the mush uses (THING (or object), PLAYER, EXIT, ROOM).  See help on\n  type() for more information on types.  The hasquota() function works with\n  both types of QUOTA systems.\n  \n  Example:\n    &gt; @quota me\n    Quota for BiffStandard       Quota: 40     Used: 35     Remaining: 5\n    &gt; say hasquota(me,3)\n    You say &quot;1&quot;\n    &gt; say hasquota(me,7)\n    You say &quot;0&quot;\n    &gt; say hasquota(me,4,thing)\n    You say &quot;1&quot;\n  \n  See Also: quota(), @quota\n  \n</PRE>\n<A HREF=\"#hasflag()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hasrxlevel()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hasrxlevel()\"><H3>HASRXLEVEL()</H3></A><PRE>\n  Function: hasrxlevel(&lt;target&gt;,&lt;level&gt;)\n  \n  Returns 1 if &lt;target&gt; has the specified Rx Level. You must control &lt;target&gt;.\n  If the level does not exist, or you do not control the target, it returns\n  a '#-1'.\n  \n  Example:\n    &gt; say hasrxlevel(me,real)\n    You say '1'.\n  \n  See Also: hastxlevel(), rxlevel(), txlevel(), listrlevels(), chkreality()\n  \n</PRE>\n<A HREF=\"#hasquota()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hastoggle()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hastoggle()\"><H3>HASTOGGLE()</H3></A><PRE>\n  Function: hastoggle(&lt;player&gt;,&lt;toggle&gt;)\n  \n  Example:\n    &gt; say hastoggle(player, brandy_mail)\n    You say &quot;1&quot;\n   \n  See Also: hasflag()\n  \n</PRE>\n<A HREF=\"#hasrxlevel()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hastxlevel()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hastxlevel()\"><H3>HASTXLEVEL()</H3></A><PRE>\n  Function: hastxlevel(&lt;target&gt;,&lt;level&gt;)\n  \n  Returns 1 if &lt;target&gt; has the specified Tx Level. You must control &lt;target&gt;.\n  If the level does not exist, or you do not control the target, it returns\n  a '#-1'.\n  \n  Example:\n    &gt; say hastxlevel(me,real)\n    You say '1'.\n  \n  See Also: hasrxlevel(), rxlevel(), txlevel(), listrlevels(), chkreality()\n  \n</PRE>\n<A HREF=\"#hastoggle()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#hastype()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"hastype()\"><H3>hastype()</H3></A><PRE>\n  Function: hastype(&lt;object&gt;, &lt;type&gt;)\n  \n  Returns 1 if the object is of the named type, otherwise 0.\n  Valid types are: ROOM, EXIT, PLAYER, THING.\n  If an invalid type is given, #-1 is returned.\n  \n  Examples:\n    &gt; say hastype(me,PLAYER)\n    You say &quot;1&quot;\n    &gt; say hastype(me,THING)\n    You say &quot;0&quot;\n  \n  See Also: type(), hasflag()\n  \n</PRE>\n<A HREF=\"#hastxlevel()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#haven\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"haven\"><H3>HAVEN</H3></A><PRE>\n  Flag: HAVEN(H)  \n   \n  If a location is HAVEN, you cannot kill in that location.  The HAVEN flag\n  no longer blocks pages or @pemits, use @lock/page instead.\n   \n  See Also: @lock\n  \n</PRE>\n<A HREF=\"#hastype()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#help\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"help\"><H3>help</H3></A><PRE>\n  This is the RhostMUSH online help facility.\n  \n  &quot;And remember, if it's not RhostMUSH, it's Mud.&quot; -- Corum\n \n  Notes on help descriptions: \n        [text] - Text enclosed in []'s is optional.  The []'s are never typed\n                 in as part of the command.\n        &lt;parameter&gt; - Information parameter for a command.  The &lt;&gt;'s are\n                      never typed in as part of the command.\n \n  Syntax of help command:          help [&lt;command&gt;]\n \n  To get a list of RhostMUSH topics:    help topics\n  To get a list of RhostMUSH Commands:  help commands      (or @list commands)\n  To get a list of RhostMUSH Functions: help function list (or @list function)\n  To get a list of on-line RhostMUSH commands: +help\n  \n  You may use '*' or '?' for wildcard searches on topics.\n  \n  You may use the /search switch for content searching.  Eg: help/search *mail*\n  \n  Command syntax help is available by issuing /syntax. Eg: @emit/syntax\n  \n  If there are any errors in the help text, please notify a Wizard.\n  An HTML version of all the help contained here is available at\n  http://rhostmush.com/autohelp/help.html\n  \n</PRE>\n<A HREF=\"#haven\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#here\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"here\"><H3>HERE</H3></A><PRE>\n  Topic: HERE \n \n  The word 'here' refers to the room you are in (if you are inside an object,\n  it refers to the object that you are in, not the room that the object is\n  in).  For example, to rename the room you are in (if you control it), you\n  could enter '@name here= &lt;new name&gt;'.\n  \n  See Also: ME\n  \n</PRE>\n<A HREF=\"#help\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#home()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"home()\"><H3>HOME()</H3></A><PRE>\n  home(&lt;object&gt;)\n \n  Returns the object's home.\n \n  Example:\n    &gt; exam me\n    Mortal(#226Pc)\n    Type: PLAYER Flags: CONNECTED\n    Desc:Just a plain, old boring Mortal. You know.\n    Owner: Mortal  Key: VA:foobar Clams: 920\n    Last:Thu Dec 19 08:57:21 1991\n    Home: Mortal's Room(#367R)\n    Location: The Town Square\n    &gt; say home(me)\n    You say &quot;#367&quot;\n  \n  See Also: loc(), room(), @link\n  \n</PRE>\n<A HREF=\"#here\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#homes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"homes\"><H3>HOMES</H3></A><PRE>\n  Topic: HOMES\n \n  Every thing or player has a home.  This is where players when they go home,\n  or things with the STICKY flag set go when dropped.  Homes are set with the\n  @link command. A thing's home defaults to the room where it was created, if\n  you control that room, or your home. You can link an exit to send players\n  home with '@link &lt;dir&gt;=home'.  Drop-tos can also be set to 'home'.\n  \n  See Also: @link, DROP-TO, STICKY\n  \n</PRE>\n<A HREF=\"#home()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ibreak()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ibreak()\"><H3>IBREAK()</H3></A><PRE>\n  Function: ibreak(&lt;n&gt;)\n  Related:  itext(&lt;n&gt; [,&lt;key&gt;])\n            inum(&lt;n&gt; [,&lt;key&gt;])\n            ilev()\n  \n  These functions, when called with an iter(), return the equivalent\n  of ## (itext) or #@ (inum), with reference to the nth more outermost\n  iter(), where n=0 refers to the current iter(), n=1 to an iter()\n  in which the current iter() is nested, etc.\n  \n  The ibreak() function is used to break out of the given iter() loop.\n  It will finish processing of what it currently is executing then abort\n  any further iterations of that given iter loop.  You can specify the nth\n  argument to specify which iter() you wish to break out of.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d&lt;n&gt;' instead of the default '%i&lt;n&gt;'.\n  \n  Examples:\n  &gt; say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)]))]\n  You say, &quot;1:red 1:red 2:blue 2:blue 3:green 3:green&quot;\n  \n  &gt; say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)][ibreak(1)]))]\n  You say, &quot;1:red 1:red&quot;\n  \n  &gt; say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)][ibreak(0)]))]\n  You say, &quot;1:red 2:blue 3:green&quot;\n  \n  See Also: iter(), itext(), ilev(), inum(), list()\n\n  \n</PRE>\n<A HREF=\"#homes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ic\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ic\"><H3>IC</H3></A><PRE>\n  Flag: IC([I])\n \n  (*note this flag is meaningless on RhostMUSH*)\n  When set on a player or object, denotes that they are In-Character and \n  therefore subject to inclusion in tinyplots, etc, and whatever they\n  say or do will be interpreted as if their character was doing or saying it.\n  If this flag is not set, whatever the they say or do is to be interpreted\n  as if it is either the real life person talking, or some mixture of the\n  character and the real life person that is not 100% In-Character and should\n  not be taken as being in character.\n \n  When set on a room it denotes that the room is fair ground for roleplaying.\n  When set on a zonemaster it denotes that the entire zone is fair ground for\n  roleplaying (This is not yet implemented).\n \n  See Also: help COMBAT\n  \n</PRE>\n<A HREF=\"#ibreak()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#idiv()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"idiv()\"><H3>IDIV()</H3></A><PRE>\n  Function: div(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN&gt;]...)\n   \n  Returns the integer quotient from dividing &lt;number1&gt; by &lt;number2&gt;.\n  \n  For floating point numbers, please use the fdiv() function. \n   \n  Example:\n    &gt; say div(15,3)\n    You say &quot;5&quot;\n    &gt; say div(16,3)\n    You say &quot;5&quot;\n    &gt; say div(17,3)\n    You say &quot;5&quot;\n    &gt; say div(18,3)\n    You say &quot;6&quot;\n    &gt; say div(-17,3)\n    You say XXXXX\n  \n  This function may also be called as idiv().\n  \n  See Also: add(), fdiv(), mod(), mul(), round(), sub(), trunc()\n  \n</PRE>\n<A HREF=\"#ic\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#idle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"idle\"><H3>IDLE</H3></A><PRE>\n  Command: idle                 (everyone)\n           idle @@&lt;string&gt;      (everyone)\n           idle &lt;command&gt;\t(wizards only)\n  \n  This command does nothing.  It will issue a NO-OP (non-operation) which \n  allows the user to send information to the mush without actually unidling.\n  While using this command your idle state does not change so to other users\n  you will appear to be idle.  \n  \n  If you specify @@&lt;string&gt; then &lt;string&gt; will be displayed to you as if \n  you issued 'think &lt;string&gt;' but without updating your idle time.  \n  \n  Note:  The &lt;string&gt; is NOT evaluated, intentionally.\n  \n  This command can only be used if you're connected to the mush.  It can not\n  be used if the command has been restricted from you.\n  \n  Wizards may specify a command to issue under an 'idle state' as an option.\n  \n  Examples:\n    &gt; idle\n    &gt; idle @@boo![add(1,1)]\n      boo![add(1,1)]\n    &gt; idle think Test: [add(1,1)]    (as a wizard)\n      Test: 2\n  \n  See Also: @@\n\n</PRE>\n<A HREF=\"#idiv()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#idle()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"idle()\"><H3>IDLE()</H3></A><PRE>\n  Function: idle(&lt;player&gt; [,&lt;boolean&gt; [,&lt;port&gt;]))\n \n  Returns the number of seconds that &lt;player&gt; has been idle.  If &lt;player&gt;\n  is not connected then -1 is returned.  If &lt;player&gt; is connected more than\n  once, the smallest idle time is returned.\n  \n  You may specify an optional boolean value for the type.  If '1' is chosen \n  it will output in the form '&lt;port&gt;:&lt;idle&gt;'.  You may specify the exact port \n  of the player for an exact idle() match.\n  \n  Example:\n    &gt; WHO\n    Player Name          On For Idle  Doing\n    Wizard                00:04   1m\n    Evinar                00:12   6m  \n    Wizard                00:32   6s  \n    3 Players logged in.\n    &gt; say idle(wiz)\n    You say &quot;6&quot;\n    &gt; say idle(wiz,1)\n    You say &quot;12:68 14:6&quot;\n    &gt; say idle(frobozz)\n    You say &quot;-1&quot;\n  \n  See Also: WHO, conn(), lwho()\n  \n</PRE>\n<A HREF=\"#idle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ifelse()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ifelse()\"><H3>ifelse()</H3></A><PRE>\n  Function: ifelse(&lt;expression&gt;,&lt;true string&gt;[,&lt;false string&gt;])\n \n  This function returns &lt;true string&gt; if &lt;expression&gt; is true (not 0), \n  &lt;false string&gt; otherwise. Much more efficient than an equivalent\n  switch(). To check if a string contains text or not, use strlen() within\n  the test case.  The false string is optional and if nothing is specified, \n  it will return an empty string if a false match is met.  This will \n  effectively mimic the if() function found on other servers.\n  \n  Example:\n    &gt; say ifelse(v(test),Test exists!,Test doesn't exist.)\n    You say &quot;Test doesn't exist.&quot;\n    &gt; say ifelse(strlen(v(test)),Test exits!,Test doesn't exist.)\n    You say &quot;Test exists!&quot;\n    &gt; say ifelse(gt(1,0),This is true!)\n    You say &quot;This is true!&quot;\n    &gt; say ifelse(gt(0,1),This is true!)\n    You say &quot;&quot;\n  \n  See Also: switch(), case(), @switch\n \n</PRE>\n<A HREF=\"#idle()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#iindex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"iindex()\"><H3>IINDEX()</H3></A><PRE>\n  Function: iindex(&lt;list&gt;, &lt;string&gt;, &lt;position&gt;, &lt;delimiter&gt;)\n  \n  This function is similar to index(), except that it inserts the &lt;string&gt;\n  at the &lt;position&gt; in the given &lt;list&gt;.  You must specify a delimiter.\n  For a space, use a '%b' as a delimiter.\n  \n  Example:\n    &gt; say iindex(this is a test,another cat and,3,%b)\n    You say &quot;this is another cat and a test&quot;\n  \n  See Also: index(), rindex(), aindex()\n  \n</PRE>\n<A HREF=\"#ifelse()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ilev()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ilev()\"><H3>ILEV()</H3></A><PRE>\n  Function: ilev()\n  Related:  inum(&lt;n&gt; [,&lt;key&gt;])\n            ibreak(&lt;n&gt;)\n            itext(&lt;n&gt; [,&lt;key&gt;])\n  \n  This function goes along with inum() and itext() and will return the\n  level of recursion you are currently in an iter.  The first level is \n  '0', and deeper levels are 1 and more.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d&lt;n&gt;' instead of the default '%i&lt;n&gt;'.\n  \n  Example:\n    &gt; say iter(a b c,iter(1 2 3,iter(! @ #,ilev())))\n    You say &quot;2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2&quot;\n  \n  This example shows that the ilev() is in the 3rd (starting at 0)\n  level of iter.\n  \n  See Also: inum(), itext(), iter(), ibreak(), list()\n  \n</PRE>\n<A HREF=\"#iindex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#immortal\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"immortal\"><H3>IMMORTAL</H3></A><PRE>\n  Flag: SUPER-ROYALTY (IMMORTAL)(i)   \n  \n  This flag when set on a player allows them to be a hybrid wizard.  \n  They can basically do anything, see anything, be anything.  The \n  only thing they can not do is set or unset this flag or directly \n  affect #1.  It's generally wise if you don't annoy these people.\n  \n  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, ROYALTY\n  \n</PRE>\n<A HREF=\"#ilev()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#inc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"inc()\"><H3>INC()</H3></A><PRE>\n  Function: inc(&lt;number&gt;)\n  \n  The inc() function is used to increment numerical values in local registers.\n  The valid registers are 0 through 9.  If the value in the register is a \n  string, it will return the string without any changes.\n  \n  Example:\n    &gt; say [setq(0,10)] 1: [r(0)] [inc(0)] 2: [r(0)]\n    You say &quot; 1: 10  2: 11&quot;\n    &gt; say [setq(0,The)] 1: [r(0)] [inc(0)] 2: [r(0)]\n    You say &quot; 1: The #-1 GLOBAL REGISTER NOT AN INTEGER 2: The\n  \n  See Also: dec(), xdec(), xinc(), setq(), setr(), r()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.\n  \n  \n</PRE>\n<A HREF=\"#immortal\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#indestructible\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"indestructible\"><H3>INDESTRUCTIBLE</H3></A><PRE>\n  Flag: INDESTRUCTIBLE(~)\n  \n  If set on an object, that object cannot be destroyed by any means, by \n  anyone. The flag must be removed before the object can be destroyed.\n  This flag can be manipulated by Royalty and above only.\n   \n  See Also: SAFE, @destroy, BYEROOM, GOING\n  \n</PRE>\n<A HREF=\"#inc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#index()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"index()\"><H3>INDEX()</H3></A><PRE>\n  Function: index(&lt;list&gt;,&lt;character&gt;,&lt;first&gt;,&lt;length&gt;)\n  \n  This function is similar to EXTRACT(), except that an item in the\n  list may be more than one word; instead of a space being used to\n  separate items in the list, &lt;character&gt; is used. The function returns \n  &lt;length&gt; items starting from that in the &lt;first&gt; position. Trailing\n  spaces are trimmed. The comma cannot be used as the &lt;character&gt; separator. \n \n  Example:\n    &gt; say [index(Cup of Tea | Mug of Beer | Glass of Wine, |, 2, 1)]\n    You say, &quot;Mug of Beer&quot;\n  \n  See Also: extract(), extractword(), aindex(), iindex(), rindex()\n  \n</PRE>\n<A HREF=\"#indestructible\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#info\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"info\"><H3>INFO</H3></A><PRE>\n  Command: INFO\n  This command gives information about the mush both on-line and on the \n  connect screen.  This is to help automations in gathering information about\n  the mush like players connected, uptime, version, and so forth.\n  \n</PRE>\n<A HREF=\"#index()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#inherit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"inherit\"><H3>INHERIT</H3></A><PRE>\n  Flag: INHERIT(I)   \n  \n  Previously, Wizard-owned objects had wizard powers.  This was\n  a problem in many cases, so that behavior has changed.  Now, only Wizard\n  objects or Wizard-owned Inherit-set objects have wizard powers.  Only\n  players can set the Inherit flag, and the Inherit flag is reset during\n  @chown.  If a player is set Inherit, all his stuff is assumed to be\n  inherit, so his objects can control him.  If a player is NOT Inherit,\n  his stuff does NOT control him.  (i.e. cannot @force him.)  This flag\n  is not especially useful for non-wizards.\n  \n  Objects set INHERIT also inherit any powers that you yourself may have.\n  \n  It is generally good practice to NOT EVER set yourself inherit.\n  \n</PRE>\n<A HREF=\"#info\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#inprogram()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"inprogram()\"><H3>INPROGRAM()</H3></A><PRE>\n  Function: inprogram(&lt;player&gt;)\n  Returns a TRUE (1) value if the player is currently inside a @program,\n  otherwise it returns a FALSE (0) value.  If the player is invalid, it\n  returns a '#-1'.\n  \n  Examples:\n    &gt; say inprogram(me)\n    You say &quot;0&quot;\n    &gt; @va me=@emit You entered %0!\n    Set.\n    &gt; @program me=me/va:Start Program...\n    Start Program...\n    &gt; |say inprogram(me)\n    You say &quot;1&quot;\n    &gt; |@quitprogram\n    @program cleared.\n  \n  See Also: @program, @quitprogram, programmer()\n  \n</PRE>\n<A HREF=\"#inherit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#insert()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"insert()\"><H3>INSERT()</H3></A><PRE>\n  Function: insert(&lt;list&gt;, &lt;pos&gt; [&lt;pos2&gt;...&lt;posN&gt;], &lt;word&gt;[, &lt;sep&gt;])\n   \n  This function inserts a word into &lt;list&gt; so that the word becomes the\n  &lt;pos&gt;'th element of the list, and all subsequent list elements are moved\n  down.  This means that it appears between the &lt;pos-1&gt;'th and &lt;pos&gt;'th\n  elements of the original list.  This function may be used to append or\n  prepend a word to a list.  You may specify more than one position.\n   \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n  \n  The &lt;pos&gt; fields may be negative to take the argument from the right\n  instead of the left.\n   \n  Examples:\n    &gt; say insert(This is a test, 4, new)\n    You say &quot;This is a new test&quot;\n    &gt; say insert(Yet@Another@List, 3, Funky, @)\n    You say &quot;Yet@Another@Funky@List&quot;\n  \n  See Also: extract(), extractword(), ldelete(), replace(), iindex(), aindex(),\n            rindex()\n  \n</PRE>\n<A HREF=\"#inprogram()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#internal_doors\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"internal_doors\"><H3>INTERNAL_DOORS</H3></A><PRE>\n  Internal Doors are special cases of @door. They will can only be seen on \n  the active door list by immortals, and cannot be accessed via the @door \n  command.\n  \n  Typically Internal Doors are used transparently by other aspects of the \n  MUSH.  For example, the Rhost MCP module relies on the use of internal \n  doors as follows.\n    - When the MUSH is started, the MCP door is registered with the door code \n      and a connection established to the MCP server.\n    - On the initialization of the door, new commands are also registered \n      within the MUSH command parser; @mcom, @mwho, @mcode. When a player \n      invokes one of the MCP commands, his input it parsed by the MCP door \n      code and sent out across the ether, likewise if a message comes back \n      through the door it is parsed and passed on to the correct player(s).\n  \n  Expect to see alot more happening in this area soon! :)\n  \n  See Also: @door\n  \n</PRE>\n<A HREF=\"#insert()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#inum()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"inum()\"><H3>INUM()</H3></A><PRE>\n  Function: inum(&lt;n&gt; [,&lt;key&gt;])\n  Related:  itext(&lt;n&gt; [,&lt;key&gt;])\n            ibreak(&lt;n&gt;)\n            ilev()\n   \n  These functions, when called within an iter(), return the equivalent\n  of ## (itext) or #@ (inum), with reference to the nth more outermost\n  iter(), where n=0 refers to the current iter(), n=1 to an iter()\n  in which the current iter() is nested, etc.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d&lt;n&gt;' instead of the default '%i&lt;n&gt;'.\n   \n  Examples:\n  &gt; say [iter(red blue green,iter(fish shoe, #@:##))] \n  You say, &quot;1:red 1:red 2:blue 2:blue 3:green 3:green&quot;\n   \n  &gt; say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)]))]\n  You say, &quot;1:red 1:red 2:blue 2:blue 3:green 3:green&quot;\n   \n  &gt; say [iter(red blue green,iter(fish shoe, [inum(0)]:[itext(0)]))]\n  You say, &quot;1:fish 2:shoe 1:fish 2:shoe 1:fish 2:shoe&quot;\n   \n  &gt; say [iter(red blue green,iter(fish shoe, [itext(1)]:[itext(0)]))]\n  You say, &quot;red:fish red:shoe blue:fish blue:shoe green:fish green:shoe&quot;\n  \n  See Also: iter(), itext(), ilev(), ibreak(), list()\n\n</PRE>\n<A HREF=\"#internal_doors\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#inventory\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"inventory\"><H3>inventory</H3></A><PRE>\n  Command: inventory\n  Lists what you are carrying and how much money you have.  If alternate \n  inventories are in effect, anything wielded or worn may not be shown up\n  by this inventory.  To see these inventories, use the 'wielded' and\n  'worn' commands respectively.\n  \n  See Also: score, worn, wielded\n  \n</PRE>\n<A HREF=\"#inum()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#inzone()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"inzone()\"><H3>INZONE()</H3></A><PRE>\n  Function: inzone(&lt;zone&gt;)\n  Returns the rooms in the specified zonemaster.  If the target is not a\n  zonemaster, or if the object is not a valid zone, it returns an empty\n  list.  This is _not_ database intensive.\n  \n  Example:\n    &gt; @set here=zonemaster\n    &gt; @zone here=#0   (a room)\n    &gt; @zone here=#534 (a room)\n    &gt; @zone here=#987 (a player)\n    &gt; say lzone(here)\n    You say &quot;#0 #534 #987&quot;\n    &gt; say inzone(here)\n    You say &quot;#0 #534&quot;\n  \n  See Also: @zone, ZONES, lzone(), zwho()\n  \n</PRE>\n<A HREF=\"#inventory\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isalnum()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isalnum()\"><H3>ISALNUM()</H3></A><PRE>\n  Function: isalnum(&lt;string&gt;)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's an alphanumerical character (0-9, a-z, or A-Z).  If it is, then\n  it returns '1'.  Else it returns a '0'.\n  \n  Examples:\n    &gt; say isalnum(?)\n    You say &quot;0&quot;\n    &gt; say isalnum(9********)\n    You say &quot;1&quot;\n  \n  See Also: isdbref(), isalpha(), ispunct(), isxdigit(), isdigit(), isspace(),\n            isword()\n  \n</PRE>\n<A HREF=\"#inzone()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isalpha()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isalpha()\"><H3>ISALPHA()</H3></A><PRE>\n  Function: isalpha(&lt;string&gt;)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's an alpha character (a-z or A-Z).  if it is, then it returns '1'.\n  If not, it returns a '0'.\n  \n  Examples:\n    &gt; say isalpha(a1238548385**|%*) \n    You say &quot;1&quot;\n    &gt; say isalpha(0)\n    You say &quot;0&quot;\n \n  See Also: isdbref(), isalnum(), ispunct(), isxdigit(), isdigit(), isspace(),\n            isword()\n  \n</PRE>\n<A HREF=\"#isalnum()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#iscluster()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"iscluster()\"><H3>ISCLUSTER()</H3></A><PRE>\n  Function: iscluster(&lt;target&gt;)\n  \n  This function returns '1' if &lt;target&gt; belongs to a cluster.\n  \n  See Also: @cluster\n\n</PRE>\n<A HREF=\"#isalpha()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isdbref()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isdbref()\"><H3>ISDBREF()</H3></A><PRE>\n  Function: isdbref(&lt;string&gt;)\n \n  This function will return 1 if the string passed to it is a valid dbref.\n  To be a valid dbref the string must begin with '#' and be followed by an\n  integer.  Also, the dbref must exist in the current database as a valid\n  object.  If the object fails either of these criteria, then a 0 is\n  returned.\n \n  Example:\n     &gt; say isdbref(#-1)\n     You say &quot;0&quot;\n     &gt; say isdbref(#1)\n     You say &quot;1&quot;\n     &gt; say isdbref(This is not a dbref)\n     You say &quot;0&quot;\n  \n  See Also: isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            isword()\n  \n</PRE>\n<A HREF=\"#iscluster()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isdigit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isdigit()\"><H3>ISDIGIT()</H3></A><PRE>\n  Function: isdigit(&lt;string&gt;)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a number or not (0-9).  If it is, it returns a '1', else it\n  returns a '0'.\n  \n  Examples:\n    &gt; say isdigit(What?)\n    You say &quot;0&quot;\n    &gt; say isdigit(1)\n    You say &quot;1&quot;\n  \n  See Also: isdbref(), isalpha(), isalnum(), isxdigit(), ispunct(), isspace(),\n            isword(), isint()\n  \n</PRE>\n<A HREF=\"#isdbref()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ishidden()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ishidden()\"><H3>ISHIDDEN()</H3></A><PRE>\n  Function: ishidden(&lt;player&gt;)\n  \n  This function currently is not available to non-bitted players.\n  \n  Example:\n    &gt; say ishidden(#1)\n    You say &quot;1&quot;\n   \n  See Also: visible()\n  \n</PRE>\n<A HREF=\"#isdigit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isint()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isint()\"><H3>ISINT()</H3></A><PRE>\n  function: isint(&lt;string&gt;)\n  \n  This function matches the returned string to see if it is a valid\n  integer.  A valid integer is considered a string that optionally\n  starts with a + or a - and contains nothing but numbers.\n  \n  Examples:\n    &gt; say isint(+123)\n    You say &quot;1&quot;\n    &gt; say isint(-123)\n    You say &quot;1&quot;\n    &gt; say isint(123)\n    You say &quot;1&quot;\n    &gt; say isint(123.456)\n    You say &quot;0&quot;\n  \n  See Also: isdbref(), isalpha(), isalnum(), isxdigit(), ispunct(), isspace(),\n            isword(), isdigit()\n\n</PRE>\n<A HREF=\"#ishidden()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#islower()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"islower()\"><H3>ISLOWER()</H3></A><PRE>\n  Function: islower(&lt;character&gt;)\n\n  This function returns '1' if &lt;character&gt; is a lower case alpha character.\n\n  See Also: isupper()\n\n</PRE>\n<A HREF=\"#isint()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isnum()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isnum()\"><H3>ISNUM()</H3></A><PRE>\n  Function: isnum(&lt;string&gt;)\n \n  This function will return 1 if the argument is a valid number and 0\n  if it is not.\n \n  Example:\n     &gt; say isnum(22223.0000)\n     You say &quot;1&quot;\n     &gt; say isnum(77)\n     You say &quot;1&quot;\n     &gt; say isnum(22 L)\n     You say &quot;0&quot;\n     &gt;say isnum(Bad Numbers!)\n     You say &quot;0&quot;\n  \n  See Also: isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct()\n  \n</PRE>\n<A HREF=\"#islower()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ispunct()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ispunct()\"><H3>ISPUNCT()</H3></A><PRE>\n  Function: ispunct(&lt;string&gt;)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a punctuation character (. ! ? etc).  If it is, it returns\n  a '1', else it returns a '0'.\n  \n  Examples:\n    &gt; say ispunct(14789asdf!!!!!..???)\n    You say &quot;0&quot;\n    &gt; say ispunct(?hurm?)\n    You say &quot;1&quot;\n   \n  See Also: isdbref(), isalpha(), isalnum(), isxdigit(), isdigit(), isspace(),\n            isword()\n  \n</PRE>\n<A HREF=\"#isnum()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isspace()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isspace()\"><H3>ISSPACE()</H3></A><PRE>\n  Function: isspace(&lt;string&gt;)\n \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a white-space character (returns, spaces, tabs, etc).  If it\n  is, it returns a '1', else it returns a '0'.\n  \n  Examples:\n    &gt; say isspace(space(5))\n    You say &quot;1&quot;\n    &gt; say isspace(%r)\n    You say &quot;1&quot;\n    &gt; say isspace(1)\n    You say &quot;0&quot;\n \n  See Also: isdbref(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            isword()\n  \n</PRE>\n<A HREF=\"#ispunct()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isupper()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isupper()\"><H3>ISUPPER()</H3></A><PRE>\n  Function: isupper(&lt;character&gt;)\n\n  This function returns '1' if &lt;character&gt; is an upper case alpha character.\n\n  See Also: islower()\n\n</PRE>\n<A HREF=\"#isspace()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isword()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isword()\"><H3>ISWORD()</H3></A><PRE>\n  Function: isword(&lt;string&gt;)\n  \n  This function will return '1' if the argument is a valid word.  A valid word\n  is defined as a string that is totally alpha or contains a hyphen (-) char.\n  \n  Example:\n    &gt; say isword(testing)\n    You say &quot;1&quot;\n    &gt; say isword(testing0)\n    You say &quot;0&quot;\n    &gt; say isword(testing-me)\n    You say &quot;1&quot;\n  \n  See Also: isalnum(), isalpha()\n  \n</PRE>\n<A HREF=\"#isupper()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#isxdigit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"isxdigit()\"><H3>ISXDIGIT()</H3></A><PRE>\n  Function: isxdigit(&lt;string&gt;)\n \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a hexidecimal digit or not (0-9, A-F).  If it is, it returns\n  a '1', else it returns a '0'.\n \n  Examples:\n    &gt; say isxdigit(freep?)\n    You say &quot;1&quot;\n    &gt; say isxdigit(G)\n    You say &quot;0&quot;\n \n  See Also: isdbref(), isalpha(), isalnum(), isdigit(), ispunct(), isspace(),\n            isword()\n  \n</PRE>\n<A HREF=\"#isword()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#iter()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"iter()\"><H3>ITER()</H3></A><PRE>\n  Function: iter(&lt;list&gt;, &lt;eval&gt;[, &lt;delim&gt; [, &lt;output seperator&gt;]])\n \n  &lt;list&gt; is a &lt;delimiter&gt;-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  &lt;eval&gt; is a string that is to be\n  evaluated once for each item in &lt;list&gt;, replacing the special symbol ## with\n  the corresponding item from &lt;list&gt;.  A space-separated list of the results\n  of these evaluations is returned to the caller.  The effect is very similar\n  to @dolist, except that the results are made into a list and returned, not\n  executed.  The special symbol #@ can be used to return the positional match\n  of the current item of the list.  You may specify a filler for the string.\n  \n  You may use %i0-%i9 for itext(0) to itext(9).  \n  You may use %il for the outermost layer, equiv to itext(ilev())\n   \n  Examples:\n    &gt; say iter(This is a test,-## #@-)\n    You say &quot;-This 1- -is 2- -a 3- -test 4-&quot;\n    &gt; say iter(This is a test,strlen(##))\n    You say &quot;4 2 1 4&quot;\n    &gt; say iter(lnum(10),mul(mul(##,##),10))\n    You say &quot;0 10 40 90 160 250 360 490 640 810&quot;\n    &gt; say iter(Was it a cat I saw,words(##),s)\n    You say &quot;1 4 1&quot;\n    &gt; say iter(This is a test,##,,***)\n    You say &quot;This***is***a***test&quot;\n    &gt; say iter(This is a test,%i0,,***)\n    You say &quot;This***is***a***test&quot;\n  \n  See Also: nsiter(), citer(), @dolist, parse(), list(), list(), itext(), \n            inum(), ilev(), ibreak()\n \n</PRE>\n<A HREF=\"#isxdigit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#itext()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"itext()\"><H3>ITEXT()</H3></A><PRE>\n  Function: itext(&lt;n&gt; [,&lt;key&gt;])\n  Related:  inum(&lt;n&gt; [,&lt;key&gt;])\n            ibreak(&lt;n&gt;)\n            ilev()\n   \n  These functions, when called within an iter(), return the equivalent\n  of ## (itext) or #@ (inum), with reference to the nth more outermost\n  iter(), where n=0 refers to the current iter(), n=1 to an iter()\n  in which the current iter() is nested, etc.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d&lt;n&gt;' instead of the default '%i&lt;n&gt;'.\n   \n  Examples:\n  &gt; say [iter(red blue green,iter(fish shoe, #@:##))]\n  You say, &quot;1:red 1:red 2:blue 2:blue 3:green 3:green&quot;\n   \n  &gt; say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)]))]\n  You say, &quot;1:red 1:red 2:blue 2:blue 3:green 3:green&quot;\n   \n  &gt; say [iter(red blue green,iter(fish shoe, [inum(0)]:[itext(0)]))]\n  You say, &quot;1:fish 2:shoe 1:fish 2:shoe 1:fish 2:shoe&quot;\n   \n  &gt; say [iter(red blue green,iter(fish shoe, [itext(1)]:[itext(0)]))]\n  You say, &quot;red:fish red:shoe blue:fish blue:shoe green:fish green:shoe&quot;\n  \n  See Also: iter(), inum(), ilev(), ibreak(), list()\n  \n</PRE>\n<A HREF=\"#iter()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#join\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"join\"><H3>join</H3></A><PRE>\n  Command: join &lt;user&gt;\n  \n  The command will check your permissions over the target's location and\n  over your current location.  If you are found to have control over both\n  of those location, then you are brought to the targeted user's location.\n  \n  See Also: grab, @teleport\n  \n</PRE>\n<A HREF=\"#itext()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#jump_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"jump_ok\"><H3>JUMP_OK</H3></A><PRE>\n  Flag: JUMP_OK(J)  \n  \n  When a room or thing is set JUMP_OK, then that location can\n  be teleported into by anyone. See @teleport.\n  \n  See Also: @teleport, ABODE\n  \n</PRE>\n<A HREF=\"#join\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#keepalive toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"keepalive toggle\"><H3>KEEPALIVE TOGGLE</H3></A><PRE>\n  Toggle: KEEPALIVE\n  \n  This toggle, when set on a valid player, will enable a NOP telnet code\n  to be transmitted to the target player.  This is useful for keeping\n  timed connections alive for their full duration.  Especially handy\n  for broken routers, NATs, firewalls, or other issues.\n  \n  Note: Some rare clients, depending on version, does not handle the\n        KEEPALIVE toggle cleanly, and will garble input randomly\n        from its use.  If you run into commands seemingly not working,\n        then you may need to remove this toggle.\n  \n</PRE>\n<A HREF=\"#jump_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#keepflags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"keepflags()\"><H3>KEEPFLAGS()</H3></A><PRE>\n  Function: keepflags(&lt;list&gt;, [&amp;|]&lt;flag(s)&gt; [,&lt;delim&gt;[,&lt;output delim&gt;]])\n  \n  The keepflags function keeps all dbref#'s in the given list that contains\n  the flags specified.  You must use one of the operators for flag checks:\n     &amp; - match ALL flags for each dbref#.\n     | - match ANY of the flags for each dbref#.\n  \n  This function returns the list of dbref#'s that correctly match up the\n  flags you specified.\n  \n  Examples: (#1 is a wizard, nothing else is)\n    &gt; say keepflags(#1 #2 #3 #4,&amp;W)\n    You say &quot;#1&quot;\n    &gt; say keepflags(#1 #2 #3 #4,&amp;Ws)\n    You say &quot;&quot;\n    &gt; say keepflags(#1 #2 #3 #4,|Ws)\n    You say &quot;#1&quot;\n  \n  Note: You may specify 'P' for players, 'R', for rooms, and 'E' for exits\n        as valid flag checks.\n  \n  See Also: remflags(), remtype(), keeptype()\n\n</PRE>\n<A HREF=\"#keepalive toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#keeptype()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"keeptype()\"><H3>KEEPTYPE()</H3></A><PRE>\n  Function: keeptype(&lt;string&gt;,&lt;type(s)&gt;[,&lt;delim&gt;[,&lt;output delim&gt;]])\n \n  The keeptype function KEEPS all types of 'type' from the string 'string'.\n  The different types are standard MUSH object types:\n      PLAYER - specifying robots and players\n      THING  - specifying objects\n      ROOM   - specifying rooms\n      EXIT   - specifying exits\n      OTHER  - specifying anything not fitting a MUSH 'type'.\n  \n  You may specify optional seperators and output seperators.   You may specify\n  more than one type at once.\n  \n  Examples: (#0 is a room, #1 #55 and #584 are players, #-1 is invalid (other))\n    &gt; say keeptype(#0 #1 #55 #584 #-1,player)\n    You say &quot;#1 #55 #584&quot;\n    &gt; say keeptype(#0 #1 #55 #584 #-1,exit)\n    You say &quot;&quot;\n    &gt; say keeptype(#0 #1 #55 #584 #-1,other)\n    You say &quot;#-1&quot;\n    &gt; say keeptype(#0@#1@#55@#584@#-1,player,@,|)\n    You say &quot;#1|#55|#584&quot;\n    &gt; say keeptype(#0 #1 #55 #584 #-1,player other)\n    You say &quot;#1 #55 #584 #-1&quot;\n  \n  See Also: delete(), remove(), ldelete(), replace(), remtype()\n  \n</PRE>\n<A HREF=\"#keepflags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#key\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"key\"><H3>KEY</H3></A><PRE>\n  Flag: Flag: KEY(K)  \n  \n  When set on an object prevents puppets from picking it up.\n  \n  See Also: PUPPET, MONITOR\n  \n</PRE>\n<A HREF=\"#keeptype()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#kill\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"kill\"><H3>kill</H3></A><PRE>\n  Command: kill &lt;player&gt; [=&lt;cost&gt;]\n  Attempts to kill the specified player. Killing costs &lt;cost&gt; coins, which\n  gives you a &lt;cost&gt;% chance of killing the player. Thus, spending 100 \n  coins always works (except against wizards and immortals, who can never be\n  killed). Players cannot be killed in rooms which have been set HAVEN or\n  which they control.  If you don't specify a cost, the default is 10 (for a\n  10% chance of success).  The player, if killed, receives &lt;cost&gt;/2 coins in\n  insurance.\n  \n  See Also: @akill, @kill, @okill, BEING KILLED, IMMORTAL, ROYALTY\n  \n</PRE>\n<A HREF=\"#key\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ladd()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ladd()\"><H3>LADD()</H3></A><PRE>\n  Function: ladd(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function takes a list of numbers and adds them all together and returns\n  the result.  It may take an optional delimiter.\n  \n  Example:\n    &gt; say ladd(1 1 1 1 1)\n    You say &quot;5&quot;\n    &gt; say ladd(1@1@1@1@1,@)\n    You say &quot;5&quot;\n  \n  See Also: lsub(), ldiv(), lmul(), lmax(), lmin(), lavg()\n  \n</PRE>\n<A HREF=\"#kill\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#land()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"land()\"><H3>LAND()</H3></A><PRE>\n  Function: land(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function goes through the list of numbers and and's the numbers\n  together.  If a '0' is found in the list, it ends evaluation there\n  and returns '0'.  You may specify an optional delimiter.\n  \n  Example:\n    &gt; say land(0 1 1)\n    You say &quot;0&quot;\n    &gt; say land(0@1@1,@)\n    You say &quot;0&quot;\n  \n  See Also: lor(), lnor(), lxor(), lxnor()\n  \n</PRE>\n<A HREF=\"#ladd()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#last()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"last()\"><H3>LAST()</H3></A><PRE>\n  Function: last(&lt;list&gt; [,&lt;delim&gt; [,&lt;key&gt;]])\n  \n  This function returns the last element in the list.  You may specify an \n  optional seperator (delim), otherwise a default of a space is used.\n  \n  &lt;delim&gt; may be used to specify a word delimiter other than a space.\n  \n  &lt;key&gt; may be specified as '1' to allow last() to be ansi-aware.\n  \n  Examples:\n    &gt; say last(this is a test)\n    You say &quot;test&quot;\n    &gt; say last(one@two@three,@)\n    You say &quot;three&quot;\n  \n  See Also: first(), extract(), extractword(), randextract(), elements()\n  \n</PRE>\n<A HREF=\"#land()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lastcreate()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lastcreate()\"><H3>LASTCREATE()</H3></A><PRE>\n  Function: lastcreate(&lt;target&gt;,&lt;type&gt;)\n  \n  This function will return the dbref# of the last &lt;type&gt; that was created\n  by the target.  If the type was not created by the target, it will return\n  a '#-1'.  Possible types are:\n                r - rooms\n                t - things (objects)\n                e - exits\n                p - players\n  \n  If an invalid type is given, it will return '#-1'.\n  \n  Example:\n    &gt; say lastcreate(me,t)\n    You say &quot;#-1&quot;\n    &gt; @create MyObject\n    MyObject created as object #1369\n    &gt; say lastcreate(me,t)\n    You say &quot;#1369&quot;\n  \n  See Also: @create, @dig, @open, @clone\n  \n</PRE>\n<A HREF=\"#last()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lattr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lattr()\"><H3>LATTR()</H3></A><PRE>\n  Function: lattr(&lt;obj&gt;[/&lt;wild&gt;][,&lt;targ&gt; [,&lt;type&gt;][,&lt;flg&gt;][,&lt;regexp&gt;][,&lt;tree&gt;])\n \n  Returns a list of the attributes set on &lt;obj&gt;.  If &lt;wild&gt; is given, only\n  attributes matching it are returned.  If you specify &lt;regexp&gt; as true (1)\n  then the wildcard pattern may be regular expressions.  You may specify the \n  optional target if you wish to return attributes that only the target\n  could see.  If you do not have control over target, it defaults to yours.\n  If the &lt;tree&gt; option is set to '1', it returns attributes based on Penn's\n  trees. \n   \n  You may specify a type to check against.  The following types exist:\n    + - List existing lock attributes on player.\n    $ - list all attributes that are $commands.\n    ^ - list all attributes that are ^listens.\n    &amp; - list all attributes that contain all attribute flags &lt;flags&gt;.\n    | - list all attributes that contain any attribute flags &lt;flags&gt;.\n    l - list total attributes and pages of attributes.\n    # - page (1, 2, etc) for attribute listing.  118 for 32byte attrs.\n    &gt; - find the alphanumerical largest attribute name.\n    &lt; - find the alphanumerical smallest attribute name.\n    ~ - [~#1-#2] list attribs starting at #1 until count of #2.\n  \n  { see 'help lattr2' to continue }\n\n</PRE>\n<A HREF=\"#lastcreate()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lattr2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lattr2 \"><H3>LATTR2 </H3></A><PRE>\n  CONTINUED\n  Function: lattr(&lt;obj&gt;[/&lt;wild&gt;][,&lt;targ&gt; [,&lt;type&gt;][,&lt;flg&gt;][,&lt;regexp&gt;][,&lt;tree&gt;])\n  \n  Example:\n    &gt; @va me=$whee:@pemit %#=you did a whee.\n    &gt; @vb me=^*wow*:@pemit %#=You're hearing a wow.\n    &gt; say lattr(me)\n    You say &quot;Desc VA VB VC VE Last VV Domain XX&quot;\n    &gt; say lattr(me/v*)\n    You say &quot;VA VB VC VE VV&quot;\n    &gt; say lattr(me/v*,*TinyPlayer)\n    You say &quot;VC VE VV&quot;\n    &gt; say lattr(me/v*,,$)\n    You say &quot;VA&quot;\n    &gt; say lattr(me/v*,,^)\n    You say &quot;VB&quot;\n    &gt; say lattr(me/^..$,,,1)\n    You say &quot;VA VB VC VE VV XX&quot;\n \n  See Also: @dolist, attrcnt(), vattrcnt(), cluster_lattr()\n  \n</PRE>\n<A HREF=\"#lattr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lavg()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lavg()\"><H3>LAVG()</H3></A><PRE>\n  Function: lavg(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function takes a list of numbers and takes the average of all the \n  numbers added together.  It may take an optional delimiter.\n  \n  Example:\n    &gt; say lavg(2 4 6 8 10)\n    You say &quot;6&quot;\n    &gt; say lavg(2@4@6@8@10,@)\n    You say &quot;6&quot;\n  \n  See Also: lsub(), ldiv(), lmul(), lmax(), lmin(), ladd()\n  \n</PRE>\n<A HREF=\"#lattr2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lcmds()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lcmds()\"><H3>LCMDS()</H3></A><PRE>\n  Function: lcmds(&lt;object&gt; [,&lt;output delim&gt; [,&lt;type&gt;]])\n  \n  This function returns the name of any command that exits on the\n  object.  You may specify $-commands or ^-listens to search for.\n  The output seperator defaults at a space, but you may wish to\n  specify a delimiter as commands may contain spaces.\n  The following types exist:\n    $ - list all commands on the target object.\n    ^ - list all listens (of the ^ variety) on the target object.\n  \n  Examples:\n    &gt; @va thing=$test:@pemit %#=testing 1 2 3\n    &gt; @vb thing=$test * test *:@pemit %#=You tested %0 with %1.\n    &gt; @vc thing=^* says *:@pemit %#=%0 said %1.\n    &gt; say lcmds(thing)\n    You say &quot;test test * test *&quot;\n    &gt; say lcmds(thing,|)\n    You say &quot;test|test * test *&quot;\n    &gt; say lcmds(thing,,^)\n    You say &quot;* says *&quot;\n    &gt; say lcmds(thing,|,^)\n    You say &quot;* says *&quot;\n  \n  See Also: lattr()\n  \n</PRE>\n<A HREF=\"#lavg()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lcon()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lcon()\"><H3>LCON()</H3></A><PRE>\n  Function: lcon(&lt;object&gt;[/switch] [,&lt;switch&gt;][,&lt;output seperator&gt;][,0|1)])\n \n  Returns a space-separated list of the contents of &lt;object&gt;.\n  It takes specific switches as an option:\n      /PLAYER  -- lists all TYPE players in the contents.\n      /OBJECT  -- lists all TYPE objects in the contents.\n      /CONNECT -- lists all connected players in the contents.\n      /PUPPET  -- lists all flag type 'PUPPET' in the contents.\n      /LISTEN  -- lists all listening things in the contents.\n  \n  You may optionally specify the switch as the second argument, without \n  the '/' before it, to do the same thing.  This will cause any /switch\n  you have in the first argument to assume it's part of the object name.\n  The function takes an output seperator as an optional third argument.\n\n  If the optional last argument is set to 1, lcon will display the object\n  names instead of the #dbrefs.\n\n  By default, Rhost returns '#-1' if lcon() returns no objects. If the\n  config option mux_lcon_compat is set to '1', lcon() will return an empty\n  string instead, for MUX compatibility.\n  \n  Example:\n    &gt; inv\n    t1(#366)\n    radio(#223p)\n    &gt; say lcon(me)\n    You say &quot;#366 #223&quot;\n    &gt; say lcon(me/puppet)\n    You say &quot;#223&quot;\n    &gt; say lcon(me,puppet)\n    You say &quot;#223&quot;\n  \n  See Also: lexits(), @dolist\n  \n</PRE>\n<A HREF=\"#lcmds()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lcstr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lcstr()\"><H3>LCSTR()</H3></A><PRE>\n  Function: lcstr(&lt;string&gt;)\n \n  Returns &lt;string&gt; with all letters converted to lowercase.\n \n  Example:\n    &gt; say lcstr(This is something I want to TEST)\n    You say &quot;this is something I want to test&quot;\n  \n  See Also: capstr(), ucstr()\n  \n</PRE>\n<A HREF=\"#lcon()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ldelete()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ldelete()\"><H3>LDELETE()</H3></A><PRE>\n  Function: ldelete(&lt;list&gt;, &lt;pos&gt; [&lt;pos2&gt;...&lt;posN&gt;] [, &lt;sep&gt;])\n \n  This function removes a word from &lt;list&gt; by position.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n  \n  The &lt;pos&gt; fields may be negative to take the argument from the right\n  instead of the left.\n   \n  Examples:\n    &gt; say ldelete(This is not a test, 3)\n    You say &quot;This is a test&quot;\n    &gt; say ldelete(Yet@Another@Mundane@List, 3, @)\n    You say &quot;Yet@Another@List&quot;\n  \n  See Also: extract(), extractword(), insert(), replace(), rindex()\n  \n</PRE>\n<A HREF=\"#lcstr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ldiv()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ldiv()\"><H3>LDIV()</H3></A><PRE>\n  Function: ldiv(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function takes the first number in the list, and divides from that\n  all the other numbers in the list.  All zeros are ignored.  It may\n  take an optional delimiter.\n  \n  Example:\n    &gt; say ldiv(20 2 0 0 0 0 2)\n    You say &quot;5&quot;\n    &gt; say ldiv(20@2@0@0@0@0@2,@)\n    You say &quot;5&quot;\n  \n  See Also: lavg(), lmul(), lsub(), lmax(), lmin(), ladd()\n  \n</PRE>\n<A HREF=\"#ldelete()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#leave\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"leave\"><H3>leave</H3></A><PRE>\n  Command: leave[/&lt;switch&gt;]\n  This command leave allows you to exit an object you have entered, arriving\n  in the same location as the object. You may not leave an object if you fail\n  that object's LeaveLock (but you may still @teleport out, use an exit inside\n  the object, or go home).\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @oleave/@aleave or @olfail/@alfail\n                attributes on the entered object, and don't perform the\n                @oxenter attribute on your new location.  This switch\n                only works if you control your current location.\n \n  See Also: enter, @lock, ENTER_OK, @aleave, @alfail, @leave, @lfail, @oleave,\n            @olfail, @oxenter\n  \n</PRE>\n<A HREF=\"#ldiv()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#left()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"left()\"><H3>LEFT()</H3></A><PRE>\n  Function: left(&lt;string&gt;, &lt;position&gt;)\n   (Alias): strtrunc(&lt;string&gt;,&lt;position&gt;)\n  \n  Left will take a string and return the left-most position of characters\n  from the string.\n  \n  Example:\n    &gt; say left(this is a test,5)\n    You say &quot;this &quot;\n    &gt; say left(this is a test,10000)\n    You say &quot;this is a test&quot;\n    &gt; say left(this is a test,0)\n    You say &quot;&quot;\n  \n  See Also: right(), mid(), delete(), ljc(), rjc()\n  \n</PRE>\n<A HREF=\"#leave\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lemit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lemit()\"><H3>LEMIT()</H3></A><PRE>\n  Function: lemit(&lt;text&gt;)\n  \n  The lemit() function works just like @emit/room.  It will display &lt;text&gt; at\n  the outermost room from the enactor.  If no room is found, no text will be\n  outputted.  The SIDEFX flag is required to be able to use this function.\n  \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    &gt; say lemit(boo!)\n    boo!\n    You say &quot;&quot;\n  \n  See Also: emit(), pemit(), oemit(), @emit, SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#left()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lexits()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lexits()\"><H3>LEXITS()</H3></A><PRE>\n  Function: lexits(&lt;loc&gt;[,&lt;output seperator&gt;][,0|1)][&lt;key&gt;])\n \n  Returns a space-separated list of the exits in &lt;loc&gt; and its parents.\n  Dark exits are not returned unless you own the location.\n  Parented exits that are set PRIVATE will not be displayed.\n  The function takes an output seperator as an optional second argument.\n \n  If the last optional argument is 1, lexits will display object names\n  instead of #dbrefs.\n  \n  The following optional keys are available:\n    0 - list all children of the target (default)\n    n - List 'n'th 400 children of the target. \n        NOTE: 'n' will be any number from 1 to however many 'pages'\n              So '1' would be first 400, '2' would be second 400, etc.\n    l - List total pages and total children of target.\n     \n  Example:\n    &gt; look here\n    The Town Square\n    You are in the town square.  All around you .....\n    Obvious exits:\n    foo  up  southeast  sw  north  \n    &gt; say lexits(here)\n    You say &quot;#302 #10 #9 #8 #6&quot;\n  \n  See Also: lcon(), @dolist, PARENT OBJECTS\n  \n</PRE>\n<A HREF=\"#lemit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lflags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lflags()\"><H3>LFLAGS()</H3></A><PRE>\n  Function: lflags(&lt;object&gt;[/&lt;attribute&gt;])\n  \n  Lflags works just like flags, but instead of returning the character\n  representation will return the string representation.  You may also\n  get the flags of the specified attribute.  You may wildcard the \n  attribute and lflags() will return the flags of the first attribute\n  matched.\n  \n  Examples:\n    &gt; say lflags(me)\n    You say &quot;PLAYER CONNECTED&quot;\n    &gt; say flags(me)\n    You say &quot;Pc&quot;\n    &gt; say lflags(me/desc)\n    You say &quot;NOPROG&quot;\n    &gt; say flags(me/desc)\n    You say &quot;p&quot;\n  \n  See Also: flags(), hasflag()\n  \n</PRE>\n<A HREF=\"#lexits()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#light\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"light\"><H3>LIGHT</H3></A><PRE>\n  Flag: LIGHT(l)\n  \n  An object or exit that is set LIGHT is visible even when inside a DARK\n  location.  If an object is set both DARK and LIGHT, then its contents are\n  visible even though the object itself is not.\n  \n  See Also: DARK\n  \n</PRE>\n<A HREF=\"#lflags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#link()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"link()\"><H3>LINK()</H3></A><PRE>\n  Function: link(&lt;object&gt;,&lt;target&gt;)\n  \n  The link() function is a side-effect for the @link command.  All\n  restrictions and permissions of that command follow this function.  The\n  SIDEFX flag is required to use link().\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; @link me=here\n  Home set.\n  &gt; say link(me,here)\n  You say &quot;&quot;\n  \n  See Also: @link, SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#light\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#link_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"link_ok\"><H3>LINK_OK</H3></A><PRE>\n  Flag: LINK_OK(L)  \n  \n  If a room is LINK_OK, anyone can link exits to it (but \n  still not from it). It has no meaning for people, things, or exits.\n  \n  See Also: @link\n  \n</PRE>\n<A HREF=\"#link()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#linking \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"linking \"><H3>LINKING </H3></A><PRE>\n  Topic: LINKING\n \n  You can link to a room if you control it, or if it is set LINK_OK or ABODE.\n  Being able to link means you can set the homes of objects or yourself to\n  that room if it is set ABODE, and that you can set the destination of exits\n  to that room if it is LINK_OK.\n  \n  See Also: @link, ABODE, LINK_OK\n  \n</PRE>\n<A HREF=\"#link_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#list functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"list functions\"><H3>list functions</H3></A><PRE>\n  Function Lists: List Functions\n  \n  aindex()      - Appends a string at a position in another string.\n  aiindex()     - Similar to aindex(), but allows adding to an empty string.\n  andflags()    - Checks if a target has all the indicated flags.\n  caplist()     - Performs a capstr() on a list of words.\n  citer()       - Similar to iter(), but by character instead of word.\n  delextract()  - Returns words specified that are not present in a list.\n  elements()    - Returns specific elements from a list\n  elementsmux() - Same as elements(), but null arguments are valid here.\n  elist()       - Generates English-readable text from a list\n  extract()     - Returns a string of &lt;length&gt; words.\n  extractword() - Returns a string of &lt;length&gt; words (multi-delim).\n  filter()      - Filters a list through an attribute evaluation\n  first()       - Returns the first element of a list.\n  flags()       - Returns a flag list for a specified object.\n  fold()        - Iteriatively processes a list through a function.\n  foreach()     - Processes a list of characters through a function.\n  ibreak()      - Break out of the specified iteration of iter()/list().\n  iindex()      - Similar to index, but inserts &lt;string&gt; at &lt;position&gt;.\n  ilev()        - Returns the level of recursion you are at in iter().\n  index()       - Like extract(), but supports items being more than one word.\n  insert()      - Inserts a word into a list.\n  inum()        - The equivalant of #@ inside an iter()\n  iter()        - Iterates over a list, and processes code for each member.\n  itext()       - The equivalent of ## inside an iter()\n  keeptype()    - Strips dbrefs from a list that are not of a certain type.\n  ladd()        - Takes a list of numbers and adds them together.\n  land()        - Goes through a list of numbers, and'ing the numbers together.\n  last()        - Returns the last element of a list.\n  lavg()        - Takes a list of numbers and returns the average of those.\n\n  { Continued in list functions2 }\n\n</PRE>\n<A HREF=\"#linking \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#list functions2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"list functions2\"><H3>list functions2</H3></A><PRE>\n  Continued from list functions\n  \n  ldelete()     - Removes a word from a list at a certain position.\n  ldiv()        - Takes a number, and divides a list against it.\n  listdiff()    - Returns differences (unsorted) of two lists.\n  listinter()   - Returns the intersection (unsorted) of two lists.\n  listmatch()   - Tries to match a pattern to a string, and returns matches.\n  listunion()   - Returns the union (unsorted) of two lists.\n  lmax()        - Returns the maximum value from a list.\n  lmin()        - Returns the minimum value from a list.\n  lmul()        - Takes a list of numbers and multiplies them together.\n  lnor()        - Takes a list and returns the nor of its values.\n  lnum()        - Returns a list of numbers from 0 to number-1\n  lnum2()       - Returns a list of numbers from X to number-1\n  lor()         - Or's a list of values together\n  lrand()       - Returns a specified random number of elements from a list.\n  lreplace()    - Replaces words in a list.\n  lsub()        - Takes a list, and subtract the values from the first element.\n  lxnor()       - Performs an exclusive nor on a list of booleans.\n  lxor()        - Performs an exclusive or on a list of booleans.\n  map()         - Almost like iter() working on an u() function.\n  match()       - Matches a wildcard pattern against a list of words.\n  member()      - Returns the position of a matched pattern in a list.\n  \n  { Continued in list functions3 }\n  \n</PRE>\n<A HREF=\"#list functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#list functions3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"list functions3\"><H3>list functions3</H3></A><PRE>\n  Continued from list functions2\n      \n  mix()         - Similar to map(), but slightly different. ;)\n  munge()       - Munges two lists through an u() function.\n  nsiter()      - Like iter, but with different delimiter parsing.\n  nummatch()    - Returns the number of matches of a pattern.\n  nummember()   - Returns the number of literal list matches.\n  numwildmatch()- Returns the number of matches against a pattern.\n  parse()       - Parses a list through a function evaluation.\n  randmatch()   - Resembles totmatch(), but with randomized results.\n  randextract() - Similar to extract(), but randomizes output.\n  remove()      - Removes a word from a list.\n  remtype()     - Returns a list of dbrefs, filtering out &lt;type&gt;.\n  rest()        - Returns the remnant of a list after a certain element.\n  reverse()     - Reverses the order of characters in a string.\n  revwords()    - Reverses the order of words in a string.\n  rindex()      - Similar to index().\n  safebuff()    - Secures output against overflowing LBUF\n  setdiff()     - Returns the difference of two lists.\n  setinter()    - Returns the intersection of two lists.\n  setunion()    - Returns the union of two lists.\n  sort()        - Sorts a list.\n  sortby()      - Sorts a list by passing it through a function.\n  sortlist()    - Sorts 2 or more lists by the specified order type.\n\n  { Continued in list functions4 }\n</PRE>\n<A HREF=\"#list functions2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#list functions4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"list functions4\"><H3>list functions4</H3></A><PRE>\n  Continued from list functions3\n  \n  step()        - Steps through a list X elements at a time. \n  strfunc()     - Transforms a string of arguments to proper arguments.\n  strmath()     - Applies math to a string.\n  totmatch()    - Returns all matches of a pattern against a string.\n  totmember()   - Returns all matches of a pattern against a list.\n  totwildmatch()- Like wildmatch(), but returns every match.\n  while()       - Evaluates a list until a condition is reached.\n  wildmatch()   - Matches a pattern against a string.\n  \n</PRE>\n<A HREF=\"#list functions3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#list()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"list()\"><H3>LIST()</H3></A><PRE>\n  Function: list(&lt;list&gt;, &lt;eval&gt;[, &lt;delim&gt; ][, &lt;header&gt;][, &lt;target&gt;])\n \n  This function works just like iter() but returns each result on a seperate\n  line thereby bypassing the buffer limit that RhostMUSH contains.  Each line\n  will be a new line and will not be space delimited and will be displayed\n  PRIOR to the output of the command calling it.\n  \n  &lt;list&gt; is a &lt;delimiter&gt;-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  &lt;eval&gt; is a string that is to be\n  evaluated once for each item in &lt;list&gt;, replacing the special symbol ## with\n  the corresponding item from &lt;list&gt;.  A space-separated list of the results\n  of these evaluations is returned to the caller.  The effect is very similar\n  to @dolist, except that the results are made into a list and returned, not\n  executed.  The special symbol #@ can be used to return the positional match\n  of the current item of the list.  list() will work without SIDEFX.  You may \n  specify an optional &lt;header&gt; which will be displayed prior to the lists.\n  &lt;target&gt; optionally sends output to the target player.  You must control\n  the target or it will default to the enactor.\n  \n  You may use %i0-%i9 for itext(0) to itext(9).  \n  You may use %il for the outermost layer, equiv to itext(ilev())\n   \n  {See 'help list2' for examples}\n\n</PRE>\n<A HREF=\"#list functions4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#list2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"list2\"><H3>LIST2</H3></A><PRE>\n  Function: list(&lt;list&gt;, &lt;eval&gt;[, &lt;delim&gt; ][, &lt;header&gt;][, &lt;target&gt;])\n \n  Examples:\n    &gt; @emit [list(This test,-## #@-)]\n    -This 1-\n    -test 2-\n    &gt; @emit AA[list(This@is,strlen(##),@)]BB   (notice the output)\n    4\n    2\n    AABB\n    &gt; @wait 0={@emit AA;@emit [list(This@is,strlen(##),@)]BB}\n    AA\n    4\n    2\n    BB\n    &gt; @emit [list(This@is,strlen(%i0),@,AA)]BB\n    AA\n    4\n    2\n    BB\n    \n  See Also: nsiter(), citer(), @dolist, parse(), list()\n  \n</PRE>\n<A HREF=\"#list()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listcommands()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listcommands()\"><H3>LISTCOMMANDS()</H3></A><PRE>\n  Function: listcommands()\n  \n  This function will return all the commands that you have access to.\n  \n  Example:\n    &gt; say listcommands()\n    You say &quot;@@ @alias ... &quot;\n  \n  See Also: listfunctions(), listtoggles()\n  \n</PRE>\n<A HREF=\"#list2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listdiff()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listdiff()\"><H3>LISTDIFF()</H3></A><PRE>\n  Function: listdiff(&lt;list1&gt;, &lt;list2&gt;[, &lt;delim&gt; [, &lt;sep&gt;] [,&lt;type&gt;]]])\n  \n  This function returns the difference of two sets, keeping the order of the\n  first set.  Any element in &lt;list1&gt; that is not in &lt;list2&gt; will be \n  displayed.  The following types exist:\n  \n      0 - remove duplicates from lists (default)\n      1 - show list with duplicates\n  \n  Example:\n    &gt; say listdiff(foo baz gleep bar foo foo, bar moof gleep)\n    You say, &quot;foo baz&quot;\n    &gt; say listdiff(foo baz gleep bar foo foo, bar moof gleep,,-)\n    You say, &quot;foo-baz&quot;\n    &gt; say listdiff(foo baz gleep bar foo foo, bar moof gleep,,-,1)\n    You say, &quot;foo-baz-foo-foo&quot;\n  \n  See Also: listunion(), listinter(), setdiff()\n\n</PRE>\n<A HREF=\"#listcommands()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listen\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listen\"><H3>listen</H3></A><PRE>\n  Command: listen [&lt;object&gt;]\n  Displays the sounds of &lt;object&gt;, or the location you're in if you don't\n  specify an object.  Specifying object as &lt;name&gt; or #&lt;dbref&gt; or 'me' or\n  'here' is legal.  You can also use listen to hear objects held by other\n  people.  Just use 'listen &lt;person&gt;'s &lt;object&gt;'.\n  \n  This command is not to be confused with @listen.\n  \n  See Also: look, smell, touch, taste, @slisten, @salisten, @solisten\n  \n</PRE>\n<A HREF=\"#listdiff()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listening\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listening\"><H3>LISTENING</H3></A><PRE>\n  Topic: LISTENING\n \n  Thee are two ways to listen for something in a room. The easiest way\n  is to use a combination of @listen and @ahear/@aahear/@amhear. The\n  second way is to use a &quot;^&quot; pattern in an attribute, similar to the way\n  &quot;$&quot; is used for user-defined commands. The attribute takes the form:\n  '^&lt;pattern&gt;:&lt;action&gt;'.\n \n  The ^-pattern check is only performed on objects with their MONITOR flag\n  set.  The criterion for triggering a pattern-listen is the same as that for\n  triggering an @ahear - the object cannot trigger its own listen patterns.\n  All matching attributes have their &lt;action&gt;s performed, not just the first.\n  Also, attributes with the no_command flag set are not checked for \n  ^-patterns, and neither are objects' parents.\n \n  Example:\n    &gt; @va test = ^* says &quot;foo *&quot;:say I got a foo with %1!.\n    Set.\n    &gt; @set test=monitor\n    test grows ears and can now hear.\n    &gt; say foo bar\n    You say &quot;foo bar&quot;\n    test says &quot;I got a foo with bar!.&quot;\n  \n  See Also: @ahear, @listen, @set, PUPPET, AUDIBLE, MONITOR\n  \n</PRE>\n<A HREF=\"#listen\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listflags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listflags()\"><H3>LISTFLAGS()</H3></A><PRE>\n  Function: listflags()\n  \n  This function will return all the flags that you have access to.\n  \n  Example:\n    &gt; say listflags()\n    You say &quot;ABODE(A) ARCHITECT(B) ... &quot; \n  \n  See Also: listcommands(), listfunctions()\n  \n</PRE>\n<A HREF=\"#listening\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listfunctions()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listfunctions()\"><H3>LISTFUNCTIONS()</H3></A><PRE>\n  Function: listfunctions([keyval])\n  \n  This function will return all the functions that you have access to.\n  Valid keyvalues are:\n    0 - List all functions (built-in and user-defined)  This is the default.\n    1 - List only the built-in functions.\n    2 - List only the user-defined functions.\n  \n  Example:\n    &gt; say listfunctions()\n    You say &quot;@@ ABS ... &quot;\n   \n  See Also: listcommands(), listtoggles()\n  \n</PRE>\n<A HREF=\"#listflags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listinter()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listinter()\"><H3>LISTINTER()</H3></A><PRE>\n  Function: listinter(&lt;list1&gt;, &lt;list2&gt;[, &lt;delim&gt; [, &lt;sep&gt;] [,&lt;type&gt;]]])\n  \n  This function returns the intersection of two sets, keeping the order of the\n  first set.  Any element in &lt;list1&gt; that is in &lt;list2&gt; will be\n  displayed.  The following types exist:\n  \n      0 - remove duplicates from lists (default)\n      1 - show list with duplicates\n  \n  Example:\n    &gt; say listinter(foo baz gleep bar foo bar, bar moof gleep)\n    You say, &quot;gleep bar&quot;\n    &gt; say listinter(foo baz gleep bar foo bar, bar moof gleep,,-)\n    You say, &quot;gleep-bar&quot;\n    &gt; say listinter(foo baz gleep bar foo bar, bar moof gleep,,-,1)\n    You say, &quot;gleep-bar-bar&quot;\n  \n  See Also: listunion(), listdiff(), setinter()\n\n\n</PRE>\n<A HREF=\"#listfunctions()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listmatch()\"><H3>LISTMATCH()</H3></A><PRE>\n  Function: listmatch(&lt;string&gt;, &lt;pattern&gt;[, &lt;delimiter&gt;])\n \n  The listmatch() function tries to match &lt;pattern&gt; against &lt;string&gt;. If it\n  succeeds, it returns a list of the text that matched each wildcard (up to\n  ten) in &lt;pattern&gt;. Normally, the list is space-separated, but if\n  &lt;delimiter&gt; is specified, the list will be separated by that instead.\n \n  If it fails, or &lt;pattern&gt; contains no wildcards, it returns an empty\n  string.\n \n  Example:\n    &gt; say listmatch(This is a test, *test)\n    You say &quot;This is a &quot;\n    &gt; say listmatch(hit the troll with the sword, hit * with *, /)\n    You say &quot;the troll/the sword&quot;\n    &gt; say listmatch(kow, wok)\n    You say &quot;&quot;\n  \n  See Also: setqmatch(), match(), totmatch(), wildmatch()\n  \n</PRE>\n<A HREF=\"#listinter()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listnewsgroups()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listnewsgroups()\"><H3>LISTNEWSGROUPS()</H3></A><PRE>\n  Function: listnewsgroups([&lt;player&gt;])\n  \n  This function serves two purposes.  If no arguments are given, it will\n  display all the news groups currently available.  If you specify a player\n  that you control, it will list all the news groups that player has access\n  to.  If you do not control the player, or if the player is not valid, it\n  returns an error message.\n  \n  Examples:\n    &gt; say listnewsgroups()\n    You say &quot;admin info general&quot;\n    &gt; say listnewsgroups(me)\n    You say &quot;info general&quot;\n  \n  See Also: news, news cmdlist\n  \n</PRE>\n<A HREF=\"#listmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listprotection()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listprotection()\"><H3>LISTPROTECTION()</H3></A><PRE>\n  Function: listprotection(&lt;player&gt; [,&lt;key&gt;,&lt;delim&gt;])\n  \n  This function will list all the 'protected names' (ergo @protect) that the\n  player has.  If no key is specified (or a 0 specified as key) it lists all\n  protected names.  The following keys exist:\n  \n    0 - list all protected names of the target player (default)\n    1 - list only the protected names that are marked as aliases.\n    2 - list only the protected names that are not marked as aliases.\n  \n  If the player is invalid, it returns an error, otherwise it returns an\n  empty string if nothing is found for that criteria.\n  \n  The default deliminator is a colon (:).\n  \n  Example:\n    &gt; say listprotection(me)\n    You say &quot;Bob|Bobby&quot;\n  \n  See Also: @protect, @name, @alias\n\n</PRE>\n<A HREF=\"#listnewsgroups()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listrlevels()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listrlevels()\"><H3>LISTRLEVELS()</H3></A><PRE>\n  Function: listrlevels()\n  \n  Returns all available levels in a space seperated list.  This function\n  takes no arguments.\n  \n  Example:\n    &gt; say listrlevels()\n    You say &quot;Real Shadow Auf Umbra&quot;\n  \n  See Also: txlevel(), rxlevel(), chkreality()\n\n</PRE>\n<A HREF=\"#listprotection()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lists\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lists\"><H3>LISTS</H3></A><PRE>\n  Topic: LISTS\n \n  A list is a string, usually stored in an attribute (currently any of the\n  va-vz attributes), which is a series of words, separated by one or more\n  spaces.  The following would be a list (denoted on the ends by ', which is\n  not actually in the string): 'one two three four five'.  The functions\n  first(), rest(), cat(), member(), and remove(), all work on lists.\n   \n  See Also: cat(), first(), member(), remove(), rest(), randextract()\n  \n</PRE>\n<A HREF=\"#listrlevels()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listtoggles()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listtoggles()\"><H3>LISTTOGGLES()</H3></A><PRE>\n  Function: listtoggles()\n  \n  This function will return all the toggles that you have access to.\n  \n  Example:\n    &gt; say listtoggles()\n    You say &quot;VANILLA_ERRORS(V) ... &quot;\n    \n  See Also: listcommands(), listfunctions()\n  \n</PRE>\n<A HREF=\"#lists\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#listunion()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"listunion()\"><H3>LISTUNION()</H3></A><PRE>\n  Function: listunion(&lt;list1&gt;, &lt;list2&gt;[, &lt;delim&gt; [, &lt;sep&gt;] [,&lt;type&gt;]]])\n  \n  This function returns the union of two sets, keeping the order of the\n  first set.  Any element in &lt;list2&gt; that is not in &lt;list1&gt; will be\n  appended to the list in &lt;list1&gt;.  The following types exist:\n  \n      0 - remove duplicates from lists (default)\n      1 - show list with duplicates\n  \n  Example:\n    &gt; say listunion(foo baz gleep bar foo bar, bar moof gleep)\n    You say, &quot;foo baz gleep bar moof&quot;\n    &gt; say listunion(foo baz gleep bar foo bar, bar moof gleep,,-)\n    You say, &quot;foo-baz-gleep-bar-moof&quot;\n    &gt; say listunion(foo baz gleep bar foo bar, bar moof gleep,,-,1)\n    You say, &quot;foo-baz-gleep-bar-foo-bar-moof&quot;\n  \n  See Also: listinter(), listdiff(), setunion()\n\n</PRE>\n<A HREF=\"#listtoggles()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lit()\"><H3>LIT()</H3></A><PRE>\n  Function: lit(&lt;string&gt;)\n  \n  This function returns the string 'as-is' without formatting or evaluation.\n  \n  Examples:\n    &gt; say [space(3)]hi[space(3)]\n    You say &quot;   hi   &quot;\n    &gt; say [lit([space(3)]hi[space(3)])]\n    You say &quot;[space(3)]hi[space(3)]&quot;\n  \n</PRE>\n<A HREF=\"#listunion()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lj()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lj()\"><H3>LJ()</H3></A><PRE>\n  Functions: ljust(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n  Functions: lj(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n \n  This function pads a string with trailing &lt;fill&gt; characters, or with spaces\n  if no fill character is given) (&quot;left-justifies&quot;) so it is &lt;length&gt; long.\n  If &lt;string&gt; is longer than &lt;length&gt;, the &lt;string&gt; is returned; it is not\n  truncated.  &lt;fill&gt; may be a string of more than one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Examples:\n    &gt; say -[ljust(foo,6)]-\n    You say &quot;-foo   -&quot;\n    &gt; say %r0[ljust(foo,6)]7%r01234567\n    You say &quot;\n    0foo   7\n    01234567&quot;\n    &gt; say =[ljust(bar,5,.)]=\n    You say &quot;=bar..=&quot;\n  \n  Alternate:\n    &gt; say =[printf($:.:-5s,bar)]=      (the '-' specifies left justifies)\n    You say &quot;=bar..=&quot;\n  \n  See Also: ljc(), rjust(), rjc(), strlen(), printf(), wrap()\n  \n</PRE>\n<A HREF=\"#lit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ljc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ljc()\"><H3>LJC()</H3></A><PRE>\n  Function: ljc(&lt;string&gt;, &lt;length&gt; [,&lt;fill&gt;])     'Left Justify and Cut'\n   \n  This function pads a string with trailing blanks to left justify the \n  &lt;string&gt; within a field of &lt;length&gt; characters. If &lt;string&gt; is longer \n  than &lt;length&gt; it will be cut to fit within a field of &lt;length&gt; characters.\n  You may specify an optional fill character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Examples:\n    &gt; say -[ljc(foo,6)]-\n    You say &quot;-foo   -&quot;\n    &gt; say -[ljc(this is foo,6)]-\n    You say &quot;-this i-&quot;\n   \n  See Also: ljust(), rjc(), rjust(), printf(), wrap()\n \n</PRE>\n<A HREF=\"#lj()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ljust()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ljust()\"><H3>LJUST()</H3></A><PRE>\n  Functions: ljust(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n  Functions: lj(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n \n  This function pads a string with trailing &lt;fill&gt; characters, or with spaces\n  if no fill character is given) (&quot;left-justifies&quot;) so it is &lt;length&gt; long.\n  If &lt;string&gt; is longer than &lt;length&gt;, the &lt;string&gt; is returned; it is not\n  truncated.  &lt;fill&gt; may be a string of more than one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Examples:\n    &gt; say -[ljust(foo,6)]-\n    You say &quot;-foo   -&quot;\n    &gt; say %r0[ljust(foo,6)]7%r01234567\n    You say &quot;\n    0foo   7\n    01234567&quot;\n    &gt; say =[ljust(bar,5,.)]=\n    You say &quot;=bar..=&quot;\n  \n  Alternate:\n    &gt; say =[printf($:.:-5s,bar)]=      (the '-' specifies left justifies)\n    You say &quot;=bar..=&quot;\n  \n  See Also: ljc(), rjust(), rjc(), strlen(), printf(), wrap()\n  \n</PRE>\n<A HREF=\"#ljc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lloc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lloc()\"><H3>LLOC()</H3></A><PRE>\n  Function: lloc(&lt;target&gt;)\n  \n  This function returns all the locations of the player until a condition\n  is met.  \n  \n  Condition #1:  The first room is found and it exits normally.\n  Condition #2:  It surpasses the max drill-down of locations (20)\n  Condition #3:  It detects recursive contents.\n  \n  Example:\n    &gt; @dig Room\n    Room created with room number 1768.\n    &gt; @tel #1768\n    Room(#1768)\n    &gt; @create An Object\n    An Object created as object #1767\n    &gt; @drop An Object\n    Dropped.\n    &gt; enter An Object\n    An Object(#1767)\n    &gt; say lloc(me)\n    You say &quot;#1767 #1768&quot;\n  \n  See Also: lroom(), loc(), rloc(), room()\n  Function idea from Akallabeth, a PENNMush.\n  \n</PRE>\n<A HREF=\"#ljust()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lmath()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lmath()\"><H3>LMATH()</H3></A><PRE>\n  See strfunc()\n\n</PRE>\n<A HREF=\"#lloc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lmax()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lmax()\"><H3>LMAX()</H3></A><PRE>\n  Function: lmax(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function returns the maximum value from the list.  You may specify an\n  optional delimiter.\n  \n  Example:\n    &gt; say lmax(1 10 2 4 6)\n    You say &quot;10&quot;\n    &gt; say lmax(1@10@2@4@6,@)\n    You say &quot;10&quot;\n  \n  See Also: lmin(), max(), min(), alphamax(), alphamin()\n  \n</PRE>\n<A HREF=\"#lmath()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lmin()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lmin()\"><H3>LMIN()</H3></A><PRE>\n  Function: lmin(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function returns the minimum value from the list.  You may specify an\n  optional delimiter.\n  \n  Example:\n    &gt; say lmax(1 10 2 -4 6)\n    You say &quot;-4&quot;\n    &gt; say lmax(1@10@2@-4@6,@)\n    You say &quot;-4&quot;\n  \n  See Also: lmax(), max(), min(), alphamax(), alphamin()\n    \n</PRE>\n<A HREF=\"#lmax()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lmul()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lmul()\"><H3>LMUL()</H3></A><PRE>\n  Function: lmul(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function takes the list of numbers and multiplies them all together\n  and returns the result.  It may take an optional delimiter.\n  \n  Example:\n    &gt; say lmul(2 2 2 2)\n    You say &quot;16&quot;\n    &gt; say lmul(2@2@2@2,@)\n    You say &quot;16&quot;\n  \n  See Also: lavg(), ldiv(), lsub(), lmax(), lmin(), ladd()\n  \n</PRE>\n<A HREF=\"#lmin()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ln()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ln()\"><H3>LN()</H3></A><PRE>\n  Function: ln(&lt;number&gt;)\n \n  Returns the result of taking the natural logarithm (base e) of &lt;number&gt;.\n  &lt;number&gt; may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    &gt; say ln(0)\n    You say &quot;#-1 LN OF NEGATIVE OR ZERO&quot;\n    &gt; say ln(1)\n    You say &quot;0&quot;\n    &gt; say ln(e())\n    You say &quot;1&quot;\n    &gt; say ln(10)\n    You say &quot;2.302585&quot;\n  \n  See Also: e(), exp(), log(), power(), power10()\n  \n</PRE>\n<A HREF=\"#lmul()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lnor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lnor()\"><H3>LNOR()</H3></A><PRE>\n  Function: lnor(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  Takes the list, and returns true(1) if values are false(0) or \n  false(0) if values are true(1).  You may specify an optional\n  delimiter.\n  \n  Example:\n    &gt; say lnor(0 0)\n    You say &quot;1&quot;\n    &gt; say lnor(0@0,@)\n    You say &quot;1&quot;\n  \n  See Also: land(), lnor(), lxor(), lxnor()\n  \n</PRE>\n<A HREF=\"#ln()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lnum()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lnum()\"><H3>LNUM()</H3></A><PRE>\n  Function: lnum(&lt;number&gt;[,&lt;number&gt;,&lt;seperator&gt;,&lt;stepping&gt;])\n \n  Returns a list of numbers from 0 to &lt;number&gt;-1.\n  If a second number is specified it tells to use\n  the range of numbers between the two values.\n  The order you put it in specifies if it increments\n  or decrements the value.  You may specify a stepping\n  value for the list.\n \n  Example:\n    &gt; say lnum(5) \n    You say &quot;0 1 2 3 4&quot;\n    &gt; say lnum(5,10)\n    You say &quot;5 6 7 8 9 10&quot;\n    &gt; say lnum(5,10,,2)\n    You say &quot;5 7 9&quot;\n    &gt; say lnum(7,3)\n    You say &quot;7 6 5 4 3&quot;\n    &gt; say lnum(1,5,@)\n    You say &quot;1@2@3@4@5&quot;\n  \n  See Also: lnum2()\n  \n</PRE>\n<A HREF=\"#lnor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lnum2()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lnum2()\"><H3>LNUM2()</H3></A><PRE>\n  Function: lnum2(&lt;number&gt;[,&lt;number&gt;,&lt;arg&gt;,&lt;stepping&gt;])\n  \n  Returns a list of numbers from 0 to &lt;number&gt;-1.\n  The optional second number tells what number\n  to start at. The arg is to tell it to\n  increment(+) or decrement(-) the values.  The\n  default argument is increment.  You may specify a\n  stepping value for the list.\n  \n  Example:\n    &gt; say lnum2(5)\n    You say &quot;0 1 2 3 4&quot;\n    &gt; say lnum2(10,5,+)\n    You say &quot;5 6 7 8 9 10 11 12 13 14&quot;\n    &gt; say lnum2(10,5,+,2)\n    You say &quot;5 7 9 11 13 15 17 19 21 23&quot;\n    &gt; say lnum2(10,20,-)\n    You say &quot;20 19 18 17 16 15 14 13 12 11&quot;\n  \n  See Also: lnum()\n  \n</PRE>\n<A HREF=\"#lnum()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#loc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"loc()\"><H3>LOC()</H3></A><PRE>\n  Function: loc(&lt;object&gt;)\n \n  Returns the number of the location where &lt;object&gt; is.  You must either\n  control the object or be nearby for it to work.  When used on an exit it\n  returns the destination of the exit.  You can also use loc() to find the\n  location of players that are not set UNFINDABLE.\n \n  Example:\n    &gt; look\n    Mortal's Room(#367R)\n    A bare room with nothing in it but a bed and a chair.\n    Contents:\n    hat(#368)\n    &gt; say loc(me)\n    You say &quot;#367&quot;\n    &gt; enter hat\n    hat(#368)\n    Contents:\n    cat(#325)\n    &gt; say loc(me)\n    You say &quot;#368&quot;\n    &gt; say loc(here)\n    You say &quot;#367&quot;\n  \n  See Also: rloc(), room(), where()\n  \n</PRE>\n<A HREF=\"#lnum2()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#localfunc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"localfunc()\"><H3>LOCALFUNC()</H3></A><PRE>\n  Function: localfunc(&lt;function-name&gt;, &lt;args&gt;...)\n  \n  The localfunc() function is used to call customized functions that are\n  server specific and allows a wrapper so that new functions might be added\n  without having to modify more than a single file of the source.\n  \n  Example:\n    &gt; localfunc(test,This is a test)\n    You say &quot;This was a test. Function: 'test' First Arg: 'This is a test'&quot;\n  \n  See Also: strfunc(), @lfunction\n  \n</PRE>\n<A HREF=\"#loc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#localize()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"localize()\"><H3>LOCALIZE()</H3></A><PRE>\n  Function: localize(&lt;string&gt; [,&lt;register-list&gt;, [&lt;key&gt;]])\n  \n  This function will evaluate &lt;string&gt; while preserving all setq() registers\n  outside of the function.  This is handy for calling global code or other\n  functionality without it effecting your own functions and commands.\n  \n  You may specify a register list if you want only specific registers to be\n  localized.  Otherwise, by default it assumes all registers.\n  \n  Accepted register values are:\n    0-9 -- Standard Q registers.\n    a-z -- Extended Q registers.\n  \n  If the &lt;key&gt; is set to 1, the behavior is reversed and any register that\n  you specify will be omitted from localization.  The default is '0'.\n   \n  Example:\n    &gt; @va me=[setq(0,internal)]--My R0:[r(0)]--\n    Set.\n    &gt; say [setq(0,external)][r(0)][u(va)][r(0)]\n    You say &quot;external--My R0:internal--internal&quot;\n    &gt; say [setq(0,external)][r(0)][localize(u(va))][r(0)]\n    You say &quot;external--My R0:internal--external&quot;\n    &gt; say [setq(0,external)][r(0)][localize(u(va),12345)][r(0)]\n    You say &quot;external--My R0:internal--internal&quot;\n  \n  Note: In the last example, we allowed '12345' to be localized, but not '0'.\n  \n  See Also: pushregs(), ulocal(), zfunlocal(), eval(), privatize(), @lfunction\n  \n</PRE>\n<A HREF=\"#localfunc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#locate()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"locate()\"><H3>LOCATE()</H3></A><PRE>\n  Function: locate(&lt;looker&gt;,&lt;string&gt;,&lt;where&gt;)\n \n  The locate function is used to look for an object from the perspective of\n  &lt;looker&gt; (You must own &lt;looker&gt;).  The database number of the item that\n  is found is returned.  The &lt;where&gt; parameter specifies a list of places to\n  look, from this list:\n    a    - Look for absolute references (#&lt;number&gt;)\n    c    - Look for exits carried by &lt;looker&gt; (and by &lt;looker&gt;'s parents).\n    e    - Look for exits in &lt;looker&gt;'s location (and the location's parents).\n    h    - Look for 'here', which matches &lt;looker&gt;'s location.\n    i    - Look in &lt;looker&gt;'s inventory.\n    m    - Look for 'me', which matches &lt;looker&gt;.\n    n    - Look for &lt;looker&gt;'s neighbors (other objects in the same location).\n    p    - Look for player names prefixed by a '*'\n    *    - Look for everything in the above list.\n  \n{ 'help locate2' for more }\n</PRE>\n<A HREF=\"#localize()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#locate2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"locate2\"><H3>locate2</H3></A><PRE>\n  You may also specify qualifiers in &lt;where&gt; to help resolve possible\n  ambiguities:\n    E    - Prefer exits over other types.\n    L    - Prefer unlocked exits over locked exits.\n    P    - Prefer players over other types.\n    R    - Prefer rooms over other types.\n    T    - Prefer things over other types.\n    V    - Report &quot;Can't find...&quot; and &quot;Which one...&quot; errors to &lt;looker&gt;.\n \n  If nothing matches, the value #-1 is returned.  If more than one thing\n  matches, but nothing matches exactly, the value #-2 is returned.  If more\n  than one thing exactly matches, one is chosen at random.  If you specify\n  more than one type preference (E, P, R, or T), then the last one entered\n  is the one that is obeyed.  The default is for no type to be preferred.\n \n  Examples:\n    &gt; I\n    test1(#378)\n    test(#376)\n    You have 42463 clams.\n  \n{ 'help locate3' for more }\n</PRE>\n<A HREF=\"#locate()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#locate3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"locate3\"><H3>locate3</H3></A><PRE>\n    &gt; look\n    Nullspace(#250R)\n    test1(#382)\n    &gt; say locate(me,test,i)\n    You say &quot;#376&quot;\n    &gt; say locate(me,test,n)\n    You say &quot;#382&quot;\n    &gt; say locate(me,test1,in)\n    You say &quot;#378&quot;\n    &gt; say locate(me,test1,in)\n    You say &quot;#382&quot;\n    &gt; say locate(me,tes,in)\n    You say &quot;#-2&quot;\n    &gt; say locate(here,tes,*)\n    You say &quot;#382&quot;\n    &gt; say locate(me,out,e)\n    You say &quot;#252&quot;\n    &gt; say locate(me,here,*)\n    You say &quot;#250&quot;\n  \n  See Also: num(), PARENT OBJECTS\n  \n</PRE>\n<A HREF=\"#locate2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lock()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lock()\"><H3>lock()</H3></A><PRE>\n  Function: lock(&lt;object&gt;[/&lt;whichlock&gt;][,&lt;key&gt;][,&lt;attribute&gt;])\n \n  Returns the named lock on &lt;object&gt;.  If you don't specify the lock to get,\n  the default lock is returned.  You must control &lt;object&gt;.\n  \n  If side-effects are enabled, it will set the specified lock, otherwise it\n  will return an error.   The keys used are the same as in 'help @lock'\n  The SIDEFX flag is required to use the side-effect portion of lock().\n  \n  Type @list options to see if the side-effect portion of lock() is enabled.\n  \n  If &lt;attribute&gt; is specified, then if &lt;key&gt; is non-null, the attribute \n  specified by &lt;attribute&gt; is 'locked'.  If &lt;key&gt; is empty, then the attribute\n  specified by &lt;attribute&gt; is 'unlocked'.\n\n  Example:\n    &gt; say lock(me)\n    You say &quot;*TinyPlayer&quot;\n    &gt; say lock(me,#0)\n    You say &quot;&quot;\n    &gt; say lock(me)\n    You say &quot;#0&quot;\n    &gt; say lock(me,yes,va)\n    You say &quot;Attribute locked.&quot;\n  \n  See Also: @lock, elock(), lockencode(), lockdecode(), lockcheck()\n  \n</PRE>\n<A HREF=\"#locate3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lockcheck()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lockcheck()\"><H3>lockcheck()</H3></A><PRE>\n  Function: lockencode(&lt;string&gt;)\n            lockdecode(&lt;string&gt;)\n            lockcheck(&lt;string&gt;,&lt;target&gt;)\n  \n  lockencode() returns an encoded string of a boolean lock evaluation.\n   \n  lockdecode() returns the decoded string of the encoded boolean.\n  \n  lockcheck() returns boolean true(1)/false(0) based on the encoded boolean.\n  \n  This is the same value (though encoded) that would be set when you issue\n  a @Lock on something.  This is useful if you wish to enbed lock values\n  in any string or value that you wish to then decrypt at any given time.\n  \n  lockcheck() follows the same rules that elock() would return.\n  \n  Example:\n    &gt; say name(me)\n    You say &quot;Bob&quot;\n    &gt; say lockencode(me&amp;*tester)\n    You say &quot;KCMxMjM0KSYoIzkwMSk=&quot;\n    &gt; say lockdecode(KCMxMjM0KSYoIzkwMSk=)\n    You say &quot;*Bob&amp;*Tester\n    &gt; say lockcheck(KCMxMjM0KSYoIzkwMSk=,me)\n    You say &quot;1&quot;\n    &gt; say lockcheck(KCMxMjM0KSYoIzkwMSk=,*Guest)\n    You say &quot;0&quot;\n  \n  See Also: lockdecode(), lockdecode(), lockcheck(), lock(), elock(), @lock\n\n</PRE>\n<A HREF=\"#lock()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lockdecode()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lockdecode()\"><H3>lockdecode()</H3></A><PRE>\n  Function: lockencode(&lt;string&gt;)\n            lockdecode(&lt;string&gt;)\n            lockcheck(&lt;string&gt;,&lt;target&gt;)\n  \n  lockencode() returns an encoded string of a boolean lock evaluation.\n   \n  lockdecode() returns the decoded string of the encoded boolean.\n  \n  lockcheck() returns boolean true(1)/false(0) based on the encoded boolean.\n  \n  This is the same value (though encoded) that would be set when you issue\n  a @Lock on something.  This is useful if you wish to enbed lock values\n  in any string or value that you wish to then decrypt at any given time.\n  \n  lockcheck() follows the same rules that elock() would return.\n  \n  Example:\n    &gt; say name(me)\n    You say &quot;Bob&quot;\n    &gt; say lockencode(me&amp;*tester)\n    You say &quot;KCMxMjM0KSYoIzkwMSk=&quot;\n    &gt; say lockdecode(KCMxMjM0KSYoIzkwMSk=)\n    You say &quot;*Bob&amp;*Tester\n    &gt; say lockcheck(KCMxMjM0KSYoIzkwMSk=,me)\n    You say &quot;1&quot;\n    &gt; say lockcheck(KCMxMjM0KSYoIzkwMSk=,*Guest)\n    You say &quot;0&quot;\n  \n  See Also: lockdecode(), lockdecode(), lockcheck(), lock(), elock(), @lock\n\n</PRE>\n<A HREF=\"#lockcheck()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lockencode()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lockencode()\"><H3>lockencode()</H3></A><PRE>\n  Function: lockencode(&lt;string&gt;)\n            lockdecode(&lt;string&gt;)\n            lockcheck(&lt;string&gt;,&lt;target&gt;)\n  \n  lockencode() returns an encoded string of a boolean lock evaluation.\n   \n  lockdecode() returns the decoded string of the encoded boolean.\n  \n  lockcheck() returns boolean true(1)/false(0) based on the encoded boolean.\n  \n  This is the same value (though encoded) that would be set when you issue\n  a @Lock on something.  This is useful if you wish to enbed lock values\n  in any string or value that you wish to then decrypt at any given time.\n  \n  lockcheck() follows the same rules that elock() would return.\n  \n  Example:\n    &gt; say name(me)\n    You say &quot;Bob&quot;\n    &gt; say lockencode(me&amp;*tester)\n    You say &quot;KCMxMjM0KSYoIzkwMSk=&quot;\n    &gt; say lockdecode(KCMxMjM0KSYoIzkwMSk=)\n    You say &quot;*Bob&amp;*Tester\n    &gt; say lockcheck(KCMxMjM0KSYoIzkwMSk=,me)\n    You say &quot;1&quot;\n    &gt; say lockcheck(KCMxMjM0KSYoIzkwMSk=,*Guest)\n    You say &quot;0&quot;\n  \n  See Also: lockdecode(), lockdecode(), lockcheck(), lock(), elock(), @lock\n\n</PRE>\n<A HREF=\"#lockdecode()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#log()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"log()\"><H3>LOG()</H3></A><PRE>\n  Function: log(&lt;number&gt; [,&lt;base&gt;])\n \n  Returns the result of taking the common logarithm (base 10) of &lt;number&gt;.\n  &lt;number&gt; may be a floating point number, and a floating point result\n  is returned.\n  \n  You may specify an optional base (besides the default of 10) for the log.\n   \n  Examples:\n    &gt; say log(0)\n    You say &quot;#-1 LOG OF NEGATIVE OR ZERO&quot;\n    &gt; say log(1)\n    You say &quot;0&quot;\n    &gt; say log(10)\n    You say &quot;1&quot;\n    &gt; say log(e())\n    You say &quot;0.434294&quot;\n  \n  See Also: e(), exp(), ln(), power(), power10()\n  \n</PRE>\n<A HREF=\"#lockencode()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#logarithmic functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"logarithmic functions\"><H3>logarithmic functions</H3></A><PRE>\n  Function Lists: Logarithmic Functions\n\n  e() - Returns the numeric constant e.\n  exp() - Returns the result of raising e to a power.\n  ln() - Returns the natural logarithm of a value.\n  log() - Returns the common logarithm of a value.\n  pi() - Returns the numeric constant pi.\n  power() - Raises a value to the nth power.\n  power10() - Raises 10 to the factor of a value.\n  shl() - Performs a leftwards bit-shift on a value.\n  shr() - Performs a rightwards bit-shift on a value.\n  sqrt() - Returns the square root of a value.\n\n</PRE>\n<A HREF=\"#log()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#logical functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"logical functions\"><H3>logical functions</H3></A><PRE>\n  Function Lists: Logical Functions\n \n  and() - Returns the value of And'ing booleans together.\n  mask() - Applies a specified mask to a value.\n  nand() - Returns the inverse of an And on booleans.\n  nor() - Returns the inverse of an Or on booleans.\n  or() - Returns the value of Or'ing booleans together.\n  xor() - Returns the exclusive Or of booleans.\n  xnor() - Returns the exclusive inverse of an And of values.\n  cand() - Like and, except stops after the first non-true value.\n  cor() - Like or, except stops after the first non-true value.\n\n</PRE>\n<A HREF=\"#logarithmic functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#logout\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"logout\"><H3>LOGOUT</H3></A><PRE>\n  Command: LOGOUT\n  Disconnects you from your character without breaking the network connection\n  to the game.  You may then log in to another character.  The LOGOUT command\n  must be entered in all capitals.\n  \n  See Also: QUIT\n  \n</PRE>\n<A HREF=\"#logical functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#look\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"look\"><H3>look</H3></A><PRE>\n  Command: look[/&lt;switches&gt;] [&lt;object&gt;]\n  Displays the description of &lt;object&gt;, or the room you're in if you don't\n  specify an object.  Specifying object as &lt;name&gt; or #&lt;dbref&gt; or 'me' or\n  'here' is legal.  You can also use look to look at objects held by other\n  people, just use 'look &lt;person&gt;'s &lt;object&gt;'.\n \n  You may use the /outside switch to look at the location of your current\n  location (useful if you are inside a vehicle or other object).  You may\n  also look at other objects in the 'outer' location, but you may not\n  use the possessive form with the /outside switch (IE: &quot;look/outside\n  &lt;person&gt;'s &lt;object&gt;&quot; won't work).\n  \n  'read' is the same as 'look'.\n  \n  Note: if the @admin parameter name_with_desc is enabled, then you will \n        see the name of the thing before the description.\n   \n  See Also: @adesc, @describe, @odesc, examine, smell, touch, taste, listen\n  \n</PRE>\n<A HREF=\"#logout\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#looping\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"looping\"><H3>LOOPING</H3></A><PRE>\n  Topic: LOOPING\n \n  Looping in an object can have its good parts and its bad parts.  The good\n  part is when you activate part of a program multiple times to exhaustively\n  perform an operation.  This is usually done by:\n     @va object =  &lt;list of commands&gt;;@trigger me/vb\n     @vb object =  @switch &lt;test&gt; = &lt;false&gt;,@trigger me/va,&lt;otherwise go on&gt;\n \n  Looping can be a problem when it goes on without stopping.  The @ps command\n  can be used to see if you are looping.  Beware!  A looping machine that\n  isn't @halt'ed will drain your money supply while you are away!\n  \n  See Also: @dolist, @halt, @ps, @notify, @drain, @wait, @trigger\n  \n</PRE>\n<A HREF=\"#look\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lor()\"><H3>LOR()</H3></A><PRE>\n  Function: lor(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function goes through the list and or's the values together.  At the\n  first '1' it finds, it exits the function and returns a '1'.  You may\n  specify an optional delimiter.\n  \n  Example:\n    &gt; say lor(0 1 1)\n    You say &quot;1&quot;\n    &gt; say lor(0@1@1,@)\n    You say &quot;1&quot;\n  \n  See Also: land(), lnor(), lxor(), lxnor()\n  \n</PRE>\n<A HREF=\"#looping\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lpage\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lpage\"><H3>lpage</H3></A><PRE>\n  Command: lpage[/&lt;switch&gt;] [[&lt;control&gt;]&lt;message&gt;]\n  \n  &lt;control&gt; is the formatter for the page (&quot;, ;, :, etc)\n  \n  This command will automatically page the last person(s) who you paged.\n  You need not specify a player name.  It accepts and understands all\n  the format and commands that page would understand.\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n  \n  See Also: page, rpage, mrpage, whisper, say, pose\n  \n  \n</PRE>\n<A HREF=\"#lor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lparent()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lparent()\"><H3>LPARENT()</H3></A><PRE>\n  Function: lparent(&lt;obj&gt;)\n  \n  Returns all the parents of &lt;obj&gt;.  Returns #-1 if &lt;obj&gt; cannot be found\n  or has no parent or if you do not own and/or control &lt;obj&gt;\n  \n  Example:\n    &gt; say lparent(me)\n    You say &quot;#-1&quot;\n    &gt; @parent #4=#5\n    Parent set.\n    &gt; @parent #5=#6\n    Parent set.\n    &gt; say lparent(#4)\n    You say &quot;#5 #6&quot;\n  \n  See Also: parent(), children()\n  \n</PRE>\n<A HREF=\"#lpage\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lrand()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lrand()\"><H3>lrand()</H3></A><PRE>\n  Function: lrand(&lt;lower&gt;,&lt;upper&gt;,&lt;count&gt;,[,&lt;output delim&gt;])\n   \n  This function returns a total of '&lt;count&gt;' elements between the\n  numbers '&lt;lower&gt;' and '&lt;upper&gt;'.  It may also choose the lower and\n  upper numbers for the list it generates.  If no output seperator\n  (output delim) is specified, a space is used by default.\n   \n  Example:\n    &gt; say lrand(3,20,5)         (generate 5 numbers &gt;= 3 and &lt;= 20)\n    You say &quot;6 18 7 4 19&quot;\n    &gt; say lrand(1,6,3)          (generate 3 numbers &gt;= 1 and &lt;= 6)\n    You say &quot;1 4 6&quot;\n   \n  See Also: rand(), dice(), lnum(), lnum2()\n  \n</PRE>\n<A HREF=\"#lparent()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lreplace()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lreplace()\"><H3>LREPLACE()</H3></A><PRE>\n  Function: lreplace(&lt;list&gt;, &lt;pos&gt;, &lt;string&gt;[, &lt;delim&gt;])\n  \n  This function replaces the words in the list &lt;list&gt; starting at the\n  position &lt;pos&gt; and continuing to overwrite word for word till the\n  end of &lt;string&gt;.  If &lt;string&gt; is longer than what would be replaced,\n  the rest of the &lt;string&gt; is automatically appended to the end of\n  &lt;list&gt;.  You may specify optional delimiters instead of the default\n  space.  You may specify more than one position.\n  \n  Examples:\n    &gt; say lreplace(this is a test,3,a spotted giraffe)\n    You say &quot;this is a spotted giraffe&quot;\n    &gt; say lreplace(this@is@a@test,2,was@another,@)\n    You say &quot;this@was@another@test&quot;\n  \n  See Also: replace(), rindex(), ldelete(), ldelete(), delete()\n  \n</PRE>\n<A HREF=\"#lrand()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lrooms()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lrooms()\"><H3>lrooms()</H3></A><PRE>\n  Function: lrooms(&lt;loc&gt; [,&lt;iteration&gt; [,&lt;type&gt;]])\n  \n  This function returns from 1 to MAXIMUM level of iterations of rooms\n  connected to the target &lt;loc&gt; room.  The MAXIMUM level is hypothetically\n  the total number of rooms contained on the MUSH.  You can only get rooms\n  from visible exits or that you control, are set ABODE, JUMP_OK, LINK_OK, or\n  VISIBLE.  Unfortunately, the list of rooms are not in order of iteration,\n  or any particular order.  \n  \n  The iteration defaults to 1.  '0' specifies 'MAXIMUM'.\n  \n  You may specify the type of display you wish.  A type of '1' (the default) \n  displays all rooms.  A type of '0' will display only the rooms matching \n  the directly specified iteration level, and none before.  Keep in mind \n  that type '0' is not always guaranteed to be absolutely accurate as rooms \n  could be linked differently based on the order it's checked.\n  \n  Examples:\n    &gt; say lrooms(here,1)\n    You say &quot;#191 #101&quot;\n    &gt; say lrooms(here)\n    You say &quot;#191 #101&quot;\n    &gt; say lrooms(here,2)\n    You say &quot;#191 #101 #19 #0 #1012 #10102&quot;\n    &gt; say lrooms(here,2,0)\n    You say &quot;#19 #0 #1012 #10102&quot;\n  \n  See Also: room(), lexits()\n  \n</PRE>\n<A HREF=\"#lreplace()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lsub()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lsub()\"><H3>LSUB()</H3></A><PRE>\n  Function: lsub(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  This function takes the first number in the list, and subtracts from that\n  all the other numbers in the list.  It may take an optional delimiter.\n  \n  Example:\n    &gt; say lsub(10 2 3 1)\n    You say &quot;4&quot;\n    &gt; say lsub(10@2@3@1,@)\n    You say &quot;4&quot;\n  \n  See Also: lavg(), ldiv(), lmul(), lmax(), lmin(), ladd()\n  \n</PRE>\n<A HREF=\"#lrooms()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lt()\"><H3>lt()</H3></A><PRE>\n  Function: lt(&lt;integer1&gt;,&lt;integer2&gt;)\n \n  Takes two integers, and returns 1 if and only if &lt;integer1&gt; is less than\n  &lt;integer2&gt;, and 0 otherwise.  Warning: passing anything but integers will\n  produce unexpected results, as non-numeric strings usually are treated\n  as numeric 0.\n \n  Example:\n    &gt; say lt(4,5)\n    You say &quot;1&quot;\n    &gt; say lt(5,5)\n    You say &quot;0&quot;\n    &gt; say lt(6,5)\n    You say &quot;0&quot;\n    &gt; say lt(foo, bar)\n    You say &quot;0&quot;\n  \n  See Also: lte(), gte(), gt(), eq(), neq()\n  \n</PRE>\n<A HREF=\"#lsub()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lte()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lte()\"><H3>lte()</H3></A><PRE>\n  Function: lte(&lt;integer1&gt;,&lt;integer2&gt;)\n \n  Takes two integers, and returns 1 if and only if &lt;integer1&gt; is less than \n  or equal to &lt;integer2&gt;, and 0 otherwise.  Warning: passing anything but \n  integers will produce unexpected results, as non-numeric strings usually \n  are treated as numeric 0.\n \n  Example:\n    &gt; say lte(4,5)\n    You say &quot;1&quot;\n    &gt; say lte(5,5)\n    You say &quot;1&quot;\n    &gt; say lte(6,5)\n    You say &quot;0&quot;\n    &gt; say lte(foo, bar)\n    You say &quot;1&quot;\n  \n  See Also: lt(), gte(), gt(), eq(), neq()\n  \n</PRE>\n<A HREF=\"#lt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ltoggles()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ltoggles()\"><H3>LTOGGLES()</H3></A><PRE>\n  Function: ltoggles(&lt;player&gt;)\n  \n  Returns all the toggles that the target player has.  To list all of\n  your toggles, you would use: ltoggles(me)\n  \n  Examples:\n    &gt; say ltoggles(me)\n    You say &quot;VANILLA_ERRORS&quot;\n    &gt; say ltoggles(#1)\n    You say &quot;#-1&quot;\n  \n  See Also: @toggle\n  \n</PRE>\n<A HREF=\"#lte()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lwho()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lwho()\"><H3>LWHO()</H3></A><PRE>\n  Function: lwho([[&lt;value&gt;], [&lt;target&gt;]])\n  Returns a list of the db numbers of connected players.  This returns what\n  a 'WHO' or 'DOING' would return.  This takes an optional type value.\n  '0' is the default, and '1' returns the player list in the form dbref:port.\n  '2' will return just the ports.\n  \n  Note: You can only see your own port(s) unless you're a wizard.  Any other\n        port will return '-1'.\n  \n  An optional target is allowed if you control (are a higher bitlevel) than\n  the target to specify how lwho() would look per the target's viewpoint.\n   \n  Example:\n    &gt; WHO\n    Player Name          On For Idle  Doing\n    Mortal                00:11   0s  \n    Evinar                00:12   6m  \n    Wizard                00:32   6s  \n    3 Players logged in.\n    &gt; say lwho()\n    You say &quot;#226 #271 #1&quot;\n    &gt; say lwho(0)\n    You say &quot;#226 #271 #1&quot;\n    &gt; say lwho(1)\n    You say &quot;#226:20 #271:5 #1:6&quot;\n  \n  See Also: WHO, DOING, conn(), idle()\n \n</PRE>\n<A HREF=\"#ltoggles()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lxnor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lxnor()\"><H3>LXNOR()</H3></A><PRE>\n  Function: lxnor(&lt;list of numbers&gt;[,&lt;delim&gt;])\n   \n  Takes two or more booleans, and returns true(1) if both values are\n  true(1) or false(0) and returns false(0) if any one value is\n  false(0) but the other(s) are true(1).  You may specify an optional\n  delimiter.\n  \n  Example:\n    &gt; say lxnor(1 1 1 1 1 0)\n    You say &quot;0&quot;\n    &gt; say lxnor(1@1@1@1@1@0,@)\n    You say &quot;0&quot;\n  \n  See Also: lor(), lnor(), land(), lxor()\n  \n</PRE>\n<A HREF=\"#lwho()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lxor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lxor()\"><H3>LXOR()</H3></A><PRE>\n  Function: lxor(&lt;list of numbers&gt;[,&lt;delim&gt;])\n  \n  Takes two or more booleans, and returns 1 if an odd number of them are\n  equivalent to true(1).  You may specify an optional delimiter.\n  \n  Example:\n    &gt; say lxor(0 1 0 1 0 1)\n    You say &quot;1&quot;\n    &gt; say lxor(0@1@0@1@0@1,@)\n    You say &quot;1&quot;\n     \n  See Also: lor(), lnor(), land(), lxnor()\n  \n</PRE>\n<A HREF=\"#lxnor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#lzone()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"lzone()\"><H3>LZONE()</H3></A><PRE>\n  Function: lzone(&lt;object&gt; [,&lt;key&gt;])\n  Returns the zone list for an object. If the object is a zonemaster,\n  the list contains the objects within the zone controlled by the \n  zonemaster. If the object is not a zonemaster, the list contains\n  all of the zonemasters that the object belongs to.  This is _not_\n  database intensive.\n  \n  The following optional keys are available:\n    0 - list all zones (or zonemasters) of the target (default)\n    n - List 'n'th 400 zones (or zonesmasters) of the target. \n        NOTE: 'n' will be any number from 1 to however many 'pages'\n              So '1' would be first 400, '2' would be second 400, etc.\n    l - List total pages and total zones (or zonemasters) of target.\n    ~ - [~#1-#2] list zones starting at #1 until count of #2.\n     \n  Example:\n    &gt; @set here=zonemaster\n    &gt; @zone here=#0\n    &gt; @zone here=#534\n    &gt; say lzone(here)         \n    You say &quot;#0 #534&quot;\n    &gt; say lzone(here,l)\n    You say &quot;1 2&quot;\n \n  See Also: @zone, ZONES, inzone(), zwho()\n \n</PRE>\n<A HREF=\"#lxor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail\"><H3>mail</H3></A><PRE>\n  Command: mail [@]&lt;player-list&gt;=&lt;subject&gt; (with BRANDY_MAIL toggle)\n           mail [@]&lt;player-list&gt;=[&lt;subj&gt;/]&lt;body&gt; (with PENN_MAIL toggle)\n           mail [@]&lt;player-list&gt;=[&lt;subj&gt;//]&lt;body&gt; (with no toggle)\n           mail [&lt;mesg#&gt;|new|unread|nall|uall|ball]\n  \n  'HELP MAIL MAIN' for main index.    'HELP MAIL TOPICS' for topical help.\n  \n  If you are used to the MUX standard of @mail or the softcoded BrandyMail\n  you will want to use the BRANDY_MAIL toggle.  \n  \n  If you are used to the PENN standard of @mail, you will want to use\n  the PENN_MAIL toggle.  The BRANDY_MAIL toggle will take presidence.\n  \n  For using the line editor, you may use the MAIL_STRIPRETURN toggle.  This\n  will convert the carrage return between lines to a space when combining.\n   \n  To set a toggle, you would type: @toggle me=&lt;toggle&gt;.  An example would be:\n                        @toggle me=BRANDY_MAIL\n \n  Examples:\n    &gt; mail me=My Subject//My Body\n    Mail: You have new mail from -&gt; &lt;your name&gt;\n    Mail: Message sent to -&gt; &lt;your name&gt;\n    Mail: Done\n  \n  See Also: mail main, mail topics\n  \n</PRE>\n<A HREF=\"#lzone()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail alias\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail alias\"><H3>mail alias</H3></A><PRE>\n  Command: mail/alias\n  \n  The alias switch is used to display any global alias you have \n  permission to access and will list all players that are attached\n  to that global alias.  Global aliases are maintained by the \n  administration of the mush.  If you have ideas of global aliases,\n  suggest it to them and they will add them.\n  \n  Syntax: mail/alias\n  Wizards: wizhelp wmail alias\n  \n</PRE>\n<A HREF=\"#mail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail anonymous\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail anonymous\"><H3>mail anonymous</H3></A><PRE>\n  Command: mail/anon player=message\n           mail/anon/send player=message\n           mail/anon/forward &lt;msg#&gt; player=message\n           mail/anon/reply &lt;msg#&gt;=message\n  \n  The anon[ymous] switch is used in junction with the /send, /forward, or\n  /reply switches (or normal sending) to ANONYMOUSLY send the mail message\n  to the player.  Wizards are except from receiving anonymous mail due to\n  security issues.\n  \n  Attempting to forward anonymous mail shows the original message being\n  'anonymous'.  Attempting to reply to an anonymous mail will reply \n  to the 'anonymous' player, while that player still receives the message.\n  \n  If you use the line editor, you can use -~ to send anonymously instead of\n  -- which would normally send the mail.\n   \n  See Also: mail send, mail reply, mail forward\n  \n</PRE>\n<A HREF=\"#mail alias\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail autofor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail autofor\"><H3>mail autofor</H3></A><PRE>\n  Command: mail/autofor &lt;player-name&gt;\n           mail/autofor +off\n  \n  Autoforwarding is used to autoforward mail that you would normally get\n  to another player character.  This is handy in the event that you have\n  multiple characters and wish to have mail all catagorized to a central\n  character.  All forwarded mail is sent as from the original sender, \n  not from the player it was forwarded from.\n  \n  Autoforwarding can only be forwarded on a one-time basis.  It is not\n  recursive.  So in otherwords, you can not forward mail forwarded to you.\n  \n  To remove an autoforwarding use the command:\n      mail/autofor +off\n  \n  Mail that is autoforwarded will show up to the user sending you mail\n  where it got autoforwarded to.\n  \n  See Also: mail lock, mail share\n  \n</PRE>\n<A HREF=\"#mail anonymous\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail autopurges\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail autopurges\"><H3>mail autopurges</H3></A><PRE>\n  Topic: mail autopurging \n  \n  The mail system has a built in autopurging system.  To save mail\n  from autopurging, it needs to have the SAVE flag set on it.  You\n  have a limited number of SAVE flags you can set.  For help on\n  the save flag for mail, do 'help mail save'.  Autopurging is\n  currently set to three weeks but can be set at any time.  NEW\n  and UNREAD mail is not effected.  \n  \n  Wizards by default are never auto-purged from.\n  \n  To set the save flag, you would use:\n  \n     mail/mark/save &lt;arg&gt;\n  \n  where &lt;arg&gt; is a single message, a list of messages, or a combination.\n  \n  Note:  By default, players are given 10 save slots for messages.\n         This can be increased globally or individually on a case by case\n         basis.  Please see 'mail/quota' to see what your current saved\n         quota is.\n  \n  See Also: mail mark, mail save\n  \n</PRE>\n<A HREF=\"#mail autofor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail ball\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail ball\"><H3>mail ball</H3></A><PRE>\n  This is a sub-option to 'mail/read' (short for just 'mail').  If you\n  specify 'nall' at the end, it will read ALL the new AND the unread\n  mail messages you have in your mailbox.\n  \n  Example:\n    &gt; mail/read ball\n    &gt; mail ball\n  \n  See Also: mail uall, mail nall, mail new, mail unread, mail both\n  \n</PRE>\n<A HREF=\"#mail autopurges\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail basics\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail basics\"><H3>mail basics</H3></A><PRE>\n  Topic: mail basics\n  \n  The basic mail sub-commands are:     \n     write, send, read, mark, delete, quick, and status.\n  \n  For more information, check the help on mail and it's sub-commands.\n       type in 'help mail' and 'help folder' for the base core commands.\n       type in 'help mail &lt;subcommand&gt;' for the mail subcommand.\n       type in 'help folder &lt;subcommand&gt;' for the folder subcommand.\n  \n  To send a message to a player and enter text line by line:\n     mail/write &lt;optional text for first line&gt;\n     For full help on /write, type in 'help mail write'\n  \n  To send a message to a player:\n     mail[/send] &lt;player&gt; =&lt;message&gt;    (help mail send)\n     For example:   mail tinypal=Let's meet tomorrow night.\n     Note that '/send' is optional for this command (mail/send).\n  \n  To read a message:\n     mail[/read] #                      (help mail read)\n     For example:   mail 3\n     Note that '/read' is optional for this command (mail/read).\n  \n{ To continue, type: help mail basics2 }\n  \n</PRE>\n<A HREF=\"#mail ball\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail basics2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail basics2\"><H3>mail basics2</H3></A><PRE>\n  Topic: mail basics (continued)\n  To mark a message for deletion:\n     mail/mark #                        (help mail mark)\n     For example:   mail/mark 12\n  \n  To save a message (keep it from being purged):\n     mail/mark/save #                   (help mail save)\n     For example:   mail/mark/save 12\n \n  To delete marked messages:\n     mail/delete                        (help mail delete)\n  \n  To get a quick summary of mail (how many new, unread, old, marked, \n  current folder):\n     mail[/quick]                       (help mail quick)\n     Note that 'quick' is optional for this command (mail/quick).\n  \n  To see all mail headers and status:\n     mail/status                        (help mail status)\n  \n  For information on setting up folders, type 'help folder'\n  For more information on mail, type in 'help mail &lt;command&gt;'\n  \n</PRE>\n<A HREF=\"#mail basics\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail both\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail both\"><H3>mail both</H3></A><PRE>\n  This is a sub-option to 'mail/read' (short for just 'mail').  If you\n  specify 'both' at the end, it will read the first new OR unread\n  mail message you have in your mailbox.\n  \n  Example:\n    &gt; mail/read both\n    &gt; mail both\n  \n  See Also: mail uall, mail nall, mail new, mail unread, mail ball\n  \n</PRE>\n<A HREF=\"#mail basics2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail btutor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail btutor\"><H3>mail btutor</H3></A><PRE>\n  Topic: mail btutor (Enhanced Line Editor (Brandy) Interface)\n  \n  Welcome to the mail system tutorial (brandy interface).  This will\n  not cover all the commands, but will give you a good heads up on\n  how to use the mail interface if you come from a MUX background\n  with @mail or a mush background and used the Brandy mailer.\n  \n  First, let's set ourselves up so we can use the brandy interface.\n  Please type this exactly as it shows:\n  \n    @toggle me=brandy_mail\n  \n  If you wish to remove the toggle at a later date, you may do this\n  by doing @toggle me=!brandy_mail.  Help is available on this toggle\n  by 'help brandy_mail toggle'.\n  \n  Ok, first, write a message to yourself, then we can begin the\n  tutorial.  To start a new message, type this exactly as shown:\n  \n    mail me=test subject\n    -test body\n    --\n  \n  To begin your tutorial, please type the following now:\n  \n    help mail dtutor notes\n  \n</PRE>\n<A HREF=\"#mail both\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail changes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail changes\"><H3>mail changes</H3></A><PRE>\n  Topic: changes\n  \n  There are some changes that you may notice with the new mail system.  These\n  changes are the following:\n  \n    Subjects are included with mail:\n        - Subjects are added by separating the body and the subject using \n          '//'.  IE: mail user=subject//body \n          (see: help mail send)\n        - Subjects can be added with the mail's line editor.  This is done\n          by using the +subject option.  IE: mail/write +subject\n          (see: help mail write)\n  \n    Recalling mail has been greatly modified:\n        - You are able to recall any message not read by another player that\n          you have sent.  It is displayed in a concise manner.\n          (see: help mail recall)\n  \n{ type: help mail changes2 to continue }\n  \n</PRE>\n<A HREF=\"#mail btutor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail changes2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail changes2\"><H3>mail changes2</H3></A><PRE>\n  Topic: changes (continued)\n  \n    New options for mail/write:\n        - When adding new text, you can use the shortcut of '-' to add new\n          lines.  This works similar to MUX's @mail does.\n          (see: help mail write)\n  \n    New options for locking mail:\n        - You can set a reject message for people you lock your mail out to.\n          (see: help mail reject)\n   \n    Mail signatures:\n        - Mail signatures that are automatically included are set by using\n          @mailsig attribute.  To set, just type: @mailsig me=&lt;signature&gt;\n  \n  See Also: mail version, mail basics, mail signature\n  \n</PRE>\n<A HREF=\"#mail changes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail check\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail check\"><H3>mail check</H3></A><PRE>\n  Command: mail/check &lt;target&gt;=&lt;#&gt;\n  \n  If someone has set up her mailbox to be shared with you, you can use this\n  command to read a particular message from the target's mailbox.\n   \n  Example:\n    &gt; mail/check tinyfriend=4    (read tinyfriend's message #4)\n   \n  See Also: mail read, mail number, mail share\n  \n</PRE>\n<A HREF=\"#mail changes2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail cmdlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail cmdlist\"><H3>mail cmdlist</H3></A><PRE>\n  Topic: mail command list of commands (in alphabetical order)\n  \n  mail                       - This is short for 'mail/quick'\n  mail/alias                 - This lists all global mail aliases.\n  mail/autofor &lt;player&gt;      - This sets an automatic forward of mail to the\n                               target player.\n  mail/check &lt;player&gt;=&lt;arg&gt;  - This checks the target player's mail allowing\n                               you to read it.  That player MUST have their\n                               mail set to be shared by you!\n  mail/delete                - This purges all marked mail.\n  mail/forward &lt;num&gt; [&lt;arg&gt;] &lt;player-list&gt;[=[&lt;subject&gt;//]&lt;optionaltext&gt;] \n                               This forwards the target message to the \n                               specified list of players.\n  mail/lock &lt;key&gt;            - This locks your mail from the given  player(s).\n  mail/mark[/save] &lt;arg&gt;     - This marks the mail for deletion or if the \n                               optional SAVE switch is used, marks the mail\n                               from deleting.  Mail is automatically purged\n                               after a set period.  The SAVE flag keeps it\n                               safe from this.\n  mail/next                  - This automatically reads the next message.\n  \n  { see help mail cmdlist2 for more }\n</PRE>\n<A HREF=\"#mail check\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail cmdlist2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail cmdlist2\"><H3>mail cmdlist2</H3></A><PRE>\n  Topic: mail quicklist of commands (CONTINUED)\n  \n  mail/number &lt;target&gt;[=&lt;arg&gt;] - This displays the target player's mail.  You\n                               must pass that person's sharelock before you\n                               can do this.\n  mail/page &lt;lines&gt;          - This sets up the number of lines per page you\n                               can view. This is relevant only for mail/status\n  mail/password &lt;args&gt;       - This allows you to password-lock your mail.\n  mail[/quick]               - This gives you a quick status of mail you have.\n                               The /quick switch is optional.\n  mail/quota                 - This gives you your quota statistics.\n  mail[/read] &lt;arg&gt;          - This reads the mail.  /read switch is optional.\n                               You may specify 'new' or 'unread' as well for\n                               the argument instead of the mail number..\n  mail/recall &lt;args&gt;         - This displays mail sent to others, the contents\n                               of it, and gives you availability to yank mail\n                               that hasn't been read.\n  mail/reject [&lt;arg&gt;]        - This sets or resets your reject message.\n  mail/reply [&lt;arg&gt;]&lt;message-#&gt;[&lt;arg&gt;]=[&lt;subject&gt;//]&lt;body&gt; - This replies to\n                               the given message.\n  \n  { see help mail cmdlist3 for more }\n  \n</PRE>\n<A HREF=\"#mail cmdlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail cmdlist3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail cmdlist3\"><H3>mail cmdlist3</H3></A><PRE>\n  Topic: mail quicklist of commands (CONTINUED)\n  \n  mail[/send] [&lt;arg&gt;]&lt;player-list&gt;=[&lt;subject&gt;//]&lt;body&gt; - This sends mail to\n                               the targeted player(s).  The /send switch is\n                               optional as well as the arguments and subject.\n  mail/share &lt;players&gt;       - This sets it up so that you can share mail with\n                               other people.  It uses standard @lock keys.\n  mail/status [&lt;args&gt;]       - This gives the listing of mail in your box.\n  mail/unmark &lt;args&gt;         - This unmarks from deletion or saving the target\n                               mail.\n  mail/version               - This displays the current version of mail.\n  mail/write &lt;string&gt;        - This begins writing a letter using the line\n                               editor.  After this command, you may use '-' to\n                               continue writing mail.\n  mail/zap                   - This deletes your current message and reads the\n                               next message (if available).\n  \n  See Also: mail, folder, folder cmdlist\n  \n</PRE>\n<A HREF=\"#mail cmdlist2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail creating\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail creating\"><H3>mail creating</H3></A><PRE>\n  Please see 'help mail send'\n  \n</PRE>\n<A HREF=\"#mail cmdlist3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail credits\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail credits\"><H3>mail credits</H3></A><PRE>\n  Topic: mail credits\n  \n  This mail system was coded by Seawolf.  It is largely based on \n  Ashen-Shugar's mush-coded +mail system.\n \n  Help files were written by Wizard@ApexMUSH, Seawolf, and Ashen-Shugar.\n \n  Thanks to Lothar for suggesting folder/share.\n  \n  Thanks to beta-testers:\n    Ashen-Shugar, Eingelbert, Seth, Wizard\n  \n</PRE>\n<A HREF=\"#mail creating\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail delete\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail delete\"><H3>mail delete</H3></A><PRE>\n  Command: mail/delete\n  \n  This command will delete all your marked messages in all your folders.\n  \n  See Also: mark, unmark, recall, save\n  \n</PRE>\n<A HREF=\"#mail credits\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor\"><H3>mail dtutor</H3></A><PRE>\n  Topic: mail dtutor (Default Bare-Bone Tutorial)\n  \n  Welcome to the mail system tutorial.  This will not cover all\n  the commands, but it will run you through enough of them to\n  get you started with using the mail system.  \n  \n  The mailsystem has a huge amount of functionality and it is\n  our hopes that this will help remove some of the fear and\n  confusion you may have.\n  \n  There will be pages to the tutorial that will allow you\n  to interact and try each command at the same time.\n  \n  Let's make sure you have a mail message to help with\n  the tutorial.  Please type this exactly as it shows:\n      \n    mail me=test subject//test body\n  \n  We'll explain what that does in the tutorial.\n  To begin your tutorial, please type the following now:\n  \n    help mail dtutor1\n  \n</PRE>\n<A HREF=\"#mail delete\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor notes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor notes\"><H3>mail dtutor notes</H3></A><PRE>\n  Topic: mail dtutor notes\n  \n  This is just a quick review of what you can do with the brandy\n  mail interface you can't without it.\n  \n  When toggled, BRANDY_MAIL, you will automatically go into the\n  line editor when you do the following commands:\n  \n    mail &lt;list-of-players&gt;=&lt;subject&gt;                (sending mail)\n    mail/send &lt;list-of-players&gt;=&lt;subject&gt;//&lt;body&gt;   (quick sending mail)\n    mail/reply &lt;msg#&gt;=&lt;subject&gt;                     (replying to mail)\n    mail/forward &lt;msg#&gt; &lt;list-of-players&gt;=&lt;subject&gt; (forwrding mail)\n  \n  You have a HUGE availability of options in the line editor.  For\n  the list, please type:\n  \n    help mail write cmdlist\n  \n  Help is available on individual topics therein with:\n  \n    help mail write &lt;subtopic&gt;\n  \n  To continue your tutorial, please type the following now:\n  \n    help mail dtutor1\n  \n</PRE>\n<A HREF=\"#mail dtutor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor1\"><H3>mail dtutor1</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 1)\n  \n  Let's start with checking your mail.  To see if you have\n  any mail, please type the following now:\n    &gt; mail/quick\n  \n  You should see the following:\n    Mail: You have no current folder\n    Mail: 1 Total - 1 new, 0 unread, 0 old, 0 marked, 0 saved mail message(s)\n  \n  Please note, if you do indeed have extra  mail, you will see something like:\n    Mail: You have no current folder\n    Mail: 2 Total - 2 new, 0 unread, 0 old, 0 marked, 0 saved mail message(s)\n  \n  new      : tells you that you have 1 new message.\n  unread   : would tell you that you had new messages but disconnected before\n             you got to read them\n  old      : tells you you have mail you already read\n  marked   : tells you you have mail messages marked for deletion\n  saved    : tells you you have messages saved from being auto-deleted.\n  \n  To continue, please type: help mail dtutor2\n  \n</PRE>\n<A HREF=\"#mail dtutor notes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor2\"><H3>mail dtutor2</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 2)\n  \n  Ok, let's say you do have mail.  To recap, it showed this with mail/quick:\n      Mail: You have no current folder\n      Mail: 1 Total - 1 new, 0 unread, 0 old, 0 saved mail message(s)\n  \n  Now, you probably ask, how do you see who the mail is from?  To see who\n  the mail is from and the various statistics of it, you would use the command:\n    &gt; mail/status\n  \n  Try it out, you should see mail from yourself.  Output would be like this:\n  \n  Mail: You have no current folder\n  -----------------------------------------------------------------------------\n  [N] ( 1) *From: &lt;Your Name&gt;      &lt;Wed Jul 14 00:22:57 1999&gt; (4 Bytes)\n            Subj: test subject\n  -----------------------------------------------------------------------------\n  Mail: Done\n  \n  You'll notice it has the subject 'test subject' just like you should have\n  typed when you read 'help mail dtutor'.  Each message has:\n    [N]    - specifies a NEW message.  It can also be 'S'aved, 'U'nread, 'O'ld,\n             and 'M'arked (for messages marked for deletion).\n             If you disconnected without checking a (N)ew message, it becomes\n             an (U)nread message upon your connection.\n    ( 1)   - specifies that it is the first message in your mailbox.\n    &lt;date&gt; - the date the mail was received.\n    Subj:  - the optional subject.  As it's optional it may not be on all mail\n    From:  - who sent the mail.\n    *      - states if player is connected. (blank if they're not)\n  \n  To continue, please type: help mail dtutor3\n  \n</PRE>\n<A HREF=\"#mail dtutor1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor3\"><H3>mail dtutor3</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 3)\n  \n  Ok, you now know how to view the mail and list what mail you have, but now\n  how do you read it?  Well, there's various ways you can do this.\n  If you know it is a NEW message you may type this:\n    &gt; mail new\n  \n  This will read the first NEW mail message you have.  You could also specify\n  'unread' instead of 'new' for the first unread message you have.\n    &gt; mail unread\n  \n  Unread is different than New messages by defining a message that was New\n  but you had disconnected before you could read it.  So Unread mail is mail\n  that you just have not read, but is not New for your current connection.\n  \n  If you know you have new mail, but are not sure if it's new or unread, you\n  may use the 'both' qualifier.  This will read the first New OR Unread\n  message, whatever is currently next.\n    &gt; mail both \n  \n  You may also type the number of the message you want to read.  For example:\n    &gt; mail 1\n  \n  This will read the first mail message in your mail box.\n  The output should look like this:\n  -----------------------------------------------------------------------------\n  Message #: 1        (Connected)\n  Status: NEW         From: &lt;Your Name&gt;\n  Date/Time: Wed Jul 14 00:22:57 1999        Size: 4 Bytes\n  Subject: test subject\n  -----------------------------------------------------------------------------\n  test body\n  -----------------------------------------------------------------------------\n  Mail: Done\n  \n  To continue, please type: help mail dtutor4\n  \n</PRE>\n<A HREF=\"#mail dtutor2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor4\"><H3>mail dtutor4</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 4)\n  \n  Ok, you now have read your message, you may want to know how to delete it.\n  First, you need to mark the message.  There are two ways you can do this\n  as well.  First, you can tell mail to delete the last read message and read\n  the NEXT message in your mailbox with the 'zap' switch.\n    &gt; mail/zap\n  \n  If you don't have any other messages, or feel more comfortable marking them\n  individually, you may use the 'mark' switch.\n    &gt; mail/mark 1\n  \n  This tells the mail system to mark your first message in your mailbox for\n  deleting.  Let's verify that it was set.  Type:  mail/status\n  \n  You should see:\n  Mail: You have no current folder\n  -----------------------------------------------------------------------------\n  [M] ( 1) *From: &lt;Your Name&gt;      &lt;Wed Jul 14 00:22:57 1999&gt; (4 Bytes)\n            Subj: test subject\n  -----------------------------------------------------------------------------\n  Mail: Done\n  \n  Note:  the '*' before the From: states that you are connected. \n  \n  To continue, please type: help mail dtutor5\n  \n</PRE>\n<A HREF=\"#mail dtutor3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor5\"><H3>mail dtutor5</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 5)\n  \n  Ok, let's say before you delete the message, you want to reply to the \n  mail.  You may use a few methods.  First, to reply to the sender AND\n  include the message in the reply, type this:\n    &gt; mail/reply 1*=test reply\n  \n  You should see:\n    Mail: You have a new mail from -&gt; &lt;Your name&gt;\n    Mail: Message sent to -&gt; &lt;Your name&gt;\n    Mail: Done\n   \n  Note: If you have the BRANDY_MAIL toggle enabled, this puts you in the editor\n  \n  Now, lets type mail/status to see your status: \n    &gt; mail/status \n  \n  You should see the following:\n  Mail: You have no current folder\n  -----------------------------------------------------------------------------\n  [M] ( 1) *From: &lt;Your Name&gt;      &lt;Wed Jul 14 00:22:57 1999&gt; (4 Bytes)\n            Subj: test subject\n  [N] ( 2) *From: &lt;Your Name&gt;      &lt;Wed Jul 14 00:34:15 1999&gt; (116 Bytes) Reply\n  -----------------------------------------------------------------------------\n  Mail: Done\n  \n  You may use 'mail new', 'mail both', or 'mail 2' to read this message.  \n  \n  To continue, please type: help mail dtutor6\n  \n</PRE>\n<A HREF=\"#mail dtutor4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor6\"><H3>mail dtutor6</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 6)\n  \n  Ok, let's say you just wanted to send the player a message seperate from\n  a reply.  You may send mail one of two ways.  You can send it the quick\n  and easy method (which will be shown here), or you may use the built-in\n  line editor (which is full of features).  If you prefer to use the\n  line editor, please refer to 'help mail write' as it is fairly involved\n  with it's features.  You also have the BRANDY_MAIL toggle option.\n  \n  We'll assume you'll want to do this the easy way for now.  To send a \n  message you would type:  \n    &gt; mail &lt;player&gt;=&lt;subject&gt;//&lt;body&gt;\n  \n  The subject is optional and you don't have to specify it.  Let's send\n  a message to yourself.  First, without a subject, then with a subject.\n  Without a subject:\n    &gt; mail me=a test message\n  \n  With a subject:\n    &gt; mail me=a test subject//a test message\n  \n  With brandy toggle enabled:\n    &gt; mail me=a test subject\n    &gt; -a test message\n    &gt; --\n  \n  Depending if you did one or both examples, you should have seen you have\n  two new messages.  mail/status will list these.\n  \n  To continue, please type: help mail dtutor7\n  \n</PRE>\n<A HREF=\"#mail dtutor5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail dtutor7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail dtutor7\"><H3>mail dtutor7</H3></A><PRE>\n  Topic: Mail Default Tutor (Page 7)\n  \n  Ok, let's delete those marked messages we have.  You should only have one\n  message marked for deletion (unless you went on your own and marked more).\n  Now, to purge out the mail you have marked for deletion, please type:\n    &gt; mail/delete  \n  \n  You should have seen the message as follows:\n    Mail: 1 message(s) deleted\n    Mail: Done\n  \n  Hey, guess what?  You now have a working knowledge of how to send, read, and\n  delete mail.  Congratulations, you have the basics down.  \n  \n  The mail system is quite extensive with all that it offers, and if something\n  you wanted to learn is not in this tutorial, my apologies.  But you will \n  find the help files show examples and are very informative.  If you want\n  a quick listing of all the mail commands and syntax/descriptions, please\n  type the following:\n    &gt; help mail cmdlist\n  \n  If you want a list of commands used with writing mail with the line editor\n  type the following:\n    &gt; help mail write cmdlist\n  \n  Thank you for using the tutorial.\n\n</PRE>\n<A HREF=\"#mail dtutor6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail folders\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail folders\"><H3>mail folders</H3></A><PRE>\n  Topic: mail folders\n  \n  Mail may be stored in different folders.  Your default folder is the\n  'Incoming' folder.  This is the folder where mail will be stored if\n  you do not move it to another folder.  If you do not wish to deal with\n  folders, you may safely ignore all references to folders, as long as\n  you do not use the folder command.\n   \n  Mail folders may be up to 20 characters in length.  The first letter is\n  capitalized, and the rest are in lower case (although you can use any case\n  when referring to folders).  Incoming is reserved as the default mail\n  folder.\n   \n  For information on the various folder sub-command, check 'help folder'.\n  All mail sub-commands which list your mail or require specifying a\n  message number (e.g, status, reply) act on your current folder.  This\n  is documented in help on the individual relevant mail sub-commands.\n  \n  See Also: folder\n  \n</PRE>\n<A HREF=\"#mail dtutor7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail forward\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail forward\"><H3>mail forward</H3></A><PRE>\n  Command: mail/forward &lt;msg #&gt; [@|^]&lt;list&gt; [=[&lt;subject&gt;//]&lt;additional text&gt;]\n  \n  Forward a mail message to someone.  Note that you do not have to include your\n  own message, which is appended to the bottom of the message.  The\n  message number and the address list are separated by a space.  For the\n  format of the address list, see the help on the send sub-command\n  (help mail send).  You can only forward messages in the current folder.\n  \n  Examples:\n    &gt; mail/forward 3 myfriend\n    &gt; mail/forward 2 &amp;friendlist=Weird!!!//What do you think of this?\n    &gt; mail/forward 12 @friend1 #12345 friend2=Can you believe this?!\n  \n  Note:  If you have the BRANDY_MAIL @toggle set, the syntax would be this:\n    &gt; mail/forward 3 myfriend\n    &gt; mail/forward 2 &amp;friendlist=My Subject\n    &gt; mail/forward 12 @friend1 #12345 friend2=This is a subject\n  \n  You'd then use '-' for additional text and '--' to send the mail.\n  \n  See Also: mail reply, mail send\n  \n</PRE>\n<A HREF=\"#mail folders\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail line\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail line\"><H3>mail line</H3></A><PRE>\n  Topic: mail line manipulation\n  \n  +LIST:\n    The +list sub-command includes optional &lt;s#&gt; and &lt;e#&gt; arguments to specify\n    the start and end line numbers to list.  Line numbers are always listed,\n    but not displayed.\n   \n  +JUSTIFY:\n    Delete line # &lt;#&gt; with the +del sub-command. Justify line &lt;#&gt; as left-\n    right-, or center-justified with the +justify sub-command.  Editing a\n    line resets the justification to left.  Justification may seem off when\n    using +list, as line numbers off-set the lines.\n   \n  +SPLIT:\n    Split line &lt;l#&gt; after &lt;#w&gt; number of words with the +split command.\n  \n  +JOIN:\n    Join line &lt;l#&gt; appended by line &lt;a#&gt; with the +join sub-command.\n   \n  +INSERT:\n    Insert &lt;text&gt; before line &lt;#&gt; with the +insert sub-command.\n   \n  To see example of line editing, check: help mail line examples\n  \n</PRE>\n<A HREF=\"#mail forward\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail line examples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail line examples\"><H3>mail line examples</H3></A><PRE>\n  Topic: mail line examples\n  \n  Examples:\n    &gt; mail/write +list=2,4\n    &gt; mail/write +del=5\n    &gt; mail/write +justify=1,c\n    &gt; mail/write +split=3,15\n    &gt; mail/write +join=5,6\n    &gt; mail/write +insert=4,I am not sure if you would agree with:\n    &gt; -this is another line for my message I'll be sending.\n    &gt; mail/write +send=Seawolf\n  \n</PRE>\n<A HREF=\"#mail line\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail lineeditor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail lineeditor\"><H3>mail lineeditor</H3></A><PRE>\n  Topic: mail line editing\n    \n  The mailsystem has a built-in line editor for sending all forms of mail.  \n  This includes forwarded mail, replied-to mail, and standard mail and mass \n  mail. To look at sending mail by using a line by line input, check the help \n  for:\n  \n     mail write   (IE: help mail write)\n  \n  See Also: mail write, mail send, mail line\n  \n</PRE>\n<A HREF=\"#mail line examples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail list_aliases\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail list_aliases\"><H3>mail list_aliases</H3></A><PRE>\n  Topic: mail aliases\n  \n  There are two distinctive types of mail aliases.  The first is the\n  user defined alias.  To set this, you would set an attribute on\n  yourself with the names and/or numbers of the people in the list\n  you want to send to.\n  \n  Example: &amp;FRIENDS me=Nyctasia Seawolf billie sappho\n           &amp;EVAL_FRIENDS me=[v(myfriends_list)]\n  \n  You would use this by inputting on the 'send' option of mail\n  the following:\n  \n  Example: mail[/send] &amp;friends=Hello my friends!\n           mail[/send] ~me/eval_friends=Hello my friends! \n  \n  As shown, the /send parameter is optional for sending mail.\n  \n  The second form of aliases are global aliases.  These are \n  established by the administration for the use of everyone on the \n  system.  You would use this by inputting on the 'send' option\n  of mail the following: \n  (Let's assume a global alias of 'members')\n  (Let's assume a dynamic eval list of 'wizards' for wizards)\n  \n  \n  Example: mail[/send] +members=Welcome fellow guild members!\n           mail[/send] $wizards=Welcome eval-wizard list members!\n  \n  As above, the /send parameter is optional.\n  \n  See Also: mail send, mail, mail basics, mail alias\n  \n</PRE>\n<A HREF=\"#mail lineeditor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail lock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail lock\"><H3>mail lock</H3></A><PRE>\n  Command: mail/lock &lt;key&gt;\n  \n  You can lock your mailbox so that only certain people can (or cannot)\n  send you mail.  The key is the same as for any other lock.  Type:\n  \n                       'help @lock keys' \n  \n  for a list of the keys you may use.  To unlock, use a\n  blank key.  IE: mail/lock  (this will unlock your mail lock)\n  \n  Examples:\n    &gt; mail/lock tinyspouse  (this locks to just tinyspouse)\n    &gt; mail/lock !tinyjerk   (this locks against tinyjerk)\n    &gt; mail/lock             (this removes your mail lock)\n   \n  The attribute it sets on you is 'MailLock' and is set like a normal lock.\n   \n  See Also: mail reject, mail recall\n  \n</PRE>\n<A HREF=\"#mail list_aliases\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail main\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail main\"><H3>mail main</H3></A><PRE>\n  RhostMush has its own in-game mail system.  The mail command\n  takes various switches to perform the various mail sub-commands, as in:\n  \n      mail/read 1\n  \n  The following mailer options exist for mail:\n      mail basics            mail folders            mail list_aliases\n      mail autopurges        mail changes            mail lineeditor\n      mail massmail          mail credits            mail send examples\n      mail line examples     mail write examples     mail signature\n      mail cmdlist           mail technical          mail tutorial\n      mail quicklist         mail setup_aliases\n  \n  help on options can be seen by using the help command with any topic.\n  \n  to get help on mail sub-commands use: help mail &lt;sub-command&gt;\n  where &lt;sub-command&gt; is one of the sub-commands listed below:\n   \n  alias   anon     autofor   check   delete    forward  mark      lock   \n  next    reject   number    page    password  quick    quota     read  \n  recall  reply    save      send    share     status   unmark    write \n  zap     version  previous\n  \n  To see the credits, enter: help mail credits\n  \n  See help on the BRANDY_MAIL @toggle as well. (help brandy_mail toggle)\n  \n</PRE>\n<A HREF=\"#mail lock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail mark\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail mark\"><H3>mail mark</H3></A><PRE>\n  Command: mail/mark &lt;#&gt;|all|&lt;*player&gt;\n  \n  This command allows you to mark messages for deletion.  &lt;#&gt; indicates\n  a specific message to be marked.  To delete more than one message by\n  message number, separate the message numbers by spaces.  Specify &quot;all&quot;\n  to mark all messages.  Specify a person by name or db reference # to\n  mark all messages from that player.  You can only mark messages in the\n  current folder.\n  \n  You would add /save as a switch to mark a message for being saved instead\n  of marking it for deletion.  See 'help mail save' for more.\n    \n  Examples:\n    &gt; mail/mark 1        (mark message 1 for deletion)\n    &gt; mail/mark 1 5 8    (mark messages 1, 5, and 8 for deletion)\n    &gt; mail/mark all      (mark all your messages for deletion)\n    &gt; mail/mark *tinypal (mark messages from player 'tinypal' for deletion)\n    &gt; mail/mark #12345   (mark messages from player #12345 for deletion)\n    &gt; mail/mark 1-5 8 9  (mark messages 1 through 5, 8, and 9 for deletion)\n   \n  See Also: mail unmark, mail delete, mail status, mail save\n  \n</PRE>\n<A HREF=\"#mail main\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail massmail\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail massmail\"><H3>mail massmail</H3></A><PRE>\n  Topic: mail mass mailing\n  \n  Massmailing is done by using the optional /SEND feature of the mail\n  system.  The syntax is as follows:\n  \n  mail[/send] usr1 usr2 .. +&lt;gls&gt; $&lt;gev&gt; &amp;&lt;pls&gt; ~&lt;eval&gt; = [subject//]message\n  \n    &lt;gls&gt;  -- represents a global alias seen with mail/alias\n    &lt;gev&gt;  -- represents a global evaluated alias seen with mail/alias\n    &lt;pls&gt;  -- represents an attribute on yourself containing a list of players\n    &lt;eval&gt; -- represents a [&lt;obj&gt;/]&lt;attr&gt; to eval like get_eval()\n  \n  To display to all people in the mail who the message was sent to, add\n  a @ before the first name.  For example:\n  \n     mail @user1 user2 ... userx=message\n  \n  The subject, which is optional can be added before the message and \n  separated with two /'s.  For example:\n  \n     mail user=This is my subject//This is the mail I want to send you.\n  \n  See Also: mail send forward, mail send reply, mail send\n  \n</PRE>\n<A HREF=\"#mail mark\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail nall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail nall\"><H3>mail nall</H3></A><PRE>\n  This is a sub-option to 'mail/read' (short for just 'mail').  If you\n  specify 'nall' at the end, it will read ALL the new mail messages\n  you have in your mailbox.\n  \n  Example:\n    &gt; mail/read nall\n    &gt; mail nall\n  \n  See Also: mail ball, mail uall, mail ball, mail new, mail both\n  \n</PRE>\n<A HREF=\"#mail massmail\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail new\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail new\"><H3>mail new</H3></A><PRE>\n  This is a sub-option to 'mail/read' (short for just 'mail').  If you\n  specify 'new' at the end, it will read the FIRST new mail message in\n  your mailbox.\n  \n  Example:\n    &gt; mail/read new\n    &gt; mail new\n  \n  See Also: mail ball, mail uall, mail ball, mail unread, mail both\n  \n</PRE>\n<A HREF=\"#mail nall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail next\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail next\"><H3>mail next</H3></A><PRE>\n  Command:  mail/next\n  \n  This option will automatically view the next mail message from the one\n  you last read.  For example, if you typed:\n    mail 1 \n  \n  you would read mail message #1 (if you had mail)\n  If you typed:\n    mail/next\n  \n  you would read mail message #2 (if you had that number of messages)\n  \n  Note:  If you add a '-' after next (i.e. mail/next -) it will read the\n         previous message.\n  \n  See Also: mail status, mail zap, mail read\n  \n</PRE>\n<A HREF=\"#mail new\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail number\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail number\"><H3>mail number</H3></A><PRE>\n  Command: mail/number &lt;target&gt;=# \n   \n  This command is similar to the status command.  If someone has set up \n  his mailbox to be shared with you, you can use this command to see the \n  status of the target's mailbox.\n   \n  As with the status command, the # here is optional.  If it is given\n  (in this case the second argument), it will have the same effect as it\n  would on the status command.\n   \n  Examples:\n    &gt; mail/number tinyspouse  (list all of tinyspouses mail [if you pass lock])\n    &gt; mail/number tinypal=2   (list just message 2 of tinyspouses mail)\n   \n  See Also: mail status, mail check, mail page, mail share\n  \n</PRE>\n<A HREF=\"#mail next\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail page\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail page\"><H3>mail page</H3></A><PRE>\n  Command: mail/page &lt;value&gt;\n  \n  This sub-command sets the length of your pages.  When you specify a\n  page number in the status and number sub-commands, the pages are \n  each composed of as many mail message headers as you set with the page\n  sub-command.\n   \n  A value of 0 means to not divide the status and number into separate\n  pages (i.e. all message headers are displayed on a single page).\n   \n  Examples:\n    &gt; mail/page 20\n    &gt; mail/status p1\n    &gt; mail/status p2\n   \n  See Also: mail status, mail number, mail quick\n  \n</PRE>\n<A HREF=\"#mail number\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail password\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail password\"><H3>mail password</H3></A><PRE>\n  Command: mail/password +set=&lt;password&gt;\n           mail/password &lt;password&gt;    \n           mail/password +set         \n  \n  The first version of the password sub-command sets your password for\n  mail access.  Once you set your password, you must use the second form\n  of the password sub-command every time you connect to this mud in\n  order to access your mail.  Note that you only have to enter your mail\n  password once per login session.  If you have not set a mail password, you\n  do not need to enter a password at all to access your mail.\n   \n  To clear the password, use the +set format with a blank password.\n  Your mail password is separate from your login password.\n  \n  Examples:\n    &gt; mail/password +set=appleorange    (set mail password)\n    &gt; mail/password appleorrange        (enter password to access mail)\n    &gt; mail/password +set                (remove password)\n  \n  See Also: mail share, mail lock, mail autofor\n  \n</PRE>\n<A HREF=\"#mail page\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail previous\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail previous\"><H3>mail previous</H3></A><PRE>\n  Command:  mail/next -\n  \n  Yes, you put a hyphen after the next.  This will in effect view the \n  previous mail message from the one you last read.  For example, if\n  you typed:\n       mail 5\n  \n  You would read mail message #5 (if you had mail)\n  \n  If you typed:\n       mail/next -\n  \n  You would read mail message #4\n  \n  See Also: mail next, mail zap\n  \n</PRE>\n<A HREF=\"#mail password\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail quick\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail quick\"><H3>mail quick</H3></A><PRE>\n  Command: mail/quick\n \n  Get a quick summary of how many new, unread, old, and marked messages\n  in the current folder.  Also reports the current folder.\n  \n  The /quick switch is optional for this command and you can just type 'mail'\n  standalone.\n  \n  See Also: mail status, mail\n  \n</PRE>\n<A HREF=\"#mail previous\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail quicklist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail quicklist\"><H3>mail quicklist</H3></A><PRE>\n  Topic: mail quick list of commands (in alphabetical order)\n    mail                       - Short for 'mail/quick' or 'mail/status'.\n    mail/alias                 - Shows global aliases.\n    mail/autofor               - Sets an autoforward to another user.\n    mail/check                 - Reads mail in shared mailbox.\n    mail/delete                - Purges marked mail.\n    mail/forward               - Forwards a mail message.\n    mail/lock                  - Locks mail against user(s).\n    mail/mark[/save]           - Marks mail to delete (or save).\n    mail/next [-]              - Reads next (or previous) message.\n    mail/number                - Lists messages in shared mailbox.\n    mail/page                  - Sets lines per page.\n    mail/password              - Sets mail password.\n    mail/quick                 - Gives quick status of your mailbox.\n    mail/quota                 - Gives quick quota of your mail ability.\n    mail[/read]                - Reads the message (/read switch optional).\n    mail/recall                - Recalls a sent message.\n    mail/reject                - Sets message to player failing mail lock.\n    mail/reply                 - Replies to a mail message.\n    mail[/send]                - Sends message (/send switch optional)\n    mail/share                 - Allows you to share your mailbox to others.\n    mail/status                - Detail listing of messages in your mailbox.\n    mail/version               - Displays mail version number.\n    mail/write                 - Invokes the line editor\n    mail/zap [-]               - Deletes current message and read next/prev.\n  \n</PRE>\n<A HREF=\"#mail quick\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail quota\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail quota\"><H3>mail quota</H3></A><PRE>\n  Command:  mail/quota\n\n  Check how many mail messages are in your mailbox, as well as the maximum\n  amount of mail messages you are allowed to store in your mailbox.  It\n  will also display the total number of saved messages you are allowed\n  and the total number of saved messages you currently have used.\n  \n  See Also: quick, status\n  Wizards: wizhelp wmail size\n  \n</PRE>\n<A HREF=\"#mail quicklist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail read\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail read\"><H3>mail read</H3></A><PRE>\n  Command: mail[/read] &lt;msg #|new|unread&gt;\n  \n  Read a mail message.  You can specify the message number, or to read the \n  first new or unread mail message.  Check help on the status sub-command \n  (wizhelp mail status)for information on how to see mail headers.  The /READ\n  switch is optional.  Optional arguments to 'mail/read' is as follows:\n      mail[/read] new    - read first new message\n      mail[/read] nall   - read ALL new messages\n      mail[/read] unread - read first unread message\n      mail[/read] uall   - read ALL unread messages\n      mail[/read] ball   - read ALL new AND unread messages\n      mail[/read] #      - read specified mail message number\n \n  Examples:\n    &gt; mail/read 2\n    &gt; mail 10\n    &gt; mail/read new\n    &gt; mail new\n    &gt; mail/read unread\n    &gt; mail unread\n  \n  See Also: mail status, mail delete, mail mark, mail next, mail zap,\n            mail unmark, mail save, mail new, mail unread, mail nall, \n            mail ball, mail uall\n  \n</PRE>\n<A HREF=\"#mail quota\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail recall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail recall\"><H3>mail recall</H3></A><PRE>\n  Command: mail/recall [ &lt;#&gt;|+all|*&lt;player&gt; [=&lt;player&gt;|+all] ]\n           mail/recall &lt;various options&gt;\n  \n  This command will let you recall (IE: delete) unread, unmarked\n  messages that you have sent to other players.  It allows you\n  you to either list all messages that you have sent that you can currently\n  recall, view a specified message that you sent that can be recalled,\n  and optionally recall from a single or multiple users or recall all messages.\n  \n  To view all messages that you can recall:\n    mail/recall\n  \n  This will display something like this:\n    Msg #:   1       To: Seawolf Wizard\n    Msg #:   8       To: Wizard George Freddie\n    Msg #:  10       To: TwinkMan\n    Mail: Done\n  \n  This will show mail you have sent that can still be recalled.  The Msg# may \n  skip numbers if those messages have been previously read and can no longer \n  be recalled.  *NOTE* You may specify a player with '*playername' to limit\n  the search on both 'mail/recall' and 'mail/recall/all'.\n  \n{ To continue [with examples], please type: help mail recall2 }\n\n</PRE>\n<A HREF=\"#mail read\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail recall2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail recall2\"><H3>mail recall2</H3></A><PRE>\n  Command: mail/recall (continued)\n  \n  To check a message that you can possibly recall, type in:\n    mail/recall # (IE: mail/recall 1)\n  \n  This will display something like this:\n    -------------------------------------------------------------------------\n    Recall #: 1\n    To: Seawolf Wizard\n    Date/Time: Mon Nov 1 04:08:32 1992         Size: 233 Bytes\n    Subject: Hey!\n    -------------------------------------------------------------------------\n    &lt;the message that you sent them&gt;\n    -------------------------------------------------------------------------\n    Mail: Done\n   \n  If you wish to recall this message from the user, Wizard, you would type:\n    mail/recall 1=wizard\n  \n  If you wish to recall this message from everyone, you would type:\n    mail/recall 1=+all\n  \n  if you want to recall all messages you have sent to everyone, you would type:\n    mail/recall +all\n  \n  This will tell you how many messages were successfully recalled. \n  \n{ type help mail recall3 to continue }\n  \n</PRE>\n<A HREF=\"#mail recall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail recall3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail recall3\"><H3>mail recall3</H3></A><PRE>\n  Command: mail/recall (continued)\n  \n  To check all messages that you have sent (but not necessarily recall) use:\n    mail/recall/all\n  \n  You may specify a search by player with the /recall switch with or without\n  the /all switch.  Such would be like:\n    mail/recall *TinyPlayer\n    mail/recall/all *TinyPlayer\n  \n  The display will display all messages that you have sent.  The only \n  difference will be that some of the messages (probably most of them) you \n  will be unable to recall.  The other functions (like viewing message and who\n  it was sent to) should still work.\n  \n  See Also: mail save, mail send, mail mark, mail unmark\n  \n</PRE>\n<A HREF=\"#mail recall2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail reject\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail reject\"><H3>mail reject</H3></A><PRE>\n  Command: mail/reject &lt;msg&gt;\n           mail/reject +list\n           mail/reject\n  \n  Will set the message sent when a player attempts to send a mail message to \n  someone who has that player locked from mailing them.  This works similar\n  to the @reject for pages.  To see the current reject message use the \n  +list option.  To clear the message, do mail/reject without a message.\n  Use the /lock switch to mail to establish a mail lock.\n   \n  Examples:\n    &gt; mail/reject I don't want you to mail me anymore.  Nayh!\n    &gt; mail/reject\n    &gt; mail/reject +list\n  \n  See Also: mail lock\n  \n</PRE>\n<A HREF=\"#mail recall3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail reply\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail reply\"><H3>mail reply</H3></A><PRE>\n  Command: mail/reply [@|^]&lt;msg #&gt;[*]=[&lt;subject&gt;//]&lt;message&gt;.\n\n  Reply to a mail message with your own message.  The @, ^, and * are optional\n  to preface or follow the message number.  You can only reply to messages in\n  the current folder.  You may also specify an optional subject.\n  \n  To reply to all recipients of the mail message, in addition to the sender:\n     -preface the message number with @ for all recipients of your reply to\n      appear in the 'To' line.\n     -preface the message number with ^ for all recipients to see only their\n      own name in the 'To' line (i.e. not see who else received the reply).\n      This is the default.\n  \n  To include the original message in your reply:\n     -follow the message number with *.\n  \n  Examples:\n    &gt; mail/reply 2=Sure, I'll come to the party.  \n    &gt; mail/reply 1*=What did you mean?\n    &gt; mail/reply @12=Why don't we all get together tomorrow?\n    &gt; mail/reply ^9*=I'm not sure if we should build that.\n  \n  Note:  If you are @toggled BRANDY_MAIL, instead of &lt;message&gt; it would be your\n         subject.  Then you'd use '-' for additional text and '--' to send.\n  \n  See Also: mail forward, mail send\n  \n</PRE>\n<A HREF=\"#mail reject\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail save\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail save\"><H3>mail save</H3></A><PRE>\n  Command: mail/mark/save &lt;range&gt;\n           mail/unmark &lt;range&gt; (notice, you do not use /save with this)\n  \n  The save switch is used in junction with the MARK switch.  When used,\n  this will mark a mail message as SAVED and any autodeletion will\n  not remove the mail.  Please note that there is a maximum number of\n  saved messages available that you can use and once reached, you are\n  unable to save new ones w/o removing one of your prior ones.  To\n  unmark the message you may either use mail/mark (without a save)\n  or mail/unmark.  Saved mail shows up with a 'S' by the flag.\n  \n  See Also: mail mark\n  \n</PRE>\n<A HREF=\"#mail reply\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail send\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail send\"><H3>mail send</H3></A><PRE>\n  Topic: mail sending\n  \n  There are three ways that you can send mail with the mail system.  Depending \n  on which way you prefer, this will point you to the correct help files.\n  \n  1.  Brandy/Mux style mail.  This is when you do 'mail user-list=subject'\n      Look at  :  'help mail send brandy' and 'help mail write cmdlist'\n      Needed   :  The BRANDY_MAIL toggle (help brandy_mail) \n                  **NOTE**: @toggle me=brandy_mail to set it.\n      Syntax   :  mail user(s)=subject\n                  mail/reply &lt;msg#&gt;=subject\n                  mail/forward &lt;msg#&gt; &lt;user(s)&gt;=subject\n      Note:  Brandy/MUX mail wrappers may be in place on your RhostMUSH.\n             If it is, you may be able to use @mail like you're used to.\n  \n  2.  PennMUSH style mail.  This is used for the PennMUSH style mailing.\n      Needed   : The BRANDY_MAIL toggle must be UNSET and PENN_MAIL toggle\n                 must be set.  BRANDY_MAIL has precidence.\n      Syntax   : mail user(s)=subject/body\n      Note:  Penn mail wrappers may be in place on your RhostMUSH.  If it is,\n             you may be able to use @mail like you're used to.\n\n  3.  RhostMUSH line editor.  This is when you do 'mail/write &lt;start of text&gt;'\n      Look at  :  'help mail write' and 'help mail write cmdlist'\n      Syntax   :  mail/write Start Of Message\n  \n  4.  Mailing quickly.  This is when you do 'mail &lt;user-list&gt;=&lt;subj&gt;//&lt;body&gt;'\n      Look at  :  'help mail send quick' and 'help mail cmdlist'\n      Needed   :  The BRANDY_MAIL toggle must NOT be set. \n                **NOTE**: @toggle me=!brandy_mail to remove it.\n      Syntax   :  mail user(s)=Optional Subject//Body\n                  mail user(s)=Body\n  \n  Please check @list options to see what current global settings are enabled\n  for the mail system.  Start a sendlist with a , for player's with spaces.\n  \n  See Also: PENN_MAIL, BRANDY_MAIL, mail write, mail send quick, \n              mail send brandy\n  \n</PRE>\n<A HREF=\"#mail save\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail send brandy\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail send brandy\"><H3>mail send brandy</H3></A><PRE>\n  Topic: brandy +mail system\n  \n  The brandy mailer 'syntax' uses the mail/write (or -) operation for adding\n  new lines.  Please refer to 'HELP MAIL WRITE CMDLIST' for a list of commands\n  available for writing using the line editor.\n  \n  You may use, for ONLY this syntax, '--' to send the mail off.  \n  If you choose to use mail/write +send=&lt;player-list&gt;, it will override the\n  player list you specified originally.\n   \n  You need the BRANDY_MAIL toggle (@toggle me=brandy_mail) to use this syntax.\n  \n  You may also optionally set the MAIL_STRIPRETURN toggle to signal the mailer\n  to use spaces to seperate lines instead of a carrage return.\n   \n  This effects the commands:  mail, mail/reply, and mail/forward.\n  \n  Please note that mail/send will send a mail message 'quickly' and bypass\n  the line editor.  You may use mail/send to send a message WHILE WRITING\n  another message with the line editor.\n     \n  See Also: BRANDY_MAIL, mail write, mail send quick, mail send brandy\n  \n</PRE>\n<A HREF=\"#mail send\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail send examples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail send examples\"><H3>mail send examples</H3></A><PRE>\n  Command: mail/send\n  \n  Examples:\n    &gt; mail player=how are you?\n    &gt; mail myfriend myotherfriend +social &amp;friendlist=Party!!\n    &gt; mail/send player=My Subject//My Text I want to send you.\n    &gt; mail/send myfriend=Hi.  Meet me tomorrow at the club.\n    &gt; mail/send tinypal #12345=Are you coming to the party?\n    &gt; mail/send &amp;allfriends=Come to my club for a party tonight. \n    &gt; mail/send ~evaledattr=Where do you want to meet?\n    &gt; mail/send +social=Where do you want to meet for the next party?\n    &gt; mail/send @myfriend tinypal otherfriend +social=Let's go to the party!\n    &gt; mail/send player1 player2 ... playerX=hi!\n    &gt; mail/send player1,this is player2,player3,...,playerX=hi!\n  \n  For those with limited number of input lines, an alternative\n  method for writing mail exists.  For information on this,\n  read the help files for 'mail write'.  The /SEND switch for mail is\n  optional.\n  \n  See Also: mail write, mail forward, mail reply, mail recall\n  \n</PRE>\n<A HREF=\"#mail send brandy\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail send quick\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail send quick\"><H3>mail send quick</H3></A><PRE>\n  Command:  mail/send [@]&lt;address list&gt;=[&lt;subject&gt;//]&lt;message&gt;\n  The address list can contain any number of recipients (up to the mush\n  buffer limit) and can be one of the following:\n      A player name  \n      A player number prefixed by a dbrief# \n      A mail alias attribute located on the player prefixed by a &amp; \n         (this is just an attribute on yourself with a list of players)\n      A global mail alias attribute prefixed by a +. \n      A mail alias attribute location on optional target prefixed by a\n         ~ character.  This is evaluated like get_eval().\n  \n  The different elements in the address list need to be separated by spaces. \n  If you include the optional '@', all recipients of a mail message will \n  see the complete list of recipients. (This will show up as a 'CC' list).\n  To give an optional subject, enter text you want as a subject then \n  separate that from the rest of the message with two /'s. (IE: // )\n     \n  There is an exception to the '@'.  Check @list options, if the To: is\n  automatically added, the '@' character's behavior is reversed.\n  \n  You can break up mail with either spaces OR commas and duplicates are\n  automatically stripped out.\n  \n{ help mail send2 for more, or help mail send examples for examples }\n</PRE>\n<A HREF=\"#mail send examples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail send2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail send2\"><H3>mail send2</H3></A><PRE>\n  Command: mail/send (CONTINUED)\n  \n  To use the alias &quot;&amp;alias&quot;, you would need an attribute on yourself\n  called &quot;alias&quot;.  There are no restrictions on the name of the alias,\n  except that if the alias doesn't exist on the player calling the\n  command or is a bad mush attribute name, the mailer will not accept\n  it.  The attribute referenced by the &amp;&lt;alias&gt; is another address\n  list, and can also contain other aliases if desired.  Any recursion\n  will stop when the mush long_buffer length is reached.  You may also\n  use '~' to evaluate the attribute.\n  \n  Examples: \n    &gt; &amp;FRIENDS me=Seawolf Ashen-Shugar Thorin\n    &gt; mail &amp;friends=Hiya!\n    &gt; &amp;ONLINE me=[lwho()]\n    &gt; mail ~online=hiya!\n  \n  To use the global alias '+alias', there would have to be a pre-defined\n  global attribute defined.  If the global attribute does not exist,\n  the input is ignored as an illegal entry.  To have a global alias\n  set, notify the nearest royalty or higher of what you wish to use.  The \n  address list can be separated by either spaces or commas.\n  \n  Examples: \n    &gt; mail/alias\n      Alias: wiz\n      Contents: Wizard AdminJudge SlothTheWiz\n    &gt; mail +wiz=hello!\n  \n  This would send to the players 'Wizard, AdminJudge, and SlothTheWiz'  \n  \n  For examples, see: mail send examples\n  \n</PRE>\n<A HREF=\"#mail send quick\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail setup_aliases\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail setup_aliases\"><H3>mail setup_aliases</H3></A><PRE>\n  Command:  1. mail/alias  \n            2. wmail/alias[&lt;/switches&gt;] [&lt;alias-name&gt;=&lt;list of players&gt;]\n            3. &amp;ATTRIB me=&lt;list of players&gt; \n            4. &amp;ATTRIB me=&lt;eval returning list of players&gt;\n            5. &amp;ALIAS.NAME &lt;mail_def_object&gt;=&lt;eval returning list of players&gt;\n            6. &amp;COMMENT.NAME &lt;mail_def_object&gt;=&lt;label description for alias&gt;\n  \n  There are various types of aliases you can set up.  Below will be described\n  each alias and how to set up each kind and use them.\n \n  * Global Aliases\n    Global aliases can only be created by a wizard.  You can see what global\n    aliases exist with 'mail/alias'.  To use a global alias, you would use\n    the '+' prefix.  To create global aliases as a wizard, \n    you use the 'wmail/alias' command.\n    Example:  mail +wizards=Hi!\n    1.  Option '1' above is how you would see all the current global aliases.\n    2.  Option '2' above is how a wizard would set a STATIC global alias.\n  \n  * Personal Aliases\n    Personal aliases are actually nothing more than attributes you store on\n    yourself.  If you have friends called 'bob' 'terry' and 'james' you would\n    set can set the alias like this:  &amp;friends me=bob terry james\n    To use the personal STATIC alias, you would use the '&amp;' prefix.\n    To use the personal DYNAMIC (eval) alias, you would use the '~' prefix.\n    3.  Option '3' above sets a static list of dbref#'s (or player names)\n        that will be used as a personal alias you can then use in sending \n        mail with '&amp;'.\n        Example: &amp;FRIENDS me=Moe Larry Curley Shemp Joe\n                 mail &amp;friends=Hi!\n    4.  Option '4' works similar to option 3, except it is a function\n        evaluation that then returns a list of player names or dbref#'s to\n        use in a mail.  You  may also specify another target other than\n        yourself.\n        Example: &amp;EVAL_FRIENDS MyObject=[get(Stooges/player_list)]\n                 mail ~MyObject/eval_friends=Hi!\n   \n  * Global Evaluated Aliases\n    Evaluated aliases are similiar to static aliases.  When a wizard sets\n    these up, they work by evaluation so can be used to set up global\n    dynamic aliases.  These are referenced with a '$' prefix.\n    This requires that the @admin config parameter 'mail_def_object' is\n    defined.\n    5.  Option '5' above sets the actual evaluated alias.\n    6.  Option '6' just sets a label/description that is shown when a player\n        lists the aliases.\n        Example:  mail $wizards=Hi!\n    \n  See Also: help mail send \n  \n</PRE>\n<A HREF=\"#mail send2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail share\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail share\"><H3>mail share</H3></A><PRE>\n  Command: mail/share &lt;key&gt;\n  \n  Share lets you give access to your mailbox for other players who pass\n  the lock.  The key is a standard boolean lock expression, as documented\n  in 'help @lock keys'.\n   \n  Any player who passes the lock may do the /number and /check\n  sub-commands on your mailbox. If you do not have a share lock set on\n  your mail, this is the same as if nobody can pass the share lock. To\n  clear the lock, enter a blank expression.\n   \n  If you set a folder/share, players who pass the mail/share lock can\n  only see the folder you specify.\n   \n  Examples:\n    &gt; mail/share *tinyspouse             (allows tinyspouse into your mail)\n    &gt; mail/share *tinyspouse | *tinypal  (allows tinyspouse and tinypal)\n    &gt; mail/share                         (removes the sharelock)\n  \n  The attribute is 'ShareLock' on yourself.\n  \n  See Also: mail number, mail check, mail folders, mail folder, mail share\n  \n</PRE>\n<A HREF=\"#mail setup_aliases\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail signature\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail signature\"><H3>mail signature</H3></A><PRE>\n  Command: &amp;MAILSIG me=&lt;string&gt;\n   \n  mail signatures are done by storing a user-defined attribute on yourself.\n  the attribute is called 'MAILSIG'.  To set this attribute, you would do:\n      &amp;MAILSIG me=whatever you want as your signature.\n  \n  Please keep in mind that this attribute is *NOT* evaluated for functions and\n  is taken as-is.\n  \n</PRE>\n<A HREF=\"#mail share\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail status\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail status\"><H3>mail status</H3></A><PRE>\n  Command: mail/status [[p#] [*player] [#-#] [U/N/B/O/M/S] [/SUBJECT]]\n  \n  This will print out a list of the message headers in the current\n  folder for which the player has mail.  This will also show the current\n  folder.  The p# argument (where # is an integer) will print out the\n  specified page of message headers if the user has his/her paging value\n  set.  The page is determined from the paging value entered with the\n  page command which represents the number of messages on a page.  If\n  the user has no paging value set, entering a page number on this\n  command will have no effect.  If the user has a paging value set and\n  enters 0 for the page number, the user will get all message headers\n  without any page breaks.  \n  \n  Check out help on 'mail page' to see how to set your paging value.  \n  The '*player' option will show all mail sent to you from the given player, \n  and the #-# is a range of messages you would like to see.  The letters \n  U, N, B, O, M, and S are the special character representations for:\n     (U)nread             (N)ew                    (B)oth new and unread\n     (O)ld                (M)arked (for deletion)  (S)aved\n  \n  The /SUBJECT option will do a search for mail matching '/SUBJECT' in the\n  subject field.  The string after the '/' tells what to search for.\n  \n{ To continue with examples, see 'help mail status2' }\n  \n</PRE>\n<A HREF=\"#mail signature\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail status2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail status2\"><H3>mail status2</H3></A><PRE>\n  Command: mail/status (continued)\n  \n  Mail status looks like the following:\n    &gt; mail/status\n    ...\n    [N] ( 5)  From: Wizard &lt;Sat Nov 5 14:00:05 1994&gt; (113 bytes)\n    [R] ( 6) *From: Seawolf &lt;Fri Nov 4 12:23:02 1994&gt; (200 bytes) Fwd\n              Subj: In Reply to your mail.\n    ...\n  \n  The letter in brackets indicates the status (old, new, unread, marked, saved)\n  The corresponding letter will show what it is (O, N, U, M, S). The\n  number following the status indicates the message number.  The status also\n  reports who sent the mail, when the mail was sent, and the size of the \n  message.  It also will show if the mail was forwarded, or replied to and any\n  optional subjects that were included on the mail message.  New mail becomes \n  unread if you logout without reading it.  The '*' shows the player connected.\n  Examples:\n    &gt; mail/status          (shows all your mail in your current folder)\n    &gt; mail/status p2       (shows second page of your mail [if page is set])\n    &gt; mail/status 10-50    (shows messages 10-50 in your mailbox)\n    &gt; mail/status 5        (shows just message 5 in your mailbox)\n    &gt; mail/status *Seawolf (shows all mail from player Seawolf)\n    &gt; mail/status U        (shows all the unread mail in your mailbox)\n    &gt; mail/status B        (shows all the unread and new mail in your mailbox)\n    &gt; mail/status /biff    (shows mail with subjects containing the word biff)\n  \n  See Also: mail number, mail read, mail mark, mail unmark, mail save, \n            mail page\n  \n</PRE>\n<A HREF=\"#mail status\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail technical\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail technical\"><H3>mail technical</H3></A><PRE>\n  Topic: technical information about the mail system\n  \n  The mail system was designed years ago and has gone through modifications\n  which help compress it's mail storage architecture.  Some of the technical\n  information to the mail system is:\n  - Multiple sent mail shares a single message for compactability\n  - Mail system uses a separate database separate from the MUSH db.\n  - Mail system is totally hard-code.  No dependancy on mush version or objs.\n  - Folder system is stored along with the mail db separate from the mush db.\n  - Mail database can be dumped on-line for cross-platform backups/recovers.\n  - Mail database can be loaded on-line (it *will* delete current mail db)\n  - Mail system does not suffer corruption and other instabilities that\n    softcoded mailers of similar functionality have. (Example: brandy mailer)\n  - Allows some user-configurability for ease of use (to be expanded later)\n  - Has full featured database recovery suite and index rebuilding incase of\n    corruption by some remote off-chance.\n  \n  Current version of this writing is 2.1.1   Seawolf @ RhostMUSH\n  \n  \n</PRE>\n<A HREF=\"#mail status2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail topics\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail topics\"><H3>mail topics</H3></A><PRE>\n    Available Mail Topics are:\n  \n    mail-writing           mail-reading            mail-deleting\n    mail-folders           mail-admin              mail-reviewing\n    mail-sharing           mail-examples           mail-other\n    mail-aliases           mail-filtering\n  \n    A tutorial can be seen with:\n    mail tutorial\n  \n</PRE>\n<A HREF=\"#mail technical\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail tutorial\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail tutorial\"><H3>mail tutorial</H3></A><PRE>\n  Topic: mail tutorial\n  \n  There are two different type of tutors.  The first is if you wish to use\n  the brandy mail interface to the system.\n  \n  The second is if you wish to just get on your feet with the mail system\n  and learn the bare-bone basics (non-brandy interface)\n  \n  For the brandy interface tutorial, please type:\n  \n                       help mail btutor\n  \n  For the default bare-bone tutorial, please type:\n \n                       help mail dtutor\n  \n</PRE>\n<A HREF=\"#mail topics\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail uall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail uall\"><H3>mail uall</H3></A><PRE>\n  This is a sub-option to 'mail/read' (short for just 'mail').  If you\n  specify 'uall' at the end, it will read ALL the unread mail messages\n  you have in your mailbox.\n  \n  Example:\n    &gt; mail/read uall\n    &gt; mail uall\n  \n  See Also: mail ball, mail nall, mail new, mail unread, mail both\n  \n</PRE>\n<A HREF=\"#mail tutorial\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail unmark\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail unmark\"><H3>mail unmark</H3></A><PRE>\n  Command: mail/unmark &lt;#&gt;|all   (this works for saved messages as well)\n  \n  This command is similar to mark except that it unmarks messages.  You\n  may use mark and unmark to mark all but specific messages.  You can only\n  unmark messages in the current folder.  You would use this to unmark SAVED\n  messages as well.\n  \n  Examples:\n    &gt; mail/mark all\n    &gt; mail/unmark tinyspouse  (These two commands in this order mark\n                               all but tinyspouse's messages.)\n    &gt; mail/mark tinypal\n    &gt; mail/unmark 2 5         (These two commands in this order mark all\n                               of tinypal's messages, except messages 2 and 5).\n    &gt; mail/unmark 1-5         (unmark messages 1 through 5) \n  \n  See Also: mail mark, mail delete, mail status, mail save\n  \n</PRE>\n<A HREF=\"#mail uall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail unread\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail unread\"><H3>mail unread</H3></A><PRE>\n  This is a sub-option to 'mail/read' (short for just 'mail').  If you\n  specify 'unread' at the end, it will read the FIRST unread mail message \n  in your mailbox.\n  \n  Example:\n    &gt; mail/read unread\n    &gt; mail unread\n  \n  See Also: mail uall, mail nall, mail ball, mail new, mail both\n  \n</PRE>\n<A HREF=\"#mail unmark\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail version\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail version\"><H3>mail version</H3></A><PRE>\n  Command: mail/version\n  \n  this command will show the current version of the mailsystem.\n  \n</PRE>\n<A HREF=\"#mail unread\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write\"><H3>mail write</H3></A><PRE>\n  Topic: mail writing\n  \n  Note:  For help on creating new mail, please see 'help mail send'\n  \n  mail/write gives you the flexability of a line-editor within mail.  There\n  are various options with mail/write that you may use.  Help is available\n  on each of these topics.\n  \n  Topics:\n    ADDING         FORWARDING        QUICKSENDING  CMDLIST    AUTONOTIFY\n    EXAMPLES\n  \n  Write Functionality:\n    -         +edit     +del      +join     +justify   +split\n    +insert   +list     +forward  +reply    +subject   +forget\n    +send     +fedit    +editall  +feditall +cc        +bcc\n    +acc      +proof\n  \n  Type: help mail write &lt;option&gt; for help on these topics/functionality.\n  \n</PRE>\n<A HREF=\"#mail version\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSacc\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSacc\"><H3>mail write +acc</H3></A><PRE>\n  Command: mail/write +acc=&lt;player-list&gt;\n  \n  The '+acc' subcommand is used to modify (add to) the target list of\n  players the mail is going out to.  Keep in mind, this ONLY works for\n  sending or forwarding.  This does *NOT* work for replies.\n  \n  This only works when you are @toggled BRANDY_MAIL and when you\n  start a message with 'mail player-list=subject' (or similiar).\n  \n  Example:\n    &gt; mail/write +acc=player1 player2 &amp;myalias +globalalias\n    Mail: New send player list stored.\n  \n  See Also: mail write +cc, mail write +bcc\n  \n</PRE>\n<A HREF=\"#mail write\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSbcc\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSbcc\"><H3>mail write +bcc</H3></A><PRE>\n  Command: mail/write +bcc=&lt;player-list&gt;\n  \n  The '+bcc' subcommand is used to modify (add to) the target list \n  and blind target list of players the mail is going out to.  Keep \n  in mind, this ONLY works for sending or forwarding.  This does \n  *NOT* work for replies.  If 'bcc_hidden' is ENABLED, then \n  whoever is in the +bcc list will _NOT_ see who the mail was sent\n  to.  If 'bcc_hidden' is DISABLED, then whoever is in the +bcc\n  list WILL see who the mail was sent to, but no one outside the\n  +bcc list will.  In effect, bcc_hidden toggles the effect.\n  \n  Please check '@list options mail' for the current configuration.\n  \n  You may specify '!ALL' to clear the Bcc list without effecting\n  the To list.\n  \n  This only works when you are @toggled BRANDY_MAIL and when you\n  start a message with 'mail player-list=subject' (or similiar).\n   \n  Example:\n    &gt; mail/write +bcc=player1 player2 &amp;myalias +globalalias\n    Mail: New send player list stored.\n  \n  See Also: mail write +cc, mail write +acc\n  \n</PRE>\n<A HREF=\"#mail write PLUSacc\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUScc\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUScc\"><H3>mail write +cc</H3></A><PRE>\n  Command: mail/write +cc=&lt;player-list&gt;\n  \n  The '+cc' subcommand is used to replace (not modify!) the target list of\n  players the mail is going out to.  Keep in mind, this ONLY works for\n  sending or forwarding.  This does *NOT* work for replies.\n  \n  This only works when you are @toggled BRANDY_MAIL and when you\n  start a message with 'mail player-list=subject' (or similiar).\n  \n  Example:\n    &gt; mail/write +cc=player1 player2 &amp;myalias +globalalias ~evalalias\n    Mail: New send player list stored.\n  \n  See Also: mail write +bcc, mail write +acc\n  \n</PRE>\n<A HREF=\"#mail write PLUSbcc\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSdel\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSdel\"><H3>mail write +del</H3></A><PRE>\n  Command: mail/write +del=&lt;args&gt;\n  \n  The '+del' subcommand  to mail/write is used to delete a line of text.\n  \n  Examples:\n    &gt; mail/write A line of text\n    Mail: Write message started.\n    &gt; -Another line of txt\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text\n    2: Another line of txt\n    -------------------------------------------------------------------------\n    &gt; mail/write +del=1\n    Mail: Write line deleted.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Another line of txt\n    -------------------------------------------------------------------------\n  \n  Note: You can't delete line #1 if that's the only line there is.  \n        Use mail/write +forget to remove it.\n  \n  See Also: mail write +edit, mail write +split, mail write +forget\n    \n</PRE>\n<A HREF=\"#mail write PLUScc\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSedit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSedit\"><H3>mail write +edit</H3></A><PRE>\n  Command: mail/write +edit &lt;line&gt;=&lt;old&gt;,&lt;new&gt;\n  \n  The '+edit' subcommand to mail/write is used to edit a line of text.\n  This only edits the FIRST occurance of text in the line.\n  \n  Examples:\n    &gt; mail/write A line of text\n    Mail: Write message started.\n    &gt; -Another line of txt\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text\n    2: Another line of txt\n    -------------------------------------------------------------------------\n    &gt; mail/write +edit 2=txt,text\n    Mail: +edit done.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text\n    2: Another line of text\n    -------------------------------------------------------------------------\n   \n  See Also: mail write +del, mail write +join, mail write +justify \n  \n</PRE>\n<A HREF=\"#mail write PLUSdel\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSeditall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSeditall\"><H3>mail write +editall</H3></A><PRE>\n  Command: mail/write +editall=&lt;old&gt;,&lt;new&gt;\n  \n  The '+editall' subcommand to mail/write is used to edit ALL lines of text.\n  This only edits the FIRST occurance of text in the lines.\n  \n  Examples:\n    &gt; mail/write A line of txt txt\n    Mail: Write message started.\n    &gt; -Another line of txt txt\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of txt\n    2: Another line of txt\n    -------------------------------------------------------------------------\n    &gt; mail/write +editall=txt,text\n    Mail: +editall done (2 lines edited)\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text txt\n    2: Another line of text txt\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +feditall, mail write +edit, mail write +fedit\n   \n</PRE>\n<A HREF=\"#mail write PLUSedit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSfedit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSfedit\"><H3>mail write +fedit</H3></A><PRE>\n  Command: mail/write +fedit &lt;line&gt;=&lt;old&gt;,&lt;new&gt;\n  \n  The '+fedit' subcommand to mail/write is used to edit a line of text.\n  Unlike the '+edit' subcommand, this edits ALL occurances of the text\n  in the line.\n  \n  Examples:\n    &gt; mail/write A line of text\n    Mail: Write message started.\n    &gt; -Another line of txt\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text\n    2: Another line of txt\n    -------------------------------------------------------------------------\n    &gt; mail/write +fedit 2=txt,text\n    Mail: +fedit done.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text\n    2: Another line of text\n    -------------------------------------------------------------------------\n   \n  See Also: mail write +del, mail write +join, mail write +justify,\n            mail write +fedit, mail write +editall, mail write +feditall\n  \n</PRE>\n<A HREF=\"#mail write PLUSeditall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSfeditall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSfeditall\"><H3>mail write +feditall</H3></A><PRE>\n  Command: mail/write +feditall=&lt;old&gt;,&lt;new&gt;\n  \n  The '+feditall' subcommand to mail/write is used to edit ALL lines of text.\n  This edits ALL occurances of text in ALL the lines.\n  \n  Examples:\n    &gt; mail/write A line of txt txt\n    Mail: Write message started.\n    &gt; -Another line of txt txt\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of txt\n    2: Another line of txt\n    -------------------------------------------------------------------------\n    &gt; mail/write +feditall=txt,text\n    Mail: +feditall done (2 lines edited)\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: A line of text text\n    2: Another line of text text\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +editall, mail write +edit, mail write +fedit\n  \n</PRE>\n<A HREF=\"#mail write PLUSfedit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSforget\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSforget\"><H3>mail write +forget</H3></A><PRE>\n  Command: mail/write +forget\n  \n  The '+forget' subcommand to mail/write is used to purge the mail in progress\n  effectively deleting all of the mail/write information.\n  \n  Examples:\n    &gt; mail/write Start of message\n    Mail: Write message started.\n    &gt; -another line\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    1: Start of message\n    2: another line\n    &gt; mail/write +forget\n    Mail: Write message forgotten.\n    &gt; mail/write +list\n    Mail: No write in progress.\n  \n  See Also: mail write +edit, mail write +del\n    \n</PRE>\n<A HREF=\"#mail write PLUSfeditall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSforward\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSforward\"><H3>mail write +forward</H3></A><PRE>\n  Command: mail/write +forward=&lt;message number&gt; &lt;player-list&gt;\n  \n  The '+forward' subcommand to mail/write is used to forward the mail\n  in progress to the player list while including the specified message\n  number from your mailbox.\n  \n  Examples:\n    &gt; mail/write TinyPlayer sent me this... what do you think?\n    Mail: Write message started.\n    &gt; mail/status\n    -------------------------------------------------------------------------\n    [0] ( 1)  From: TinyPlayer      &lt;Mon Jan  1 01:01:01 2000&gt;  (1095 Bytes)\n              Subj: Hey!\n    -------------------------------------------------------------------------\n  \n    Note: if the player 'TinyPlayer' was connected, they'd have a '*' before\n          the 'From:'.  i.e.  *From: TinyPlayer\n  \n    &gt; mail/write +forward=1 MyFriend\n    Mail: Message sent to -&gt; MyFriend\n  \n  See Also: mail write +reply, mail write quicksending, mail forward\n            mail status\n  \n</PRE>\n<A HREF=\"#mail write PLUSforget\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSinsert\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSinsert\"><H3>mail write +insert</H3></A><PRE>\n  Command: mail/write +insert=&lt;args&gt;\n  \n  The '+insert' subcommand to mail/write is used to insert a line before\n  the specified line.\n  \n  Examples:\n    &gt; mail/write Start of mail\n    Mail: Write message started.\n    &gt; -Third line\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Start of mail\n    2: Third line\n    -------------------------------------------------------------------------\n    &gt; mail/write +insert=2,Second line\n    Mail: Line inserted.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Start of mail\n    2: Second line\n    3: Third line\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +del, mail write +join\n  \n</PRE>\n<A HREF=\"#mail write PLUSforward\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSjoin\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSjoin\"><H3>mail write +join</H3></A><PRE>\n  Command: mail/write +join=&lt;args&gt;\n  \n  The '+join' subcommand to mail/write is used to join two lines of text.\n  \n  Examples:\n    &gt; mail/write This is\n    Mail: Write message started.\n    &gt; -This is the end of the line.\n    Mail: Write line 2 added\n    &gt; -a test\n    Mail: Write line 3 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: This is\n    2: This is the end of the line.\n    3: a test\n    -------------------------------------------------------------------------\n    &gt; mail/write +join=1,3\n    Mail: Line joined.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: This is a test\n    2: This is the end of the line.\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +del, mail write +split\n  \n</PRE>\n<A HREF=\"#mail write PLUSinsert\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSjustify\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSjustify\"><H3>mail write +justify</H3></A><PRE>\n  Command: mail/write +justify=&lt;args&gt;\n  \n  The '+justify' subcommand to mail/write is used to justify the line.\n  Valid options are (l)eft, (c)enter, or (r)ight for justification.\n  \n  Examples:\n    &gt; mail/write This is a test\n    Mail: Write message started.\n    &gt; -This is the end of the line.\n    Mail: Write line 2 added\n    &gt; -ok, I lied.\n    Mail: Write line 3 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: This is a test\n    2: This is the end of the line.\n    3: ok, I lied.\n    -------------------------------------------------------------------------\n    &gt; mail/write +justify=1,c\n    Mail: Line justified.\n    &gt; mail/write +justify=2,r\n    Mail: Line justified.\n    &gt; mail/write +list\n    -------------------------------------------------------------------------\n    1:                            This is a test\n    2:                                          This is the end of the line.\n    3: ok, I lied.\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +join, mail write +del\n  \n</PRE>\n<A HREF=\"#mail write PLUSjoin\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSlist\"><H3>mail write +list</H3></A><PRE>\n  Command: mail/write +list [=&lt;args&gt;]\n  \n  The '+list' subcommand to mail/write is used to list the lines of your\n  write message.\n  \n  Examples:\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Line one\n    2: Line two\n    3: Line three\n    -------------------------------------------------------------------------\n    &gt; mail/write +list=2\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    2: Line two\n    3: Line three\n    -------------------------------------------------------------------------\n    &gt; mail/write +list=1,2\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Line one\n    2: Line two\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +forget, mail write +send\n  \n</PRE>\n<A HREF=\"#mail write PLUSjustify\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSproof\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSproof\"><H3>mail write +proof</H3></A><PRE>\n  Command: mail/write +proof\n  \n  The '+proof' subcommand to mail/write is used to give you a 'snapshot' of \n  approximately what the mail will look like when it is sent out.  This does\n  not show any text that will be included in forwarded or replied to mail\n  if you chose the options to include original text.\n  \n  Examples:\n    &gt; mail/write This is some text\n    Mail: Write message started.\n    &gt; mail/write +proof\n    ---------------------------------------------------------------------------\n    Message In Progress\n    Status: EDITING     From: You\n    To: (empty list)\n    Date/Time: Mon May 14 18:50:27 2011        Size: 18 Bytes\n    Subject: (None)\n    ---------------------------------------------------------------------------\n    This is some text\n    ---------------------------------------------------------------------------\n  \n  See Also: mail write +list, mail write\n  \n</PRE>\n<A HREF=\"#mail write PLUSlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSreply\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSreply\"><H3>mail write +reply</H3></A><PRE>\n  Command: mail/write +reply=&lt;message number&gt;\n  \n  The '+reply' subcommand to mail/write is used to reply to the specified\n  message with the mail that is in progress.\n  \n  Examples:\n    &gt; mail/write Thanks for the mail.\n    Mail: Write message started.\n    &gt; mail/status\n    -------------------------------------------------------------------------\n    [0] ( 1)  From: TinyPlayer      &lt;Mon Jan  1 01:01:01 2000&gt;  (1095 Bytes)\n              Subj: Hey!\n    -------------------------------------------------------------------------\n    \n    Note: if the player 'TinyPlayer' was connected, they'd have a '*' before\n          the 'From:'.  i.e.  *From: TinyPlayer\n  \n    &gt; mail/write +reply=1\n    Mail: Message sent to -&gt; TinyPlayer\n  \n  See Also: mail write +forward, mail write quicksending, mail reply, \n            mail status\n  \n</PRE>\n<A HREF=\"#mail write PLUSproof\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSsend\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSsend\"><H3>mail write +send</H3></A><PRE>\n  Command: mail/write +send=&lt;player list&gt;\n  \n  The '+send' subcommand to mail/write is used to send the mail in progress to\n  a list of players.  You may specify a '@' before the player list to send the\n  list of players in a seeable 'CC' list.  Otherwise, it's assumed blank\n  carbon copies for everyone in the mail list.\n  \n  Examples:\n    &gt; mail/write Start of message\n    Mail: Write message started.\n    &gt; -second line.\n    Mail: Write line 2 added\n    &gt; -third line.\n    Mail: Write line 3 added\n    &gt; mail/write +send=@tinyplayer tinywizard\n    Mail: Message sent to -&gt; TinyPlayer\n    Mail: Message sent to -&gt; TinyWizard\n  \n  See Also: mail write +reply, mail write +forward, mail send, mail forward,\n            mail reply, mail status\n    \n</PRE>\n<A HREF=\"#mail write PLUSreply\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSsplit\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSsplit\"><H3>mail write +split</H3></A><PRE>\n  Command: mail/write +split=&lt;args&gt;\n  \n  The '+split' subcommand to mail/write is used to split a line after the\n  specified word.\n  \n  Examples:\n    &gt; mail/write Start of mail\n    Mail: Write message started.\n    &gt; -Second line Third line\n    Mail: Write line 2 added\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Start of mail\n    2: Second line Third line\n    -------------------------------------------------------------------------\n    &gt; mail/write +split=2,2\n    Mail: Line split.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    1: Start of mail\n    2: Second line\n    3: Third line\n    -------------------------------------------------------------------------\n  \n  See Also: mail write +justify, mail write +join, mail write +del\n \n</PRE>\n<A HREF=\"#mail write PLUSsend\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write PLUSsubject\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write PLUSsubject\"><H3>mail write +subject</H3></A><PRE>\n  Command: mail/write +subject=&lt;subject&gt;\n  \n  The '+subject' subcommand to mail/write is used to set a subject line for\n  your mail message.  You may use this command to also re-set it to something\n  else if you so desire.\n  \n  Examples:\n    &gt; mail/write Start of message\n    Mail: Write message started.\n    &gt; mail/write +list\n    Mail: Your write message is:\n    1: Start of message\n    &gt; mail/write +subject=My Subject\n    Mail: Write subject set\n    &gt; mail/write +list\n    Mail: Your write message is:\n    Subject: My Subject\n    1: Start of message\n    \n  See Also: mail write +send, mail write -, mail write +forget\n  \n</PRE>\n<A HREF=\"#mail write PLUSsplit\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write MINUS\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write MINUS\"><H3>mail write -</H3></A><PRE>\n  Command: mail/write &lt;text&gt;\n           -&lt;text&gt;\n  \n  The '-' subcommand is used to continue lines of text after the initial\n  'mail/write' was used to start the mail message.  This is used in\n  juncture with sending, forwarding, or replying to mail using the\n  line editor.  This command will NOT be recognized as a valid command\n  if you did not use mail/write previous to it!\n  \n  Example:\n    &gt; -this is a line of text\n    Huh?  (Type 'help' for help.)\n    &gt; mail/write I forgot to start the message first!\n    Mail: Write message started (37/32758).\n    &gt; -this is a line of text\n    Mail: Write line 2 added (60/32758)\n    &gt; mail/write another line of text\n    Mail: Write line 3 added (81/32758)\n  \n  See Also: mail write cmdlist, mail write adding\n  \n</PRE>\n<A HREF=\"#mail write PLUSsubject\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write adding\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write adding\"><H3>mail write adding</H3></A><PRE>\n  Topic: mail write adding text\n  \n  There are two ways to write mail using the mail/write method.  You can\n  use mail/write to save text, or, after using mail/write for the first\n  line (to initialize the mail message being written) you may use a '-'\n  to continue writing lines of text.\n  \n    mail/write (used to initialize mail writing and write first line)\n    -          (can be used instead of mail/write to write additional lines)\n    mail/write +subject=&lt;text&gt; (used to add the subject)\n  \n  Example:\n    &gt; mail/write My first line of the mail\n    Mail: Write message started.\n    &gt; -My second line of the mail\n    Mail: Write line 2 added\n    &gt; mail/write +subject=My Subject\n    Mail: Write subject set\n    &gt; mail/write +list\n    Mail: Your write message is:\n    -------------------------------------------------------------------------\n    Subject: My Subject\n    -------------------------------------------------------------------------\n    1: My first line of the mail\n    2: My second line of the mail\n    -------------------------------------------------------------------------\n  \n  See Also: mail send, mail write forwarding\n  \n</PRE>\n<A HREF=\"#mail write MINUS\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write autonotify\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write autonotify\"><H3>mail write autonotify</H3></A><PRE>\n  Topic: mail write auto notification\n  \n  If for whatever reason you got disconnected during a mail write, you will\n  be notified that you have a mail write in progress.  Just type \n  \n    mail/write +list\n  \n  And you will see what the message you have in progress is.  If you want\n  to purge it, just type\n  \n    mail/write +forget\n  \n  And the message will be forgotten (purged/tossed).\n  \n  See Also: mail write cmdlist\n  \n</PRE>\n<A HREF=\"#mail write adding\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write cmdlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write cmdlist\"><H3>mail write cmdlist</H3></A><PRE>\n  Topic: mail write command list\n  \n  mail/write &lt;message&gt;                           - Start new mail/Add new line\n  -                                              - Add new line of text\n  mail/write +edit &lt;line #&gt;=&lt;old txt&gt;,&lt;new txt&gt;  - Edit first text on line\n  mail/write +fedit &lt;line #&gt;=&lt;old txt&gt;,&lt;new txt&gt; - Edit all text on line\n  mail/write +editall=&lt;old text&gt;,&lt;new text&gt;      - Edit first text everywhere\n  mail/write +feditall=&lt;old text&gt;,&lt;new text&gt;     - Edit all text everywhere\n  mail/write +cc=&lt;player list&gt;                   * resets player list\n  mail/write +bcc=&lt;player list&gt;                  * Adds to player and bcc list\n  mail/write +acc=&lt;player list&gt;                  * Adds to player list\n  mail/write +del=&lt;line #&gt;                       - Delete line\n  mail/write +join=&lt;line #&gt;,&lt;line #&gt;             - Join lines\n  mail/write +justify=&lt;line #&gt;,[l,r,c]           - Justify the line\n  mail/write +split=&lt;line #&gt;,&lt;after word #&gt;      - Split line at character\n  mail/write +insert=&lt;line #&gt;,&lt;text&gt;             - Insert text at line\n  mail/write +list [=&lt;line #&gt;,&lt;line #&gt;]          - List line(s) (proofs)\n  mail/write +proof                              - Displays in 'sent' format.\n  mail/write +send=[@]&lt;player list&gt;              - Send mail to players\n  mail/write +forward=&lt;mail #&gt; [@] &lt;player list&gt; - Forward mail to players\n  mail/write +reply=&lt;mail #&gt;                     - Replys to sender (sends)\n  mail/write +subject=&lt;text&gt;                     - Add (change) subject\n  mail/write +forget                             - Toss the mail in progress\n  \n  Topics with '*' only work with the BRANDY_MAIL interface. \n  \n  This is the 'editor' way to send, forward, or reply to mail. \n  for descriptions, type: help mail write cmdlist2\n  \n</PRE>\n<A HREF=\"#mail write autonotify\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write cmdlist2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write cmdlist2\"><H3>mail write cmdlist2</H3></A><PRE>\n  Topic: mail write command list (continued)\n  \n  The first format (mail/write &lt;message&gt;) will start a new message or append \n  the message to an existing message in the mail editor.  If you have the \n  BRANDY_MAIL toggle set, you may initiate the line editor with \n  'mail player-list=subject'.\n  \n  To change text, use the +edit sub-command of write to change &lt;old text&gt; to \n  &lt;new text&gt;.  You can't use braces to group the old and new text, but you can \n  use angle brackets (&lt;&gt;) to group the old text. Use +list to check the \n  current status of the message.  See 'help mail line' for information on \n  line editing.\n  \n  To send the message, or send it as a reply or part of a forwarded message,\n  use the +send, +reply, or +forward sub-commands of write.  To cancel\n  (erase) the current message in the editor, use the +forget sub-command.\n  You can only +reply to and +forward messages in the current folder.\n  To add a subject (or remove it) use the +subject option with write.\n   \n  For examples: help mail write examples.\n  \n</PRE>\n<A HREF=\"#mail write cmdlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write examples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write examples\"><H3>mail write examples</H3></A><PRE>\n  Topic: mail write examples\n  \n  Examples:\n    &gt; mail/write I am sending you a long message.\n    &gt; mail/write It just goes on and on.\n    &gt; -And I can use the '-' to continue adding lines of text!\n    &gt; mail/write +edit 1=long,very long\n    &gt; mail/write +list\n    &gt; mail/write +subject=Read this!\n    &gt; mail/write +send=tinypal tinyfriend\n   \n  This message would read: \n  I am sending you a very long message.\n  It just goes on and on.\n  And I can use the '-' to continue adding lines of text!\n  \n  It would also have a subject of 'Read This!'.\n   \n  See Also: mail send, mail forward, mail reply\n  \n</PRE>\n<A HREF=\"#mail write cmdlist2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write forwarding\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write forwarding\"><H3>mail write forwarding</H3></A><PRE>\n  Topic: mail write forwarding\n  \n  To forward mail using the line editor, it takes a bit of reverse logic.\n  You must FIRST start writing the message, THEN you specify you want\n  to forward it to the player list.\n  \n    mail/write (used to initialize mail writing and write first line)\n    -          (can be used instead of mail/write to write additional lines)\n    mail/write +forward=&lt;message #&gt; [@] &lt;player list&gt;\n  \n  The last line will forward your message to the specified player list and\n  include the message# of the message in your mailbox.\n  \n  See help on mail write +forward for more information on the forward command.\n  \n  See Also: mail write +forward, mail write +reply, mail write\n  \n</PRE>\n<A HREF=\"#mail write examples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail write quicksending\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail write quicksending\"><H3>mail write quicksending</H3></A><PRE>\n  Topic: mail write quicksending\n  \n  To send mail quickly, you can use the default behavior of mail.  The\n  syntax for a quick message is as follows:\n  \n    mail/send [@] &lt;player-list&gt; = [optional subject//] Message Body\n  \n  This fires off the mail without initiating the line editor.\n  \n  The /send switch is optional, unless you are toggled BRANDY_MAIL, in\n  which case, the /send switch is required.\n  \n  Yes, you can use a quick message to send a mail message while in the\n  middle of a line editor in writing a different mail message.\n   \n  See Also: mail send, mail\n  \n</PRE>\n<A HREF=\"#mail write forwarding\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail writing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail writing\"><H3>mail writing</H3></A><PRE>\n  Please see 'help mail send'\n  \n</PRE>\n<A HREF=\"#mail write quicksending\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail zap\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail zap\"><H3>mail zap</H3></A><PRE>\n  Command:  mail/zap\n  \n  This option will automatically mark the present message and view the \n  next message.  For example, if you typed:\n    mail 1\n  \n  you would read mail message #1 (if you had mail)\n  If you typed:\n    mail/zap\n  \n  You would mark message #1 for deletion and read message #2\n  (if you had two messages, in which it would only mark #1 and return\n   that you had no more mail to read)\n  \n  Note:  If you add a '-' after zap (i.e. mail/zap -) it will read the\n         previous message.\n  \n  See Also: mail status, mail next, mail mark, mail delete, mail read\n  \n</PRE>\n<A HREF=\"#mail writing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSadmin\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSadmin\"><H3>mail-admin</H3></A><PRE>\n  See 'wizhelp mail' and 'wizhelp wmail'.\n  \n</PRE>\n<A HREF=\"#mail zap\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSaliases\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSaliases\"><H3>mail-aliases</H3></A><PRE>\n  There are multiple ways to have aliases in RhostMUSH.  The standard method\n  is for global mail aliases.  Only wizards may set, modify, or remove global\n  mail aliases.  You may see global mail aliases by typing:\n  \n                               mail/alias\n  \n  This command will show all the global mail alises, if it's a static mail\n  alias or a dynamic mail alias, or if there's any locks that make it so\n  you can not use them.  To use a static mail alias, you would prepend a '+'\n  before the alias.  Such as:\n  \n                               mail +wizards=To all Wizards!\n  \n  For dynamic mail aliases, you would prepend a '$' before the alias.\n  \n                               mail $wizards=To all Wizards!\n  \n  You will see with mail/alias if it's a static global (+) or a dynamic\n  global ($) mail alias to help avoid confusion.\n  \n  {see 'help mail-aliases2' for personal mail aliases}\n  \n</PRE>\n<A HREF=\"#mailMINUSadmin\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSaliases2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSaliases2\"><H3>mail-aliases2</H3></A><PRE>\n  There is a third method for aliases.  These are considered personal mail\n  aliases, and anyone may set them.  To set them, you just store an attribute\n  on yourself containing a list of players.  This field can not be evaluated.\n  An example of a personal mail alias would be:\n  \n                               &amp;myfriends me=Bob Sarah #456 Julie\n                               @set me=myfriends:Bob Sarah #456 Julie\n  \n  Either sets an alias for Bob, Sarah, player #456, and Julie.  Any non-players\n  will automatically be stripped in the sending of the mail (with appropiate\n  warning messages).  To use a personal alias, you would use the key field\n  '&amp;' to identify to the mail system that it is a personal mail alias.\n  \n                               mail &amp;myfriends=To all of my friends!\n  \n  For help on setting attributes, please check help for '&amp;' or '@set'.\n  \n</PRE>\n<A HREF=\"#mailMINUSaliases\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSdeleting\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSdeleting\"><H3>mail-deleting</H3></A><PRE>\n  The following is used to delete mail:\n  1) mail/mark &lt;range|message|*player&gt;        [help mail mark]\n     - This marks the message(s) for deleting.\n  2) mail/mark/save &lt;range|message|*player&gt;   [help mail save]\n     - This marks the message(s) for saving from deleting.\n  3) mail/unmark &lt;range|message|*player&gt;      [help mail unmark]\n     - This removes the mark from the message\n  4) mail/unmark &lt;range|message|*player&gt;      [help mail save]\n     - This removes the saved mark from the message\n  5) mail/delete                              [help mail delete]\n     - This purges the mail that was marked.\n  6) mail/status\n     - This lists your mail (with the marks)\n  \n  See Also: mail mark, mail save, mail unmark, mail delete, mail status\n  \n</PRE>\n<A HREF=\"#mailMINUSaliases2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSexamples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSexamples\"><H3>mail-examples</H3></A><PRE>\n  See 'help mail write cmdlist', 'help mail cmdlist', 'help mail quicklist',\n      'help folder cmdlist'\n  \n</PRE>\n<A HREF=\"#mailMINUSdeleting\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSfiltering\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSfiltering\"><H3>mail-filtering</H3></A><PRE>\n  You can specify mail filtering by using the MAILFILTER attribute.  This\n  allows you filter incoming mail by either the target player or the subject.\n  If the mail was sent anonymously, the player is returned as #-1, otherwise\n  the dbref# of the player will be returned.\n  \n  For detailed help, see help for MAILFILTER\n  \n  See Also: MAILFILTER\n  \n</PRE>\n<A HREF=\"#mailMINUSexamples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSfolders\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSfolders\"><H3>mail-folders</H3></A><PRE>\n  The folders command are controlled with the 'folder' command.\n  \n  Please refer to 'help folder cmdlist' for the listing.\n  \n  See Also: mail main, mail topics, mail cmdlist\n  \n</PRE>\n<A HREF=\"#mailMINUSfiltering\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSother\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSother\"><H3>mail-other</H3></A><PRE>\n  See 'help mail cmdlist', 'help mail quicklist', 'help mail write cmdlist', \n      'help folder cmdlist'\n  \n</PRE>\n<A HREF=\"#mailMINUSfolders\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSreading\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSreading\"><H3>mail-reading</H3></A><PRE>\n  The following commands are used to read the mail:\n  1) mail new                    [help mail new]\n     - This reads the first new message\n  2) mail nall                   [help mail nall]\n     - This reads ALL new mail messages (can be spammy).\n  3) mail unread                 [help mail unread]\n     - This reads the first unread message\n  4) mail uall                   [help mail uall]\n     - This reads ALL unread mail messages (can be spammy).\n  5) mail both                   [help mail both]\n     - This reads the first new OR unread message\n  6) mail ball                   [help mail ball]\n     - This reads BOTH ALL unread AND new mail messages (can be spammy).\n  7) mail #                      [help mail read]\n     - This reads the specified message #.\n  8) mail/status                 [help mail status]\n     - This displays all the mail in your mailbox\n  9) mail/quick                  [help mail quick]\n     - This gives you a quick status of your mailbox.\n  \n  See Also: mail quick, mail status, mail read, mail topics, mail main\n  \n</PRE>\n<A HREF=\"#mailMINUSother\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSreviewing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSreviewing\"><H3>mail-reviewing</H3></A><PRE>\n  The following is used for reviewing mail:\n  1) mail/status                              [help mail staus]\n     - List your mail\n  2) mail/quick                               [help mail quick]\n     - Gives status report of mailbox\n  3) mail/recall                              [help mail recall]\n     - Shows listing of all mail you sent that's not been read\n  4) mail/recall #                           \n     - Views the sent message\n  5) mail/recall #=[+all|player(s)]\n     - Yanks the specified player(s) (or all) from receiving the mail.\n  \n  See Also: mail recall, mail quick, mail status\n  \n</PRE>\n<A HREF=\"#mailMINUSreading\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSsharing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSsharing\"><H3>mail-sharing</H3></A><PRE>\n  The following commands are used to share a mailbox with a friend:\n  1) mail/share &lt;key&gt;              [help mail share]\n     - You may refer to 'help @lock keys' on how to set this.\n  2) folder/share &lt;mailbox&gt;        [help folder share]\n     - This identifies what folder(s) you wish to share.  Those who\n       pass the mail/share lock above, will be able to see the folders.\n  3) mail/number &lt;player&gt;          [help mail number]\n     - This lists the message(s) of the player you're sharing mail with.\n  4) mail/check &lt;player&gt;=&lt;message&gt; [help mail check]\n     - This reads the specified message in player's shared folders\n       Note: all folders are combined that you can share.\n  \n  See Also: mail share, folder share, mail topics, mail main\n  \n</PRE>\n<A HREF=\"#mailMINUSreviewing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailMINUSwriting\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailMINUSwriting\"><H3>mail-writing</H3></A><PRE>\n  The following commands exist for writing new mail messages:\n  1) Brandy/@mail\n     A) @toggle me=brandy_mail mail_stripreturn       [set up interface]\n     B) mail[/forward|reply] &lt;player(s)&gt;=&lt;subj&gt;       [start message]\n     C) -&lt;new line of text&gt;                           [add new text]\n     D) mail/write +feditall=old,new                  [edit text]\n     E) mail/write +forget                            [toss message]\n     F) mail/write +subject=&lt;text&gt;                    [reset the subject]\n     G) mail/write +acc=&lt;players&gt;                     [append to players]\n     H) mail/write +cc=&lt;players&gt;                      [reset the players]\n     I-1) --                                          [send off mail] (or)\n     I-2) -~                                          [send mail anonymously]\n     J) mail/send &lt;player(s)&gt;=&lt;subject&gt;//&lt;body&gt;       [quick-send of mail]\n  2) PENN @mail\n     A) @toggle me=!brandy_mail penn_mail             [set up interface]\n     B) mail &lt;player-list&gt;=&lt;subject&gt;/&lt;body&gt;           [send message]\n  3) Seawolf(Rhost) Mail\n     A)  mail &lt;player-list&gt;=&lt;subject&gt;//&lt;body&gt;         [send mail - type 1]\n     B1) mail/write &lt;start of text&gt;                   [first line of text]\n     B2) -&lt;new line of text&gt;                          [add new text]\n     B3) mail/write +subject=&lt;subject&gt;                [set subject]\n     B4) mail/write [+send|+forward|+reply]=&lt;players&gt; [send message - type 2]\n     B5) mail/write/anon [+send|+forward|+reply]=&lt;pl&gt; [send anonymously -tp 3]\n  \n  See Also: mail main, mail topics, mail cmdlist, mail write cmdlist\n  \n</PRE>\n<A HREF=\"#mailMINUSsharing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail_noparse toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail_noparse toggle\"><H3>MAIL_NOPARSE TOGGLE</H3></A><PRE>\n  Toggle: MAIL_NOPARSE\n \n  When this toggle is set, it will surpress the evaluation of\n  special characters like %b, %r, or %t when you list out your mail.\n  If you want these to be parsed when you list out (proof) your\n  mail, then make sure this toggle is not set.\n  \n  See Also: penn mail toggle, brandy_mail toggle\n  \n</PRE>\n<A HREF=\"#mailMINUSwriting\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mail_stripreturn toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mail_stripreturn toggle\"><H3>MAIL_STRIPRETURN TOGGLE</H3></A><PRE>\n  Toggle: MAIL_STRIPRETURN\n  \n  When this toggle is set on the player, whenever that player finishes\n  writing mail using the BRANDY_MAIL toggle, all lines are combined\n  with spaces instead of carrage returns.  This will mimic more how\n  Brandy's +mail or Mux's @mail works.\n  \n  See Also: penn_mail toggle, brandy_mail toggle\n  \n</PRE>\n<A HREF=\"#mail_noparse toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailfilter\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailfilter\"><H3>MAILFILTER</H3></A><PRE>\n  Attribute: &amp;MAILFILTER\n  \n  This attribute, when set on a player, will allow that player individual\n  control of where the mail will go.  This allows the player to redirect\n  incoming mail into pre-existing folders.  The following are passed:\n              %0  - the dbref# of the player (or #-1 if anonymous)\n              %1  - the subject of the message\n              %2  - the body of the message\n              %3  - the date/time of the message\n  Examples:\n    &gt; folder/list\n      Mail: You have the following folders -&gt;\n      Incoming Testing Junk\n    &gt; &amp;MAILFILTER me=[switch(%0,#123,Testing,#234,Junk)]\n      Set.\n    &gt; think [num(me)] [name(me)]\n      #123 Yourself\n    &gt; mail me=A Test//A Test\n      Mail: You have new mail from -&gt; Yourself [Subj: A Test]\n      Mail: Auto-Moved to folder -&gt; Testing\n      Mail: Message sent to -&gt; Yourself\n    &gt; (recieving mail from Bob, dbref #999)\n      Mail: You have new mail from -&gt; Bob [Subj: Hey!]\n    &gt; (recieving mail from Tony, dbref #234)\n      Mail: You have new mail from -&gt; Tony [Subj: You smell]\n      Mail: Auto-Moved to folder -&gt; Junk\n  \n  See Also: @mailsig\n \n</PRE>\n<A HREF=\"#mail_stripreturn toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailquick()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailquick()\"><H3>MAILQUICK()</H3></A><PRE>\n  Function: mailquick(&lt;player&gt;[[,&lt;folder&gt;][,&lt;type&gt;]])\n  \n  This function has a number of uses.  If the type is zero (0) (the default)\n  then it will return the values that 'mail/quick' returns.  If the value\n  for type is a '1', it returns the 3 values that mux's mail() returns.  If\n  the value for type is a '2', it returns the total messages you have in your\n  box.  '3' gives you a modified version of '1'.  The default folder is \n  your incoming box.\n  \n  Examples:\n    &gt; mail/quick me\n    Mail: 4 Total - 1 new, 0 unread, 2 old, 1 marked, 0 saved mail message(s) \n    &gt; say mailquick(me)\n    You say &quot;4 1 0 2 1 0&quot;\n    &gt; say mailquick(me,,1)\n    You say &quot;3 1 1&quot;\n    &gt; say mailquick(me,,2)\n    You say &quot;4&quot;\n  \n  See Also: mail cmdlist, mail write cmdlist\n  \n</PRE>\n<A HREF=\"#mailfilter\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mailvalidate toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mailvalidate toggle\"><H3>MAILVALIDATE TOGGLE</H3></A><PRE>\n  Toggle: MAILVALIDATE\n  \n  This toggle, when set, will do validation of the player lists\n  (expanding any aliases) and will not send out any mail if\n  ANY target in the mail list is invalid.\n  \n  The default is it will send mail to all valid players and\n  alert you of invalid while continuing through the list.\n  \n</PRE>\n<A HREF=\"#mailquick()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#map()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"map()\"><H3>map()</H3></A><PRE>\n  Function: map([&lt;obj&gt;/]&lt;attr&gt;,&lt;list&gt;[[,&lt;delim&gt;][,&lt;sep&gt;][,&lt;arg1&gt;,...,&lt;argN&gt;])\n  \n  This function is nearly identical to an iter() operating on u() function.\n  Each member of &lt;list&gt; is passed to the result of fetching &lt;attr&gt; as %0, and\n  the results are used to form a new list, separated by the delimiter\n  character.\n  \n  &lt;delim&gt;iter may be used to specify a delimiter other than space.\n  \n  &lt;sep&gt;erator may be used to specify an output seperator other than a space.\n  \n  You may specify arguments &lt;arg1&gt; through &lt;argN&gt; that will be passed as %1\n  for the first argument (or arg1) all the way through MAX_ARGS \n  (which defaults to 30 total to a function, so 30 - 4 args, or 26 total).\n  Any arguments over 9 can be fetched with v(10), v(11), etc.  You may also\n  use the shift() function.\n  \n  Examples: \n  &gt; &amp;ADD_ONE object=add(%0,1)\n  &gt; say map(object/add_one,1 2 3 4 5)\n  You say &quot;2 3 4 5 6&quot;\n  \n  See Also: filter(), fold(), iter(), parse(), u(), munge(), citer(), \n            nsiter(), sortlist()\n  \n</PRE>\n<A HREF=\"#mailvalidate toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker0\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker0\"><H3>MARKER0</H3></A><PRE>\n  Flag: MARKER0([0])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#map()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker1\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker1\"><H3>MARKER1</H3></A><PRE>\n  Flag: MARKER1([1])  \n  \n  This flag is a marker flag. \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker0\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker2\"><H3>MARKER2</H3></A><PRE>\n  Flag: MARKER2([2])\n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker1\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker3\"><H3>MARKER3</H3></A><PRE>\n  Flag: MARKER3([3])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker4\"><H3>MARKER4</H3></A><PRE>\n  Flag: MARKER4([4])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker5\"><H3>MARKER5</H3></A><PRE>\n  Flag: MARKER5([5])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker6\"><H3>MARKER6</H3></A><PRE>\n  Flag: MARKER6([6])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker7\"><H3>MARKER7</H3></A><PRE>\n  Flag: MARKER7([7])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker8\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker8\"><H3>MARKER8</H3></A><PRE>\n  Flag: MARKER8([8])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#marker9\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"marker9\"><H3>MARKER9</H3></A><PRE>\n  Flag: MARKER9([9])  \n  \n  This flag is a marker flag.  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).\n  \n</PRE>\n<A HREF=\"#marker8\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mask()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mask()\"><H3>MASK()</H3></A><PRE>\n  Function: mask(&lt;value&gt;,&lt;value&gt;[,&lt;masktype&gt;])\n            mask(&lt;value&gt;,&lt;value&gt;,...,&lt;value&gt;,&lt;masktype&gt;)\n  \n  This function will apply a specified mask to a value.  This can be\n  useful for bitwise anding/oring values together. (for those mathheads)\n  The values available for masktype are:\n     &amp; -- Bitwise AND \n     | -- Bitwise OR\n     ^ -- Bitwise XOR\n     ~ -- Bitwise NAND (AND 1's compliment)\n     1 -- Bitwise BNOT (1's Compliment)\n     2 --              (2's Compliment)\n  \n  The default masktype is the bitwise AND (&amp;) (but only with 2 arguments).\n  \n  Please note, if you use more than 2 values, you must specify the masktype,\n  otherwise it'll assume the last argument is always the masktype.\n  \n  Examples:\n    &gt; say mask(3,4)\n    You say &quot;0&quot;\n    &gt; say mask(3,4,|)\n    You say &quot;7&quot;\n    &gt; say mask(3,4,^)\n    You say &quot;7&quot;\n  \n  See Also: strip(), edit(), editansi(), garble(), regedit()\n  \n</PRE>\n<A HREF=\"#marker9\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#match()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"match()\"><H3>MATCH()</H3></A><PRE>\n  Function: match(&lt;string&gt;, &lt;pattern&gt;[, &lt;delim&gt;])\n \n  This function matches &lt;pattern&gt; against each word of &lt;string&gt;, returning\n  the number of the first word that matches.  If no words match then 0 is\n  returned.  The case of the characters being matched is not significant.\n \n  The pattern may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 's?x' would match 'sex' or 'six', but not to 'socx', but 's*x' would\n  match any of them.\n  \n  &lt;delim&gt; may be used specified to specify a delimiter other than a space.\n  \n  Examples:\n    &gt; say match(This is a test, test)\n    You say &quot;4&quot;\n    &gt; say match(This is a test, is)\n    You say &quot;2&quot;\n    &gt; say match(This is a test, *is*)\n    You say &quot;1&quot;\n    &gt; say match(This is a test, *not*)\n    You say &quot;0&quot;\n    &gt; say match(This is a test, is a)\n    You say &quot;0&quot;\n  \n  See Also: LISTS, member(), strmatch(), subnetmatch(), nummatch(), totmatch()\n  \n</PRE>\n<A HREF=\"#mask()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#max()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"max()\"><H3>MAX()</H3></A><PRE>\n  Function: max(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN]...)\n   \n  Returns the largest integer from among its arguments.\n  Up to 30 arguments may be specified.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Examples:\n    &gt; say max(2,4)\n    You say &quot;4&quot;\n    &gt; say max(-100,50,0,25)\n    You say &quot;50&quot;\n   \n  See Also: min(), alphamin(), alphamax()\n  \n</PRE>\n<A HREF=\"#match()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#me\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"me\"><H3>ME</H3></A><PRE>\n  Topic: ME\n  The word 'me' refers to yourself. Some things to do when starting out: \n  1) give yourself a description with \n     '@describe me = &lt;description&gt;', then look at yourself with 'look me'.\n  2) set your gender, if you wish it known, with\n     '@sex me=male' or '@sex me=female'  (or '@sex me=neuter' to be an 'it').\n  3) To lock yourself, type: @lock me=me\n  \n  See Also: HERE\n  \n</PRE>\n<A HREF=\"#max()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#member()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"member()\"><H3>member()</H3></A><PRE>\n  Function: member(&lt;list&gt;, &lt;word&gt;[, &lt;delim&gt;])\n \n  Member takes a list and a word, and returns the position of that word\n  within the list.  If the word does not occur in the list, then 0 is\n  returned.  Unlike match(), member() does not check for wildcarding,\n  and the cases of &lt;list&gt; and &lt;word&gt; are significant.  A word is defined as\n  a string which has no interior spaces.  So 'hello' would be one word,\n  while 'hello there' would be two.  Member, unlike match, is case \n  sensitive.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n \n  Example:\n    &gt; say member(This is a member test, member)\n    You say &quot;4&quot;\n    &gt; say member(This is a member test, Member)\n    You say &quot;0&quot;\n    &gt; say member(This is a member test, *e*)   \n    You say &quot;0&quot;\n    &gt; say member(This is a member test, is a)\n    You say &quot;#-1 CAN ONLY TEST ONE ELEMENT&quot;\n   \n  See Also: LISTS, match(), strmatch(), subnetmatch(), nummember(), totmember()\n  \n</PRE>\n<A HREF=\"#me\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#merge()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"merge()\"><H3>MERGE()</H3></A><PRE>\n  Function: merge(&lt;string1&gt;,&lt;string2&gt;,&lt;character&gt;)\n  \n  This function merges &lt;string1&gt; and &lt;string2&gt;, depending on &lt;character&gt;.\n  If a character in &lt;string1&gt; is the same as &lt;character&gt;, it is replaced\n  by the character in the corresponding position in &lt;string2&gt;.  The two\n  strings must be of the same length.\n  \n  Spaces need to be treated specially. A null character is considered to\n  equal a space, for &lt;character&gt;.\n  \n  Examples:\n    &gt; say merge(AB--EF,abcdef,-)\n    You say, &quot;ABcdEF&quot;\n    &gt; say merge(AB[space(2)]EF,abcdef,)\n    You say, &quot;ABcdEF&quot;\n  \n  See Also: splice(), tr()\n  \n</PRE>\n<A HREF=\"#member()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mid()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mid()\"><H3>MID()</H3></A><PRE>\n  Function: mid(&lt;string&gt;, &lt;first&gt;, &lt;length&gt; [,&lt;key&gt;])\n \n  Mid returns a segment of the string, the &lt;length&gt; characters to the\n  right of the &lt;first&gt; character.  Note that the first character in a\n  string is numbered zero, and not one.\n  \n  You may specify a &lt;key&gt; of 1 to tell mid() to take the string raw and\n  not do ansi-aware processing.  This will speed up the function.\n  The default is '0' which does ansi processing.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n   \n  Example:\n    &gt; say mid(this is a test,3,6)\n    You say &quot;s is a&quot;\n  \n  See Also: delete(), ldelete(), remove()\n  \n</PRE>\n<A HREF=\"#merge()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#min()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"min()\"><H3>MIN()</H3></A><PRE>\n  Function: min(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN]...)\n   \n  Returns the smallest integer from among its arguments.\n  Up to 30 arguments may be specified.\n  &lt;numberN&gt; may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    &gt; say min(2,4)\n    You say &quot;2&quot;\n    &gt; say min(-100,50,0,25)\n    You say &quot;-10&quot;\n   \n  See Also: max(), alphamin(), alphamax()\n  \n</PRE>\n<A HREF=\"#mid()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#miscellaneous functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"miscellaneous functions\"><H3>miscellaneous functions</H3></A><PRE>\n  Function Lists: Miscellaneous Functions\n \n  @@() - Eats all output from &lt;string&gt; (doesn't evaluate).\n  asc() - Returns the ASCII numerical value of a character.\n  chr() - Returns the character of an ASCII numerical value.\n  error() - Returns one of the random error messages in standard format.\n  localize() - Evaluates code while preserving all setq() registers.\n  moon() - Returns the phase of the moon for the specified time.\n  nameq() - (Re)names setq variables with a new label.\n  null() - Eats all output from &lt;string&gt; (evaluates).\n  parenmatch() - Returns an ansified match of (), {} and []s.\n  pid() - Return a list of process id's\n  privatize() - All localized variables are initialized to null\n  pushregs() - Preserves, and restores setq() registers.\n  r() - Accesses local registers.\n  setq() - Copies a string into a local register.\n  setq_old() - Like setq(), but uses old MUSH style evaluation.\n  setqmatch() - Sets a register if a pattern matches &lt;string&gt;.\n  setr() - Like setq(), but returns its string argument.\n  setr_old() - Like setr(), but uses old MUSH style evaluation.\n  soundex() - Returns the soundex pattern of a word.\n  soundlike() - Compares the soundex of two words.\n  trace() - Controls the trace flag on an object.\n\n</PRE>\n<A HREF=\"#min()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mix()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mix()\"><H3>MIX()</H3></A><PRE>\n  Function: mix([&lt;object&gt;/]&lt;attribute&gt;,&lt;list 1&gt;,&lt;list 2&gt;[,&lt;list N&gt;][,&lt;delim&gt;])\n  \n  This function is similiar to map(), except it takes the arguments in the \n  lists and passes them into the attribute as %0 (for list1), %1 (for list2),\n  up to %9 (for list9).  &lt;delim&gt; is used as the delimiter to seperate items\n  in each of the lists.  If the number of lists is 2, the delimiter may be\n  optional, otherwise you are forced to provide a delimiter.  If no delimiter\n  is specified, it's defaulted as a space but only for the above condition.\n  The lists do NOT have to have the same number of elements.\n  \n  Examples:\n    &gt; &amp;do_math me=[add(%0,%1)]\n    &gt; &amp;do_moremath me=[add(%0,%1,%2,%3,%4,%5,%6,%7,%8,%9)]\n    &gt; say mix(do_math,1 2 3 4 5,2 4 6 8 10)\n    You say &quot;3 6 9 12 15&quot;\n    &gt; say mix(do_math,1@2@3@4@5,2@4@6@8@10,@)\n    You say &quot;3@6@9@12@15&quot;\n    &gt; say mix(do_math,1 2 3 4 5,7 9)\n    You say &quot;8 11 3 4 5&quot;\n    &gt; say mix(do_moremath,1,2,3,4,5,6,7 8,9 10 11 12,)\n    You say &quot;37 18 11 12&quot;\n  \n  See Also: map(), iter(), merge(), elements(), list(), elementpos()\n  \n</PRE>\n<A HREF=\"#miscellaneous functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mod()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mod()\"><H3>MOD()</H3></A><PRE>\n  Function: mod(&lt;integer1&gt;,&lt;integer2&gt;[,&lt;integerN&gt;]...)\n   \n  Returns the integer remainder from dividing &lt;integer1&gt; by &lt;integer2&gt;.\n  This could be aliased to either modulo() or remainder().  To see\n  which, do: think mod()\n  \n  You may specify more than two values.\n   \n  Example:\n    &gt; say mod(15,3)\n    You say &quot;0&quot;\n    &gt; say mod(16,3)\n    You say &quot;1&quot;\n    &gt; say mod(17,3)\n    You say &quot;2&quot;\n    &gt; say mod(18,3)\n    You say &quot;0&quot;\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc(), fmod()\n\n</PRE>\n<A HREF=\"#mix()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#modifytime()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"modifytime()\"><H3>MODIFYTIME()</H3></A><PRE>\n  Function: modifytime(&lt;target&gt;)\n  \n  This function returns the last time the target was modified.  This only\n  looks at attributes and not flags being set/removed.  You must be able\n  to examine the object to get the attribute.\n  \n  Example:\n    &gt; say modifytime(me)\n    You say &quot;Mon Jul 15 17:16:20 2000&quot;\n  \n  See Also: createtime()\n  \n</PRE>\n<A HREF=\"#mod()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#modulo()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"modulo()\"><H3>MODULO()</H3></A><PRE>\n  Function: modulo(&lt;integer1&gt;,&lt;integer2&gt;[,&lt;integerN&gt;]...)\n   \n  Returns the modulo from &lt;integer1&gt; and &lt;integer2&gt;.\n  \n  You may specify more than two values.\n   \n  Example:\n    &gt; say mod(13,-3)\n    You say &quot;1&quot;\n    &gt; say modulo(13,-3)\n    You say &quot;-2&quot;\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc()\n  \n</PRE>\n<A HREF=\"#modifytime()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#money\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"money\"><H3>MONEY</H3></A><PRE>\n  Topic: MONEY\n \n  You need money to build within the game, to run programmed objects or use\n  certain other commands, or to buy things from vendors set up by other\n  players.  You can get money via one or more of these methods:\n    1.  You receive a daily allowance for each day you connect.\n    2.  You have a chance of finding money as you wander around areas that\n        other people have built.\n    3.  Some MUSHes may implement a place where you can sell valuable objects\n        for money.\n  \n  Money is used by the following methods (the most common)\n    1.  Any command put into the queue takes money\n    2.  Creating/digging/opening/etc (basically building) costs money\n    3.  Wondering objects take a lot of money.\n  \n  It's generally a silly idea to have a lot of money so don't ask for a lot.\n   \n  See Also: @list costs, COSTS, score\n  \n</PRE>\n<A HREF=\"#modulo()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#money()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"money()\"><H3>MONEY()</H3></A><PRE>\n  Function: money(&lt;object&gt;)\n \n  Returns an integer equal to the amount of money &lt;object&gt; has (if it is a\n  player) or is worth (otherwise).\n  \n  Example:\n    &gt; score\n    You have 1052 clams.\n    &gt; say money(me)\n    You say &quot;1052&quot;\n    &gt; exam sac test\n    Sac Test(#287V)\n    Type: THING Flags: VISUAL\n    Owner: Beaker  Key: *UNLOCKED* Clams: 20\n    Home: Limbo(#0RLDAJ)\n    Location: The Town Square\n    &gt; say money(sac test)\n    You say &quot;20&quot;\n  \n  See Also: score, COSTS, moneyname()\n  \n</PRE>\n<A HREF=\"#money\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#moneyname()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"moneyname()\"><H3>MONEYNAME()</H3></A><PRE>\n  Function: moneyname([&lt;value&gt;])\n  \n  This function returns the singular or plural value of the money notation\n  defined by the game.  This takes an optional value passed into it for\n  singular notation (the default) or plural notation (if less than -1,\n  greater than 1, or equal to 0).  If the value is empty, it returns the\n  singular notation.\n  \n  Examples:\n    &gt; say moneyname()\n    You say &quot;Gold Piece&quot;\n    &gt; say moneyname(0)\n    You say &quot;Gold Pieces&quot;\n    &gt; score\n    You have 1 Gold Piece.\n    &gt; say [money(me)] [moneyname(money(me))]\n    You say &quot;1 Gold Piece&quot;\n    &gt; say 50 [moneyname(50)]\n    You say &quot;50 Gold Pieces&quot;\n  \n  See Also: score, money()\n  \n</PRE>\n<A HREF=\"#money()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#monitor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"monitor\"><H3>MONITOR</H3></A><PRE>\n  Flag: MONITOR(M)\n  \n  This flag does NOT return player connection/disconnection information.\n  Check help @toggle for that.\n   \n  When set, anytime the object hears something from someone who passes the\n  object's use lock, the object's attributes are scanned for attributes\n  of the form '^&lt;pattern&gt;:&lt;commandlist&gt;'.  If the message matches the\n  wildcarded &lt;pattern&gt;, then &lt;commandlist&gt; is executed, substituting %0 for\n  the text that matched the first wildcard, %1 for the second, and so on.\n  All matching attributes are executed, not just the first.\n  Parents of MONITOR objects are never checked for ^-patterns.\n \n  See Also: LISTENING, PUPPET\n  \n</PRE>\n<A HREF=\"#moneyname()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#monitor toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"monitor toggle\"><H3>MONITOR TOGGLE</H3></A><PRE>\n  Toggle: MONITOR\n \n  When set on a player enables the monitoring of connections and \n  disconnections from the mush. This toggle may be set by an\n  Architect and above on a player which they control given that the\n  player is also Architect or above in level. Additionally it can\n  be set by a wizard on any player.\n</PRE>\n<A HREF=\"#monitor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#moon()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"moon()\"><H3>MOON()</H3></A><PRE>\n  Function: moon([&lt;seconds&gt;] [,&lt;key&gt;])\n  \n  The moon function returns the phase of the moon for the specified time.  If\n  no time is specified, it returns the moon phase for the current time.\n  \n  If the 'key' value is '1', then it just returns the percentage of the moon.\n  \n  Example:\n    &gt; say moon()\n    You say &quot;The Moon is Waning Crescent (20% of Full)&quot;\n    &gt; say moon(999999999)\n    You say &quot;The Moon is Waning Gibbous (72% of Full)&quot;\n  \n  See Also: time(), secs(), timefmt()\n  \n</PRE>\n<A HREF=\"#monitor toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#move\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"move\"><H3>move</H3></A><PRE>\n  Command: move[/&lt;switch&gt;] &lt;direction&gt;\n           move[/&lt;switch&gt;] home\n           &lt;direction&gt;\n           home\n \n  Moves you in the specified direction, assuming that the direction is not\n  locked against you.  'move home' is a special command that returns you to\n  your home. The word 'move' may be omitted.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc/@odrop/@adrop or @ofail/@afail\n                attributes on the exit being used.  This switch only works if\n                you control the exit.\n \n  'goto' is the same as 'move'.\n  \n  See Also: enter, home, leave, move()\n  \n</PRE>\n<A HREF=\"#moon()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#move()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"move()\"><H3>MOVE()</H3></A><PRE>\n  Function: move(&lt;target&gt;, &lt;direction&gt;)\n  \n  This function works like the move command.  It will 'push' the target through\n  the direction specified.  Direction is anything that the original 'move'\n  command allows.  If target is invalid, doesn't exist, or you have no control\n  over it, it returns a permission denied.  The SIDEFX flag is required to use\n  this function.\n  \n  Type @list options to see if this side-effect is enabled.\n   \n  Example:\n    say move(me,home)\n    There's no place like home...\n    There's no place like home...\n    There's no place like home...\n    \n  See Also: move, goto, @tel, tel(), SIDEEFFECTS\n  \n  \n</PRE>\n<A HREF=\"#move\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#moving\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"moving\"><H3>MOVING</H3></A><PRE>\n  Topic: MOVING\n \n  A number of things happen when you leave one location and enter another\n  (assuming you pass the lock on the exit or have permission to enter the\n  object or to teleport to the location).  The following list describes the\n  actions that MUSH takes when an object moves from one place to another.\n  Note that if an indicated attribute is not set, no message is displayed\n  (or no action is performed).\n \n  - If you are using an exit (as opposed to teleporting, entering an object,\n    or going home), You receive the SUCC message for the exit, others in the\n    old location receive the exit's OSUCC message, and the exit runs its\n    ASUCC action list.\n  - If you are teleporting or being teleported, others in the old location\n    receive your OXTPORT attribute.\n  - If you are a player or have your LISTEN attribute set to something,\n    and if the old location is not dark and you are not dark, you receive the\n    LEAVE message for the old location, others in the old location receive\n    the OLEAVE message, and the old location runs its ALEAVE action list.\n    Others in the new location receive the OXENTER message from the old\n    location, and others in the old location receive the message '&lt;yourname&gt;\n    has left.'\n  \n{ 'help moving2' for more }\n  \n</PRE>\n<A HREF=\"#move()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#moving2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"moving2\"><H3>moving2</H3></A><PRE>\n  - You are moved to the new location.  If you are entering an object,\n    teleporting, or going home, all KEY objects are stripped from you.\n  - If the new location is a room, you receive the room's DESC, others in the\n    room receive the ODESC, and the room runs its ADESC.  If you pass the\n    room's lock do the same with SUCC, OSUCC, and ASUCC, otherwise use FAIL,\n    OFAIL, and AFAIL.\n  - If the new location is a player or an object, you receive the location's\n    IDESC (or DESC if the IDESC is not set).  In either event, others in the\n    same location see the ODESC message and the location runs its ADESC \n    action list.\n  - You are shown the contents and visible exits if the location is not DARK.\n  - If you used an exit, then you receive the DROP message for the exit,\n    others in the new room receive the exit's ODROP message, and the exit\n    runs its ADROP action list.\n  - If you are teleporting or being teleported, you receive your TPORT\n    attribute, others in your new location receive your OTPORT attribute,\n    and your ATPORT attribute is run.\n  - You receive your MOVE attribute, others in your new location receive\n    your OMOVE attribute, and your AMOVE attribute is run.\n  \n{ 'help moving3' for more }\n  \n</PRE>\n<A HREF=\"#moving\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#moving3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"moving3\"><H3>moving3</H3></A><PRE>\n  - If you are a player, or have your LISTEN attribute set to something,\n    and if the old location is not dark and you are not dark, you receive the\n    ENTER message for the new room, others in the new room receive the OENTER\n    message, and the new room runs its AENTER action list. Others in the room\n    you just left receive the new room's OXLEAVE message, and others in the\n    old location receive the message '&lt;yourname&gt; has arrived.'\n  - If the old location is a STICKY room and has its drop-to set, see if\n    objects in that room should be sent to the drop-to location.  If so,\n    do it.\n  - If you are a player, you have a chance of finding some money.\n \n  See Also: @adesc, @adrop, @aenter, @afail, @aleave, @asucc, @atport, @desc,\n            @drop, @enter, @fail, @leave, @listen, @odesc, @odrop, @oenter,\n            @ofail, @oleave, @osucc, @oxenter, @oxleave, @oxtport, @succ,\n            @tport, move, @teleport, home, KEY, STICKY, DROP-TOS, FAILURE,\n            SUCCESS\n</PRE>\n<A HREF=\"#moving2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mrpage\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mrpage\"><H3>mrpage</H3></A><PRE>\n  Command: mrpage[/&lt;switch&gt;] [[&lt;control&gt;]&lt;message&gt;]\n  \n  &lt;control&gt; is the formatter for the page (&quot;, ;, :, etc)\n  \n  This command will automatically page the last person(s) who paged you.\n  This will in essence, page the entire list that you saw in the last page\n  to you so that you can continue with multi-page messages.\n  \n  You need not specify a player name.  It accepts and understands all\n  the format and commands that page would understand.\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n  \n  See Also: page, lpage, whisper, say, pose\n  \n</PRE>\n<A HREF=\"#moving3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mudname()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mudname()\"><H3>MUDNAME()</H3></A><PRE>\n  Function: mudname()\n \n  Returns the name of the MUD.  This is usually (but not necessarily) the name\n  that appears in the various mud lists, and is the name that the mud is\n  listed under in reports from RWHO servers (that is, if the mud sends its\n  WHO information to an RWHO server).\n \n  Example:\n    &gt; say mudname()\n    You say &quot;RhostMUSH&quot;\n  \n  See Also: version(), version\n  \n</PRE>\n<A HREF=\"#mrpage\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mul()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mul()\"><H3>MUL()</H3></A><PRE>\n  Function: mul(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN&gt;]...)\n   \n  Returns the result of multiplying its arguments together.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Example:\n    &gt; say mul(3,5)\n    You say &quot;15&quot;\n    &gt; say mul(3,5,-2)\n    You say &quot;-30&quot;\n  \n  See Also: add(), div(), fdiv(), mod() round(), sub(), trunc()\n  \n</PRE>\n<A HREF=\"#mudname()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#munge()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"munge()\"><H3>MUNGE()</H3></A><PRE>\n  Function: munge([&lt;obj&gt;/]&lt;attr&gt;,&lt;list 1&gt;,&lt;list 2&gt;[[,&lt;delim&gt;][,&lt;sep&gt;]])\n   \n  This function takes two lists. It does *not* have to be of equal lengths.\n  It passes the entirety of &lt;list 1&gt; to the user-defined function as %0. \n  The delimiter that it uses it passes to the user-defined function as %1.\n  Then, this resulting list is matched with elements in &lt;list 2&gt;, and \n  the rearranged &lt;list 2&gt; is returned. This is useful for doing things \n  like sorting a list, and then returning the corresponding elements in \n  the other list. If a resulting element from the user-defined function \n  doesn't match an element in the original &lt;list 1&gt;, a corresponding element\n  from &lt;list 2&gt; does not appear in the final result.  You may also specify\n  an optional output &lt;sep&gt;erator and/or an optional &lt;delim&gt;iter for the\n  lists.\n   \n  For example: Consider attribute PLACES, which contains &quot;Fort Benden Ista&quot;,\n  and another attribute DBREFS contains the dbrefs of the main JUMP_OK\n  location of these areas, &quot;#20 #9000 #5000&quot;.  We want to return a list of\n  dbrefs, corresponding to the names of the places sorted alphabetically. The\n  places sorted this way would be &quot;Benden Fort Ista&quot;, so we want the final\n  list to be &quot;#9000 #20 #5000&quot;. The functions, using munge(), are simple:\n   \n  For examples, please check 'help munge2'\n  \n</PRE>\n<A HREF=\"#mul()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#munge2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"munge2\"><H3>MUNGE2</H3></A><PRE>\n  Examples:\n    &gt; &amp;sort_alpha me=[sort(%0)]         (assume the default delimiter)\n    &gt; &amp;sort_delim me=[sort(%0,,%1)]     (%1 is the delimiter given to munge)\n    &gt; say [munge(sort_alpha,v(places),v(dbrefs))]\n    You say, &quot;#9000 #20 #5000&quot;\n    &gt; say [munge(sort_alpha,v(places),v(dbrefs),,-)]\n    You say, &quot;#9000-#20-#5000&quot;\n    &gt; say [munge(sorta_delim,One Two Three|A B C|1 2 3,#20|#9000|#5000,|)]\n    You say, &quot;#5000|#9000|#20&quot;\n    &gt; say [munge(sorta_delim,One Two Three|A B C|1 2 3,#20|#9000|#5000,|,%b)]\n    You say, &quot;#5000 #9000 #20&quot;\n    &gt; say [munge(sorta_delim,One Two Three|A B C|1 2 3,#20|#9000|#5000,|,@)]\n    You say, &quot;#5000@#9000@#20&quot;\n  \n  Note:  When using delimiters, the lists that you pass it can NOT be empty.\n         Munge will not match up any empty lists sent to it. \n  \n  See Also: map(), fold(), iter(), list(), sortlist()\n \n</PRE>\n<A HREF=\"#munge()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#muxpage toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"muxpage toggle\"><H3>MUXPAGE TOGGLE</H3></A><PRE>\n  Toggle: MUXPAGE\n  \n  When this toggle is set on the target, they may use 'page &lt;message&gt;' to\n  page the last person(s) they paged.  This is done for MUX/TM3 compatibility.\n  This toggle, in no way, affects 'lp', 'rp', or 'mrp'.\n  \n  See Also: lpage, rpage, mrpage  \n  \n</PRE>\n<A HREF=\"#munge2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#mwords()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"mwords()\"><H3>MWORDS()</H3></A><PRE>\n  Function:  words(&lt;string&gt;[, &lt;delim&gt;])\n            mwords(&lt;string&gt;[, &lt;multi-character-delim&gt;])\n   \n  Returns the number of words in &lt;string&gt;.  &lt;delim&gt; may be used to specify\n  a delimiter other than a space.  mwords() works just like words, except\n  that ignores ansi and allows a multi-character delimiter.\n   \n  Example:\n    &gt; say words(This is a test)\n    You say &quot;4&quot;\n    say words(Would you like coffee or perhaps tea?)\n    &gt; You say &quot;7&quot;\n    say words(This:is:a:colon:separated:list,:)\n    &gt; You say &quot;6&quot;\n  \n  See Also: wordpos(), strlen(), extract(), extractword()\n  \n</PRE>\n<A HREF=\"#muxpage toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#myopic\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"myopic\"><H3>MYOPIC</H3></A><PRE>\n  Flag: MYOPIC(m)\n \n  If you are set MYOPIC, then you are treated as if you did not own anything\n  when you use the LOOK command or when you automatically look at a location\n  when entering it.  Other commands (such as EXAMINE) are not affected.\n  \n  See Also: DARK, look, TERSE\n  \n</PRE>\n<A HREF=\"#mwords()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#name()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"name()\"><H3>NAME()</H3></A><PRE>\n  name(&lt;dbref&gt;[,&lt;newname&gt;])\n   \n  This function returns the name of the indicated object.  When called with\n  an exit it returns the only the first alias.\n  \n  If side-effects are enabled, and if this side-effect is enabled, and if\n  the target is set SIDEFX, you may use the second option of this to set\n  the target dbref with the new name.  All permissions and limitations to\n  @name hold true of this side-effect.\n  \n  Example:\n    &gt; say name(me)\n    You say &quot;TinyPlayer&quot;\n   \n  See Also: fullname(), @alias, @name, cname()\n  \n</PRE>\n<A HREF=\"#myopic\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nameq()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nameq()\"><H3>NAMEQ()</H3></A><PRE>\n  Function: nameq(&lt;register or label&gt; [,&lt;new label&gt; [,&lt;key&gt;]])\n  \n  The nameq() function will label (or re-label) a setq register with the\n  specified label.  You may use any name of 31 characters or less for\n  the label.  You may use any character, including spaces.  The labels\n  do not have to be unique, but be aware it will find the first match\n  sequentially.  If you do not specify a new label, it will display\n  the existing label (if one exists) for that register.\n  \n  If you specify a key of 1, &lt;new label&gt; MUST be null/empty, and this\n  will return the register (0-9 or a-z) assigned to the specified label.\n  \n  Example:\n    &gt; say [setq(0,Test 1 2 3)][r(0)]\n    You say &quot;Test 1 2 3&quot;\n    &gt; say [setq(0,Test 1 2 3)][nameq(0,Foo Foo)][r(Foo Foo)]\n    You say &quot;Test 1 2 3&quot;\n    &gt; say [setq(0,Test 1 2 3)][nameq(0,Foo Foo)][nameq(0)]\n    You say &quot;Foo Foo&quot;\n    &gt; say [setq(0,Test 1 2 3)][nameq(0,Foo Foo)][nameq(Foo Foo,,1)]\n    You say &quot;0&quot;\n  \n  See Also: setq(), setr(), r(), SETQ_TEMPLATE\n\n</PRE>\n<A HREF=\"#name()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nand()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nand()\"><H3>NAND()</H3></A><PRE>\n  Function: nand(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN]...)\n  \n  Takes two or more booleans, and returns false(0) if both values are\n  true(1) and true(1) if either or both values are false(0).\n  \n  Example: \n    &gt; say [nor(1,0)] @ [nor(0,0)] @ [nor(0,1)] @ [nor(1,1)]\n    You say &quot;1 @ 1 @ 1 @ 0&quot;\n  \n  See Also: BOOLEAN VALUES, and(), xor(), or(), xnor(), nor()\n  \n</PRE>\n<A HREF=\"#nameq()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ncomp()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ncomp()\"><H3>NCOMP()</H3></A><PRE>\n  Function: ncomp(&lt;number1&gt;,&lt;number2&gt;)\n  \n  ncomp compares two numbers.  It returns 0 if they are the same, 1\n  if number2 is less than number 1, and -1 otherwise.\n  \n  Example:\n    &gt; say ncomp(2,1)\n    You say &quot;1&quot;\n    &gt; say ncomp(1,2)\n    You say &quot;-1&quot;\n    &gt; say ncomp(2,2)\n    You say &quot;0&quot;\n   \n  See Also: alphamin(), alphamax(), comp(), strdistance()\n  \n</PRE>\n<A HREF=\"#nand()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nearby()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nearby()\"><H3>NEARBY()</H3></A><PRE>\n  Function: nearby(obj1,obj2)\n \n  Tests if obj1 is near obj2 (if it is in the same location, in obj2's\n  inventory, or is obj2's location).  You must control either obj1 or obj2, or\n  be near either one of them, if both of these tests fail then 0 is returned.\n  This function returns 1 if the two objects are nearby and 0 if not.\n  \n  Example:\n    &gt; look\n    Test Room\n    This is a test room.\n    Contents:\n    ObjectThingy\n    Obvious exits:\n    North &lt;N&gt;  South &lt;S&gt;\n    &gt; say nearby(me, objectthingy)\n    You say &quot;1&quot;\n  \n  See Also: @whereis, @whereall, loc(), room()\n  \n</PRE>\n<A HREF=\"#ncomp()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#neq()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"neq()\"><H3>neq()</H3></A><PRE>\n  Function: neq(&lt;integer1&gt;,&lt;integer2&gt;)\n \n  Takes two integers, and returns 1 if they are not equal and 0 if they are\n  equal.  Warning: passing anything but integers will produce unexpected\n  results, as non-numeric strings usually are treated as numeric 0.\n \n  Examples:\n    &gt; say neq(1,-1)\n    You say &quot;1&quot;\n    &gt; say neq(5,5)\n    You say &quot;0&quot;\n    &gt; say neq(foo, bar)\n    You say &quot;0&quot;\n  \n  See Also: lt(), lte(), gte(), gt(), eq(), not()\n  \n</PRE>\n<A HREF=\"#nearby()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#new users\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"new users\"><H3>NEW USERS</H3></A><PRE>\n  Guests are considered a temporary player bit on a mush.  They have severely\n  limited access and are essentially a look but do not touch type of player.\n  \n  As a guest, you can interact with the mush and the playerbase, but you can\n  not leave any lasting information into the game.  This includes, but is not\n  limited to sending mail, setting attributes, building of any type, altering\n  any data within the mush (except for global commands that the wizzes allow),\n  or setting/altering your player character in any way.\n  \n  If you wish to have a more flexible account, we recommend creating a player\n  then going through the methods on the mush to register your player or\n  whatever method they have for becoming a member player of that mush.\n  \n  Remember, guests CAN NOT MAIL.  This is something that will likely cause\n  confusion regardless of what game you are on.  This is also intentional.\n  \n</PRE>\n<A HREF=\"#neq()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news\"><H3>news</H3></A><PRE>\n  *NOTE* :  The old news system ( MUSH standard ) can be found with:\n            HELP NEWS OLD NEWS  \n   \n  News has been greatly modified and hard coded to allow better functionality\n  and speed.  The command structure works on a switch system like:\n            news/read \n  \n  The following topics exist for the news system:\n  \n       old news       description    technical      changes        general\n       info           new user       default group  cmdlist\n  \n  To get help on the various news subcommands you would use: help news &lt;sub&gt;\n  where &lt;sub&gt; is any of the below subcommands:\n  \n       check          extend         groupinfo      grouplist      groupmem \n       jump           login          post           postlist       postlock  \n       repost         read           readlock       status         subscribe\n       unsubscribe    userinfo       yank           mailto\n  \n  For help on the old news system type: help news old news\n  For help on any other item listed here type: help news &lt;item&gt;\n  \n  See Also: news old news, news cmdlist\n  \n</PRE>\n<A HREF=\"#new users\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news changes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news changes\"><H3>news changes</H3></A><PRE>\n  Topics: CHANGES\n  01/10/1997 Original Version 1.0 by Thorin (Mike McDermott)\n  \n</PRE>\n<A HREF=\"#news\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news check\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news check\"><H3>news check</H3></A><PRE>\n  Command: news/check\n           news/check/verbose \n  \n  The check command goes through your list of subscribed groups, and scans\n  them for unread news statistics. Without the verbose switch, this command\n  shows only those groups that have unread news. With the verbose switch,\n  this command shows all of your subscribed groups whether or not they have\n  unread news.\n  \n  Example:\n    &gt; news/check\n    (You see a list of unread articles in all subscribed groups)\n    &gt; news/check/verbose\n    (You see a list of all subscribed groups with or without new articles)\n  \n  See Also: news status\n  \n</PRE>\n<A HREF=\"#news changes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news cmdlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news cmdlist\"><H3>news cmdlist</H3></A><PRE>\n  The following is a quick reference list of news commands:\n  \n  news/check          - Check for unread news in your subscribed groups\n  news/extend         - Change the expiration time of an article\n  news/grouplist      - List all groups in the system\n  news/groupmem       - List the members of a group\n  news/jump           - Change the position of your read marker within a group\n  news/login          - Log into the news system &amp; perform unread news check\n  news/mailto         - Mail a user with the given news item and optional text\n  news/post           - Post an article to a group\n  news/postlist       - List all of the articles you have posted in all groups\n  news/postlock       - Lock a group against certain players posting to it\n  news/repost         - Correct mistakes in a news posting\n  news/read           - Read articles in a group\n  news/readall        - Reads all unread articles (spammy!)\n  news/readlock       - Lock a group against certain players reading it\n  news/status         - Display listing of article titles within a group\n  news/status/verbose - Display ALL articles available within a group\n  news/subscribe      - Join a news group or list your subscribed groups\n  news/unsubscribe    - Leave a news group\n  news/userinfo       - Display statistics about yourself\n  news/yank           - Delete an article from a group\n  \n  Individual help is available on each of these sub commands by typing in:\n  help news &lt;switch&gt;.  Example: help news yank\n  \n</PRE>\n<A HREF=\"#news check\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news default group\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news default group\"><H3>news default group</H3></A><PRE>\n  Topics: DEFAULT GROUP\n  The default group for a user is defined as the last group in which they\n  read news. Your default group changes whenever you change to a different\n  group with the news/read command. This enables you to switch your focus \n  amongst your subscribed groups and use the shorter versions of the commands\n  in the news system since it can make assumptions as to the group that you\n  are interested in targeting.\n  \n  See Also: news jump, news read, news status\n  \n</PRE>\n<A HREF=\"#news cmdlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news description\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news description\"><H3>news description</H3></A><PRE>\n  Topics: DESCRIPTION (1 of 2)\n  The hard coded news system allows players to join news groups where they\n  may discuss various themed issues. The system is composed of groups,\n  users (players), and articles. \n  \n  A group has a description, a read lock, a post lock, a set of subscribed\n  users, and a set of active articles. Users must pass the read and/or post\n  locks of the group to participate in various aspects of the group.\n  A group may also be assigned an administrator. The group administrator\n  may do several things to the group including subscribing and unsubscribing\n  users from the group, setting read and post locks, yank articles, and\n  extend article expiration times.\n  \n  { Type: help news description2 }\n  \n</PRE>\n<A HREF=\"#news default group\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news description2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news description2\"><H3>news description2</H3></A><PRE>\n  Topics: DESCRIPTION (2 of 2)\n  Users of the system have a list of subscribed groups, as well as links to\n  any active postings that they have made. Within each subscribed group,\n  the system maintains a marker. This marker denotes the current article\n  that the user is on. When the user reads an article in a group, their\n  marker for that group is advanced to the next article. Any article that\n  has a sequence number below the marker is considered read. The last group\n  that the user has read is also recorded, and becomes their 'default' group\n  for the purposes of several of the news commands.\n  \n  Articles in the system belong both to a group and to a user. They also\n  expire two weeks after they are posted. The expiration time may be extended\n  or reduced or set to never expire. Once an article expires, it is deleted\n  from the system and can not be recovered. Articles can be reposted or yanked\n  if necessary, however certain criteria must be met (see the help pages).\n \n  For further information on how the news system works, please refer to the\n  help pages for the topic or command of interest.\n  \n  See Also: news new user\n  \n</PRE>\n<A HREF=\"#news description\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news extend\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news extend\"><H3>news extend</H3></A><PRE>\n  Command: news/extend &lt;group&gt;/&lt;seq&gt;=&lt;num days&gt;\n \n  The extend command alters the expiration time stamp on an article. The group\n  and sequence number of the article are necessary to identify it. The number\n  of days may be positive or negative. You may also specify 'forever' and\n  the article will never expire.\n  \n  This command is restricted to group administrators and Royalty.\n  \n  Example: \n    &gt; news/extend info/0=5\n    (You see) News: Expiration on article 0 of group 'info' now (new date)\n    &gt; news/extend info/0=forever\n    (You see) News: Extending expiration forever on article 0 of group 'info'\n  \n  See Also: news post  \n  \n</PRE>\n<A HREF=\"#news description2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news general\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news general\"><H3>news general</H3></A><PRE>\n  Topics: GENERAL\n  The 'general' news group is a system created group that is designed to be\n  the catch all group. If there isn't a more narrowly focused group that is\n  more appropriate for the news, it goes in 'general'. Please try not to\n  spam or flame on this group as it can get pretty ugly.\n  \n  See Also: news unsubscribe, news subscribe, news grouplist\n  \n</PRE>\n<A HREF=\"#news extend\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news groupinfo\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news groupinfo\"><H3>news groupinfo</H3></A><PRE>\n  Command: news/groupinfo &lt;group&gt;\n   \n  The groupinfo command provides many details and statistics about the\n  specified group. This command is restricted to the group administrator\n  and Royalty.\n  \n  Example:  \n    &gt; news/groupinfo general\n    (You see a bunch of information on the news group general)\n  \n  See Also: news subscribe, news userinfo\n  \n</PRE>\n<A HREF=\"#news general\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news grouplist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news grouplist\"><H3>news grouplist</H3></A><PRE>\n  Command: news/grouplist\n  \n  The grouplist command lists the names and descriptions of all groups\n  currently defined in the news system.\n  \n  Example:\n    &gt; news/grouplist\n    (You see a list of all groups in the news system with descriptions)\n  \n  See Also: news status\n  \n</PRE>\n<A HREF=\"#news groupinfo\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news groupmem\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news groupmem\"><H3>news groupmem</H3></A><PRE>\n  Command: news/groupmem &lt;group&gt;\n  \n  The groupmem command lists all of the users who are subscribed to the\n  specified group. You must be subscribed to the group to use this command\n  (the group administrator and Royalty bypass this restriction).\n  \n  Example:\n    &gt; news/groupmem general\n    (You see a huge amount of spam of everyone who belongs to group general)\n  \n  See Also: news unsubscribe\n  \n</PRE>\n<A HREF=\"#news grouplist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news info\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news info\"><H3>news info</H3></A><PRE>\n  Topics: INFO\n  The 'info' news group is a system created group that is designed for the\n  administrators of the mush to disseminate information to the rest of the\n  users of the system. The 'info' news group can not be unsubscribed from.\n  \n  See Also: news subscribe, news unsubscribe, news grouplist\n  \n</PRE>\n<A HREF=\"#news groupmem\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news jump\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news jump\"><H3>news jump</H3></A><PRE>\n  Command: news/jump\n           news/jump &lt;seq&gt;\n           news/jump &lt;group&gt;\n           news/jump &lt;group&gt;/&lt;seq&gt;\n  \n  The jump command repositions your marker within a group. The first two\n  forms of the command operate on your default group. The last two operate\n  on the specified group. The two versions that do not have a &lt;seq&gt; jump\n  you to the end of the group, where the ones with the &lt;seq&gt; jump you\n  to the specified sequence within the group.\n  \n  Example:\n    &gt; news/jump general/0\n    (You see) News: Jumped to position 0 of group 'info'.\n  \n  This effectively makes your current position you last read to article 0.\n  \n  See Also: news read\n  \n</PRE>\n<A HREF=\"#news info\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news login\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news login\"><H3>news login</H3></A><PRE>\n  Command: news/login\n  \n  The login command is triggered automatically when you log into a RhostMUSH.\n  The effects of this command are two-fold. First, if you have never used\n  the news system before, you are added to the 'general' and 'info' groups.\n  Second, your subscribed news groups are checked for unread news. Any groups\n  that contain unread news are listed. Groups that do not contain unread\n  news are not mentioned.  This is automatically triggered when you log in.\n  \n  Example:\n    &gt; news/login\n    (You see either nothing, or new postings to groups that you belong to)\n  \n  See Also: news subscribe, news status\n  \n</PRE>\n<A HREF=\"#news jump\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news mailto\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news mailto\"><H3>news mailto</H3></A><PRE>\n  Command: news/mailto &lt;group&gt;/&lt;seq #&gt; &lt;addr list&gt;=[&lt;subject&gt;//]&lt;text message&gt;\n  \n  This will allow you to mail the news posting from a given\n  group to one or more players.  The group and sequence # must both be valid,\n  and accessable by you. You may specify an optional subject line and a\n  text message comment regarding the posting.\n  \n  The address list follows the same format as that described in \n  'help mail send'.\n  \n  Example:\n    news/mailto general/5 Wizard=Confused//What did you mean exactly by that?\n  \n  See Also: mail, news, folder\n  \n</PRE>\n<A HREF=\"#news login\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news new user\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news new user\"><H3>news new user</H3></A><PRE>\n  Topics: NEW USER\n  As a new user of the news system, you will need to use either the news/login\n  command or the news/subscribe command to make the system aware that you want\n  to participate. The first time that you use one of these commands, \n  you will be subscribed automatically to the 'general' and 'info' groups.\n  These are system generated groups, please refer to the help files on\n  them.\n  \n  You will first want to become familiar with the news/read, news/check,\n  and news/subscribe commands. For help on any of these topics, refer\n  to: help news\n  \n  See Also: news subscribe, news unsubscribe, news grouplist\n  \n</PRE>\n<A HREF=\"#news mailto\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news old news\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news old news\"><H3>news old news</H3></A><PRE>\n  Topics: OLD NEWS\n  Command: news [&lt;topic&gt;]\n  Shows you the current news for the MUSH. It is highly recommended that\n  you check the news daily for new information.  Otherwise, the wizards will\n  have no pity on you for messing up with the new commands.\n  \n</PRE>\n<A HREF=\"#news new user\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news post\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news post\"><H3>news post</H3></A><PRE>\n  Command: news/post &lt;group&gt;/&lt;title&gt;=&lt;text&gt;\n  \n  The post command posts and article to a group. You must be subscribed to a \n  group and pass it's postlock before this command will be successful. The\n  title is mandatory, as well as the text. \n  \n  Example:\n    &gt; news/post general/MyPost=This is my posting\n    (You see) News: Article (number) posted to group 'general', expires (date)\n  \n  See Also: news yank, news repost\n  \n</PRE>\n<A HREF=\"#news old news\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news postlist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news postlist\"><H3>news postlist</H3></A><PRE>\n  Command: news/postlist\n  \n  The postlist command lists the postings that you have made in any and all\n  groups. You do not have to be currently subscribed to a group for your\n  postings in that group to show up on this list. Once articles expire\n  they no longer show up on this list.\n  \n  Example:\n    &gt; news/postlist\n    (You see a listing of articles you posted that are still in circulation)\n  \n  See Also: news yank, news repost\n  \n</PRE>\n<A HREF=\"#news post\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news postlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news postlock\"><H3>news postlock</H3></A><PRE>\n  Command: news/postlock &lt;group&gt;=&lt;text&gt;\n  \n  The postlock command sets the posting lock for the designated group. If the\n  text is left off, the post lock is removed from the group. The postlock text\n  is evaluated similar to the u() function. An unset postlock automatically\n  means that any player will pass the postlock. When a player attempts to post\n  or repost to a group, the text in the group's postlock is evaluated with\n  the player as both the invoker and executor of the text. Therefore, \n  references to 'me' and '%#' and '%!' will all refer to the player attempting\n  to post. This is done to ensure that there are no security holes in this\n  process for a user to exploit since there is no higher level security\n  involved than the user itself.\n  \n  Example:\n    &gt; news/postlock CitizensOnly=match(get(%#/guild),Citizen)\n    (You see) News: Post lock set for group 'citizensonly'.\n  \n  This command is restricted to the group administrator or Royalty and higher.\n  \n  See Also: news readlock, news post, news postlist\n  \n</PRE>\n<A HREF=\"#news postlist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news read\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news read\"><H3>news read</H3></A><PRE>\n  Command: news/read\n           news/read &lt;seq&gt;\n           news/read &lt;group&gt;\n           news/read &lt;group&gt;/&lt;seq&gt;\n  \n  The read command enables you to read the postings within a group. The first\n  two versions of this command operate on the group that you read last (your\n  default group). If you do not specify a sequence number, your marker within\n  the group is used to read the next unread article within that group. Then\n  your marker is updated to point to the article which follows the one that \n  you just read. This enables you to use the news/read command to read though\n  your entire default group, and the news/read &lt;group&gt; command to switch your\n  default group to another one, after which you can continue to use the\n  news/read command to read through that group. If you specify a sequence \n  number, then that article is read but your marker in that group is not\n  adjusted. This enables you to look around in a group without messing up\n  your current read position.\n  \n  Example:\n    &gt; news/read general\n    (You see the next unread news item in general if one exists)\n    &gt; news/read 5\n    (You see news posting #5 of the current group you're in)\n    &gt; news/read info/0\n    (You see news posting #0 of the group 'info')\n   \n  See Also: news check, news status\n  \n</PRE>\n<A HREF=\"#news postlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news readall\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news readall\"><H3>news readall</H3></A><PRE>\n  Command: news/readall [&lt;group&gt;]\n  \n  The readall command will read all unread news.  If a group is specified it\n  will read all unread news in that particular group.  This is especially handy\n  if you have large output buffers and want to read all the news up front.\n  \n  See Also: news read\n  \n</PRE>\n<A HREF=\"#news read\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news readlock\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news readlock\"><H3>news readlock</H3></A><PRE>\n  Command: news/readlock &lt;group&gt;=&lt;text&gt;\n  \n  The readlock command sets the reading lock for the designated group. If the\n  text is left off, the read lock is removed from the group. The readlock text\n  is evaluated similar to the u() function. An unset readlock automatically\n  means that any user will pass the lock. When a player attempts to read \n  a group, the text in the group's readlock is evaluated with\n  the player as both the invoker and executor of the text. Therefore, \n  references to 'me' and '%#' and '%!' will all refer to the player attempting\n  to read. This is done to ensure that there are no security holes in this\n  process for a user to exploit since there is no higher level security\n  involved than the user itself.\n  \n  This command is restricted to the group administrator or Royalty and higher.\n  \n  Example:\n    &gt; news/readlock CitizensOnly=match(get(%#/guild),Citizen)\n    (You see) News: Read lock set for group 'citizensonly'.\n  \n  See Also: news postlock\n  \n</PRE>\n<A HREF=\"#news readall\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news repost\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news repost\"><H3>news repost</H3></A><PRE>\n  Command: news/repost &lt;group&gt;/&lt;seq&gt;/&lt;new title&gt;=&lt;new text&gt;\n  \n  The repost command allows you to fix any errors that you may find in your\n  posting after the fact. You must be the owner of the specified article.\n  There are two further restrictions on this command: you must repost before\n  any other postings are made to the same group, and you must repost within\n  a half an hour of the original posting time. These last two restrictions\n  are to ensure that you do not provoke people into responding to your\n  article and then change it after the fact, making them look foolish to\n  people who read the group later.\n  \n  Example:\n    &gt; news/repost general/0/Reposting=This is the new text blah blah blah\n    (You see) News: Article 0 reposted to group 'general', expires (date)\n  \n  See Also: news yank, news postlist\n  \n</PRE>\n<A HREF=\"#news readlock\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news status\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news status\"><H3>news status</H3></A><PRE>\n  Command: news/status\n           news/status/verbose\n           news/status &lt;group&gt;\n           news/status/verbose &lt;group&gt;\n  \n  The status command lists articles within a group. The first two versions\n  of this command operate on your default group. If the verbose switch\n  is given all articles in the group are listed, otherwise, only unread\n  articles are listed. Information included in the list is unread status,\n  sequence number within the group, owner name, article title.\n  \n  Example:\n    &gt; news/status\n    (You see the status of all unread messages in your current group)\n    &gt; news/status/verbose\n    (You see the status of all messages in your current group)\n    &gt; news/status general\n    (You see the status of all unread messages in group 'general')\n    &gt; news/status/verbose general\n    (You see the status of all messages in group 'general')\n  \n  See Also: news read, news check, news jump\n  \n</PRE>\n<A HREF=\"#news repost\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news subscribe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news subscribe\"><H3>news subscribe</H3></A><PRE>\n  Command: news/subscribe \n           news/subscribe &lt;group&gt;\n           news/subscribe &lt;player&gt;=&lt;group&gt;\n  \n  The subscribe command does one of three things. The first version will list\n  all of the groups (and their descriptions) that you are subscribed to.\n  The second version will subscribe you to a group. In order for the \n  second version to succeed, you must pass either the postlock or the\n  readlock of the group. When you subscribe to a group, your marker within\n  the group is set to the first active posting in the group. The third\n  version allows the group administrator or Royalty to pull users into \n  a group.\n  \n  Example:\n    &gt; news/subscribe general\n    (You see) News: You are now subscribed to group 'general'.\n  \n  See Also: news unsubscribe, news jump\n  \n</PRE>\n<A HREF=\"#news status\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news technical\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news technical\"><H3>news technical</H3></A><PRE>\n  Topics: TECHNICAL (for technical geeks)\n  The hard coded news system was modeled after a system that was originally\n  written in MUSHcode. This system was named MUSHNews and was written by\n  Thorin. The new system, also written by Thorin, has added features and \n  has been engineered to take full advantage of the extended capabilities \n  gained by hardcoding a system into the RhostMUSH server itself.\n  \n  The news system was written in January of 1997, and consists of\n  approximately 5000 lines of C code. It utilizes an ndbm database separate\n  from the RhostMUSH database to store all of it's information.\n  \n  System Limits:\n    Group name        length   31 [a-zA-Z][a-zA-Z0-9_.]*\n    Article title     length   39 \n    Article text      length 3999\n  \n  For revision history, type: help news changes\n  \n  See Also: news changes, news descripition\n  \n</PRE>\n<A HREF=\"#news subscribe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news unsubscribe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news unsubscribe\"><H3>news unsubscribe</H3></A><PRE>\n  Command: news/unsubscribe &lt;group&gt;\n           news/unsubscribe &lt;player&gt;=&lt;group&gt;\n  \n  The unsubscribe command has two forms. The first form will remove you \n  from a group. In order for this command to succeed you must be subscribed \n  to the named group. By unsubscribing to a group, you loose your marker \n  within the group. If you should resubscribe, you'll need to use the \n  news/jump command to reposition yourself past the articles that you have \n  already read.  The second version of the command allows the group admin \n  or Royalty to unsubscribe a player from a group.\n  \n  Example:\n    &gt; news/unsubscribe general\n    (You see) News: You are now unsubscribed from group 'general'.\n  \n  See Also: news subscribe, news jump\n  \n</PRE>\n<A HREF=\"#news technical\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news userinfo\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news userinfo\"><H3>news userinfo</H3></A><PRE>\n  Command: news/userinfo\n  \n  The userinfo command will list the information that is stored about you\n  in the news database. This includes the total number of postings you have\n  made, the total number of active postings that exist, and the number\n  of group subscriptions you have.\n  \n  Example:\n    &gt; news/userinfo\n    (You see various information you have concerning the news system)\n  \n  See Also: news postlist, news subscribe\n  \n</PRE>\n<A HREF=\"#news unsubscribe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news verbose\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news verbose\"><H3>news verbose</H3></A><PRE>\n  Command: news/status/verbose\n  \n  The verbose switch is used in junction with the /status switch to list\n  all available posts within a given group.  \n  \n  Please refer to 'help news status' for a complete syntax listing.\n  \n  See Also: news status\n  \n</PRE>\n<A HREF=\"#news userinfo\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#news yank\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"news yank\"><H3>news yank</H3></A><PRE>\n  Command: news/yank &lt;group&gt;/&lt;seq&gt;\n  \n  The yank command allows you to delete an article that you've posted to\n  a group. You may wish to do this if you feel that you have said something\n  that was better left unsaid or you just completely fubared the text of the\n  message. There are some restrictions to this command however: you must\n  still pass the postlock of the group, no other articles have been posted\n  to the group, and your posting is less than 30 minutes old. These\n  restrictions are designed to prevent you from posting something that \n  provokes a response from other users and then later deleting your posting,\n  making the other user seem foolish to later readers.\n  \n  Example:\n    &gt; news/yank general/0\n    (You see) News: Article 0 yanked from group 'general'\n  \n  See Also: news repost, news postlist\n  \n</PRE>\n<A HREF=\"#news verbose\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#next()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"next()\"><H3>NEXT()</H3></A><PRE>\n  next(&lt;thing&gt;)\n \n  If thing is an exit in a room, then next will return the next \n  nondark exit in the list of exits for that room.  If thing is an \n  object, then next will return the next object in the inventory list \n  that the object is in.  Otherwise, it returns a '#-1' string.\n    \n  Example:\n    &gt; inv\n    You are carrying:\n    Glove(#123)\n    Bat(#124)\n    You have 200 gold pieces.\n    &gt; say con(me) \n    You say &quot;#123&quot;\n    &gt; say next(con(me))\n    You say &quot;#124&quot;\n  \n  See Also: con()\n  \n</PRE>\n<A HREF=\"#news yank\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_ansi_ex toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_ansi_ex toggle\"><H3>NO_ANSI_EX TOGGLE</H3></A><PRE>\n  Toggle: NO_ANSI_EX\n \n  When this toggle is set on a player the mush will not hilite things\n  such as 'Contents:', 'Key:', etc when you either examine or look. Otherwise\n  the mush will insert ansi codes to make the examine or look easier to read.\n  \n</PRE>\n<A HREF=\"#next()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_ansi_exit toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_ansi_exit toggle\"><H3>NO_ANSI_EXIT TOGGLE</H3></A><PRE>\n  Toggle: NO_ANSI_EXIT\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that exit's name if that exit had a colorized name.\n  \n</PRE>\n<A HREF=\"#no_ansi_ex toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_ansi_player toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_ansi_player toggle\"><H3>NO_ANSI_PLAYER TOGGLE</H3></A><PRE>\n  Toggle: NO_ANSI_PLAYER\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that player's name if that player had a colorized name.\n  \n</PRE>\n<A HREF=\"#no_ansi_exit toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_ansi_room toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_ansi_room toggle\"><H3>NO_ANSI_ROOM TOGGLE</H3></A><PRE>\n  Toggle: NO_ANSI_ROOM\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that room's name if that room had a colorized name.\n  \n</PRE>\n<A HREF=\"#no_ansi_player toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_ansi_thing toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_ansi_thing toggle\"><H3>NO_ANSI_THING TOGGLE</H3></A><PRE>\n  Toggle: NO_ANSI_THING\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that thing's name if that thing had a colorized name.\n  \n</PRE>\n<A HREF=\"#no_ansi_room toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_command\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_command\"><H3>NO_COMMAND</H3></A><PRE>\n  Flag: NO_COMMAND([c])  \n  \n  If an object is set NO_COMMAND, all $commands and listens\n  will no longer function on that object.\n  \n  This is aliased to 'NOCOMMAND' for compatibility.\n   \n  See Also: $-COMMANDS, ARBITRARY COMMANDS\n  \n</PRE>\n<A HREF=\"#no_ansi_thing toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_flash\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_flash\"><H3>NO_FLASH</H3></A><PRE>\n  Flag: NO_FLASH(-)   \n  \n  When set on a player, it prevents that user from seeing\n  (being annoyed by) the ansi flashing sequence done by the 'f'\n  argument to ansi(). Ex: ansi(f,annoyance)\n  \n  This will effectively strip out the ansi sequence for the flash routine.\n  \n  This is aliased to 'NOFLASH' for compatibility.\n   \n  See Also: ANSI, ANSICOLOR, XTERMCOLOR, NO_UNDERLINE, ansi()\n  \n</PRE>\n<A HREF=\"#no_command\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_spoof\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_spoof\"><H3>NO_SPOOF</H3></A><PRE>\n  Flag: NO_SPOOF(N)\n \n  This flag gives you mucho output when people @emit.  It can be annoying,\n  but you'll know who's spoofing.\n  \n  This is aliased to 'NOSPOOF' for compatibility.\n   \n  See Also: @emit, @femit, @oemit, @pemit\n  \n</PRE>\n<A HREF=\"#no_flash\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_tel\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_tel\"><H3>NO_TEL</H3></A><PRE>\n  Flag: NO_TEL(o)\n \n  If set on a player or object it prevents that particular player or object\n  from using @tel on itself or someone else (other than a wizard) from using\n  @tel on them. The player or object may not use the 'home' command. This flag\n  may only be set or cleared by wizards.\n  \n  See Also: home, @teleport\n \n</PRE>\n<A HREF=\"#no_spoof\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_underline\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_underline\"><H3>NO_UNDERLINE</H3></A><PRE>\n  Flag: NO_UNDERLINE([u])   \n  \n  When set on a player, it prevents that user from\n  seeing (being annoyed by and/or having their win32 client program break)\n  the underline/underscore ansi sequence.  This is the 'u' character with\n  ansi().  Ex: ansi(u,annoyance)\n  \n  This is aliased to 'NOUNDERLINE' for compatibility.\n   \n  This will effectively strip out the ansi sequence for the underline routine.\n  \n  See Also: ANSI, ANSICOLOR, XTERMCOLOR, NO_FLASH, ansi()\n  \n</PRE>\n<A HREF=\"#no_tel\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_walls\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_walls\"><H3>NO_WALLS</H3></A><PRE>\n  Flag: NO_WALLS(w)   \n  \n  This flag when set will quiet all @walls or announcements\n  heard by that player.  Note, important walls with the /no_prefix\n  switch (ROYALTY and SUPER-ROYALTY only) will go through the NO_WALLS\n  flag.\n  \n  This flag will also muffle @dump messages.\n  \n  See Also: NO_YELL, @wall\n  \n</PRE>\n<A HREF=\"#no_underline\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#no_yell\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"no_yell\"><H3>NO_YELL</H3></A><PRE>\n  Flag: NO_YELL(y)\n \n  If set on a player, prevents that player from using the @wall command. This\n  flag may only be set or cleared by Architects and above.  This flag only\n  has relevance for anyone under ARCHITECT in status.\n  \n  See Also: @wall, NO_WALLS\n  \n</PRE>\n<A HREF=\"#no_walls\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nocommand\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nocommand\"><H3>NOCOMMAND</H3></A><PRE>\n  Flag: NO_COMMAND([c])  \n  \n  If an object is set NO_COMMAND, all $commands and listens\n  will no longer function on that object.\n  \n  This is aliased to 'NOCOMMAND' for compatibility.\n   \n  See Also: $-COMMANDS, ARBITRARY COMMANDS\n  \n</PRE>\n<A HREF=\"#no_yell\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#noflash\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"noflash\"><H3>NOFLASH</H3></A><PRE>\n  Flag: NO_FLASH(-)   \n  \n  When set on a player, it prevents that user from seeing\n  (being annoyed by) the ansi flashing sequence done by the 'f'\n  argument to ansi(). Ex: ansi(f,annoyance)\n  \n  This will effectively strip out the ansi sequence for the flash routine.\n  \n  This is aliased to 'NOFLASH' for compatibility.\n   \n  See Also: ANSI, ANSICOLOR, XTERMCOLOR, NO_UNDERLINE, ansi()\n  \n</PRE>\n<A HREF=\"#nocommand\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#noglobparent toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"noglobparent toggle\"><H3>NOGLOBPARENT TOGGLE</H3></A><PRE>\n  Toggle: NOGLOBPARENT\n  \n  Specifies if the target DOES NOT inherit attributes from the specified \n  global parent.  This specific global parent does not effect @parent and\n  may not be desired on every object.  The NOGLOBPARENT toggle is by\n  default wizard settable only.\n  \n  See Also: NOZONEPARENT, @set2\n  \n</PRE>\n<A HREF=\"#noflash\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#noisy\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"noisy\"><H3>NOISY</H3></A><PRE>\n  Toggle: NOISY(N)\n  \n  This toggle, when set, will set the target's 'set/clear' mode for\n  setting/clearing attributes and flags to verbose mode.\n  \n</PRE>\n<A HREF=\"#noglobparent toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nor()\"><H3>NOR()</H3></A><PRE>\n  Function: nor(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n  \n  Takes two or more booleans, and returns true(1) if both values are \n  false(0) or false(0) if either or both values are true(1).\n    \n  Example: \n    &gt; say [nor(1,0)] @ [nor(0,0)] @ [nor(0,1)] @ [nor(1,1)]\n    You say &quot;0 @ 1 @ 0 @ 0&quot;\n  \n  See Also: BOOLEAN VALUES, and(), xor(), or(), nand(), xnor()\n  \n</PRE>\n<A HREF=\"#noisy\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nospoof\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nospoof\"><H3>NOSPOOF</H3></A><PRE>\n  Flag: NO_SPOOF(N)\n \n  This flag gives you mucho output when people @emit.  It can be annoying,\n  but you'll know who's spoofing.\n  \n  This is aliased to 'NOSPOOF' for compatibility.\n   \n  See Also: @emit, @femit, @oemit, @pemit\n  \n</PRE>\n<A HREF=\"#nor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nostr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nostr()\"><H3>NOSTR()</H3></A><PRE>\n  Function: nostr(&lt;string&gt;,&lt;match&gt;)\n  \n  The nostr function works exactly opposite of the str() function.\n  It will return a string up to the specified match.   In this instance\n  it works just like before(), but is faster slightly than the before()\n  function.\n  \n  Examples:\n    &gt; say nostr(This is a test,tes)\n    You say &quot;This is a &quot;\n  \n  See Also: str(), before(), after()\n  \n</PRE>\n<A HREF=\"#nospoof\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#not()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"not()\"><H3>NOT()</H3></A><PRE>\n  Function: not(&lt;boolean&gt;)\n \n  Takes a boolean value, and returns its inverse.  So, if the input is\n  equivalent to true(1) it returns a 0, and if the input is equivalent to\n  false(0), it returns a 1.\n  \n  Example:\n    &gt; say not(1)\n    You say &quot;0&quot;\n    &gt; say not(0)\n    You say &quot;1&quot;\n   \n  See Also: BOOLEAN VALUES, and(), or(), xor(), nand(), nor(), xnor()\n  \n</PRE>\n<A HREF=\"#nostr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#notchr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"notchr()\"><H3>NOTCHR()</H3></A><PRE>\n  Function: notchr(&lt;string&gt;,&lt;listofcharacters&gt;)\n  \n  This function returns true(1) if NONE of the characters in\n  &lt;listofcharacters&gt; exists in &lt;string&gt;.  It will return false(0)\n  if any of the characters exist in &lt;string&gt;.\n  \n  Examples:\n    &gt; say notchr(wizards,qim)\n    You say &quot;0&quot;\n    &gt; say notchr(wizards,qmp)\n    You say &quot;1&quot;\n  \n  See Also: andchr(), orchr(), xorchr()\n  \n</PRE>\n<A HREF=\"#not()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#notel\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"notel\"><H3>NOTEL</H3></A><PRE>\n  Flag: NO_TEL(o)\n \n  If set on a player or object it prevents that particular player or object\n  from using @tel on itself or someone else (other than a wizard) from using\n  @tel on them. The player or object may not use the 'home' command. This flag\n  may only be set or cleared by wizards.\n  \n  See Also: home, @teleport\n \n</PRE>\n<A HREF=\"#notchr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#notify_link toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"notify_link toggle\"><H3>NOTIFY_LINK TOGGLE</H3></A><PRE>\n  Toggle: NOTIFY_LINK\n  \n  When set on a player, it enables them to receive during every periodic\n  dump a listing of all unlinked exits that they may have.  They may set\n  NOTIFY_LINK on a given exit to suppress this message for that particular\n  exit.  This is similar to the FLOATING notification for unlinked rooms.\n  \n</PRE>\n<A HREF=\"#notel\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nounderline\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nounderline\"><H3>NOUNDERLINE</H3></A><PRE>\n  Flag: NO_UNDERLINE([u])   \n  \n  When set on a player, it prevents that user from\n  seeing (being annoyed by and/or having their win32 client program break)\n  the underline/underscore ansi sequence.  This is the 'u' character with\n  ansi().  Ex: ansi(u,annoyance)\n  \n  This is aliased to 'NOUNDERLINE' for compatibility.\n   \n  This will effectively strip out the ansi sequence for the underline routine.\n  \n  See Also: ANSI, ANSICOLOR, XTERMCOLOR, NO_FLASH, ansi()\n  \n</PRE>\n<A HREF=\"#notify_link toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nowalls\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nowalls\"><H3>NOWALLS</H3></A><PRE>\n  Flag: NO_WALLS(w)   \n  \n  This flag when set will quiet all @walls or announcements\n  heard by that player.  Note, important walls with the /no_prefix\n  switch (ROYALTY and SUPER-ROYALTY only) will go through the NO_WALLS\n  flag.\n  \n  This flag will also muffle @dump messages.\n  \n  See Also: NO_YELL, @wall\n  \n</PRE>\n<A HREF=\"#nounderline\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#noyell\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"noyell\"><H3>NOYELL</H3></A><PRE>\n  Flag: NO_YELL(y)\n \n  If set on a player, prevents that player from using the @wall command. This\n  flag may only be set or cleared by Architects and above.  This flag only\n  has relevance for anyone under ARCHITECT in status.\n  \n  See Also: @wall, NO_WALLS\n  \n</PRE>\n<A HREF=\"#nowalls\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nozoneparent toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nozoneparent toggle\"><H3>NOZONEPARENT TOGGLE</H3></A><PRE>\n  Toggle: NOZONEPARENT\n  \n  Specifies if the target DOES NOT inherit attributes from it's ZMO object(s) \n  that it belongs to.  Each zone master object (ZMO) that is intended to \n  inherit attributes, must be set ZONEPARENT.  Alternately, individual\n  attributes may be set to not be inheritable if set NO_INHERIT.\n  \n  See Also: ZONEPARENT, NOGLOBPARENT, @set2\n  \n</PRE>\n<A HREF=\"#noyell\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#npemit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"npemit()\"><H3>NPEMIT()</H3></A><PRE>\n  Function: npemit(&lt;object&gt; [&lt;object2&gt; ...],&lt;string&gt;)\n  \n  The npemit() function works like pemit() except it won't strip spaces.\n  \n  Example:\n  &gt; @pemit/list me me=test\n  test\n  test\n  &gt; say npemit(me me,test)\n  test\n  test\n  You say &quot;&quot;\n  \n  See Also: @pemit, pemit(), SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#nozoneparent toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nsiter()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nsiter()\"><H3>NSITER()</H3></A><PRE>\n  Function: nsiter(&lt;list&gt;, &lt;eval&gt;[, &lt;delim&gt;])\n \n  &lt;list&gt; is a &lt;delimiter&gt;-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  &lt;eval&gt; is a string that is to be\n  evaluated once for each item in &lt;list&gt;, replacing the special symbol ## with\n  the corresponding item from &lt;list&gt;.  A NONspace-separated list of the \n  results of these evaluations is returned to the caller.  The effect is very \n  similar to @dolist, except that the results are made into a list and \n  returned, not executed.  The special symbol #@ can be used to return the\n  positional match of the current item of the list.\n  \n  This function can be reproduced with iter(&lt;list&gt;,&lt;eval&gt;,&lt;delim&gt;,) and as \n  such is considered depreciated but left for compatibility.\n  \n  This function does not handle itext/inum/%i.  Use iter() for this.\n   \n  Examples:\n    &gt; say nsiter(lnum(3),--+#@)\n    You say &quot;--+1--+2--+3--+4&quot;\n    &gt; say nsiter(lnum(4),--+)\n    You say &quot;--+--+--+--+&quot;\n    &gt; say nsiter(This is a test,strlen(##))\n    You say &quot;4214&quot;\n    &gt; say nsiter(This is a test,{strlen(##)})\n    You say &quot;4214&quot;\n    &gt; say nsiter(lnum(10),mul(mul(##,##),10))\n    You say &quot;0104090160250360490640810&quot;\n    &gt; say nsiter(lcon(me),[name(##)]..[money(##)])\n    You say &quot;test..1t1..1radio..1The Wizard's Pointy Hat..1&quot;\n    &gt; say nsiter(Was it a cat I saw,words(##),s)\n    You say &quot;141&quot;\n  \n  See Also: iter(), citer(), @dolist, parse(), list()\n  \n</PRE>\n<A HREF=\"#npemit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#null()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"null()\"><H3>NULL()</H3></A><PRE>\n  Function: null(&lt;string&gt;)\n  \n  This function will eat all output from &lt;string&gt;.  This is handy if you want\n  to evaluate side-effects or other functionality without having any output.\n  Be warned, this function DOES evaluate as stated above.\n  \n  Example:\n    &gt; say [null(this is a test[setq(0,test)])]- [r(0)]\n    You say &quot;- test&quot;\n  \n  See Also: localize(), eval(), @@(), privatize()\n  \n</PRE>\n<A HREF=\"#nsiter()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#num()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"num()\"><H3>NUM()</H3></A><PRE>\n  Function: num(&lt;object&gt;)\n \n  Returns the dbref number of the object, which must be in the same \n  room as the object executing num.\n  \n  Example:\n    &gt; say num(me)\n    You say &quot;#123&quot;\n   \n  See Also: locate(), rnum()\n  \n</PRE>\n<A HREF=\"#null()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#numerical conversion functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"numerical conversion functions\"><H3>numerical conversion functions</H3></A><PRE>\n  Function Lists: Numerical Conversion Functions\n  \n  bound()       - Bounds a number between a min and max value.\n  ceil()        - Returns the smallest integer greater or equal to &lt;number&gt;.\n  crc32()       - Generates a CRC from a set of strings.\n  digest()      - Returns digest information for encryption algorithms.\n  fbound()      - Bounds a floating point between a min and max value.\n  floor()       - Returns the largest integer less than &lt;number&gt;\n  pack()        - Returns the equivalent of a given number using a radix.\n  roman()       - Returns the Roman Numerals for the specified number.\n  spellnum()    - List the long name of the number fed into it.\n  tobin()       - Converts a number to binary.\n  todec()       - Converts a number to decimal.\n  tohex()       - Converts a number to hexadecimal.\n  tooct()       - Converts a number to octal.\n  trunc()       - Returns the value of a number after truncating floats.\n  unpack()      - Returns the equivalent normal base-10 of a packed number.\n\n</PRE>\n<A HREF=\"#num()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nummatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nummatch()\"><H3>NUMMATCH()</H3></A><PRE>\n  Function: nummatch(&lt;string&gt;, &lt;pattern&gt;[, &lt;delim&gt;])\n  \n  This function returns the total number of matches &lt;pattern&gt; against each\n  word of &lt;string&gt;.  If no words match, then 0 is returned.  The case is \n  not significant.\n  \n  The pattern may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 'b??f' would match 'biff', 'boff', 'beef', but not 'borchf'.  'b*f'\n  would match any of them though.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  &gt; say nummatch(This is a test, test)\n  You say '1'\n  &gt; say nummatch(This test is a test of nummatch.  A test is fun, test)\n  You say '3'\n  &gt; say nummatch(This test is silly, fred)\n  You say '0'\n  \n  See Also: MATCH(), NUMMEMBER(), TOTMATCH(), TOTMEMBER(), MEMBER()\n  \n</PRE>\n<A HREF=\"#numerical conversion functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#nummember()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"nummember()\"><H3>NUMMEMBER()</H3></A><PRE>\n  Function: nummember(&lt;list&gt;, &lt;word&gt;[, &lt;delim&gt;])\n  \n  Nummember takes a list and a word and returns the total number of matches\n  that word has in the list.  Unlike nummatch(), this function does not \n  check for wildcarding and the cases are significant.  A word is defined\n  as a non-space separate string like 'hello' would be a word, but\n  'hello world' would be considered two.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n  \n  Example:\n    &gt; say nummember(This is a test test test repeat a test, test)\n    You say &quot;4&quot;\n    &gt; say nummember(This is another test, fred)\n    You say &quot;0&quot;\n    &gt; say nummember(This is a test, *e*)\n    You say &quot;0&quot;\n  \n  See Also: nummatch(), totmatch(), totmember(), match(), member()\n  \n</PRE>\n<A HREF=\"#nummatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#numpos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"numpos()\"><H3>NUMPOS()</H3></A><PRE>\n  Function: numpos(&lt;match&gt;,&lt;string&gt;[,&lt;type&gt;])\n  \n  This function returns the total number of matches of 'match' in the\n  string 'string'.  This works like totpos() but returns the number\n  of matches instead of the position of the matches.  If no matches\n  are found, it returns a '0'.\n  \n  You may optionally specify a &lt;type&gt; of '1' to tell numpos() to match ANY\n  of the characters specified in &lt;string&gt; and to return the total.\n  \n  Example:\n    &gt; say numpos(t,this is a test)\n    You say &quot;3&quot;\n    &gt; say numpos(ts,this is a test,1)\n    You say &quot;6&quot;\n    &gt; say totpos(t,foobles)\n    You say &quot;0&quot;\n  \n  See Also: totpos(), pos(), randpos()\n  \n</PRE>\n<A HREF=\"#nummember()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#numwildmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"numwildmatch()\"><H3>numwildmatch()</H3></A><PRE>\n  Function: numwildmatch(&lt;string&gt;, &lt;pattern&gt;[, &lt;delim&gt;]) \n  \n  This function returns the total number of matches &lt;pattern&gt; against each\n  word of &lt;string&gt;.  If no words match, then 0 is returned.  The case is \n  not significant.  This works like wildmatch() except returns # of matches. \n  \n  The string may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 'b??f' would match 'biff', 'boff', 'beef', but not 'borchf'.  'b*f'\n  would match any of them though.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  &gt; say numwildmatch(This is a test, test)\n  You say '1'\n  &gt; say numwildmatch(This test is a test of nummatch.  A test is fun, test)\n  You say '3'\n  &gt; say numwildmatch(This test *e* is silly *ed, fred)\n  You say '2'\n  \n  See Also: nummatch(), nummember(), wildmatch(), totwildmatch()\n  \n</PRE>\n<A HREF=\"#numpos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#obj()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"obj()\"><H3>OBJ()</H3></A><PRE>\n  Function: obj(&lt;object&gt;)\n   \n  Returns the proper objective pronoun (him, her, it, them) for referring to\n  &lt;object&gt;, based on the object's Sex attribute.  You must either control\n  or be near &lt;object&gt;.\n  \n  Example:\n    &gt; @sex me=male\n    Set.\n    &gt; say obj(me)\n    You say &quot;him&quot;\n   \n  See Also: SUBSTITUTIONS, poss(), subj(), aposs()\n  \n</PRE>\n<A HREF=\"#numwildmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#object information functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"object information functions\"><H3>object information functions</H3></A><PRE>\n  Function Lists: Object Information Functions\n \n  aposs() - Returns the absolute possessive pronoun of an object.\n  art() - Returns the article proper for the word.\n  attrcnt() - Returns the number of attributes on an object.\n  cname() - Returns the colorized/accented name of the target.\n  controls() - Returns true if object2 controls object1\n  default() - Returns the value of obj/attr if readable, or a default.\n  edefault() - Like default(), but evaluates like get_eval()\n  elock() - Checks if &lt;victim&gt; would pass the named lock on &lt;object&gt;.\n  fullname() - Returns the full name of the indicated object.\n  get() - Retrieves the contents of an attribute on an object.\n  get_eval() - Same as get(), but evaluates the contents.\n  grab() - Matches a pattern against each word of &lt;string&gt;.\n  graball() - Like grab(), but returns all matches.\n  grep() - Returns a list of matching attributes.\n  guild() - Returns the guild of a specified user.\n  hasattr() - Returns true if an object has the specified attribute.\n  hasattrp()    - Like hasattr(), but also checks parents.\n  hasflag()     - Returns true if an object has the specified flag set.\n  hastoggle()   - Returns true if an object has the specified toggle set.\n  hastype()     - Returns true if an object is of the specified type.\n  home()        - Returns the objects home.\n  lastcreate()  - Returns the dbref of the object last created.\n  lattr()       - Lists attributes on an object.\n  lcmds()       - List command or listen attributes on an object.\n  lcon()        - Lists the contents of an object. \n  lexits()      - Lists the exits in an object.\n  lflags()      - Like flags, but returns the full string names of flags.\n  lock()        - Returns the named lock on the object, or sets a lock.\n  ltoggles()    - Lists all toggles a player has.\n  lzone()       - Returns the zone list of an object.\n  \n  { Continued in object information functions2 }  \n\n</PRE>\n<A HREF=\"#obj()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#object information functions2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"object information functions2\"><H3>object information functions2</H3></A><PRE>\n  Continued from Object Information Functions.\n  \n  name()        - Returns the name of an object.\n  obj()         - Returns the proper objective pronoun of an object.\n  objeval()     - Evaluates code from a specified objects' perspective.\n  orflag()      - Checks if the target has one of the specified flags.\n  orflags()     - Checks if the target has any of the specified flags.\n  parent()      - Returns the parent object of an object.\n  pgrep()       - Returns a list of matching attributes over parents.\n  poss()        - Returns the possessive pronoun of an object.\n  race()        - Returns the race of an object.\n  shift()       - Shift the returns of %0-%9 by 10.\n  subj()        - Returns the subjective pronoun of an object.\n  type()        - Returns the type of an object.\n  u()           - Evaluates an attribute.\n  u2()          - Like u(), but processes like old-style MUSH.\n  udefault()    - Like u(), but can evaluate a default case.\n  udefault2()   - Like u2(), but can evaluate a default case.\n  ueval()       - Like u(), but allows you to specify a permission level.\n  uldefault()   - Like udefault(), but does not clobber registers.\n  u2ldefault()  - Like u2default(), but does not clobber registers.\n  ulocal()      - Like u(), but does not clobber registers.\n  ulocal2()     - Like u2(), but does not clobber registers.\n  v()           - Retrieves an attribute from an object.\n  vattrcnt()    - Lists user defined attributes on an object.\n  visible()     - Returns true if victim is visible from object's perspective.\n  visiblemux()  - Returns true if object can examine victim.\n  writable()    - Returns true if object can write attribute on target.\n  xget()        - Like get(), but searches parents.\n\n\n</PRE>\n<A HREF=\"#object information functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#object types\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"object types\"><H3>OBJECT TYPES</H3></A><PRE>\n  Topic: OBJECT TYPES\n \n  There are 4 types of objects: things, players, exits, and rooms. The first\n  letter following an object's ID number indicates the type: P(layer),\n  E(xit), R(oom), otherwise, thing.  Things are inanimate objects that can\n  be carried.  Players are animate objects that can move and carry. Exits\n  are the means by which objects move from room to room. Rooms are locations\n  that contain objects and linked exits.\n  \n  See Also: PLAYER, EXIT, ROOM, THING\n  \n</PRE>\n<A HREF=\"#object information functions2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#objeval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"objeval()\"><H3>OBJEVAL()</H3></A><PRE>\n  Function: objeval(&lt;thing&gt;,&lt;function&gt; [,&lt;permission override&gt;])\n  \n  The objeval function evaluates the target function according to the \n  permissions of the thing that is specified.  If you normally do not\n  have those permissions, it uses your permissions instead.  This is \n  useful when you need to parse arguments under a different permission \n  level than the one you currently at.\n  \n  Permission override, if specified to '1' by a wizard enactor, will\n  override the NO_CODE flag on the target and still execute any code\n  of that person.  This is ignored for any inactor not a wizard.\n   \n  Examples:\n    &gt; (Let's assume #4523 is an object owned by a normal player)\n    &gt; say objeval(#4523,lwho())\n    You say &quot;#5 #6 #8&quot; (assuming those are the dbrief#'s of connected players)\n  \n  This evaluates the lwho() function at citizen level even if you are\n  a wizard.\n  \n  See Also: u(), u2(), get_eval(), objeval(), ueval() \n  \n</PRE>\n<A HREF=\"#object types\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#oemit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"oemit()\"><H3>OEMIT()</H3></A><PRE>\n  Function: oemit(&lt;target&gt;, &lt;text&gt; [,&lt;key&gt;])\n  \n  The oemit() function returns 'text' at location of 'target' without letting\n  'target' know what was emitted.  This works identical to the @oemit command\n  and follows all permissions and restrictions.  The SIDEFX flag is required\n  to be able to use the oemit() function.\n  \n  An optional key of &lt;key&gt; may be specified to toggle the affect of having\n  &lt;target&gt; be multiple arguments.  A &lt;key&gt; of '1' enables multi-targetting.\n   \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    &gt; say oemit(TinyPlayer,boo!)\n    boo!\n    You say &quot;&quot;\n    &gt; say oemit(me,boo!)\n    You say &quot;&quot;\n    &gt; say oemit(me you them,boo!,1)\n    You say &quot;&quot;\n  \n  See Also: lemit(), pemit(), emit(), @oemit, SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#objeval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ofparse()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ofparse()\"><H3>OFPARSE()</H3></A><PRE>\n  Function: ofparse(&lt;type&gt;, [&lt;eval1&gt; [,&lt;eval2&gt; ... &lt;evalN or delim&gt;]])\n\n  Type 1&amp;3: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 2&amp;4: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Type 5&amp;7: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 6&amp;8: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  \n  This function will take each &lt;eval&gt; and returns it based on the &lt;type&gt;.\n  \n  The following types exist:\n    1  -- Issue a firstof().  Essentially return the first &lt;eval&gt; that is\n          a true boolean.  This stops evaluation on first true &lt;eval&gt;.\n          The &lt;default&gt; is returned if no evals are met.  The &lt;default&gt;\n          is the assumed argument if only passed a single argument.\n    2  -- Issue an allof().  Essentially returning every &lt;eval&gt; that is\n          a true boolean.  This evaluates every argument.\n    3  -- This is the reverse of '1'.  It returns the first &lt;eval&gt; that\n          is a false boolean.  IT stops evaluation on first false &lt;eval&gt;.\n          This again assumes &lt;default&gt; if no other arguments.\n    4  -- This is the reverse of '2'.  It returns every false &lt;eval&gt;\n          boolean. This evaluates every argument.\n    5  -- Issue a strfirstof().  Essentially returns the first &lt;eval&gt; that\n          is a non-null string.  This stops evaluation on first non-null\n          &lt;eval&gt;.\n    6  -- Issues a strallof().  Essentially returns every &lt;eval&gt; that is\n          a non-null string.  This evaluates everyu argument.\n    7  -- This is the reverse of '5'.  It essentially will either return\n          a null or the default value.\n    8  -- This is the reverse of '6'.  It essentially will return\n          a list of nulls if you have such in your list.  This evaluates\n          every argument.\n  \n  For PennMUSH function lineup:\n      firstof(x,y)    == ofparse(1,x,y)\n      allof(x,y,z)    == ofparse(2,x,y,z)\n      strfirstof(x,y) == ofparse(5,x,y)\n      strallof(x,y,z) == ofparse(6,x,y,z)\n  \n{ see 'help ofparse2' for examples }\n\n</PRE>\n<A HREF=\"#oemit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ofparse2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ofparse2\"><H3>OFPARSE2</H3></A><PRE>\n  (CONTINUED)\n  Function: ofparse(&lt;type&gt;, [&lt;eval1&gt; [,&lt;eval2&gt; ... &lt;evalN or delim&gt;]])\n\n  Type 1&amp;3: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 2&amp;4: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Type 5&amp;7: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 6&amp;8: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Examples:\n    &gt; say ofparse(1,0,2)\n    You say &quot;2&quot;\n    &gt; say ofparse(1,10,11,0)\n    You say &quot;10&quot;\n    &gt; say ofparse(1,grab(the cat,mommy),grab(in the hat,daddy),#-1 Error)\n    You say &quot;#-1 Error&quot;\n    &gt; say ofparse(2,#-1,#101,#2970,,#-3,0,#319,null(This Doesn't Count),|)\n    You say &quot;#101|#2970|#319&quot;\n    &gt; say ofparse(2,foo, 0, #-1, bar, baz,)\n    You say &quot;foobarbaz&quot;\n    &gt; say ofparse(2,foo, 0, #-1, bar, baz,%b)\n    You say &quot;foo bar baz&quot;\n    &gt; say ofparse(3,get(%#/fullname), u(%#/ansiname), %n)\n    You say, &quot;Mike&quot;\n    &gt; say ofparse(4,,  ,foo,@@(Nothing),%b,bar|baz,#-1,|)\n    You say, &quot;foo| |bar|baz|#-1&quot;\n  \n  See Also: BOOLEAN VALUES, cor(), cand(), iter()\n\n</PRE>\n<A HREF=\"#ofparse()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#opaque\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"opaque\"><H3>OPAQUE</H3></A><PRE>\n  Flag: OPAQUE(O)   \n  \n  When set on a player, it prevents other players from \n  seeing what you are carrying in your inventory. Only exception is \n  when the object you are carrying belongs to the other player \n  looking at you.\n  \n  See Also: look\n  \n</PRE>\n<A HREF=\"#ofparse2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#open()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"open()\"><H3>OPEN()</H3></A><PRE>\n  Function: open(&lt;exit&gt;[,&lt;link&gt;][,&lt;location&gt;])\n  \n  This side-effect function mimics the full range of functionality that @open\n  uses.  It also follows all restrictions and permissions of the @open \n  command.  You may open an exit with name &lt;exit&gt; with-out linking it to a \n  destination &lt;link&gt; if you so desire, but the exit would have to be @linked\n  (or link()'d) later depending on what you're needs are.  The first example\n  just opens an exit without linking it.  The second example opens an exit\n  and links it to #0.  \n  \n  The optional &lt;location&gt; specifies where to open the exit out of.  It must\n  be controlled by you, specified as a dbref# and must be an object or room.\n  \n  The SIDEFX flag is required to use open().\n  \n  Note:  To make variable exits, you @toggle the exit VARIABLE then set\n         an appropiate @exitto on it.\n   \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    &gt; say open(My Exit &lt;ME&gt;;my exit;my;exit;me)\n    You say &quot;&quot;\n    &gt; say open(Another Exit &lt;AE&gt;;another exit;another;exit;ae,#0)\n    You say &quot;&quot;\n  \n  See Also: create(), dig(), link(), @open, SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#opaque\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#or()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"or()\"><H3>OR()</H3></A><PRE>\n  Function: or(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n   \n  Takes two or more booleans, and returns 1 if at least one is equivalent\n  to true(1).\n  \n  Example: \n    &gt; say [or(1,0)] @ [or(0,0)] @ [or(0,1)] @ [or(1,1)]\n    You say &quot;1 @ 0 @ 1 @ 1&quot;\n  \n  See Also: BOOLEAN VALUES, and(), not(), xor(), nand(), nor(), xnor()\n  \n</PRE>\n<A HREF=\"#open()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#orchr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"orchr()\"><H3>ORCHR()</H3></A><PRE>\n  Function: orchr(&lt;string&gt;,&lt;listofcharacters&gt;)\n  \n  This function returns true(1) if any one of the characters in\n  &lt;listofcharacters&gt; exists in &lt;string&gt;.  It will return false(0)\n  if none of the characters exist in &lt;string&gt;.\n  \n  Examples:\n    &gt; say orchr(wizards,ymqi)\n    You say &quot;1&quot;\n    &gt; say orchr(wizards,pqe)\n    You say &quot;0&quot;\n  \n  See Also: andchr(), xorchr(), notchr()\n  \n</PRE>\n<A HREF=\"#or()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#orflag()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"orflag()\"><H3>ORFLAG()</H3></A><PRE>\n  Function: orflag(&lt;target&gt;,&lt;flag1&gt;[,&lt;flag2&gt;,...,&lt;flagN&gt;])\n  \n  This function checks if the target has ONE of the specified flags.\n  \n  Examples:\n    &gt; say lflags(me)\n    You say &quot;PLAYER OPAQUE ANSI ANSICOLOR ALTQUOTA TERSE&quot;\n    &gt; say orflag(me,slave,fubar,dark,unf)\n    You say &quot;0&quot;\n    &gt; say orflag(me,slave,fubar,dark,ansi)\n    You say &quot;1&quot;\n   \n  See Also: andflag(), hasflag(), lflags(), flags()\n  \n</PRE>\n<A HREF=\"#orchr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#orflags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"orflags()\"><H3>ORFLAGS()</H3></A><PRE>\n  Function: orflags(&lt;target&gt;,&lt;flag-list&gt;)\n  \n  This function checks if the target has ANY of the specified flags.  You\n  may also specify !&lt;letter&gt; to check if it does not have the specified\n  flag.  Since the GUEST flag is the '!' character as well, if you wish\n  to match against the guest flag, you just escape it out like '\\\\!'.\n  \n  RhostMUSH also has a high-order of flags.  These show up between []'s\n  when you do a flags().  To check against these flags, you must proceed\n  it with a '2'.  To return back to the normal-order of flags, proceed\n  it with a '1' (default).  You must escape out the '1' and the '2' if\n  you wish to specify the MARKER flags (1 and 2).  Ie: '\\\\1', '\\\\2'.\n  \n  Examples:\n    &gt; say flags(me)\n    You say &quot;PDc!W[I]&quot;\n    &gt; say orflags(me,!)]\n    You say &quot;0&quot;\n    &gt; say orflags(me,\\\\!)]\n    You say &quot;1&quot;\n    &gt; say orflags(me,P2I)]\n    You say &quot;1&quot;\n    &gt; say orflags(me,P2I1qZV)]\n    You say &quot;1&quot;\n  \n  See Also: andflag(), andflags(), orflag(), hasflag(), flags(), lflags()\n  \n</PRE>\n<A HREF=\"#orflag()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#outputprefix\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"outputprefix\"><H3>OUTPUTPREFIX</H3></A><PRE>\n  Command: OUTPUTPREFIX &lt;string&gt;\n  Causes &lt;string&gt; to be output on a line by itself before printing the\n  results of each command.  This command is intended for use by external\n  robot programs, and may be restricted to players whose ROBOT flag is set.\n  The OUTPUTPREFIX command must be entered in all capitals.\n  \n  See Also: @robot, OUTPUTSUFFIX, ROBOT\n  \n</PRE>\n<A HREF=\"#orflags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#outputsuffix\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"outputsuffix\"><H3>OUTPUTSUFFIX</H3></A><PRE>\n  Command: OUTPUTSUFFIX &lt;string&gt;\n  Causes &lt;string&gt; to be output on a line by itself after printing the results\n  of each command.  This command is intended for use by external robot\n  programs, and may be restricted to players whose ROBOT flag is set.\n  The OUTPUTSUFFIX command must be entered in all capitals.\n  \n  See Also: @robot, OUTPUTPREFIX, ROBOT\n  \n</PRE>\n<A HREF=\"#outputprefix\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#owner()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"owner()\"><H3>OWNER()</H3></A><PRE>\n  Function: owner(&lt;object&gt;)\n            owner(&lt;object&gt;/&lt;attrib&gt;)\n \n  The first form of the owner() function returns the dbref of the owner of the\n  object.  The object must either be yours or nearby.\n \n  The second form returns the owner of an attribute on the named object.\n  You must own either the object or the attribute.\n  \n  Example:\n    &gt; say owner(me)\n    You say &quot;#123&quot;\n    &gt; say num(me)\n    You say &quot;#123&quot; \n  \n  See Also: @chown\n  \n</PRE>\n<A HREF=\"#outputsuffix\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pack()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pack()\"><H3>PACK()</H3></A><PRE>\n  Function: pack(&lt;number&gt;[[,&lt;radix&gt;][,&lt;penn compat flag&gt;]])\n   \n  Returns the equivalent of the given number using the specified base.\n  The default radix is 64. Bases greater than 10 will be more compact\n  than the original number. Bases less than 10 will be more expanded.\n   \n  The inverse function of pack is unpack. pack and unpack are designed\n  to support the base-36 radix conversion used in Myrddin's popular\n  Bulletin Board. For this reason, and to support bases: 2, 8, and 16,\n  this conversion is not the radix-64 conversion used in unix-to-unix\n  copy (uuencode).  The range of the radix is between 2 and 64.\n  \n  You may specify the PennMUSH compatable toggle (1) which will mimic Penn's\n  64 bit packing algo.\n   \n  Examples:\n    &gt;think pack(629126998)\n    bVxTM\n    &gt;think pack(629126998,16)\n    257FB756\n    &gt;think pack(629126998,2)\n    100101011111111011011101010110\n    &gt;think pack(-629126998)\n    -bVxTM\n   \n  See Also: unpack(), crc32(), mask(), tobin(), tohex(), tooct(), todec(), \n            roman()\n  \n</PRE>\n<A HREF=\"#owner()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#page\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"page\"><H3>page</H3></A><PRE>\n  Command: p[age][/&lt;switch&gt;] &lt;player-list&gt; [=[&lt;control&gt;]&lt;message&gt;]\n           p[age][/&lt;switch&gt;] ,&lt;comma-delim-player-list&gt; [=[&lt;control&gt;]&lt;message&gt;]\n           p[age][/&lt;switch&gt;] &lt;message&gt; (if @toggled MUXPAGE)\n           lp[age][/&lt;switch&gt;] &lt;message to last person(s) you paged&gt;\n           rp[age][/&lt;switch&gt;] &lt;message to last person who paged you&gt;\n           mrp[age][/&lt;switch&gt;] &lt;message to player list in last page to you&gt;\n \n  Note: If you are paging people with spaces in their name, start the page\n        with a comma.  i.e.  page ,player with space, player2 = message\n  \n  &lt;control&gt; is the formatter for the page (&quot;, ;, :, etc)\n  \n  This command sends &lt;message&gt; to &lt;player-list&gt;.  If you do not specify a \n  message, it tells a player that you are looking for them, and tell the \n  player where you are.  You may use either the player's name or alias, and \n  you may also give a string that uniquely matches the start of a player's \n  name on the WHO list.  You may specify from one to more players in a page \n  and you can use a comma to delimit the player list instead of a space for\n  players that contain spaces in their names.  You can not however, mix \n  commas and spaces.\n \n  You can format the message one of several ways by specifying ':', ';', or\n  '&quot;' as the first character of the message.  ':' and ';' format the message\n  as 'From afar, &lt;player&gt; &lt;message&gt;', with ';' omitting the space between\n  &lt;player&gt; and &lt;message&gt;.  '&quot;' formats the message in normal page format\n  (this is the default).\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n \n{ 'help page2' for more }\n  \n</PRE>\n<A HREF=\"#pack()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#page2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"page2 \"><H3>page2 </H3></A><PRE>\n  If your Idle attribute is set to something, then it is sent to anyone\n  who successfully pages you.  This is useful for when you are away from\n  your terminal for a short while.\n  \n  You can selectively disable pages from certain players with the '@lock/page'\n  command (players must pass the lock in order to page you).  If someone\n  cannot page you, they will be sent a message including of your Reject\n  attribute if they try.  If someone pages you while you are not connected,\n  they are sent a message including your Away attribute.\n   \n  Everyone you page is stored so that you may repeat the page to the entire\n  list using the 'lpage' command.  To respond to someone who just paged you,\n  you may use the 'rpage' command.\n  \n  NOTE:  You may set the MUXPAGE @toggle (@toggle me=muxpage) so that page\n         works similiar to how you expect in MUX/TM3.  'lp' will still work\n         the same.\n  \n  See Also: pose, say, whisper, :, ;, &quot;, @pemit, @away, @idle, @reject,\n            rpage, lpage, mrpage\n  \n</PRE>\n<A HREF=\"#page\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parenmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parenmatch()\"><H3>PARENMATCH()</H3></A><PRE>\n  Function: parenmatch([&lt;object&gt;/]&lt;attribute&gt; [,&lt;type&gt;, [&lt;key&gt;]])\n  \n  This function returns an ansified match of parenthesis, brackets, and braces\n  while hilighting red any mis-matched of the three.  The comparison will \n  always be left to right.  If the string is too large, it will always be\n  returned un-altered.  If there are a large number of parenthesis, brackets, \n  and braces, it is possible the result will be cut off as ansi takes up \n  extra spaces.  If this is the case, use type '1' to just return \n  errors (if any).  An optional key of '1' will issue a pretty-print of the\n  output in addition to the color output.\n  \n  The following types exist:\n    0 - Ansify the string and highlight red the first missmatch found (default)\n    1 - If there is a missmatch, ONLY return that, else ansify the string.\n  \n  The following keys exist:\n    0 - (default) do not pretty print the output.\n    1 - pretty print the output.  Be aware on attribs that approach the \n        maximum output buffer size you may get values cut off.\n  \n  Examples:\n    &gt; @va me=[add(1,1)]\n    &gt; @vb me=[add(1,2))]\n    &gt; say parenmatch(vb)\n    You say &quot;[add(1,2))]&quot;       (The second ')' would be hilighted red)\n    &gt; say parenmatch(vb,1)\n    You say &quot;[add(1,2))]&quot;       (Just the second ')' would be colorized)\n  \n  See Also: parenstr(), brackets(), pos(), totpos()\n  \n</PRE>\n<A HREF=\"#page2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parenstr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parenstr()\"><H3>PARENSTR()</H3></A><PRE>\n  Function: parenstr(&lt;string&gt;)\n            parenstr(!&lt;string&gt;)\n  \n  This funbction returns an ansified match of parenthesis, brackets, and\n  braces while hilighting red any mis-matched of the three.  If you start\n  the string you are comparing with a '!' then only the first mis-match\n  will be displayed.  The comparison will always be left to right.  If the\n  string is too large, it will always be returned un-altered.  If there are\n  a large number of parenthesis, brackets and praces, it is possible the\n  result will be cut off as ansi takes up extra spaces.  If this is the case,\n  use the '!' option to only hilight the errors (if any), otherwise it will\n  return the hilighted string.\n  \n  Bugs:  \n  Do to how pre-processing works for functions, eventhough the arguments to\n  this function are not evaluated, if you do not END in the right number\n  of )'s and ]'s it's highly possible that it will evaluate portions of\n  the string passed to it ANYWAY thinking that it's outside the bounds\n  of the parsestr() function itself.  If you run into such a case, store\n  the value you are comparing into an attribute and then use parenmatch()\n  to compare the result so it won't assume (wrongly) how to parse it.\n  \n  Examples:\n    &gt; say parenstr([add(1,2))])\n    You say &quot;[add(1,2))]&quot;       (the second ')' would be hilighted red)\n    &gt; say parenstr(![add(1,2))])\n    You say &quot;[add(1,2))]&quot;       (JUST the second ')' would be hilighted red)\n  \n  See Also: parenmatch(), brackets(), pos(), totpos()\n\n</PRE>\n<A HREF=\"#parenmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parent objects\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parent objects\"><H3>PARENT OBJECTS</H3></A><PRE>\n  Topic: PARENT OBJECTS\n \n  Parent objects provide a way for several objects to inherit common\n  attributes, exits, and $-commands from a single object, so that changing\n  the parent object affects all of its children.  When searching for\n  attributes or exits, first the object itself is checked, then the parent\n  is checked only if the object does not have what was searched for.\n \n  Any attribute the parent object has will be passed down to its children,\n  if they don't already have one. For instance, if the child object has no\n  description, it will inherit the description of its parent.\n \n  Any exits the parent object has will show up in the exit list of the\n  child, and may be used as normal exits.  If you do not wish this, set\n  the exit PRIVATE.\n \n  The parent is searched for $-commands as well as the child, and all\n  attributes of both parent and child are checked, even if there are\n  conflicting attribute names.  If both have an attribute named &quot;cmd1&quot;,\n  both the parent's and child's &quot;cmd1&quot; attributes are checked for a\n  $-command.\n \n{ 'help parent2' for more }\n  \n</PRE>\n<A HREF=\"#parenstr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parent()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parent()\"><H3>PARENT()</H3></A><PRE>\n  Function: parent(&lt;obj&gt;[,&lt;parent&gt;])\n \n  Returns the parent of &lt;obj&gt;.  Returns #-1 if &lt;obj&gt; cannot be found or\n  if you do not own &lt;obj&gt; and it is not set VISUAL.\n \n  If side-effects are enabled, specifying a parent will cause it to be\n  parented to that object.  If side-effects are not enabled, you will\n  get an error message.  The SIDEFX flag is required to use the side-effect.\n  Type @list options to see if the side-effect portion of parent() is enabled.\n  The sideeffect will return the dbref# of the parent it set it to or #-1\n  if the parent was not set.\n  \n  Example:\n    &gt; say parent(me)\n    You say &quot;#-1&quot;\n    &gt; say My va is [v(va)].\n    You say &quot;My va is &quot;\n    &gt; @parent me=test\n    Parent set.\n    &gt; say parent(me) and my va is [v(va)].\n    You say &quot;#123 and my va is Testing 123&quot;\n    &gt; say parent(me,#0)\n    You say &quot;&quot;\n    &gt; say parent(me)\n    You say &quot;#0&quot;\n  \n  See Also: @parent, PARENT OBJECTS, parents(), children()\n  \n</PRE>\n<A HREF=\"#parent objects\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parent2 \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parent2 \"><H3>PARENT2 </H3></A><PRE>\n  Topic: PARENT OBJECTS (continued)\n \n  A parent object may itself have a parent, up to a configurable limit\n  (usually 10 levels).  The parent need not be the same type as its children,\n  and flags are not inherited from parent objects.  However, a UseLock\n  is inherited.  IE: if the parent is uselocked against you, you can not\n  use it's functionality.  You may not create parent loops.\n \n  The parent system inheritance in RhostMUSH is rather robust.  When \n  attributes are looked up it follows a chain of inheritance rules.\n  Lookups are in the following order for attribute lookups:\n  \n    1.  Does attribute exist on object?\n    2.  Does attribute exist in physical parent?\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  See: help @parent\n    3.  Does attribute exist in any of the zones it belongs to?\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  The zonemaster must be set ZONEPARENT for inheritance.\n        C.  If object is toggled NOZONEPARENT this is ignored.\n        D.  See: help zones and help zoneparent\n    4.  Does attribute exist on any by-type global parents (virtual).\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  If object is toggled NOGLOBPARENT this is ignored.\n        C.  See: wizhelp global_parent_&lt;type&gt; (room|thing|player|exit).\n    5.  Does attribute exist on the generic global parent (virtual).\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  If object is toggled NOGLOBPARENT this is ignored.\n        C.  See: wizhelp global_parent_obj\n  \n  All attribute fetches take normal rules regarding normal attribute\n  permissions in addition to the rules previously mentioned.\n  \n  See Also: @parent, parent(). parents(), children()\n  \n</PRE>\n<A HREF=\"#parent()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parent_ok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parent_ok\"><H3>PARENT_OK</H3></A><PRE>\n  Flag: PARENT_OK(Y)\n \n  If an object is set PARENT_OK, then any other object passing the object's\n  ParentLock may make this object a parent of any object that it controls.\n  Caution: allowing others to use your objects as parents lets them read the\n  attributes on the object (as well as any parents of the object).\n  \n  See Also: @lock, PRIVATE, @parent\n  \n</PRE>\n<A HREF=\"#parent2 \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parents()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parents()\"><H3>PARENTS()</H3></A><PRE>\n  Function: parents(&lt;obj&gt;)\n  \n  Returns all the parents of &lt;obj&gt;.  Returns #-1 if &lt;obj&gt; cannot be found\n  or has no parent or if you do not own and/or control &lt;obj&gt;\n  \n  Example:\n    &gt; say parents(me)\n    You say &quot;#-1&quot;\n    &gt; @parent #4=#5\n    Parent set.\n    &gt; @parent #5=#6\n    Parent set.\n    &gt; say parents(#4)\n    You say &quot;#5 #6&quot;\n  \n  See Also: parent(), children()\n  \n</PRE>\n<A HREF=\"#parent_ok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parse()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parse()\"><H3>PARSE()</H3></A><PRE>\n  Function: parse(&lt;list&gt;,&lt;eval&gt;[,&lt;delimiter&gt; [,&lt;output seperator&gt;]])\n  \n  This function takes each element of &lt;list&gt;, evaluates &lt;eval&gt; after\n  substituting it for ##, and constructs a space-separated list of the\n  results.  The special substitution of #@ can be used for the position\n  of the current item in the list.  You may specify an output seperator.\n  \n  This function can be reproduced with the iter function and as\n  such is considered depreciated but left for compatibility.\n  \n  This function does not handle itext/inum/%i.  Use iter() for this.\n   \n  Examples:\n    &gt; say nsiter(lnum(3),--+#@)\n    You say &quot;--+1--+2--+3--+4&quot;\n    &gt; say nsiter(lnum(4),--+)\n    You say &quot;--+--+--+--+&quot;\n    &gt; say nsiter(This is a test,strlen(##))\n    You say &quot;4214&quot;\n    &gt; say nsiter(This is a test,{strlen(##)})\n    You say &quot;4214&quot;\n    &gt; say nsiter(lnum(10),mul(mul(##,##),10))\n    You say &quot;0104090160250360490640810&quot;\n    &gt; say nsiter(lcon(me),[name(##)]..[money(##)])\n    You say &quot;test..1t1..1radio..1The Wizard's Pointy Hat..1&quot;\n    &gt; say nsiter(Was it a cat I saw,words(##),s)\n    You say &quot;141&quot;\n  \n  See Also: iter(), citer(), @dolist, parse(), list()\n  \n  \n</PRE>\n<A HREF=\"#parents()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parsestr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parsestr()\"><H3>PARSESTR()</H3></A><PRE>\n  Function: parsestr(&lt;string&gt;, &lt;eval&gt; [,&lt;delim&gt; [.&lt;output&gt; [,&lt;type&gt;]\n                       [,[&amp;]&lt;target&gt;] [,&lt;transchar&gt; [,&lt;endchar&gt; [,&lt;transeval&gt;]\n                       [,&lt;prefix&gt;]]]]])\n  \n  This function takes an input string and parses it, based on the \n  delimiters, in a 'staggered' method, and passes each substring to\n  the 'eval' as %0.  This is handy for parsing speech for example.\n  \n  Arguments are:\n    &lt;string&gt;    -- input string that you wish to parse &amp; translate\n    &lt;eval&gt;      -- how you wish to parse each segment of the string. \n    &lt;delim&gt;     -- the optional input delimiter of the string\n    &lt;output&gt;    -- the optional output delimiter of the string.\n                   Note: if you have a space-separated argument, then\n                         the first part is prefix, the rest is suffix.\n    &lt;type&gt;      -- Take arguments between delimiters as even (default) or odd.\n    &lt;target&gt;    -- The target you wish to have if initializer specified.\n                   Note: a '&amp;' prefix takes the string 'as-is'.  You must\n                         control the target for the target to work.\n    &lt;transchar&gt; -- The translation character after the 'delimiter' you wish\n                   to identify the string for special processing.\n    &lt;endchar&gt;   -- The last character in the field you wish to do special\n                   processing on. (good for punctuation)\n    &lt;transeval&gt; -- How you wish to parse the special processing string.\n    &lt;prefix&gt;    -- The optional eval'd prefix to use for the 'say' string.\n  \n  Note on &lt;eval&gt;: All arguments passed will be as in the &lt;eval&gt; and &lt;transeval&gt;\n            %0  -- The string being passed for evaluation.      \n  (prefix)  %1  -- The player name specified in target          (or &amp;string).\n  (prefix)  %2  -- The current parameter number being processed (-1 for prefix)\n  (prefix)  %3  -- The absolute parameter being processed       (0 for prefix)\n  (prefix)  %4  -- The transchar OR endchar being processed     (if any)\n  \n  Note:  Only the values with '(prefix)' are valid for the prefix evaluation.\n  \n{ see 'help parsestr2' for options for &lt;string&gt; }\n\n</PRE>\n<A HREF=\"#parse()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parsestr2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parsestr2\"><H3>PARSESTR2</H3></A><PRE>\n  (CONTINUED)\n  Function: parsestr(&lt;string&gt;, &lt;eval&gt; [,&lt;delim&gt; [.&lt;output&gt; [,&lt;type&gt;]\n                       [,[&amp;]&lt;target&gt;] [,&lt;transchar&gt; [,&lt;endchar&gt; [,&lt;transeval&gt;]\n                       [,&lt;prefix&gt;]]]]])\n  \n  The &lt;string&gt; argument handles the following syntax prefixes:\n    &quot; - This is a 'say' string.  If no prefix is specified this is the default\n        case that is used.  When in 'say' format, it auto-closes all \n        double-quotes.\n    : - This is a 'pose' string.  It follows standard pose/: syntax formatting.\n    ; - This is the 'possessive-pose' string.  Follows ';' formatting.\n    | - This is an '@emit' string.  Follow standard @emit formatting.\n  \n  If no prefix is identified as the 4 above, it assumes a say string.\n  \n  These prefixes are only used if the &lt;prefix&gt; option is specified in parsestr.\n  If you do not specify a &lt;prefix&gt; then all prefix args are considered part\n  of a normal string and ignored for special consideration.\n  \n{ see 'help prsestr3' for examples }\n\n</PRE>\n<A HREF=\"#parsestr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parsestr3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parsestr3\"><H3>PARSESTR3</H3></A><PRE>\n  (CONTINUED)\n  Function: parsestr(&lt;string&gt;, &lt;eval&gt; [,&lt;delim&gt; [.&lt;output&gt; [,&lt;type&gt;]\n                       [,[&amp;]&lt;target&gt;] [,&lt;transchar&gt; [,&lt;endchar&gt; [,&lt;transeval&gt;]\n                       [,&lt;prefix&gt;]]]]])\n\n  Examples:\n    &gt; @va me=You say &quot;Hello! Hello?&quot; *sigh* &quot;Hello?!?&quot;\n    Set.\n    &gt; think parsestr(v(va), X,&quot;)\n    You say &quot;X&quot; *sigh* &quot;X&quot;\n    &gt; think parsestr(v(va), X,&quot;,,1)\n    X&quot;Hello! Hello?&quot;X&quot;Hello?!?&quot;X (notice no spaces as spaces are part of args)\n    &gt; think parsestr(v(va),garble(%0,1,,-),&quot;)\n    You say &quot;------ ------&quot; *sigh* &quot;--------&quot;\n    &gt; think parsestr(v(va),garble(%0,1,,-,,2),&quot;)\n    You say &quot;-----! -----?&quot; *sigh* &quot;-----?!?&quot;\n  \n  Avanced Examples:\n    &gt; think parsestr(&quot;to die&quot; is a mighty adventure &quot;+snarf&quot;, --%0 %[%2/%3%]--,\n        &quot;,&quot;,,%#,+,, X: %0 &lt;%2/%3&gt;, [ansi(+purple,bob)])\n    YourName bob &quot;--to die [0/1]--&quot; is a mighty adventure &quot;X: +snarf &lt;1/3&gt;&quot;\n    &gt; think parsestr(&quot;to die&quot; is a mighty adventure &quot;snarf!&quot;, --%0 %[%2/%3%]--,\n        &quot;,^~ ~^,,%#,,!,%0 &lt;%2/%3&gt;, [ansi(+purple,bob)])\n    YourName bob ^~--to die [0/1]--~^ is a mighty adventure ^~snarf! &lt;1/3&gt;~^\n    &gt; think parsestr(&quot;to die&quot; is a mighty adventure &quot;snarf!&quot;, --%0 %[%2/%3%]--\n        ,&quot;,^~ ~^,,&amp;[ansi(+orange,McDonald)],,!,%0 &lt;%2/%3&gt;,[ansi(+purple,bob)])\n    McDonald bob ^~--to die [0/1]--~^ is a mighty adventure ^~snarf! &lt;1/3&gt;~^\n  \n{ see 'help prsestr4' for examples on how to use this for an OOC command}\n\n</PRE>\n<A HREF=\"#parsestr2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#parsestr4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"parsestr4\"><H3>PARSESTR4</H3></A><PRE>\n  (CONTINUED)\n  Function: parsestr(&lt;string&gt;, &lt;eval&gt; [,&lt;delim&gt; [.&lt;output&gt; [,&lt;type&gt;]\n                       [,[&amp;]&lt;target&gt;] [,&lt;transchar&gt; [,&lt;endchar&gt; [,&lt;transeval&gt;]\n                       [,&lt;prefix&gt;]]]]])\n  \n  Avanced Examples for OOC:\n    &gt; &amp;OOC me=$ooc *:think [parsestr(%0,%0,&quot;,&quot;,,&amp;[ansi(hy,&lt;,hc,OOC,hy,&gt;)] %k)]\n    &gt; ooc :tests.\n    &lt;OOC&gt; YourName tests.\n    &gt; ooc ;'s test.\n    &lt;OOC&gt; YourName's test.\n    &gt; ooc &quot;testing\n    &lt;OOC&gt; YourName says, &quot;Testing&quot;\n    &gt; ooc testing\n    &lt;OOC&gt; YourName says, &quot;Testing&quot;\n    &gt; ooc &quot;I am testing&quot; *thinks vigeriously*\n    &lt;OOC&gt; YourName says, &quot;I am testing&quot; *thinks vigeriously*\n    &gt; ooc &quot;I am testing&quot; .. thinks.. &quot;At least I believe so&quot;\n    &lt;OOC&gt; YourName says, &quot;I am testing&quot; .. thinks.. &quot;At least I believe so&quot;\n    &gt; ooc &quot;I am testing&quot; .. thinks.. &quot;At least I believe so\n    &lt;OOC&gt; YourName says, &quot;I am testing&quot; .. thinks.. &quot;At least I believe so&quot;\n   \n  Note: It will auto-close double quotes if it detects a non-escaped odd count.\n        Also note the colorizations will be displayed appropiately.\n  \n  See Also: garble(), parse(), iter(), strmath(), spellnum()\n  \n</PRE>\n<A HREF=\"#parsestr3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pedit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pedit()\"><H3>PEDIT()</H3></A><PRE>\n  Function: pedit(&lt;string&gt;,&lt;from&gt;,&lt;to&gt;[,&lt;from&gt;,&lt;to&gt;,...])\n \n  This function edits &lt;string&gt;, replacing all occurrences of the substring\n  &lt;from&gt; with the string &lt;to&gt;.  If &lt;from&gt; is '$', then &lt;to&gt; is appended to\n  &lt;string&gt;, while if &lt;from&gt; is '^', then it is prepended.  You may specify\n  multiple 'froms' and 'to's in the string.  This is to mimic Penn's\n  edit() functionality.\n \n  Examples:\n    &gt; say pedit(This is a test,is,x)   \n    You say &quot;Thx x a test&quot;\n    &gt; say pedit(Atlantic,^,Trans)\n    You say &quot;TransAtlantic&quot;\n    &gt; say pedit(This is a test,is,was,was,were)\n    You say &quot;This were a test&quot;\n  \n  See Also: @edit, strip(), garble(), edit(), editansi(), chomp(), regedit()\n  \n</PRE>\n<A HREF=\"#parsestr4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pemit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pemit()\"><H3>PEMIT()</H3></A><PRE>\n  Function: pemit(&lt;object&gt; [&lt;object2&gt; ...],&lt;string&gt; [,&lt;key&gt;])\n  \n  The pemit() function is a side-effect for the @pemit/list command.  All\n  restrictions and permissions of that command follow this function.  The\n  SIDEFX flag is required to use pemit().\n  \n  You may specify an optional &lt;key&gt; of '1' if you wish to have ##\n  substituted for every target object in the list.  Keep in mind the '##'\n  is pre-processed like iter's ## would be and could be a security risk\n  if used improperly.  I'd strongly suggest filtering the target list\n  as dbref#'s to keep it safe.\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; @pemit/list me me=test\n  test\n  test\n  &gt; say pemit(me me,test)\n  test\n  test\n  You say &quot;&quot;\n  &gt; @eval pemit(#123,test ##)\t\t(assuming your dbref# is #123)\n  test #123\n  \n  See Also: @pemit, npemit(), SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#pedit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#penn_mail toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"penn_mail toggle\"><H3>PENN_MAIL TOGGLE</H3></A><PRE>\n  Toggle: PENN_MAIL\n  \n  When this toggle is set on the player, whenever that player sends\n  mail quickly (ie: mail[/send] playerlist=subject/target it will\n  require only a single '/' and not two '//' like RhostMUSH does\n  by default.  This is to help with PENN compatibility.\n  \n  When sending mail with mail/reply, mail, or mail/forward, the\n  BRANDY_MAIL toggle will take precidence.\n  \n  See Also: brandy_mail toggle, mail_stripreturn toggle\n  \n</PRE>\n<A HREF=\"#pemit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pfind()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pfind()\"><H3>PFIND()</H3></A><PRE>\n  Function: pfind(&lt;target&gt;)\n  \n  This function works similiar to pmatch, except it will return any valid \n  dbref# when a dbref# is entered.  This also does not accept *player.\n  \n  This is provided for compatibility purposes to other codebases.\n  \n  Example:\n    &gt; say pfind(Bob)\n    You say &quot;#1234&quot;\n  \n  See Also: num(), pmatch()\n  \n</PRE>\n<A HREF=\"#penn_mail toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pgrep()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pgrep()\"><H3>PGREP()</H3></A><PRE>\n  Function: pgrep(&lt;object&gt;, &lt;attr(s)&gt;, &lt;pattern&gt; [,&lt;type&gt; [,&lt;delim&gt; [,&lt;key&gt;]]])\n  \n  This function behaves just like the normal grep() function except it \n  transverses all parents for the grep that returns a list of any matching \n  attribute that matches the &lt;attr(s)&gt; that contain &lt;pattern&gt;.  The &lt;attr&gt; \n  may be wildcarded with a '*' or a '?' for multiple character matches and \n  single character matches respectively.  In addition, the pattern may also \n  be wildcarded.  You may specify an optional output delimiter.  \n  The valid types are:\n      0 - show just matched attributes (default)\n      1 - show the dbref# then matching attributes after it in sets\n      2 - show the attributes in a dbref#/attribute pattern.\n  \n  By default, grep assumes the pattern is always wildcarded.  You may specify\n  the key of '1' to disable assumped wildcarding and enforce literal wildcard\n  placement.\n    \n  Examples:\n    &gt; @va me=This is a test\n    &gt; @vb me=This is another test.\n    &gt; @vc me=Test Test Test whisooo!\n    &gt; say pgrep(me,v*,is)\n    You say &quot;VA VB VC&quot;\n    &gt; say pgrep(me,v*,is,,,1)\n    You say &quot;VA VB&quot;\n    &gt; say pgrep(me,v*,*is*)\n    You say &quot;VA VB VC&quot;\n    &gt; say pgrep(me,*,*)\n    You say &quot;VA VB VC&quot;\n    &gt; say pgrep(me,*,Bark?)\n    You say &quot;&quot;\n \n  See Also: grep(), regrep(), regrepi(), grab(), match(), lattr(), @grep\n \n</PRE>\n<A HREF=\"#pfind()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pi()\"><H3>PI()</H3></A><PRE>\n  Function: pi([&lt;arg&gt;])\n \n  Returns the value of the trigonometric constant pi to nine decimal places.\n  \n  If you specify an &lt;arg&gt; it takes that as the percision to the number of\n  decimal places you want.  The value must be greater than zero, and less\n  than the current maximum value specified as floating point precision.\n  \n  Please see:  @list options system \n   \n  Example:\n    &gt; say pi()\n    You say &quot;3.141562654&quot;\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()\n  \n</PRE>\n<A HREF=\"#pgrep()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pickrand()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pickrand()\"><H3>pickrand()</H3></A><PRE>\n  Function: randextract(&lt;string&gt;[, &lt;numwords&gt;, &lt;delim&gt;, &lt;type&gt;, &lt;output sep&gt;])\n  \n  The randextract() function is unique but somewhat similar to extract(). \n  The randextract() function takes &lt;numwords&gt; number of words from the string\n  &lt;string&gt; and returns those words in random order.  You may specify an \n  optional delimiter &lt;delim&gt; other than a space (the default).  You may also \n  specify what &lt;type&gt; of randextract() you wish to perform.  The following \n  types exist.  You may specify an optional output seperator else it uses\n  the same character as the delimiter.\n      L - Grab given number of words lineally from the first random selection\n      R - Grab &lt;numwords&gt; number of words but do not duplicate matches\n      D - Grab &lt;numwords&gt; number of words and allow duplicate matches\n  \n  Example:\n    &gt; say randextract(this is a test,3)\n    You say &quot;this test a&quot;\n    &gt; say randextract(this@is@a@test,3,@)\n    You say &quot;this@a@test&quot;\n    &gt; say randextract(this is a test,3,,L,*)\n    You say &quot;this*is*a&quot;\n    &gt; say randextract(this is a test,3,,R) (default)\n    You say &quot;this test a&quot;\n    &gt; say randextract(this is a test,3,,D)\n    You say &quot;this a this&quot;\n  \n  See Also: randpos(), randmatch(), extract(), extractword(), index(), rand()\n  \n</PRE>\n<A HREF=\"#pi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pid()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pid()\"><H3>PID()</H3></A><PRE>\n  Function: pid([&lt;display&gt; [,&lt;seperator&gt; [,&lt;type&gt; [,&lt;target&gt;]]])\n  \n  This function returns the queue process table based on various arguments.\n  \n  &lt;display&gt; is one of a bitwise mask of the following:\n    0    -  (default) show just the pids of all the processes\n    1    -  Show just the pids of all the processes\n    2    -  Show the owners of all the processes\n    4    -  Show the enactor of all the processes\n    8    -  Show the wait times of all the processes (semaphores have '0')\n    16   -  Show the STOP/RUNNING status of all the processes\n    32   -  Show the commands queued for all the processes.\n  \n  Adding the &lt;display&gt; values will return a combination of the values seperated\n  by the pipe (|) character.\n  \n  &lt;seperator&gt; is your output seperator that you wish between processes.  \n  Default is a space.\n  \n  &lt;type&gt; can be one of many types.\n    q    - show all queued (waited and semaphores) queued.  (default)\n    w    - show all wait jobs\n    s    - show all semaphore jobs\n    p    - show all player queue jobs (jobs currently being ran)\n    o    - show all object queue jobs (jobs currently being ran)\n  \n  &lt;target&gt; is an optional target to narrow down queue values.  The &lt;target&gt; \n  may be a player or a process ID (PID).  Default is everyone.\n  \n  {help pid2 for examples}\n\n</PRE>\n<A HREF=\"#pickrand()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pid2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pid2\"><H3>PID2</H3></A><PRE>\n  CONTINUED\n  Function: pid([&lt;display&gt; [,&lt;seperator&gt; [,&lt;type&gt; [,&lt;target&gt;]]])\n \n  Examples:\n    &gt; @ps/all \n    ----- Wait Queue -----\n    (PID: 227  )   [27]CRON - Myrddin's mushcron(#1474sI):@trigger me/cron\n    (PID: 224  )   [34]Weather Object (WO)(#1497VsIS[s]):@trigger me/TIME_LOOP\n    (PID: 195  )   [126]XP System(#2060VI):@trigger me/LOOP_XP\n    (PID: 196  )   [126]Umbra Code (UC)(#2642VIS[s]):@trigger me/LOOP_CLEANUP\n    ----- Semaphore Queue -----\n    (PID: 71   )   [#901]Tester(#901Pc&gt;Dp^UF&lt;[so]):@pemit me=zoot\n    (PID: 84   )   [#1234]Bob(#734P-ci&gt;WFO&lt;[UsO]):think foo\n    Totals: Player...0/0        Object...0/0        Wait...4/4  Semaphore...2/2\n    &gt; say pid()\n      You say &quot;227 224 195 196 71 84&quot;\n    &gt; say pid(2)\n      You say &quot;#12 #22 #12 #45 #45 #71&quot;\n    &gt; say pid(2,+)\n      You say &quot;#12+#22+#12+#45+#45+#71&quot;\n    &gt; say pid(8)\n      You say &quot;27 34 126 126 0 0&quot;\n    &gt; say pid(9)\n      You say &quot;227|27 224|34 195|126 196|126 71|0 84|0&quot;\n  \n  See Also: @ps, @halt, @wait\n  \n</PRE>\n<A HREF=\"#pid()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#player\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"player\"><H3>PLAYER</H3></A><PRE>\n  Type: PLAYER(P)  \n  \n  The PLAYER flag identifies you as a player. This flag cannot\n  be reset by any player, not even a Wizard (not, yet, anyway \n  *grin*).  It is used mainly by the mush code to identify your \n  commands, check for validity of commands or locks etc. Generally, \n  just pretend it isn't even there.\n  \n  See Also: @list, @name, FLAG LIST\n  \n</PRE>\n<A HREF=\"#pid2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#player information functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"player information functions\"><H3>player information functions</H3></A><PRE>\n  Function Lists: Player Information Functions\n    \n  bittype()     - Returns the highest privilege level an object has.\n  charin()      - Returns the total number of characters input for a player.\n  charout()     - Returns the total number of characters output to a player.\n  cmds()        - Returns the total number of commands entered for a player.\n  conn()        - Returns the total connection time for a player.\n  hasquota()    - Returns true if the object can afford specified quota cost.\n  idle()        - Returns the idle time of a player.\n  inprogram()   - Returns true if the player is in a @program.\n  ishidden()    - Returns true if a player is hidden.\n  lwho()        - Returns a list of dbrefs of connected players.\n  money()       - Returns how much money a player has.\n  moneyname()   - Returns the name used for money on the game.\n  port()        - Returns the port number of a connected player.\n  programmer()  - Returns the dbref of the enactor that runs player's @program\n  quota()       - Returns the total quota of a player.\n  totcmds()     - Returns the total commands entered by player since creation.\n\n</PRE>\n<A HREF=\"#player\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pmatch()\"><H3>PMATCH()</H3></A><PRE>\n  Function: pmatch(&lt;target&gt;)\n  \n  This function returns the dbref# of the matching player.  It returns '#-1'\n  if no player was found.\n  \n  You may specify a valid player dbref#, *player, or player.\n  \n  Example:\n    &gt; say %n %#\n    You say &quot;Bob #1234&quot;\n    &gt; say pmatch(bob)\n    You say &quot;#1234&quot;\n    &gt; say pmatch(#1234)\n    You say &quot;#1234&quot;\n    &gt; say pmatch(*bob)\n    You say &quot;#1234&quot;\n  \n  See Also: num(), pfind()\n  \n</PRE>\n<A HREF=\"#player information functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#port()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"port()\"><H3>PORT()</H3></A><PRE>\n  Function: port(&lt;user&gt;)\n  \n  Returns the ports a given user is on from most recent to least recent.\n  \n  Example:\n    &gt; say port( me )\n    You say &quot;12&quot;\n    &gt; say port( me ) &lt;if you're on twice&gt;\n    You say &quot;12 15&quot;\n  \n  See Also: idle(), conn(), lwho(), @selfboot\n  \n</PRE>\n<A HREF=\"#pmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pos()\"><H3>POS()</H3></A><PRE>\n  Function: pos(&lt;string1&gt;,&lt;string2&gt;[,&lt;type&gt;])\n   \n  This function returns the position that string1 begins in string2,\n  with the first position being 1.\n  If string1 is not in string2, then it returns #-1.\n  \n  You may optionally specify a &lt;type&gt; of '1' to tell pos() to match ANY\n  of the characters specified in &lt;string1&gt; and to return the first match. \n  \n  Example: \n    &gt; say pos(man,superman)\n    You say &quot;6&quot;\n    &gt; say pos(uman,superman,1)\n    You say &quot;2&quot;\n    &gt; say pos(nam,superman,1)\n    You say &quot;6&quot;\n  \n  See Also: totpos(), numpos(), randpos(), elementpos()\n  \n</PRE>\n<A HREF=\"#port()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pose\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pose\"><H3>pose</H3></A><PRE>\n  Command: pose[/&lt;switches&gt;] &lt;message&gt;\n  Displays &lt;message&gt; to everyone in your current room, preceded by your name\n  and optionally a space.  Example: the command 'pose jumps for joy' produces\n  '&lt;yourname&gt; jumps for joy'.\n  \n  No switches are available for the ':' or ';' shorthands.\n   \n  The following switches are available:\n     /default - (default) Put a space between your name and the message\n                (IE, display '&lt;name&gt; &lt;message&gt;').\n     /nospace - Don't put a space between your name and the message\n                (IE, display '&lt;name&gt;&lt;message&gt;').\n     /noansi   - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n \n  See Also: page, say, whisper, :, ;, &quot;\n  \n</PRE>\n<A HREF=\"#pos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#poss()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"poss()\"><H3>POSS()</H3></A><PRE>\n  Function: poss(&lt;object&gt;)\n \n  Returns the proper possessive pronoun (his, her, its, their) for referring\n  to &lt;object&gt;, based on the object's Sex attribute.  You must either control\n  or be near &lt;object&gt;.\n  \n  Example:\n    &gt; @sex me=male\n    Set.\n    &gt; say poss(me)\n    You say &quot;his&quot;\n    \n  See Also: SUBSTITUTIONS, obj(), subj(), aposs()\n  \n</PRE>\n<A HREF=\"#pose\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#power()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"power()\"><H3>POWER()</H3></A><PRE>\n  Function: power(&lt;number&gt;, &lt;power&gt;)\n \n  Returns the result of raising &lt;number&gt; to the &lt;power&gt;'th power.\n  &lt;number&gt; may not be negative.  &lt;number&gt; and &lt;power&gt; may be floating point\n  numbers, and a floating point result is returned.\n \n  Examples:\n    &gt; say power(2,3)\n    You say &quot;8&quot;\n    &gt; say power(9, 0.5)\n    You say &quot;3&quot;\n    &gt; say power(100,pi())\n    You say &quot;1919487.587204&quot;\n    &gt; say power(5, 0)\n    You say &quot;1&quot;\n    &gt; say power(0, 0)\n    You say &quot;1&quot;\n    &gt; say power(2,-3)\n    You say &quot;0.125&quot;\n    &gt; say power(-2,3)\n    You say &quot;#-1 POWER OF NEGATIVE&quot;\n  \n  See Also: exp(), ln(), log(), sqrt(), power10()\n  \n</PRE>\n<A HREF=\"#poss()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#power10()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"power10()\"><H3>POWER10()</H3></A><PRE>\n  Function: power10(&lt;factor&gt;)\n  \n  Returns the result of raising 10 to &lt;factor&gt; number of times to the\n  10th power.  \n  \n  Examples:\n    &gt; say power10(2)\n    You say &quot;100&quot;\n    &gt; say power10(5)\n    You say &quot;100000&quot;\n  \n  See Also: power(), mul(), div()\n  \n</PRE>\n<A HREF=\"#power()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf codelist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf codelist\"><H3>PRINTF CODELIST</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  The following codelists are available for printf.  The syntax of\n  a codelist format is in the form:  $&lt;code&gt;&lt;value&gt;s.  The '$' specifies\n  that a printf-recognized format is to be used.  the 's' specifies that\n  the string in the argument is to be inserted at that location.\n  \n  Valid format strings: (syntax: $&lt;code&gt;&lt;value&gt;s)\n      Key Fields:\n         $ - specifies to tell printf() to start/initiate the format.\n         s - specifies the location of a string substitution for formatting.\n      Code Fields: \n         ! - do not display value if null\n         - - left justify (right is default)\n         ^ - center justify\n         _ - stretch justify\n         + - do not cut value if exceed value (default is cut off)\n         &amp; - process carrage returns and keep in same column field.  This\n             will break up lines based on carrage returns (%r) and keep\n             formatted into the same column specified in the format.\n         | - automatically format the text and insert carrage returns\n             at the specified padding field.  This does auto wrapping\n             like the '&amp;' option without the need for carrage returns.\n         &quot; - When used in junction with '|' it will try to split columns\n             on the first whitespace instead of always at width.\n         ' - If specified on a field, and that column is empty, the \n             column to the RIGHT is shifted to the LEFT.  All formatting\n             remains the same for the original columns.\n         ` - If specified on a field, and that column is empty, the\n             column to the LEFT is shifted to the RIGHT.  All formatting\n             remains the same for the original columns.\n         : - will specify filler characters for what is between the ::'s.\n             If the string starts with '!', any blank lines will have a\n             space filler.  You must specify two ':'s for begining/end tags.\n               examples: :.:  -- fill with a single '.'\n                         :!.: -- fill with a single '.' on non-blank lines.\n                         :[ansi(hg,.,hb,.)]: -- fill with multi-color.\n         / - The numerical value specified between /&lt;number&gt;/ will be used\n             as a cut-off value when using the '|' wrap option.  \n               examples: /10/ -- when using '|' cut off after 10 characters.\n             Valid values: 0-3998 (0 is unlimited)\n      Value fields:\n         1-3000 - format value to padd\n         0 - if prepending a number, tells it to padd 0's.\n  \n  Note: The ` and ' code fields won't work on single line columns.\n   \n  See Also: center(), just(), rjust(), rjc(), ljc(), wrap(), columns()\n  \n</PRE>\n<A HREF=\"#power10()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf examples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf examples\"><H3>PRINTF EXAMPLES</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples:\n    &gt;@emit printf($s,simple test)\n    simple test\n   \n    &gt;@emit printf(this is a test: |$-15s|,test 1 2 3)\n    this is a test: |test 1 2 3     |\n  \n    &gt;@emit printf(this is a test: |$&amp;-15s|,test %r1 %r2 %r3)\n    this is a test: |test           |\n                     1\n                     2\n                     3\n  \n    &gt;@emit printf(|$-12s|$12s|$^12s$&amp;14s$_12s|,a b c, d e f, g h i, \n           wrap(lnum(20),12, l, |, |), j k l)\n    |a b c       |       d e f|   g h i    |0 1 2 3 4 5 |j     k    l|\n                                           |6 7 8 9 10  |\n                                           |11 12 13 14 |\n                                           |15 16 17 18 |\n                                           |19          |\n  \n{ 'help printf examples2' for more examples (that mimic penn's align) }\n\n</PRE>\n<A HREF=\"#printf codelist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf examples2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf examples2\"><H3>PRINTF EXAMPLES2</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples: (continued)\n    &gt; &amp;line me=[printf(\\($1s\\) $-10|s $s,get(%0/sex),name(%0),name(loc(%0)))]\n    &gt; th iter(lwho(),u(line,##),%b,%r)\n      (M) Walker     Tree\n      (M) Ashen-Shug Apartment 306\n          ar\n      (F) Jane Doe   Nowhere\n  \n    &gt; &amp;line me=[printf(\\($1s\\) $-10s $s,get(%0/sex),name(%0),name(loc(%0)))]\n    &gt; th iter(lwho(),u(line,##),%b,%r)\n      (M) Walker     Tree\n      (M) Ashen-Shug Apartment 306\n      (F) Jane Doe   Nowhere\n  \n    &gt; think printf($15:x:sx$-60:x:s,Walker,Staff &amp; Developer)\n    xxxxxxxxxWalkerxStaff &amp; Developerxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  \n    &gt; think printf($15:x:sx$s,Walker,Staff &amp; Developer)\n    xxxxxxxxxWalkerxStaff &amp; Developer\n  \n{ 'help printf examples3' for more examples (that mimic penn's align) }\n  'help printf penn2' will show the same file\n\n</PRE>\n<A HREF=\"#printf examples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf examples3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf examples3\"><H3>PRINTF EXAMPLES3</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples: (continued)\n    &gt; &amp;haiku me = Alignment function,%rIt justifies your writing,%rBut the\n                  words still suck.%rLuke\n    &gt; think printf($&amp;1:+:s$&amp;^40s$1&amp;:+:s,%r,\n                   [repeat(-,40)]%r[u(haiku)]%r[repeat(-,40)],%r)\n    +----------------------------------------+\n    +          Alignment function,           +\n    +       It justifies your writing,       +\n    +       But the words still suck.        +\n    +                  Luke                  +\n    +----------------------------------------+\n  \n    &gt; &amp;dropcap me=%b_______%r|__%b%b%b__|%r%b%b%b|%b|%r%b%b%b|_|\n    &gt; &amp;story me=%r'was the night before Christmas, when all through the house%r\n                Not a creature was stirring, not even a mouse.%r\n                The stockings were hung by the chimney with care,%r\n                In hopes that St Nicholas soon would be there.\n    &gt; @emit printf($&amp;-9's$&amp;-68s,ansi(ch,u(dropcap)),u(story))\n    Note: The large 'T' will be in highlighted cyan.\n     _______                                                                \n    |__   __|'was the night before Christmas, when all through the house   \n       | |   Not a creature was stirring, not even a mouse.               \n       |_|   The stockings were hung by the chimney with care,               \n    In hopes that St Nicholas soon would be there.    \n  \n{ 'help printf examples4' for more examples }\n  \n</PRE>\n<A HREF=\"#printf examples2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf examples4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf examples4\"><H3>PRINTF EXAMPLES4</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples: (continued)\n   &gt; @emit printf($1&amp;s$:[ansi(+purple,+,hb,.,g,-,+orange,`,+indianred,~)]:&amp;_50s\n                  $1&amp;s,ansi(+pink,@%r@%r@),ansi(hu+red,A B C 1 2 3%r1),\n                  ansi(+pink,@%r@%r@))\n  \n    @A.-`~+.-`~B.-`~+.-`~C.-`~+.-`~1.-`~+.-`~2.-`~+.-`3@\n    @+.-`~+.-`~+.-`~+.-`~+.-`1+.-`~+.-`~+.-`~+.-`~+.-`~@\n    @+.-`~+.-`~+.-`~+.-`~+.-`~+.-`~+.-`~+.-`~+.-`~+.-`~@\n  \n    Note: The '@' on the outside are pink.\n          The '+' are purple.\n          The '.' are blue highlight.\n          The '-' are green.\n          The '`' are orange.\n          The '~' are indian red.\n          The 'A B C 1 2 3' and the '1' are justified across 50 characters.\n              -- They are also underscored and highlighted red.\n              -- Padding is aligned properly.\n  \n{ 'help printf examples5' for more examples }\n  \n</PRE>\n<A HREF=\"#printf examples3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf examples5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf examples5\"><H3>PRINTF EXAMPLES5</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples: (continued)\n    # Testing line wrap split on spacing\n    &gt; @emit printf($&quot;:.:-30|s,testing padding testing padding testing \n                   padding testing padding)\n    testing padding testing ......\n    padding testing padding ......\n    testing padding...............\n  \n    # Testing raw line wrapping\n    &gt; @emit printf($:.:-30|s,testing padding testing padding testing \n                   padding testing padding)\n    testing padding testing paddin\n    g testing padding testing padd\n    ing...........................\n  \n    # Testing borders around wrapped input\n    &gt; @emit printf($&amp;:+:1s$-20|&quot;s$&amp;:+:1s,%r,this is a test a b c. \n                   this is a test a b c.  this is a test a b c.,%r)\n    +this is a test a b  +\n    +c. this is a test a +\n    +b c. this is a test +\n    +a b c.              +\n   \n  Note: Notice that it keeps track of all padding in the original\n        string and will not remove the spaces (as intended).  \n  \n        Also notice how with the borders, it automatically keeps expanding \n        out as long as there's other columns expanding.  This behavior can \n        be omitted with a '!' as first filler char. \n  \n{ 'help printf examples6' for a multi-border multi-line complex example } \n \n</PRE>\n<A HREF=\"#printf examples4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf examples6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf examples6\"><H3>PRINTF EXAMPLES6</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Advanced Example: \n    &gt;  @emit [ansi(hr,+[repeat(-,20)]+)]%b[ansi(hb,+[repeat(-,20)]+)]%b\n             [ansi(hg,+[repeat(-,20)]+)]%r[printf(\n              $&amp;:[ansi(hr,|)]:1s$-20|&quot;s$&amp;:[ansi(hr,|)]:1s%b\n              $&amp;:[ansi(hb,|)]:1s$-20|&quot;s$&amp;:[ansi(hb,|)]:1s%b\n              $&amp;:[ansi(hg,|)]:1s$-20|&quot;s$&amp;:[ansi(hg,|)]:1s,\n              %r,testing testing testing [ansi(hy, yellow code here)] \n              testing,%r,%r,more testing yet again yup yup with a very%b\n              very very very very long line. So very long of a line. Yes%b \n              it is very long.,%r,%r,final test,%r)]%r\n              [ansi(hr,+[repeat(-,20)]+)]%b[ansi(hb,+[repeat(-,20)]+)]%b\n              [ansi(hg,+[repeat(-,20)]+)]\n   \n  +--------------------+ +--------------------+ +--------------------+\n  |testing testing     | |more testing yet    | |final test          |\n  |testing yellow code | |again yup yup with  | |                    |\n  |here testing        | |a very very very    | |                    |\n  |                    | |very very long      | |                    |\n  |                    | |line. So very long  | |                    |\n  |                    | |of a line. Yes it   | |                    |\n  |                    | |is very long.       | |                    |\n  +--------------------+ +--------------------+ +--------------------+\n  \n  Note:  The first box is red, the second is blue, the third is green.\n   \n  See Also: center(), just(), rjust(), rjc(), ljc(), wrap(), columns()\n      \n</PRE>\n<A HREF=\"#printf examples5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf penn\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf penn\"><H3>PRINTF PENN</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples: (continued)\n    &gt; &amp;line me=[printf(\\($1s\\) $-10|s $s,get(%0/sex),name(%0),name(loc(%0)))]\n    &gt; th iter(lwho(),u(line,##),%b,%r)\n      (M) Walker     Tree\n      (M) Ashen-Shug Apartment 306\n          ar\n      (F) Jane Doe   Nowhere\n  \n    &gt; &amp;line me=[printf(\\($1s\\) $-10s $s,get(%0/sex),name(%0),name(loc(%0)))]\n    &gt; th iter(lwho(),u(line,##),%b,%r)\n      (M) Walker     Tree\n      (M) Ashen-Shug Apartment 306\n      (F) Jane Doe   Nowhere\n  \n    &gt; think printf($15:x:sx$-60:x:s,Walker,Staff &amp; Developer)\n    xxxxxxxxxWalkerxStaff &amp; Developerxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  \n    &gt; think printf($15:x:sx$s,Walker,Staff &amp; Developer)\n    xxxxxxxxxWalkerxStaff &amp; Developer\n  \n{ 'help printf examples3' for more examples (that mimic penn's align) }\n  'help printf penn2' will show the same file\n\n</PRE>\n<A HREF=\"#printf examples6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf penn2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf penn2\"><H3>PRINTF PENN2</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  Examples: (continued)\n    &gt; &amp;haiku me = Alignment function,%rIt justifies your writing,%rBut the\n                  words still suck.%rLuke\n    &gt; think printf($&amp;1:+:s$&amp;^40s$1&amp;:+:s,%r,\n                   [repeat(-,40)]%r[u(haiku)]%r[repeat(-,40)],%r)\n    +----------------------------------------+\n    +          Alignment function,           +\n    +       It justifies your writing,       +\n    +       But the words still suck.        +\n    +                  Luke                  +\n    +----------------------------------------+\n  \n    &gt; &amp;dropcap me=%b_______%r|__%b%b%b__|%r%b%b%b|%b|%r%b%b%b|_|\n    &gt; &amp;story me=%r'was the night before Christmas, when all through the house%r\n                Not a creature was stirring, not even a mouse.%r\n                The stockings were hung by the chimney with care,%r\n                In hopes that St Nicholas soon would be there.\n    &gt; @emit printf($&amp;-9's$&amp;-68s,ansi(ch,u(dropcap)),u(story))\n    Note: The large 'T' will be in highlighted cyan.\n     _______                                                                \n    |__   __|'was the night before Christmas, when all through the house   \n       | |   Not a creature was stirring, not even a mouse.               \n       |_|   The stockings were hung by the chimney with care,               \n    In hopes that St Nicholas soon would be there.    \n  \n{ 'help printf examples4' for more examples }\n  \n</PRE>\n<A HREF=\"#printf penn\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf syntax \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf syntax \"><H3>PRINTF SYNTAX </H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  The printf function requires the following syntax.  It requires the start\n  of a formatted string with a '$' and the end of a formatted string with\n  an 's' that tells printf that it will substitute that with an argument.\n  \n  Note: The syntax always must start with a '$' and end with a 's'.\n  \n  The order of all the various formatting fields (including the number\n  used for padding) may be in any order.\n  \n  Syntax examples:\n      printf($10s $10s $10s,arg1,arg2,arg3) # padd 10, right just\n      printf($10s,arg1)                     # padd 10, right just\n      printf($10s boo $10s, arg1, arg2)     # padd 10, right just\n      printf($-10s boo $10s, arg1, arg2)    # padd 10, left just\n      printf($10^s boo $10s, arg1, arg2)    # padd 10, center just\n      printf($10&amp;-s boo $10s, arg1, arg2)   # padd 10, left just, CR wrap\n      printf($|10-s boo $10s, arg1, arg2)   # padd 10, left just, LN wrap\n      printf($|10-&quot;s boo $10s, arg1, arg2)  # padd 10, left just, SP LN wrap\n      printf($10:+:s, arg1, arg2)           # padd 10, right just, padd with +\n  \n  CR -- Carrage Return, LN - Line, SP - Space\n   \n  See Also: center(), just(), rjust(), rjc(), ljc(), wrap(), columns()\n\n</PRE>\n<A HREF=\"#printf penn2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#printf()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"printf()\"><H3>PRINTF()</H3></A><PRE>\n  Function: printf(&lt;format string&gt;,&lt;arg1&gt; [,&lt;arg2&gt;, ..., &lt;argN&gt;])\n  \n  The printf() function is used to format a string by using substitutions\n  with the convenience of centering, justifying, and wrapping the text\n  based on various parameters.\n  \n  ALL AVAILABLE CODES:  help printf codelist  (very handy!)\n  FORMAT SYNTAX:        help printf syntax\n  EXAMPLES:             help printf examples\n                        help printf penn      (for penn align-like examples)\n  \n  See Also: center(), just(), rjust(), rjc(), ljc(), wrap(), columns(), \n            wrapcolumns(), array()\n\n</PRE>\n<A HREF=\"#printf syntax \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#private\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"private\"><H3>PRIVATE</H3></A><PRE>\n  Flag: PRIVATE([P])  \n  \n  The private flag when set on EXITS makes them so that they\n  are not inherited.  In other words, if you wanted to parent one room\n  to another room, but didn't want a given exit to be inherited with\n  the room and it's code, you would set the exit PRIVATE and it no longer\n  would be inherited to the room's children.\n  \n  This flag, when set on a wizard, will snuff the special output of\n  non-listening items arriving and leaving around them.\n   \n  See Also: @parent, @open\n  \n</PRE>\n<A HREF=\"#printf()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#privatize()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"privatize()\"><H3>PRIVATIZE()</H3></A><PRE>\n  Function: privatize(&lt;value&gt;)\n  \n  This function takes two values.  1 to enable or 0 to disable (default).\n  When enabled, any function call that is using localization for registers,\n  such as localize(), ulocal(), ueval(), uzfun(), etc, will be initialized\n  to a null (empty string) instead of housing the contents that was passed\n  to it (which is the default).  Keep in mind, this only initializes the\n  localized values, and once the localization is finished, the values are\n  returned to their previous value, as how localization is intended.\n  \n  The Values allowed are:\n    1 - Toggle on the feature to initialize to null all registers (%q0-z)\n        that are used in localized functions (localize(), ulocal(), etc)\n    0 - Toggle off the feature to initialize to null registers (default).\n  \n  Example:\n    &gt; @va me=(before R0: [r(0)])[setq(0,internal)] --My R0:[r(0)]--\n    Set.\n    &gt; say [setq(0,external)][r(0)][u(va)][r(0)]\n    You say &quot;external--(before R0: external) My R0:internal--internal&quot;\n    &gt; say [setq(0,external)][r(0)][localize(u(va))][r(0)]\n    You say &quot;external--(before R0: external) My R0:internal--external&quot;\n    &gt; say [privatize(1)][setq(0,external)][r(0)][localize(u(va))][r(0)]\n    You say &quot;external--(before R0: ) My R0:internal--external&quot;\n  \n  See Also: pushregs(), ulocal(), zfunlocal(), eval(), localize(), @lfunction\n\n</PRE>\n<A HREF=\"#private\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#programmer()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"programmer()\"><H3>PROGRAMMER()</H3></A><PRE>\n  Function: programmer(&lt;player&gt;)\n  Returns the dbref# of the enactor who placed the target player inside a\n  program.  If the target player is not in a program, or if you do not\n  have access to check the information, it returns '#-1'.\n  \n  Examples:\n    &gt; say %#\n    You say &quot;#123&quot;\n    &gt; say inprogram(me)\n    You say &quot;0&quot;\n    &gt; @va me=@emit You entered %0!\n    Set.\n    &gt; @program me=me/va:Start Program...\n    Start Program...\n    &gt; |say inprogram(me)\n    You say &quot;1&quot;\n    &gt; |say programmer(me)\n    You say &quot;#123&quot;\n    &gt; |@quitprogram\n    @program cleared.\n  \n  See Also: @program, @quitprogram, programmer()\n  \n</PRE>\n<A HREF=\"#privatize()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ptimefmt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ptimefmt()\"><H3>PTIMEFMT()</H3></A><PRE>\n  ptimefmt(&lt;format&gt;[, &lt;secs&gt;])\n   \n  This function takes a format and a time in seconds (Or the current time)\n  and returns the format with escape sequences in it expanded to the\n  proper values based on the time, relative to the host the server is\n  on.\n   \n  A list of all codes is in HELP PTIMEFMT2\n   \n  Example:\n  &gt; think ptimefmt($A\\, the $dth day of $B.)\n    Monday, the 17th day of July.\n  \n  This function is intended to mimic Penn's timefmt() function.\n  \n</PRE>\n<A HREF=\"#programmer()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ptimefmt2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ptimefmt2\"><H3>PTIMEFMT2</H3></A><PRE>\n  All escape codes start with a $. To get a literal $, use $$.\n  Any unrecognized codes or other text will be returned unchanged.\n  Some servers might support more codes than the ones listed below.\n   \n  $a - Abbreviated weekday name  $p - AM/PM  ($P may also work)\n  $A - Full weekday name         $S - Seconds after the minute\n  $b - Abbreviated month name    $U - Week of the year from 1rst Sunday\n  $B - Full month name           $w - Day of the week. 0 = Sunday\n  $c - Date and time             $W - Week of the year from 1rst Monday\n  $d - Day of the month          $x - Date\n  $H - Hour of the 24-hour day   $X - Time\n  $I - Hour of the 12-hour day   $y - Two-digit year\n  $j - Day of the year           $Y - Four-digit year\n  $m - Month of the year         $Z - Time zone\n  $M - Minutes after the hour    $$ - $ character.\n  \n  See Also: timefmt()\n  \n</PRE>\n<A HREF=\"#ptimefmt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#puppet\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"puppet\"><H3>PUPPET</H3></A><PRE>\n  Flag: PUPPET(p)   \n  \n  Causes an object to grow eyes and ears, and relay all it sees \n  and hears to its owner.  \n  \n  See Also: @force, PUPPETS, #\n  \n</PRE>\n<A HREF=\"#ptimefmt2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#puppets\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"puppets\"><H3>PUPPETS</H3></A><PRE>\n  Topic: PUPPETS\n \n  An object is made into a puppet by doing '@set &lt;object&gt;=puppet', once an\n  object is a puppet it will relay all that it sees and hears to its master.\n  All objects created by a puppet are owned by its master, when puppets spend\n  or earn money, they use their master's money supply.  In order to prevent\n  puppets from screwing up puzzles, objects may have the KEY flag set, this\n  will prevent puppets from picking the object up. A puppet may be commanded\n  by its master by '@force &lt;object&gt;=command', or by the shorthand version, \n  '#&lt;number of puppet&gt; command'.  The puppet flag is handy for debugging, as\n  it allows you to see the result messages your object generates.\n \n  Example:       \n  @force fred=&quot;hi there.  -or-  #4342 &quot;hi there.\n  \n  See Also: VERBOSE, MONITOR, AUDIBLE, @listen, @ahear\n  \n</PRE>\n<A HREF=\"#puppet\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#pushregs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"pushregs()\"><H3>PUSHREGS()</H3></A><PRE>\n  Function: pushregs(&lt;value(s)&gt;)\n  \n  This function will preserve then restore setq() registers for the life\n  of the command in question.  Keep in mind, if you attempt to restore\n  the registers before saving them, you will overwrite all the registers\n  with blanks (or nulls).  There are two options you can use:\n\n  Option #1:\n    Toggle of '1' saves ALL the registers, while a toggle of '0' restores \n    ALL the registers.\n  \n  Option #2:\n    +&lt;register&gt; will save the specified register (letter/number only).\n    -&lt;register&gt; will restore the specified register (letter/number only).\n    Note: you may specify any number of registers and use +/- together.\n  \n  Examples: (Option #1)\n    &gt; say [setq(0,one)]-[r(0)]-[setq(0,two)]-[r(0)]-\n    You say &quot;-one--two-&quot;\n    &gt; say [setq(0,one)]-[r(0)]-[pushregs(1)][setq(0,two)]-[pushregs(0)][r(0)]-\n    You say &quot;-one--one-&quot;\n  \n  Examples: (Option #2)\n    &gt; say [setq(0,one)][setq(1,two)]-%q0%q1-[pushregs(+0)][setq(0,xxx)]\n          [setq(1,abc)]-%q0%q1-[pushregs(-0)]--%q0%q1--\n    You say &quot;-onetwo--xxxabc--oneabc-\n  \n  Note:  You may use nameq() to get the letter/number of a label.\n  \n  See Also: setq(), setr(), nameq(), r(), substitutions\n  \n</PRE>\n<A HREF=\"#puppets\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#quickreference\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"quickreference\"><H3>QUICKREFERENCE</H3></A><PRE>\n  This space reserved.\n  \n</PRE>\n<A HREF=\"#pushregs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#quiet\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"quiet\"><H3>QUIET</H3></A><PRE>\n  Flag: QUIET(Q)  \n  \n  This flag when set on yourself prevents you from hearing \n  the 'set' or 'triggered' messages from any objects you own.  When \n  set on an object, only that object will not relay its messages.\n  \n  See Also: @set, &amp;\n  \n</PRE>\n<A HREF=\"#quickreference\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#quit \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"quit \"><H3>quit </H3></A><PRE>\n  Command: QUIT \n  Logs you out and disconnects you from the game. Must be in all upper case.\n  \n  See Also: LOGOUT\n  \n</PRE>\n<A HREF=\"#quiet\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#quota alternate2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"quota alternate2\"><H3>quota alternate2</H3></A><PRE>\n  Command: @quota[[/&lt;switches&gt;] [&lt;arguments&gt;]] [&lt;player&gt;] [=&lt;value&gt;]\n  \n  /all [me]        - This is an optional switch to display all quota areas you\n                     have.\n  /room [me]       - This displays your room quota.\n  /general [me]    - This displays your general quota.\n  /thing [me]      - This displays your thing quota.\n  /exit [me]       - This displays your exit quota.\n  /player [me]     - This displays your player quota.\n  /clear [me]      - used in junction with take. This clears (resets)\n                     the given status. \n  \n  To see how to set quota in alternate system, type 'help quota alternate3'\n  \n  See Also: @create, @dig, @open, @quota standard, @quota\n  \n</PRE>\n<A HREF=\"#quit \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#quota alternate3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"quota alternate3\"><H3>quota alternate3</H3></A><PRE>\n  Command: @quota[/&lt;switches&gt;] &lt;player&gt;=&lt;value&gt;\n \n  This will set the specific quota for players on the specific values.\n  The following switches exist:\n  \n  /general         - This shows (or sets) the GENERAL quota for a player.\n  /thing           - This shows (or sets) the THING quota for a player.\n  /player          - This shows (or sets) the PLAYER quota for a player.\n  /exit            - This shows (or sets) the EXIT quota for a player.\n  /all             - This shows (or sets) ALL quota for a player.\n  /set             - This specifies you wish to set/reset a player's quota.\n \n  Please note that if you do not specify the /set but give a value for quota,\n  the /set is assumed and established.  You also may not set above the MAX \n  quota of that player. (It will default to the max value if you try to \n  exceed it).  If the player needs more MAX quota, refer to a royalty or \n  higher.\n  \n</PRE>\n<A HREF=\"#quota alternate2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#quota()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"quota()\"><H3>quota()</H3></A><PRE>\n  Function: quota(&lt;player&gt;)\n  \n  The quota() function is used to see the total quota a given player has.\n  It returns the same stats one would see with the @quota command.\n  This works with both types of QUOTA systems.\n  \n  Example:\n    &gt; quota(me)\n    You say &quot;40 35 5&quot;\n  \n  See Also: @quota, hasquota()\n  \n</PRE>\n<A HREF=\"#quota alternate3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#r()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"r()\"><H3>R()</H3></A><PRE>\n  Function: r(&lt;number&gt;|&lt;label&gt;)\n   \n  The r() function is used to access &quot;local registers&quot;, and returns\n  the contents of the specified register. There are ten such registers,\n  numbered 0 through 9.  The local registers are normally cleared at the\n  start of each command, but are preserved across the commands that compose\n  an actionlist, as well as commands that directly trigger actionlists, such\n  as @switch, @trigger, and @dolist.  A macro for r() is also %q that some\n  people prefer.  Example:  r(0) would be the same as %q0\n  \n  If enhanced setq has been enabled at compiletime, you may use a-z as well.\n  Enabling this in the code can cause some excess memory usage.\n  \n  You may substitute &lt;number&gt; for &lt;label&gt; if you have one assigned for the\n  register.  For %q to understand labels, you must use %q&lt;label&gt;.  The &lt;&gt;'s\n  are required.\n   \n  Example:\n    &gt; say [setq(0,testing)][r(0)]\n    You say &quot;testing&quot;\n    &gt; say [setq(0,testing,bob)][setq(bob,testing2)][r(bob)]\n    You say &quot;testing2&quot;\n    &gt; say [setq(0,testing,bob)][setq(bob,testing2)]%q&lt;bob&gt;\n    You say &quot;testing2&quot;\n   \n  See Also: setq(), setr(), nameq(), inc(), dec()\n  \n</PRE>\n<A HREF=\"#quota()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#race()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"race()\"><H3>RACE()</H3></A><PRE>\n  Function: race(&lt;user&gt;)\n  \n  Returns the race the given user currently has.  This works similar to\n  get(&lt;user&gt;/race)\n  \n  Example:\n    &gt; say race(me)\n    You say &quot;Human&quot;\n  \n  See Also: get(), u(), u2(), guild()\n  \n</PRE>\n<A HREF=\"#r()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rand()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rand()\"><H3>RAND()</H3></A><PRE>\n  Function: rand(&lt;num&gt;[,,&lt;boolean&gt;])\n            rand(&lt;min&gt;,&lt;max&gt;[,&lt;boolean&gt;])\n \n  Rand returns an integer between 0 and num-1.\n  \n  You may optionally specify a min/max pair of where the random number \n  will range between.\n  \n  If you specify the boolean, it will return the value as a double.  \n  Max double is 100 digits.\n \n  Example:\n    &gt; say rand(10)\n    You say &quot;6&quot;\n    &gt; say rand(10)\n    You say &quot;1&quot;\n    &gt; say rand(10)\n    You say &quot;4&quot;\n    &gt; say rand(10)\n    You say &quot;9&quot;\n    &gt; say rand(10)\n    You say &quot;1&quot;\n  \n  See Also: randextract(), randpos(), randmatch()\n  \n</PRE>\n<A HREF=\"#race()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#randextract()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"randextract()\"><H3>randextract()</H3></A><PRE>\n  Function: randextract(&lt;string&gt;[, &lt;numwords&gt;, &lt;delim&gt;, &lt;type&gt;, &lt;output sep&gt;])\n  \n  The randextract() function is unique but somewhat similar to extract(). \n  The randextract() function takes &lt;numwords&gt; number of words from the string\n  &lt;string&gt; and returns those words in random order.  You may specify an \n  optional delimiter &lt;delim&gt; other than a space (the default).  You may also \n  specify what &lt;type&gt; of randextract() you wish to perform.  The following \n  types exist.  You may specify an optional output seperator else it uses\n  the same character as the delimiter.\n      L - Grab given number of words lineally from the first random selection\n      R - Grab &lt;numwords&gt; number of words but do not duplicate matches\n      D - Grab &lt;numwords&gt; number of words and allow duplicate matches\n  \n  Example:\n    &gt; say randextract(this is a test,3)\n    You say &quot;this test a&quot;\n    &gt; say randextract(this@is@a@test,3,@)\n    You say &quot;this@a@test&quot;\n    &gt; say randextract(this is a test,3,,L,*)\n    You say &quot;this*is*a&quot;\n    &gt; say randextract(this is a test,3,,R) (default)\n    You say &quot;this test a&quot;\n    &gt; say randextract(this is a test,3,,D)\n    You say &quot;this a this&quot;\n  \n  See Also: randpos(), randmatch(), extract(), extractword(), index(), rand()\n  \n</PRE>\n<A HREF=\"#rand()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#randmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"randmatch()\"><H3>randmatch()</H3></A><PRE>\n  Function: randmatch(&lt;string&gt;, &lt;match&gt;[, &lt;delim&gt;])\n  \n  This function resembles the totmatch() function except the output is totally\n  randomized.  It returns a random list of every word match in string &lt;string&gt;\n  from match &lt;match&gt;.  The match can have wildcards and an optional delimiter\n  other than space may be specified.\n  \n  Example:\n    &gt; say randmatch(this test this this test,*this*)\n    You say &quot;3 1 4&quot;\n    &gt; say randmatch(this test this this test,*this*)\n    You say &quot;4 3 1&quot;\n    &gt; say randmatch(this@test@this@this@test,*this*,@)\n    You say &quot;3 4 1&quot;\n  \n  See Also: match(), totmatch(), nummatch(), randpos(), randextract()\n  \n</PRE>\n<A HREF=\"#randextract()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#randpos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"randpos()\"><H3>randpos()</H3></A><PRE>\n  Function: randpos(&lt;match&gt;,&lt;string&gt;)\n  \n  This functions works like the totpos() function except the output is totally\n  randomized.  It returns a random list of every position in the string\n  &lt;string&gt; where pattern &lt;match&gt; is found.\n  \n  Example:\n    &gt; say randpos(i,this is weird)\n    You say &quot;6 3 11&quot;\n    &gt; say randpos(i,this is weird)\n    You say &quot;11 6 3&quot;\n    &gt; say randpos(z,this is weird)\n    You say &quot;&quot;\n  \n  See Also: pos(), totpos(), numpos(), randmatch(), randextract()\n  \n</PRE>\n<A HREF=\"#randmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#read\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"read\"><H3>read</H3></A><PRE>\n  Command: read [&lt;object&gt;]\n  Displays the description of &lt;object&gt;, or the room you're in if you don't\n  specify an object.  Specifying object as &lt;name&gt; or #&lt;dbref&gt; or 'me' or\n  'here' is legal.  You can also use look to look at objects held by other\n  people, just use 'read &lt;person&gt;'s &lt;object&gt;'.\n \n  You may use the /outside switch to look at the location of your current\n  location (useful if you are inside a vehicle or other object).  You may\n  also look at other objects in the 'outer' location, but you may not\n  use the possessive form with the /outside switch (IE: &quot;read/outside\n  &lt;person&gt;'s &lt;object&gt;&quot; won't work).\n  \n  'look' is the same as 'read'.\n  \n  See Also: examine, touch, taste, listen, smell\n  \n</PRE>\n<A HREF=\"#randpos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reality level functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reality level functions\"><H3>reality level functions</H3></A><PRE>\n  Function Lists: Reality Level Functions\n    \n  chkreality()  - Returns 1 if victim can see a target in a specified reality.\n  hasrxlevel()  - Returns true if a target has the specified rxlevel.\n  hastxlevel()  - Returns true if a target has the specified txlevel.\n  listrlevels() - Lists available reality levels in a space-separated list.\n  rxlevel()     - Returns a space-separated list of target's rxlevels.\n  txlevel()     - Returns a space-separated list of target's txlevels.\n\n</PRE>\n<A HREF=\"#read\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reality levels\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reality levels\"><H3>REALITY LEVELS</H3></A><PRE>\n  RhostMUSH supports reality levels.  To see if the rhostmush you are on has\n  them currently enabled, please check @list options.  Reality levels are\n  useful for multiple views for permissions.   This is exceptionally handy\n  when dealing with role play environments where various races, guilds, or\n  special beings require special views, looks, descriptions, or other\n  permission levels.  An example would be the World of Darkness umbra.\n  \n</PRE>\n<A HREF=\"#reality level functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rebootsecs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rebootsecs()\"><H3>REBOOTSECS()</H3></A><PRE>\n  Function: rebootsecs()\n  \n  Returns a string which is the time the MUSH last rebooted in seconds.\n  \n  Example:\n    &gt; say startsecs()\n    You say &quot;2324234&quot;\n   \n  See Also: startime(), secs(), startsecs(), reboottime()\n  \n</PRE>\n<A HREF=\"#reality levels\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reboottime()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reboottime()\"><H3>REBOOTTIME()</H3></A><PRE>\n  Function: reboottime()\n  \n  Returns a string which is the time the MUSH last rebooted.  The time\n  is in the same format as the TIME() function returns.\n  \n  Example:\n    &gt; say reboottime()\n    You say &quot;Sat Dec  7 00:09:13 1991\n    \n  See Also: convtime(), starttime(), rebootsecs(), startsecs()\n  \n</PRE>\n<A HREF=\"#rebootsecs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regedit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regedit()\"><H3>REGEDIT()</H3></A><PRE>\n  Function: regedit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n            regeditlit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to\n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section. regediti() only replaces the first match and is\n  case sensitive.  The &lt;replacement&gt; argument is evaluated once for \n  each match, allowing for more complex transformations than is possible \n  with straight replacement.\n  \n  The regeditlit() function works same as regedit() but does not evaluate \n  the replaced values.\n  \n  Example:\n  &gt; say regedit(this test is the best string, (.)est, $1rash)\n  You say &quot;this trash is the best string&quot;\n  &gt; say regedit(this test is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the best string&quot;\n  \n  See also: edit(), editansi(), regmatch(), regediti(), regeditall(), \n            regeditalli()\n\n</PRE>\n<A HREF=\"#reboottime()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regeditall()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regeditall()\"><H3>REGEDITALL()</H3></A><PRE>\n  Function: regeditall(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,..., &lt;regexpN&gt;, &lt;replaceN&gt;])\n            regeditalllit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,..., &lt;regexpN&gt;, &lt;replaceN&gt;])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to \n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section.  regeditall() replaces all matches.  The &lt;replacement&gt; \n  argument is evaluated once for each match, allowing for more complex \n  transformations than is possible with straight replacement.  \n  \n  The regeditalllit() function works same as regeditall() but does not evaluate\n  the replaced values.\n  \n  Example:\n  &gt; say regeditall(this test is the best string, (.)est, $1rash)\n  You say &quot;this trash is the brash string&quot;\n  &gt; say regeditall(this test is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the Brash string&quot;\n  \n  See also: edit(), editansi() regmatch(), regedit(), regediti(), regeditalli()\n\n</PRE>\n<A HREF=\"#regedit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regeditalli()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regeditalli()\"><H3>REGEDITALLI()</H3></A><PRE>\n  Function: regeditalli(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,...,&lt;regexpN&gt;,&lt;replaceN&gt;])\n            regeditallilit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,...,&lt;regexpN&gt;,&lt;replaceN&gt;])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to \n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section.  regeditalli() replaces all matches and is case \n  insensitive. The &lt;replacement&gt; argument is evaluated once for\n  each match, allowing for more complex transformations than is\n  possible with straight replacement.\n  \n  The regeditallilit() function works same as regeditalli() but does not \n  evaluate the replaced values.\n   \n  Example:\n  &gt; say regeditalli(this teSt is the best string, (.)est, $1rash)\n  You say &quot;this trash is the brash string&quot;\n  &gt; say regeditalli(this test is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the Brash string&quot;\n  \n  See also: edit(), editansi(), regmatch(), regedit(), regediti(), \n            regeditall() \n\n</PRE>\n<A HREF=\"#regeditall()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regeditallilit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regeditallilit()\"><H3>REGEDITALLILIT()</H3></A><PRE>\n  Function: regeditalli(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,...,&lt;regexpN&gt;,&lt;replaceN&gt;])\n            regeditallilit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,...,&lt;regexpN&gt;,&lt;replaceN&gt;])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to \n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section.  regeditalli() replaces all matches and is case \n  insensitive. The &lt;replacement&gt; argument is evaluated once for\n  each match, allowing for more complex transformations than is\n  possible with straight replacement.\n  \n  The regeditallilit() function works same as regeditalli() but does not \n  evaluate the replaced values.\n   \n  Example:\n  &gt; say regeditalli(this teSt is the best string, (.)est, $1rash)\n  You say &quot;this trash is the brash string&quot;\n  &gt; say regeditalli(this test is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the Brash string&quot;\n  \n  See also: edit(), editansi(), regmatch(), regedit(), regediti(), \n            regeditall() \n\n</PRE>\n<A HREF=\"#regeditalli()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regeditalllit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regeditalllit()\"><H3>REGEDITALLLIT()</H3></A><PRE>\n  Function: regeditall(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,..., &lt;regexpN&gt;, &lt;replaceN&gt;])\n            regeditalllit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[,..., &lt;regexpN&gt;, &lt;replaceN&gt;])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to \n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section.  regeditall() replaces all matches.  The &lt;replacement&gt; \n  argument is evaluated once for each match, allowing for more complex \n  transformations than is possible with straight replacement.  \n  \n  The regeditalllit() function works same as regeditall() but does not evaluate\n  the replaced values.\n  \n  Example:\n  &gt; say regeditall(this test is the best string, (.)est, $1rash)\n  You say &quot;this trash is the brash string&quot;\n  &gt; say regeditall(this test is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the Brash string&quot;\n  \n  See also: edit(), editansi() regmatch(), regedit(), regediti(), regeditalli()\n\n</PRE>\n<A HREF=\"#regeditallilit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regediti()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regediti()\"><H3>REGEDITI()</H3></A><PRE>\n  Function: regediti(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n  Function: regeditilit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n   \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to \n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section. regediti() only replaces the first match and is case\n  insensitive.  The &lt;replacement&gt; argument is evaluated once for\n  each match, allowing for more complex transformations than is\n  possible with straight replacement.\n  \n  The regeditilit() function works same as regediti() but does not evaluate \n  the replaced values.\n  \n  Example:\n  &gt; say regediti(this teSt is the best string, (.)est, $1rash)\n  You say &quot;this trash is the best string&quot;\n  &gt; say regediti(this teSt is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the best string&quot;\n  \n  See also: edit(), editansi(), regmatch(), regedit(), regeditall(), \n            regeditalli()\n\n</PRE>\n<A HREF=\"#regeditalllit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regeditilit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regeditilit()\"><H3>REGEDITILIT()</H3></A><PRE>\n  Function: regediti(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n  Function: regeditilit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n   \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to \n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section. regediti() only replaces the first match and is case\n  insensitive.  The &lt;replacement&gt; argument is evaluated once for\n  each match, allowing for more complex transformations than is\n  possible with straight replacement.\n  \n  The regeditilit() function works same as regediti() but does not evaluate \n  the replaced values.\n  \n  Example:\n  &gt; say regediti(this teSt is the best string, (.)est, $1rash)\n  You say &quot;this trash is the best string&quot;\n  &gt; say regediti(this teSt is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the best string&quot;\n  \n  See also: edit(), editansi(), regmatch(), regedit(), regeditall(), \n            regeditalli()\n\n</PRE>\n<A HREF=\"#regediti()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regeditlit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regeditlit()\"><H3>REGEDITLIT()</H3></A><PRE>\n  Function: regedit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n            regeditlit(&lt;str&gt;, &lt;regexp&gt;, &lt;repl&gt;[, ... , &lt;regexpN&gt;, &lt;replaceN&gt;])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of &lt;str&gt; that matches the &lt;regexp&gt; is replaced by the\n  evaluated &lt;repl&gt; (replacement), with $&lt;number&gt; in &lt;replacement&gt; expanded to\n  the corresponding matching sub-expression of &lt;regexp&gt;, with $0 the entire\n  matched section. regediti() only replaces the first match and is\n  case sensitive.  The &lt;replacement&gt; argument is evaluated once for \n  each match, allowing for more complex transformations than is possible \n  with straight replacement.\n  \n  The regeditlit() function works same as regedit() but does not evaluate \n  the replaced values.\n  \n  Example:\n  &gt; say regedit(this test is the best string, (.)est, $1rash)\n  You say &quot;this trash is the best string&quot;\n  &gt; say regedit(this test is the best string, (.)est, [capstr($1)]rash)\n  You say &quot;this Trash is the best string&quot;\n  \n  See also: edit(), editansi(), regmatch(), regediti(), regeditall(), \n            regeditalli()\n\n</PRE>\n<A HREF=\"#regeditilit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp classes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp classes\"><H3>REGEXP CLASSES</H3></A><PRE>\n  Topic: REGEXP CLASSES\n  \n  In a character class, you can use a number of additional keywords\n  that match certain types of characters. The keywords are enclosed in\n  [: and :], within the character class, so the whole thing looks like\n  [[:NAME:]].\n  \n  These keywords can be mixed with other things in the character class,\n  like [ab[:digit:]], which will match 'a, 'b', or a digit. [:^NAME:]\n  reverses the meaning of NAME - it expands to everything but characters\n  that would match [:NAME:].\n  \n  Some recognized NAMEs:\n   digit, for numbers. [[:digit:]] is the same as \\d.\n    [[:^digit:]] is the same as \\D.\n   alpha, for letters. alnum, for numbers and letters.\n   lower, for lower-case letters. upper, for upper-case letters.\n   word, for word characters. [[:word:]] is the same as \\w.\n    [[:^word:]] is the same as \\W.\n   space, for whitespace characters. [[:space:]] is the same as \\s.\n    [[:^space:]] is the same as \\S.\n  \n{continued in 'help regexp classes2'}\n\n</PRE>\n<A HREF=\"#regeditlit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp classes2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp classes2\"><H3>REGEXP CLASSES2</H3></A><PRE>\n  Topic: REGEXP CLASSES2 (continued)\n  \n  These keywords (Or the corresponding \\codes) should be used instead of\n  explicit ranges where possible to improve portability. For example,\n  [A-Za-z] and [[:alpha:]] are not the same thing in languages with accented\n  characters. There are other keywords, but the ones listed are the most\n  useful.\n  \n  Examples:\n  &gt; say regmatch(foo_bar, lit(^[[:word:]]+$))\n  You say &quot;1&quot;\n  &gt; say regmatch(foo bar, lit(^[[:word:]]+$))\n  You say &quot;0&quot;\n  \n  See Also: regexp syntax, regexp examples\n\n</PRE>\n<A HREF=\"#regexp classes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp examples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp examples\"><H3>REGEXP EXAMPLES</H3></A><PRE>\n  Topic: REGEXP EXAMPLES\n  \n  The regexp pattern '.' is equivalent to the wildcard '?'; it matches\n  one and only one of an arbitrary character.\n  \n  The regexp pattern '.+' is equivalent to the wildcard '*'; it matches\n  one or more arbitrary characters. To match zero or more arbitrary\n  characters, the regexp pattern is '.*'.\n  \n  To match a string of numbers, use:       [0-9]+    or \\d+\n  To match a string of letters only, use:  [A-Za-z]+ or \\w+\n  \n  See 'help regexp syntax' for a more detailed explanation.\n  \n  See Also: regexp syntax, regexp classes\n\n</PRE>\n<A HREF=\"#regexp classes2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax\"><H3>REGEXP SYNTAX</H3></A><PRE>\n  Topic: REGEXP SYNTAX\n  \n  RhostMUSH uses PCRE for its regular expression engine.  PCRE is an\n  open source library of functions to support regular expressions whose\n  syntax and semantics are as close as possible to those of the Perl\n  5 language.  The text below is excerpted from its man page. PCRE\n  was written by Philip Hazel &lt;ph10@cam.ac.uk&gt;, and is Copyright (c)\n  1997-1999 University of Cambridge, England. You can find it at\n     ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/\n  \n  (Note that in RhostMUSH, if the regular expression is in an eval'd\n  context (like an argument to regmatch), you'll have to do a lot\n  of escaping to make things work right. One way to escape an argument\n  like %0 is: regeditall(%0,\\\\W,\\\\$0) or similar).\n  \n  A regular expression is a pattern that is matched against a subject\n  string from left to right. Most characters stand for themselves in a\n  pattern, and match the corresponding characters in the subject.\n  \n{continued in 'help regexp syntax2'}\n\n</PRE>\n<A HREF=\"#regexp examples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax2\"><H3>REGEXP SYNTAX2</H3></A><PRE>\n  Topic: REGEXP SYNTAX2 (continued)\n  There are two different sets of meta-characters: those  that\n  are  recognized anywhere in the pattern except within square\n  brackets, and those that are recognized in square  brackets.\n  Outside square brackets, the meta-characters are as follows:\n  \n       \\      general escape character with several uses\n       ^      assert start of subject\n       $      assert end of subject\n       .      match any character except newline\n       [      start character class definition\n       |      start of alternative branch (&quot;or&quot;)\n       (      start subpattern\n       )      end subpattern\n       ?      0 or 1 quantifier (after a unit to quantify)\n              or, minimal match (after a quantifier)\n              or,  extends the meaning of ( after a (\n       *      0 or more quantifier\n       +      1 or more quantifier\n\n{continued in 'help regexp syntax3'}\n\n</PRE>\n<A HREF=\"#regexp syntax\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax3\"><H3>REGEXP SYNTAX3</H3></A><PRE>\n  Topic: REGEXP SYNTAX3 (continued)\n  Part of a pattern that is in square  brackets  is  called  a\n  &quot;character class&quot;. It matches any character listed in the class.\n  In a character class, the only metacharacters are:\n  \n       \\      general escape character\n       ^      negate the class, if the first character in the class\n       -      indicates character range (e.g. A-Z, 0-4)\n   [:NAME:]   A symbol for a group of characters that can vary\n              according to the language the mush is using.\n              See 'help regexp classes' for more information.\n       ]      terminates the character class\n  \n  A backslash will escape most metacharacters, and can turn\n  some normal characters into generic character types:\n  \n       \\d     any decimal digit\n       \\D     any character that is not a decimal digit\n       \\s     any whitespace character\n       \\S     any character that is not a whitespace character\n       \\w     any &quot;word&quot; character (letter, digit, or underscore)\n       \\W     any &quot;non-word&quot; character\n  \n{continued in 'help regexp syntax4'}\n\n</PRE>\n<A HREF=\"#regexp syntax2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax4\"><H3>REGEXP SYNTAX4</H3></A><PRE>\n  Topic: REGEXP SYNTAX4 (continued)\n    \n  A backlash can also two useful assertions -- conditions that\n  must be met at a particular point in a match:\n  \n       \\b     word boundary\n       \\B     not a word boundary\n  \n  A word boundary is a position in the  subject  string  where the\n  current character and the previous character do not both match \\w or\n  \\W (i.e. one matches \\w and  the  other  matches \\W),  or the start\n  or end of the string if the first or last character matches \\w,\n  respectively.\n  \n{continued in 'help regexp syntax5'}\n\n</PRE>\n<A HREF=\"#regexp syntax3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax5\"><H3>REGEXP SYNTAX5</H3></A><PRE>\n  Topic: REGEXP SYNTAX5 (continued)\n   \n  Quantifiers specify repetition of characters. Three are available:\n       *    match 0 or more of whatever came before\n       +    match 1 or more of whatever came before\n       ?    match 0 or 1 of whatever came before\n   \n  (In theory, you can match m-n of whatever came before with {m,n},\n  but the MUSH parser makes it impossible to use {}'s)\n   \n  Quantifiers are usually greedy -- they match as much as possible.\n  Adding a ? after a quantifier causes it to match as little as\n  possible instead.\n  \n{continued in 'help regexp syntax6'}\n\n</PRE>\n<A HREF=\"#regexp syntax4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax6\"><H3>REGEXP SYNTAX6</H3></A><PRE>\n  Topic: REGEXP SYNTAX6 (continued)\n  \n  Outside a character class, a backslash followed by  a  digit greater\n  than  0  (and  possibly  further  digits) is a back reference to a\n  capturing subpattern  earlier  (i.e.  to  its left)  in  the  pattern,\n  provided there have been that many previous capturing left parentheses.\n  A back reference matches whatever actually matched the  capturing\n  subpattern in the current subject string, rather than anything matching\n  the subpattern itself. So the pattern\n  \n    (sens|respons)e and \\1ibility\n  \n  matches &quot;sense and sensibility&quot; and &quot;response and  responsibility&quot;,  but\n  not  &quot;sense  and  responsibility&quot;.\n  \n{continued in 'help regexp syntax7'}\n\n</PRE>\n<A HREF=\"#regexp syntax5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax7\"><H3>REGEXP SYNTAX7</H3></A><PRE>\n  Topic: REGEXP SYNTAX7 (continued)\n  \n  An assertion is  a  test  on  the  characters  following  or\n  preceding  the current matching point that does not actually consume\n  any characters.  There  are  two kinds:  those that look ahead of the\n  current position in the subject string, and those that look behind it.\n  \n  An assertion subpattern is matched in the normal way, except that  it\n  does not cause the current matching position to be changed. Lookahead\n  assertions start with  (?=  for  positive assertions and (?! for\n  negative assertions. For example, Lookbehind assertions start with\n  (?&lt;=  for  positive  assertions and (?&lt;! for negative assertions.\n  \n  Assertion subpatterns are not capturing subpatterns, and may not\n  be  repeated,  because  it makes no sense to assert the same thing\n  several times. If an assertion contains capturing subpatterns within it,\n  these are always counted for the purposes of numbering the capturing\n  subpatterns  in  the  whole pattern.\n  \n{continued in 'help regexp syntax8'}\n\n</PRE>\n<A HREF=\"#regexp syntax6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexp syntax8\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexp syntax8\"><H3>REGEXP SYNTAX8</H3></A><PRE>\n  Topic: REGEXP SYNTAX8 (continued)\n  \n  PCRE's engine can also do conditional subpattern matching,\n  embedded comments in regexps, and a bunch of other things.\n  See a regexp book for details.\n  \n  See Also: regexp classes, regexp examples\n  \n</PRE>\n<A HREF=\"#regexp syntax7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexps\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexps\"><H3>REGEXPS</H3></A><PRE>\n  Topic: REGEXPS\n  \n  (This help text is largely from PennMUSH, with permission)\n  \n  The majority of matching in MUSH is done with wildcard (&quot;globbing&quot;)\n  patterns. There is a second type of matching, using regular expressions,\n  that is available in certain circumstances.\n  \n  For attributes that are $-commands or ^-listen-patterns, setting that\n  attribute &quot;regexp&quot; (with '@set &lt;object&gt;/&lt;attribute&gt;=regexp') causes\n  patterns to be matched using regular expressions rather than\n  globbing. In addition, the function regmatch() performs regular\n  expression matching.\n  \n  In a regular expression match, the substring of the string which matched\n  the regexp pattern is %0; %1 through %9 are the substrings of the string\n  which matched parenthesized expressions within the regexp pattern.\n\n{continued in 'help regexps2'}\n\n</PRE>\n<A HREF=\"#regexp syntax8\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regexps2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regexps2\"><H3>REGEXPS2</H3></A><PRE>\n  Topic: REGEXPS2 (continued)\n  \n  Regular expressions are extremely useful when you want to enforce\n  a data type. For example, if you have a command where you want a\n  player to enter a string and a number ('+setnum &lt;player&gt;=&lt;number&gt;',\n  for example), you might do it like this:\n  \n  &amp;DO_NUM Command Object=$^\\+setnum (.+)=([0-9]+)$: @va me=Data: %1 = %2\n  @set Command Object/DO_NUM = regexp\n  \n  Then, '+setnum cookies=30' would set VA to &quot;Data: cookies = 30&quot;.\n  This eliminates your having to check to see if the player entered\n  a number, since the regular expression matches only numbers.\n  Furthermore, the '+' guarantees that there needs to be at least\n  one character there, so a player can't enter '+setnum cookies='\n  or '+setnum =10' or similarly malformed input.\n  \n  The '+' sign in the command has to be escaped out, or it is taken as\n  a regexp token. Furthermore, the pattern-match has to be anchored\n  with ^ and $, or something like 'try +setnum cookies=30 now' would\n  also match. Regexps are case-sensitive; wildcard globbing is not.\n  \n  Regular expression syntax is explained in 'help regexp syntax'.\n\n</PRE>\n<A HREF=\"#regexps\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reglmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reglmatch()\"><H3>REGLMATCH()</H3></A><PRE>\n  Function: reglmatchalli(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchall(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchi(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatch(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n  \n  This function returns the positional matches of every word in the\n  string that matches the specified regular expression.  This is\n  exactly like the totmatch() function except uses regular \n  expression matching.  This function is case sensitive.\n  \n  The non 'all' functions will only return the position of the first\n  match, or in other words functions like match() would.\n   \n  The reglmatchi() and reglmatchalli() functions ignores case.\n  \n  Example:\n    &gt; say reglmatchall(one two three four five fourteen,.*ou.*)\n    You say &quot;4 6&quot;\n    &gt; say reglmatch(one two three four five fourteen,.*ou.*)\n    You say &quot;4&quot;\n  \n  See Also: totmatch(), regmatch(), regnummatch(), nummatch()\n  \n  'help regexp syntax' for an explanation of regular expressions.\n\n</PRE>\n<A HREF=\"#regexps2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reglmatchall()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reglmatchall()\"><H3>REGLMATCHALL()</H3></A><PRE>\n  Function: reglmatchalli(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchall(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchi(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatch(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n  \n  This function returns the positional matches of every word in the\n  string that matches the specified regular expression.  This is\n  exactly like the totmatch() function except uses regular \n  expression matching.  This function is case sensitive.\n  \n  The non 'all' functions will only return the position of the first\n  match, or in other words functions like match() would.\n   \n  The reglmatchi() and reglmatchalli() functions ignores case.\n  \n  Example:\n    &gt; say reglmatchall(one two three four five fourteen,.*ou.*)\n    You say &quot;4 6&quot;\n    &gt; say reglmatch(one two three four five fourteen,.*ou.*)\n    You say &quot;4&quot;\n  \n  See Also: totmatch(), regmatch(), regnummatch(), nummatch()\n  \n  'help regexp syntax' for an explanation of regular expressions.\n\n</PRE>\n<A HREF=\"#reglmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reglmatchalli()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reglmatchalli()\"><H3>REGLMATCHALLI()</H3></A><PRE>\n  Function: reglmatchalli(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchall(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchi(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatch(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n  \n  This function returns the positional matches of every word in the\n  string that matches the specified regular expression.  This is\n  exactly like the totmatch() function except uses regular \n  expression matching.  This function is case sensitive.\n  \n  The non 'all' functions will only return the position of the first\n  match, or in other words functions like match() would.\n   \n  The reglmatchi() and reglmatchalli() functions ignores case.\n  \n  Example:\n    &gt; say reglmatchall(one two three four five fourteen,.*ou.*)\n    You say &quot;4 6&quot;\n    &gt; say reglmatch(one two three four five fourteen,.*ou.*)\n    You say &quot;4&quot;\n  \n  See Also: totmatch(), regmatch(), regnummatch(), nummatch()\n  \n  'help regexp syntax' for an explanation of regular expressions.\n\n</PRE>\n<A HREF=\"#reglmatchall()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reglmatchi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reglmatchi()\"><H3>REGLMATCHI()</H3></A><PRE>\n  Function: reglmatchalli(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchall(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatchi(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n            reglmatch(&lt;string&gt;, &lt;regexp&gt; [,&lt;delimiter&gt;])\n  \n  This function returns the positional matches of every word in the\n  string that matches the specified regular expression.  This is\n  exactly like the totmatch() function except uses regular \n  expression matching.  This function is case sensitive.\n  \n  The non 'all' functions will only return the position of the first\n  match, or in other words functions like match() would.\n   \n  The reglmatchi() and reglmatchalli() functions ignores case.\n  \n  Example:\n    &gt; say reglmatchall(one two three four five fourteen,.*ou.*)\n    You say &quot;4 6&quot;\n    &gt; say reglmatch(one two three four five fourteen,.*ou.*)\n    You say &quot;4&quot;\n  \n  See Also: totmatch(), regmatch(), regnummatch(), nummatch()\n  \n  'help regexp syntax' for an explanation of regular expressions.\n\n</PRE>\n<A HREF=\"#reglmatchalli()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regmatch()\"><H3>REGMATCH()</H3></A><PRE>\n  Function: regmatch(&lt;string&gt;,&lt;regexp&gt;[,&lt;register list&gt;])\n  \n  This function matches the regular expression &lt;regexp&gt; against the\n  entirety of &lt;string&gt;, returning 1 if it matches and 0 if it does not.\n  This function is case sensitive.  It behaves like strmatch().\n  \n  If &lt;register list&gt; is specified, there is a side-effect: any\n  parenthesized substrings within the regular expression will be set\n  into the specified local registers, in the order they were specified\n  in the list. &lt;register list&gt; can be a list of one through nine numbers.\n  If the specified register is -1, the substring is not copied into a\n  register. Under regmatchi, case of the substring may be modified.\n  You may also use a-z as registers if currently enabled on your RhostMUSH.\n  You may have to escape mush-special characters (like (, ), {, }, etc)\n  Any invalid registers specified will be skipped over and ignored.\n  \n  Examples:\n    &gt; say regmatch(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\))\n    You say &quot;1&quot;\n    &gt; say regmatch(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\),0 3 5) |%q0/%q3/%q5|\n    You say &quot;1 |cookies=30/cookies/30|\n  \n  See Also: 'help regexp syntax' for an explanation of regular expressions.\n  \n</PRE>\n<A HREF=\"#reglmatchi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regmatchi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regmatchi()\"><H3>REGMATCHI()</H3></A><PRE>\n  Function: regmatchi(&lt;string&gt;,&lt;regexp&gt;[,&lt;register list&gt;])\n  \n  This function matches the regular expression &lt;regexp&gt; against the\n  entirety of &lt;string&gt;, returning 1 if it matches and 0 if it does not.\n  This function is case insensitive.\n  \n  If &lt;register list&gt; is specified, there is a side-effect: any\n  parenthesized substrings within the regular expression will be set\n  into the specified local registers, in the order they were specified\n  in the list. &lt;register list&gt; can be a list of one through nine numbers.\n  If the specified register is -1, the substring is not copied into a\n  register. Under regmatchi, case of the substring may be modified.\n  You may also use a-z as registers if currently enabled on your RhostMUSH.\n  You may have to escape mush-special characters (like (, ), {, }, etc)\n  Any invalid registers specified will be skipped over and ignored.\n  \n  Examples:\n    &gt; say regmatchi(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\))\n    You say &quot;1&quot;\n    &gt; say regmatchi(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\),0 3 5) |%q0/%q3/%q5|\n    You say &quot;1 |cookies=30/cookies/30|\n  \n  See Also: 'help regexp syntax' for an explanation of regular expressions.\n  \n</PRE>\n<A HREF=\"#regmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regnummatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regnummatch()\"><H3>REGNUMMATCH()</H3></A><PRE>\n  Function: regnummatch(&lt;string&gt;, &lt;regexp&gt;, [,&lt;delimiter&gt;])\n            regnummatchi(&lt;string&gt;, &lt;regexp&gt;, [,&lt;delimiter&gt;])\n  \n  This function returns the total matches of any word in the string\n  that matches the specified regular expression.  This works exactly\n  like nummatch() except it uses regular expressions.\n  \n  Example:\n  &gt; say regnummatch(one two three four five fourteen,.*ou.*)\n  You say &quot;2&quot;\n  \n  See Also: nummatch(), regmatch(), regmatchall(), regmatchalli()\n  \n  'help regexp syntax' for an explanation of regular expressions.\n\n</PRE>\n<A HREF=\"#regmatchi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regnummatchi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regnummatchi()\"><H3>REGNUMMATCHI()</H3></A><PRE>\n  Function: regnummatch(&lt;string&gt;, &lt;regexp&gt;, [,&lt;delimiter&gt;])\n            regnummatchi(&lt;string&gt;, &lt;regexp&gt;, [,&lt;delimiter&gt;])\n  \n  This function returns the total matches of any word in the string\n  that matches the specified regular expression.  This works exactly\n  like nummatch() except it uses regular expressions.\n  \n  Example:\n  &gt; say regnummatch(one two three four five fourteen,.*ou.*)\n  You say &quot;2&quot;\n  \n  See Also: nummatch(), regmatch(), regmatchall(), regmatchalli()\n  \n  'help regexp syntax' for an explanation of regular expressions.\n\n</PRE>\n<A HREF=\"#regnummatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regrab()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regrab()\"><H3>REGRAB()</H3></A><PRE>\n  Function: regrab(&lt;list&gt;, &lt;regexp&gt;[, &lt;delimiter&gt;])\n  \n  This function returns the first word in list which matches the pattern.\n  For grab(), the pattern is specified as in match(); i.e., it\n  can contain wildcards. For regrab(), the pattern is a regular expression.\n  \n  Basically, this is a much more efficient way to do:\n  1: extract(list, match(list, pattern, delimiter), 1) \n  2: extract(list, regmatch(list, regexp, delimiter), 1)\n  \n  Examples:\n    &gt; say regrab(this that those, (.)hat)\n    You say &quot;that&quot;\n    &gt; say regrab(this tHat those phat, (.)hat)\n    You say &quot;phat&quot;\n  \n  See Also: regrabi(), regraball(), regraballi(), grab(), graball()\n    \n</PRE>\n<A HREF=\"#regnummatchi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regraball()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regraball()\"><H3>REGRABALL()</H3></A><PRE>\n  Function: regraball(&lt;string&gt;,&lt;regexp&gt;[,&lt;delim&gt;][,&lt;output seperator&gt;])\n  \n  These functions work identically to the grab() and regrab()/regrabi()\n  functions, save that they return all matches, not just the first: They\n  return all words in the list &lt;string&gt; which match &lt;pattern&gt;.\n  If none match, an empty string is returned.\n  \n  Examples:\n  &gt; say graball(This is a test of a test,test)\n  You say &quot;test test&quot;\n  &gt; say graball(This is testing a test,tes*)\n  You say &quot;testing test&quot;\n  &gt; say regraball(This is testing a test,s$)\n  You say &quot;This is&quot;\n  \n  See also: match(), matchall(), grab(), regmatch(), regraballi(), regrab()\n  \n</PRE>\n<A HREF=\"#regrab()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regraballi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regraballi()\"><H3>REGRABALLI()</H3></A><PRE>\n  Function: regraballi(&lt;string&gt;,&lt;regexp&gt;[,&lt;delim&gt;][,&lt;output seperator&gt;])\n  \n  These functions work identically to the grab() and regrab()/regrabi()\n  functions, save that they return all matches, not just the first: They\n  return all words in the list &lt;string&gt; which match &lt;pattern&gt;.\n  If none match, an empty string is returned.  This function is case-\n  insensitive.\n  \n  Examples:\n  &gt; say graball(This is a test of a test,test)\n  You say &quot;test test&quot;\n  &gt; say graball(This is testing a test,tes*)\n  You say &quot;testing test&quot;\n  &gt; say regraballi(This is testing a test,s$)\n  You say &quot;This is&quot;\n  \n  See also: match(), matchall(), grab(), regmatch()\n\n</PRE>\n<A HREF=\"#regraball()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regrabi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regrabi()\"><H3>REGRABI()</H3></A><PRE>\n  Function: regrabi(&lt;list&gt;, &lt;regexp&gt;[, &lt;delimiter&gt;])\n  \n  This function returns the first word in list which matches the pattern.\n  For grab(), the pattern is specified as in match(); i.e., it\n  can contain wildcards. For regrab(), the pattern is a regular expression.\n  regrabi() is case-insensitive.\n  \n  Basically, this is a much more efficient way to do:\n  1: extract(list, match(list, pattern, delimiter), 1)\n  2: extract(list, regmatch(list, regexp, delimiter), 1)\n  \n  Examples:\n    &gt; say regrabi(this that those, (.)hat)\n    You say &quot;that&quot;\n    &gt; say regrab(this tHat those phat, (.)hat)\n    You say &quot;tHat&quot;\n  \n  See Also: regrab(), regraball(), regraballi(), grab(), graball()\n    \n</PRE>\n<A HREF=\"#regraballi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regrep()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regrep()\"><H3>REGREP()</H3></A><PRE>\n  Function: regrep(&lt;object&gt;,&lt;attrs&gt;,&lt;regexp&gt; [,&lt;key&gt;])\n  \n  This function returns a list of attributes on &lt;object&gt; containing\n  &lt;pattern&gt; (or matching &lt;regexp&gt;).  &lt;attrs&gt; is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use &quot;*&quot;.\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  &quot;special&quot; characters will need to be escaped out. \n  \n  If &lt;key&gt; is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?). \n  \n  This function is case-sensitive. \n  \n  Examples:\n    &gt; @va me=This is a test\n    &gt; @vb me=This is another test.\n    &gt; @vc me=Test Test Test whisooo!\n    &gt; say regrep(me,v*,is)\n    You say &quot;VA VB&quot;\n    &gt; say regrep(me,v*,.is.)\n    You say &quot;VA VB VC&quot;\n  \n  See Also: regrepi(), grep(), pgrep()\n  \n</PRE>\n<A HREF=\"#regrabi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regrepi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regrepi()\"><H3>REGREPI()</H3></A><PRE>\n  regrepi(&lt;object&gt;,&lt;attrs&gt;,&lt;regexp&gt; [,&lt;key&gt;])\n\n  This function returns a list of attributes on &lt;object&gt; containing\n  &lt;pattern&gt; (or matching &lt;regexp&gt;).  &lt;attrs&gt; is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use &quot;*&quot;.\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  &quot;special&quot; characters will need to be escaped out. \n  \n  If &lt;key&gt; is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?).\n  \n  This function is case-insensitive.\n  \n  Examples:\n    &gt; @va me=This is a test\n    &gt; @vb me=This is another test.\n    &gt; @vc me=Test Test Test whisooo!\n    &gt; say regrepi(me,v*,is)\n    You say &quot;VA VB&quot;\n    &gt; say regrepi(me,v*,.is.)\n    You say &quot;VA VB VC&quot;\n  \n  See Also: regrep(), grep(), pgrep()\n\n</PRE>\n<A HREF=\"#regrep()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#regular expression functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"regular expression functions\"><H3>regular expression functions</H3></A><PRE>\n  Function lists: Regular Expressions\n  \n  regedit()          -- Edits first case match based on regexp\n  regeditall()       -- Edits all case matches based on regexp\n  regeditalli()      -- Edits first non-case match based on regexp \n  regeditallilit()   -- Edits first non-case match based on escaped regexp\n  regeditalllit()    -- Edits first case match based on escaped regexp\n  regediti()         -- Edits first non-case match based on regexp\n  regeditilit()      -- Edits first non-case match based on escaped regexp\n  regeditlit()       -- Edits first case match based on escaped regexp\n  reglmatch()        -- Returns first case position of regexp match\n  reglmatchall()     -- Returns all case positions of regexp matches\n  reglmatchalli()    -- Returns all non-case positions of regexp matches\n  reglmatchi()       -- Returns first non-case position of regexp match\n  regmatch()         -- Returns true(1) or false(0) on a case regexp match\n  regmatchi()        -- Returns true(1) or false(0) on a non-case regexp match\n  regnummatch()      -- Returns count of all case regexp matches\n  regnummatchi()     -- Returns count of all non-case regexp matches\n  regrab()           -- Returns string of first case regexp match\n  regrabi()          -- Returns string of first non-case regexp match\n  regraball()        -- Returns strings of all case regexp matches\n  regraballi()       -- Returns strings of all non-case regexp matches\n  regrep()           -- Returns attribs that contain string of case regexp\n  regrepi()          -- Returns attribs that contain string of non-case regexp\n  reswitch()         -- Switch based on case regexp match\n  reswitchall()      -- Switch all based on case regexp match\n  reswitchalli()     -- Switch all based on non-case regexp match\n  reswitchi()        -- Switch based on non-case regexp match\n  cluster_lattr()    -- Regexp capable attribute listing for clusters\n  cluster_regrepi()  -- Returns attrs in cluster that contain non-case regexp\n  cluster_regrep()   -- Returns attrs in cluster that contain case regexp\n  cluster_wipe()     -- Regexp capable attribute cluster wiper     \n  lattr()            -- Regexp capable attribute listing\n  lattrp()           -- Regexp capable parent attribute listing\n  wipe()             -- Regexp capable attribute wiper\n\n</PRE>\n<A HREF=\"#regrepi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#relational functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"relational functions\"><H3>relational functions</H3></A><PRE>\n  Function Lists: Relational Functions\n      \n  alphamax()    - Returns the lexiographically highest word of submitted list.\n  alphamin()    - Returns the lexiographically lowest word of submitted list.\n  max()         - Returns the largest integer from amongst its argument.\n  min()         - Returns the lowest integer from amongst its argument.\n  eq()          - Returns true if two numerical values are the same.\n  gt()          - Returns true if one numerical value is higher than the other.\n  gte()         - Like gt(), but also returns true if the value is the same.\n  lt()          - Returns true if one numerical value is lower than the other.\n  lte()         - Like lt(), but also returns true if the value is the same.\n  neq()         - Returns true if the two values are not the same.\n  not()         - Takes a boolean value and returns its inverse.\n\n</PRE>\n<A HREF=\"#regular expression functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#remainder()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"remainder()\"><H3>REMAINDER()</H3></A><PRE>\n  Function: remainder(&lt;integer1&gt;,&lt;integer2&gt;[,&lt;integerN&gt;]...)\n  \n  Returns the integer remainder from dividing &lt;integer1&gt; by &lt;integer2&gt;.\n  This could be aliased to either modulo() or remainder().  To see\n  which, do: think mod()\n  \n  You may specify more than two values.\n   \n  Example:\n    &gt; say remainder(15,3)\n    You say &quot;0&quot;\n    &gt; say remainder(16,3)\n    You say &quot;1&quot;\n    &gt; say remainder(17,3)\n    You say &quot;2&quot;\n    &gt; say remainder(18,3)\n    You say &quot;0&quot;\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc()\n   \n</PRE>\n<A HREF=\"#relational functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#remflags()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"remflags()\"><H3>REMFLAGS()</H3></A><PRE>\n  Function: remflags(&lt;list&gt;, [&amp;|]&lt;flag(s)&gt; [,&lt;delim&gt;[,&lt;output delim&gt;]])\n  \n  The remflags function removes all dbref#'s in the given list that contains\n  the flags specified.  You must use one of the operators for flag checks:\n     &amp; - match ALL flags for each dbref#.\n     | - match ANY of the flags for each dbref#.\n  \n  This function returns the list of dbref#'s that correctly match up the\n  flags you specified.\n  \n  Examples: (#1 is a wizard, nothing else is)\n    &gt; say remflags(#1 #2 #3 #4,&amp;W)\n    You say &quot;#2 #3 #4&quot;\n    &gt; say remflags(#1 #2 #3 #4,&amp;Ws)\n    You say &quot;#1 #2 #3 #4&quot;\n    &gt; say remflags(#1 #2 #3 #4,|Ws)\n    You say &quot;#2 #3 #4&quot;\n  \n  Note: You may specify 'P' for players, 'R', for rooms, and 'E' for exits\n        as valid flag checks.\n  \n  See Also: keepflags(), remtype(), keeptype()\n\n</PRE>\n<A HREF=\"#remainder()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#remit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"remit()\"><H3>REMIT()</H3></A><PRE>\n  Function: remit(&lt;list of locations&gt;,&lt;string&gt; [,&lt;to-reality-toggle&gt;])\n  \n  The remit() side-effect function is used to emit the given &lt;string&gt; to every\n  location specified in the &lt;list of locations&gt;.\n  \n  This works similarilly to @pemit/list/contents.\n  \n  This function relies on the config parameter 'pemit_any_object' to\n  be enabled to allow remitting to any room, otherwise, it will only\n  work on rooms you control.\n  \n  This side-effect must be enabled (@list options to see if it is) before it\n  can be used.  Anything using it must have the SIDEFX flag set.\n   \n  If the &lt;to-reality-toggle&gt; is set to '1', then it assumes the remit is\n  a 'to-reality' model, in which the &lt;list of locations&gt; takes the form:\n  \n       reality1 reality2 ... realityN/location1 location2 ... locationN\n \n  Example:\n    &gt; say remit(here #0,Boo)\n    Boo\n    You say &quot;&quot;\n    &gt; say remit(real umbra/here #0,Boo,1)\n    Boo\n    You say &quot;&quot;\n  \n  This would have emitted 'Boo' to your current location and to #0 (if you had\n  control of the room).\n  \n  See Also: @pemit, @emit\n  \n</PRE>\n<A HREF=\"#remflags()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#remove()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"remove()\"><H3>remove()</H3></A><PRE>\n  Function: remove(&lt;list&gt;, &lt;word(s)&gt;[, &lt;delim&gt;])\n \n  Remove takes a list and a word (or words), and returns the list, with the \n  word deleted from it.  &lt;delim&gt; may be used to specify a delimiter \n  other than a space.  You may specify more than one word.\n \n  Example:\n    &gt; say remove(this is a test, is)\n    You say &quot;this a test&quot;\n    &gt; say remove(You can't remove, this)\n    You say &quot;You can't remove&quot;\n    &gt; say remove(You can remove multiple words, You can)\n    You say &quot;remove multiple words&quot;\n    &gt; say remove(How about an o-separated list, w ab, o) \n    You say &quot;Hout an o-separated list&quot;\n  \n  See Also: mid(), delete()\n  \n</PRE>\n<A HREF=\"#remit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#remtype()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"remtype()\"><H3>REMTYPE()</H3></A><PRE>\n  Function: remtype(&lt;string&gt;,&lt;type(s)&gt;[,&lt;delim&gt;[,&lt;output delim&gt;]])\n \n  The remtype function removes all types of 'type' from the string 'string'.\n  The different types are standard MUSH object types:\n      PLAYER - specifying robots and players\n      THING  - specifying objects\n      ROOM   - specifying rooms\n      EXIT   - specifying exits\n      OTHER  - specifying anything not fitting a MUSH 'type'.\n  \n  You may specify optional seperators and output seperators.   You may specify\n  more than one type at once.\n  \n  Examples: (#0 is a room, #1 #55 and #584 are players, #-1 is invalid (other))\n    &gt; say remtype(#0 #1 #55 #584 #-1,player)\n    You say &quot;#0 #-1&quot;\n    &gt; say remtype(#0 #1 #55 #584 #-1,exit)\n    You say &quot;#0 #1 #55 #584 #-1&quot;\n    &gt; say remtype(#0 #1 #55 #584 #-1,other)\n    You say &quot;#0 #1 #55 #584&quot;\n    &gt; say remtype(#0@#1@#55@#584@#-1,other,@,|)\n    You say &quot;#0|#1|#55|#584&quot;\n    &gt; say remtype(#0 #1 #55 #584 #-1,player other)\n    You say &quot;#0&quot;\n  \n  See Also: delete(), remove(), ldelete(), replace(), keeptype()\n  \n</PRE>\n<A HREF=\"#remove()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#repeat()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"repeat()\"><H3>REPEAT()</H3></A><PRE>\n  Function: repeat(&lt;string&gt;,&lt;number&gt;)\n  \n  This function simply repeats &lt;string&gt;, &lt;number&gt; times.  No spaces are\n  inserted between each repetition.\n  \n  Example:\n    &gt; say repeat(Test, 5)\n    You say, &quot;TestTestTestTestTest&quot;\n  \n  See Also: space()\n  \n</PRE>\n<A HREF=\"#remtype()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#replace()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"replace()\"><H3>REPLACE()</H3></A><PRE>\n  Function: replace(&lt;list&gt;, &lt;pos&gt; [&lt;pos2&gt;...&lt;posN&gt;], &lt;word&gt;[, &lt;delim&gt;])\n   \n  This function inserts a word into &lt;list&gt; so that the word becomes the\n  &lt;pos&gt;'th element of the list, and the word previously in that position\n  is removed.  This means that it appears between the &lt;pos-1&gt;'th and\n  &lt;pos+1&gt;'th elements of the original list, replacing the word at that\n  position.  This function may not be used to append a word to a list.\n  You may specify more than one position.\n   \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n  \n  The &lt;pos&gt; fields may be negative to take the argument from the right\n  instead of the left.\n   \n  Examples:\n    &gt; say replace(This is a test, 4, quiz)\n    You say &quot;This is a quiz&quot;\n    &gt; say replace(Yet@Another@Mundane@List, 3, Funky, @)\n    You say &quot;Yet@Another@Funky@List&quot;\n  \n  See Also: extract(), extractword(), insert(), ldelete(), delete(), rindex(),\n            edit()\n  \n</PRE>\n<A HREF=\"#repeat()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rest()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rest()\"><H3>REST()</H3></A><PRE>\n  Function: rest(&lt;string&gt;[, &lt;delim&gt;])\n \n  The rest function takes a string, returns all the string except the first\n  word, that is, everything to the right of the first space, or an empty \n  string, or the empty string if there are no spaces in the string.  \n \n  &lt;delim&gt; may be used to specify a word delimiter other than a space.\n \n  Example:\n    &gt; say rest(This is a test) \n    You say &quot;is a test&quot;\n    &gt; say rest(Would you like coffee, or perhaps tea) \n    You say &quot;you like coffee, or perhaps tea&quot;\n    &gt; say rest(List!with!different!delimiters,!)\n    You say &quot;with!different!delimiters&quot;\n  \n  See Also: first(), before(), after(), extract(), extractword()\n  \n</PRE>\n<A HREF=\"#replace()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reswitch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reswitch()\"><H3>RESWITCH()</H3></A><PRE>\n  Function: reswitch(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  Function: reswitchall(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  Function: reswitchi(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  Function: reswitchalli(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  \n  This function is just like switch(), except they compare &lt;string&gt; against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-sensitive.\n  \n  Example:\n    &gt; say reswitch(xxcxxxxxx,.*a.*,A,.*b.*,B,.*c.*,C,.*d.*,D,E)\n    You say &quot;C&quot;\n  \n  See Also: switch(), reswitchi(), reswitchall(), reswitchalli(), regexps\n\n</PRE>\n<A HREF=\"#rest()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reswitchall()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reswitchall()\"><H3>RESWITCHALL()</H3></A><PRE>\n  Function: reswitchall(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  \n  This function is just like switch(), except they compare &lt;string&gt; against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-sensitive.  This function will return all matches.\n  \n  Example:\n    &gt; say reswitchall(c,.a.,A,.b.,B,.c.,C,.d.,D,E)\n    You say &quot;C&quot;\n  \n  See Also: switch(), reswitchi(), reswitch(), reswitchalli(), regexps\n\n</PRE>\n<A HREF=\"#reswitch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reswitchalli()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reswitchalli()\"><H3>RESWITCHALLI()</H3></A><PRE>\n  Function: reswitchalli(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  \n  This function is just like switch(), except they compare &lt;string&gt; against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-insensitive.  This function will return all matches.\n  \n  Example:\n    &gt; say switchall(c,.a.,A,.b.,B,.c.,C,.d.,D,E)\n    You say &quot;C&quot;\n  \n  See Also: switch(), reswitchi(), reswitchi(), reswitchall(), regexps\n\n</PRE>\n<A HREF=\"#reswitchall()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reswitchi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reswitchi()\"><H3>RESWITCHI()</H3></A><PRE>\n  Function: reswitchi(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;,[&lt;patN&gt;,&lt;resN&gt;],...[,&lt;dflt&gt;]])\n  \n  This function is just like switch(), except they compare &lt;string&gt; against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-insensitive.\n  \n  Example:\n    &gt; say reswitchi(c,.a.,A,.b.,B,.c.,C,.d.,D,E)\n    You say &quot;C&quot;\n  \n  See Also: switch(), reswitch(), reswitchall(), reswitchalli(), regexps\n\n</PRE>\n<A HREF=\"#reswitchalli()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#reverse()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"reverse()\"><H3>REVERSE()</H3></A><PRE>\n  Function: reverse(&lt;string&gt;)\n \n  Reverses the order of the characters of &lt;string&gt;.\n \n  Examples:\n    &gt; say reverse(This is a test)\n    You say &quot;tset a si sihT&quot;\n    &gt; say reverse(This is a test, Really...)\n    You say &quot;...yllaeR ,tset a si sihT&quot;\n    &gt; say reverse(A man, a plan, a canal -- Panama!)\n    You say &quot;!amanaP -- lanac a ,nalp a ,nam A&quot;\n  \n  See Also: revwords()\n  \n</PRE>\n<A HREF=\"#reswitchi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#revisions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"revisions\"><H3>revisions</H3></A><PRE>\n  All credits to players, codebases, or other is presented in the RHOST.CHANGES\n  file in the readme directory in the source distribution.  The credits are too\n  diverse and well too detailed to be sufficient as a small snippit in online\n  help.\n  \n  Beginning with Rhost 3.9.1, the Development team has tracked all changes to\n  the Rhost system in the helpfiles, so that users may see what changes have\n  been made with each revision.  Each change is detailed in bullet-point format\n  in a helpfile specific to its revision, along with the alias for the \n  developer who completed the change. \n  \n  Do note, effort was done to backport help as much as possible all the way\n  back to the initial 3.2.4 rewrite that started Rhost for what it is today.\n  \n  Any versioning of Rhost version 1.0 through 3.0 was sadly lost to time.\n  \n  The developers who may appear in these files are:\n    ASH - Ashen-Shugar      * AMB - Ambrosia            EEH - Noltar\n    KRK - Loki                LNS - Lensman             ODN - Odin\n    SEA - Seawolf             THO - Thorin              NYS - Nyctasia\n    ROK - Rook\n  \n  The current Lead Developer (which we change up) is marked with a '*'.\n   \n  Current Revision: 3.9.5p3\n\n  Available Revisions:\n    1.0.0: 1.0.0p0 (NycMUD)\n    1.5.0: 1.5.0p0 (NycMUSE\n    2.0.0: 2.0.0p0 (SeawolfMUSE)\n    3.0.0: 3.0.0p0 (alpha - led to 3.2.0)\n    3.2.0: 3.2.0p0 (beta -- led to 3.2.4)\n    3.2.4: 3.2.4p0, 3.2.4p1,  3.2.4p2,  3.2.4p3,  3.2.4p4,  3.2.4p5,  3.2.4p6,\n           3.2.4p7, 3.2.4p8,  3.2.4p9,  3.2.4p10, 3.2.4p11, 3.2.4p12, 3.2.4p13,\n           3.2.4p14, 3.2.4p15, 3.2.4p16, 3.2.4p17, 3.2.4p18\n    3.9.0: 3.9.0p0, 3.9.0p1, 3.9.0p2\n    3.9.1: 3.9.1p0, 3.9.1p1, 3.9.1p2\n    3.9.2: 3.9.2p0, 3.9.2p1\n    3.9.3: 3.9.3p0, 3.9.3p1, 3.9.3p2\n    3.9.4: 3.9.4p0, 3.9.4p1, 3.9.4p2, 3.9.4p3, 3.9.4p4, 3.9.4p5\n    3.9.5: 3.9.5p0, 3.9.5p1, 3.9.5p2, 3.9.5p3\n\n</PRE>\n<A HREF=\"#reverse()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#revwords()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"revwords()\"><H3>REVWORDS()</H3></A><PRE>\n  Function: revwords(&lt;string&gt;[, &lt;delim&gt;])\n \n  Reverses the order of the words of &lt;string&gt;.  A word is considered to be\n  any sequence of nonblank characters, separated by blanks, so punctuation\n  characters that follow a word are considered part of the word.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n \n  Examples:\n    &gt; say revwords(This is a test\\, Really...)\n    You say &quot;Really... test, a is This&quot;\n    &gt; say revwords(Was it a cat I saw?)\n    You say &quot;saw? I cat a it Was&quot;\n  \n  See Also: reverse()\n  \n</PRE>\n<A HREF=\"#revisions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#right()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"right()\"><H3>RIGHT()</H3></A><PRE>\n  Function: right(&lt;string&gt;, &lt;position&gt;)\n  \n  Right will take a string and return the right-most position of characters\n  from the string.  \n  \n  Example:\n    &gt; say right(this is a test,5)\n    You say &quot; test&quot;\n    &gt; say right(this is a test,10000)\n    You say &quot;this is a test&quot;\n    &gt; say right(this is a test,0)\n    You say &quot;&quot;\n  \n  See Also: left(), mid(), delete(), ljc(), rjc()\n  \n</PRE>\n<A HREF=\"#revwords()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rindex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rindex()\"><H3>RINDEX()</H3></A><PRE>\n  Function: rindex(&lt;list&gt;, &lt;string&gt;, &lt;position&gt;, &lt;delimiter&gt;)\n  \n  This function is similar to index(), except that it replaces the &lt;string&gt;\n  starting at &lt;position&gt; in the given &lt;list&gt;.  You must specify a delimiter.\n  If the string you are replacing is longer than the list, it is \n  automatically appended to the end.\n  \n  Example:\n    &gt; say rindex(this is a test,was another,2,%b)\n    You say &quot;this was another test&quot;\n    &gt; say rindex(this is weird,rather weird you know,3,%b)\n    You say &quot;this is rather weird you know&quot;\n  \n  See Also: index(), aindex, iindex()\n  \n</PRE>\n<A HREF=\"#right()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rj()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rj()\"><H3>RJ()</H3></A><PRE>\n  Function: rjust(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n            rj(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n \n  This function pads a string with leading &lt;fill&gt; characters, or with spaces\n  if no fill character is given) (&quot;right-justifies&quot;) so it is &lt;length&gt; long.\n  If &lt;string&gt; is longer than &lt;length&gt;, the &lt;string&gt; is returned; it is not\n  truncated. &lt;fill&gt; may be a string of over one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Examples:\n    &gt; say -[rjust(foo,6)]-\n    You say &quot;-   foo-&quot;\n    &gt; say %r0[rjust(foo,6)]7%r01234567\n    You say &quot;\n    0   foo7\n    01234567&quot;\n    &gt; say =[rjust(bar,5,.)]=\n    You say &quot;=..bar=&quot;\n  \n  Alternate:\n    &gt; say =[printf($:.:5s,bar)]=       (The default justification is right)\n    You say &quot;=..bar=&quot;\n  \n  See Also: rjc(), ljust(), ljc(), strlen(), printf(), wrap()\n  \n</PRE>\n<A HREF=\"#rindex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rjc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rjc()\"><H3>RJC()</H3></A><PRE>\n  Function: rjc(&lt;string&gt;, &lt;length&gt; [,&lt;fill&gt;])     'Right Justify and Cut'\n   \n  This function pads a string with leading blanks to right justify the \n  &lt;string&gt; within a field of &lt;length&gt; characters.  If &lt;string&gt; is longer \n  than &lt;length&gt; it will be cut to fit within a field of &lt;length&gt; characters.\n  You may specify an optional fill character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Examples:\n    &gt; say -[rjc(foo,6)]-\n    You say &quot;-   foo-&quot;\n    &gt; say -[rjc(this is foo,6)]-\n    You say &quot;-this i-&quot;\n   \n  See Also: rjust(), ljc(), ljust(), printf(), wrap()\n \n</PRE>\n<A HREF=\"#rj()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rjust()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rjust()\"><H3>RJUST()</H3></A><PRE>\n  Function: rjust(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n            rj(&lt;string&gt;, &lt;length&gt;[, &lt;fill&gt;])\n \n  This function pads a string with leading &lt;fill&gt; characters, or with spaces\n  if no fill character is given) (&quot;right-justifies&quot;) so it is &lt;length&gt; long.\n  If &lt;string&gt; is longer than &lt;length&gt;, the &lt;string&gt; is returned; it is not\n  truncated. &lt;fill&gt; may be a string of over one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n   \n  Examples:\n    &gt; say -[rjust(foo,6)]-\n    You say &quot;-   foo-&quot;\n    &gt; say %r0[rjust(foo,6)]7%r01234567\n    You say &quot;\n    0   foo7\n    01234567&quot;\n    &gt; say =[rjust(bar,5,.)]=\n    You say &quot;=..bar=&quot;\n  \n  Alternate:\n    &gt; say =[printf($:.:5s,bar)]=       (The default justification is right)\n    You say &quot;=..bar=&quot;\n  \n  See Also: rjc(), ljust(), ljc(), strlen(), printf(), wrap()\n  \n</PRE>\n<A HREF=\"#rjc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rloc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rloc()\"><H3>RLOC()</H3></A><PRE>\n  Function: rloc(&lt;object&gt;,&lt;levels&gt;)\n \n  This function may be used to get the location of an object's location\n  (for which you would previously use 'loc(loc(&lt;object&gt;))', which fails if you\n  don't control &lt;object&gt;'s location).  &lt;levels&gt; indicates the number of\n  nested 'loc' calls to make, so 'loc(loc(&lt;object&gt;))' could be replaced with\n  'rloc(&lt;object&gt;,2)'.  If rloc() encounters a room, the dbref of the room\n  is returned.\n \n  You must either control the object or be nearby for it to work.  When used\n  on an exit it returns the destination of the exit.  You can also use rloc()\n  to find the location of players that are not set UNFINDABLE.\n \n  rloc(&lt;object&gt;,0) is the same as num(&lt;object&gt;), and rloc(&lt;object&gt;,1) is the\n  same as loc(&lt;object&gt;).\n  \n  Example:\n    &gt; look\n    Object(#123p)\n    You are inside your object\n    &gt; @fo #123=look\n    Object&gt; Room(#124R)\n    Object&gt; You are inside a room.\n    &gt; say loc(me)\n    You say &quot;#123&quot;\n    &gt; say rloc(me,1)\n    You say &quot;#123&quot;\n    &gt; say rloc(me,2)\n    You say &quot;#124&quot;\n  \n  See Also: loc(), where()\n  \n</PRE>\n<A HREF=\"#rjust()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rnum()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rnum()\"><H3>RNUM()</H3></A><PRE>\n  Function: rnum(&lt;target&gt;,&lt;object&gt;)\n  \n  Returns the dbref number of the object, from target's perspective.\n  You must control &lt;target&gt; to successfully get the object's number.\n  \n  Example:\n    &gt; say room(me)\n    You say &quot;#5&quot;\n    &gt; say room(#122) (if #122 is an object that you owned)\n    You say &quot;#123&quot;\n    &gt; say room(#124) (if #124 is an object that you owned)\n    You say &quot;#123&quot;\n    &gt; say name(#122)\n    You say &quot;thingy&quot;\n    &gt; say num(thingy)\n    You say &quot;#-1&quot; \n    &gt; say rnum(thingy,#124)\n    You say &quot;#122&quot;\n  \n  See Also: locate(), num()\n  \n</PRE>\n<A HREF=\"#rloc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#robbery\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"robbery\"><H3>ROBBERY</H3></A><PRE>\n  Topic: ROBBERY\n \n  Robbing is not allowed on this MUSH. If you really need money, ask your\n  friendly neighborhood wizard.\n  \n  See Also: MONEY\n  \n</PRE>\n<A HREF=\"#rnum()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#robot\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"robot\"><H3>ROBOT</H3></A><PRE>\n  Flag: ROBOT(r)\n \n  If set on a player, indicates that the player is a robot and is allowed to\n  use the OUTPUTPREFIX and OUTPUTSUFFIX commands that many publicly available\n  robot programs require.  Some MUSHes do not restrict access to the\n  OUTPUTPREFIX and OUTPUTSUFFIX commands.\n \n  If set on an exit or a thing, indicates that robot players may not use the\n  exit or pick up the thing, the player is treated as having failed the lock.\n  \n  See Also: OUTPUTPREFIX, OUTPUTSUFFIX, @robot\n  \n</PRE>\n<A HREF=\"#robbery\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#roman()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"roman()\"><H3>ROMAN()</H3></A><PRE>\n  Function: roman(&lt;number&gt;)\n  \n  This function converts the given number to the Roman Numeral equivelant.\n  It will convert any number between 1 and 3999999.  As the normal\n  overslash on the higher roman numerials are not easilly supported in a text\n  environment, the higher roman numerals will be displayed as lower case.\n  The following roman numeral mapping exists:\n      I - 1          L - 50           v - 5000        c - 100000\n      V - 5          C - 100          x - 10000       m - 1000000\n      X - 10         M - 1000         l - 50000\n  \n  Examples:\n    &gt; say roman(1999)\n    You say &quot;MCMXCIX&quot;\n    &gt; say roman(777777)\n    You say &quot;dcclxxvMMDCCLXXVII&quot;\n  \n  See Also: pack()\n\n</PRE>\n<A HREF=\"#robot\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#room\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"room\"><H3>ROOM</H3></A><PRE>\n  Type: ROOM(R)   \n  \n  This flag is automatically set on rooms when you @dig a new\n  room. It cannot be changed. Rooms have the added advantage that \n  they can be saved from destruction by setting the room to !BYEROOM\n  \n  HELP BYEROOM\n  \n  However, this can only be done if no other room/object was created \n  that overwrote your room when it was set for destruction.\n  \n  See Also: BYEROOM, @dig\n  \n</PRE>\n<A HREF=\"#roman()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#room()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"room()\"><H3>ROOM()</H3></A><PRE>\n  Function: room(&lt;obj&gt;)\n \n  Returns the number of the room that &lt;obj&gt; is in, or would be in if it\n  executed LEAVE commands until it got to a room.  You can find out the\n  containing room of objects you own, nearby objects, and findable players.\n \n  Example:\n    &gt; I\n    You are carrying:\n    hat(#368)\n    cat(#325)\n    &gt; look\n    Mortal's Room(#367R)\n    A bare room with nothing in it but a bed and a chair.\n    &gt; say I am in [room(me)], the cat is in room [room(cat)].\n    You say &quot;I am in #367, the cat is in room #367.&quot;\n    &gt; @fo hat=get cat \n    cat has left.\n    &gt; say The cat is in [loc(#325)] within room [room(#325)].\n    You say &quot;The cat is in #368 within room #367.&quot;\n  \n  See Also: loc(), rloc(), lrooms(), UNFINDABLE\n  \n</PRE>\n<A HREF=\"#room\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rotl()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rotl()\"><H3>rotl()</H3></A><PRE>\n  Function: rotl(&lt;string&gt;,&lt;count&gt;)\n  \n  This function rotates a given string &lt;count&gt; number of characters to the\n  left and wraps around the text.\n  \n  Examples:\n    &gt; say rotl(this is a test,5)\n    You say &quot;is a testthis &quot;\n    &gt; say rotl(weird,2)\n    You say &quot;irdwe&quot;\n  \n  See Also: shl(), shr(), rotr()\n  \n</PRE>\n<A HREF=\"#room()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rotr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rotr()\"><H3>rotr()</H3></A><PRE>\n  Function: rotl(&lt;string&gt;,&lt;count&gt;)\n  \n  This function rotates a given string &lt;count&gt; number of characters to the\n  right and wraps around the text.\n  \n  Examples:\n    &gt; say rotr(this is a test,5)\n    You say &quot; testthis is a&quot;\n    &gt; say rotr(weird,2)\n    You say &quot;rdwei&quot;\n  \n  See Also: shl(), shr(), rotl()\n  \n</PRE>\n<A HREF=\"#rotl()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#round()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"round()\"><H3>ROUND()</H3></A><PRE>\n  Function: round(&lt;number&gt;,&lt;places&gt;)\n \n  Rounds &lt;number&gt; to &lt;places&gt; decimal places.  &lt;number&gt; may be\n  a floating point number, and an integer result is returned.\n  \n  You may specify a negative number to places to specfy a whole number\n  rounding.\n   \n  Examples:\n    &gt; say round(5,0)\n    You say &quot;5&quot;\n    &gt; say round(5.123,1)\n    You say &quot;5.1&quot;\n    &gt; say round(9.8765,3)\n    You say &quot;9.877&quot;\n    &gt; say round(5.5,0)\n    You say &quot;6&quot;\n    &gt; say round(-5.5,0)\n    You say &quot;-6&quot;\n    &gt; say round(5555555,-2)\n    You say &quot;5555600&quot;\n  \n  See Also: div(), floor(), mod(), trunc()\n  \n</PRE>\n<A HREF=\"#rotr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#royalty\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"royalty\"><H3>ROYALTY</H3></A><PRE>\n  Flag: ROYALTY(W)   \n  \n  If a person is ROYALTY, they are a wizard, unkillable, \n  subject to fewer restrictions, and able to use wizard commands.  \n  In general, ROYALTY can do anything using #&lt;number&gt; or *&lt;player&gt;. \n  Only player #1 or SUPER-ROYALTY can set and unset the ROYALTY flag of \n  other players.  No ROYALTY can turn their own ROYALTY flag off.   \n  \n  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, IMMORTAL\n  \n</PRE>\n<A HREF=\"#round()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rpage\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rpage\"><H3>rpage</H3></A><PRE>\n  Command: rpage[/&lt;switch&gt;] [[&lt;control&gt;]&lt;message&gt;]\n  \n  &lt;control&gt; is the formatter for the page (&quot;, ;, :, etc)\n  \n  This command will automatically page the last person who paged you.\n  You need not specify a player name.  It accepts and understands all\n  the format and commands that page would understand.\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n  \n  See Also: page, lpage, mrpage, whisper, say, pose\n  \n</PRE>\n<A HREF=\"#royalty\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rset()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rset()\"><H3>RSET()</H3></A><PRE>\n  Function: rset(&lt;object&gt;,&lt;[!]&lt;flag&gt; [[!]&lt;flag&gt; [!]&lt;flag&gt; ...]&gt;)\n            rset(&lt;object&gt;,&lt;&lt;attribute&gt;:&lt;value&gt;&gt; [,&lt;tree&gt;])\n            rset(&lt;object&gt;,&lt;&lt;attribute&gt;:_&lt;fromobj&gt;/&lt;fromattr&gt;&gt; [,&lt;tree&gt;])\n            rset(&lt;object&gt;/&lt;attr&gt;,[!]&lt;attrflag&gt;)\n  \n  The rset() function is a side-effect for the @set command.  It works nearly\n  like the set() sideeffect, except it returns the string that it set. \n  Everything that worked with @set will work with rset().  It follows the \n  same permissions and restrictions of the command.  The SIDEFX flag is \n  required to use rset().\n  \n  You may specify the optional &lt;tree&gt; of '1' to specifically set a TREE with\n  all branches filled (that do not exist) on the target.  A TREE set will\n  also verify permission on every branch of that tree prior to setting.  \n  Failure to set any of the branches, for any reason, will disallow \n  setting the attribute as well.\n  \n  The &lt;tree&gt; toggle is ignored on any method of rset() that does not \n  set or clear attributes.\n   \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; @set me=safe\n  Set.\n  &gt; say set(me,safe)\n  You say &quot;&quot;\n  &gt; say rset(me,safe)\n  You say &quot;safe&quot;\n  \n  See Also: set(), writable(), &amp;, @set, SIDEEFFECTS, ATTRIBUTE TREES\n  \n</PRE>\n<A HREF=\"#rpage\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#rxlevel()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"rxlevel()\"><H3>RXLEVEL()</H3></A><PRE>\n  Function: rxlevel(&lt;target&gt; [,&lt;value&gt;])\n  \n  Returns a space separated list of &lt;target&gt;'s Rx Levels. You must control\n  &lt;target&gt;.  If no levels are listed, nothing is returned.  If you do not \n  control the target, or if the target does not exist, '#-1' is returned.\n  \n  You may specify a value to set or unset if this SIDEEFFECT feature\n  is enabled.  The enactor MUST be set SIDEFX for this to work.  You\n  must have permission to set reality levels to use this.  Use \n  listrlevels() or @list rlevel to see the levels you can set.\n  \n  Example:\n    &gt; say rxlevel(me)\n    You say 'Real'.\n    &gt; say rxlevel(me, !real)\n    You say &quot;&quot;\n    &gt; say rxlevel(me)\n    You say &quot;&quot;\n  \n  See Also: hasrxlevel(), hastxlevel(), txlevel(), listrlevels(), chkreality()\n  \n</PRE>\n<A HREF=\"#rset()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#s()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"s()\"><H3>S()</H3></A><PRE>\n  Function: s(string)\n \n  This function performs pronoun substitution in a string, and then returns\n  that string.  As usually, %n is the name, %s the subjective pronoun, %o the\n  objective, %p the possessive, and %a the absolute possessive.  It is\n  important to note that the pronoun is that of the triggering object.\n \n  So, if the ve of an object were: &quot;[s(This is %n)], and I were to \n  type @trigger &lt;object&gt;/ve, it would return &quot;This is &lt;myname&gt;&quot;, but \n  if vf were @trigger me/ve, then triggering the vf makes the ve \n  return &quot;This is &lt;object&gt;&quot;\n  \n  Example:\n    &gt; @sex me=male\n    Set.\n    &gt; s(this [add(1,1)] %s)\n    You say &quot;this 2 his&quot; \n  \n  See Also: SUBSTITUTIONS\n  \n</PRE>\n<A HREF=\"#rxlevel()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#safe\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"safe\"><H3>SAFE</H3></A><PRE>\n  Flag: SAFE(s)\n \n  When set, requires the use of the /override switch to @destroy in order to\n  destroy the object.  It does not prevent the destruction of the object,\n  but merely requires some additional effort.  If a thing is set DESTROY_OK,\n  its SAFE flag is ignored and it may be destroyed without using the /override\n  switch.\n  \n  See Also: @destroy, DESTROY_OK, INDESTRUCTABLE\n  \n</PRE>\n<A HREF=\"#s()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#safebuff()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"safebuff()\"><H3>SAFEBUFF()</H3></A><PRE>\n  Function: safebuff(&lt;list&gt; [,&lt;delim&gt;])\n  \n  This function will return the list, by cutting off from the end any partial\n  string, based on the delimeter you specify &lt;delim&gt;.  If no delimeter is\n  specified, it assumes a space.  A good place to have this is in search()\n  functions that may reach or exceed the LBUF limit for output.\n  \n  Please note, ansi sequences will be stripped from this function before\n  the buffer is cut back.  Thus, any ansi sequence given to this function\n  will be removed.\n  \n  Example:\n    &gt; say search(eval=*)\n    You say &quot;#0 #1 ... #883 #884 #88&quot; (in this case, '#885' would be cut off)\n    &gt; say safebuff(search(eval=*))\n    You say &quot;#0 #1 ... #883 #884&quot; (the partial string '#885' was omitted)\n  \n  In the above examples, the '...' would be the huge ammount of output.\n  \n  See Also: lit(), s(), t()\n  \n</PRE>\n<A HREF=\"#safe\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#safelog toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"safelog toggle\"><H3>SAFELOG TOGGLE</H3></A><PRE>\n  Toggle: SAFELOG\n  \n  When set on a player, it 'cleans' their say output for proper logging.\n  Instead of 'You say &quot;blah&quot;' they will see 'So-n-So says &quot;blah&quot;' or\n  whatever their @saystring is set as.  This works with SAY and &quot;.\n  \n  See Also: say, &quot;, @saystring\n\n</PRE>\n<A HREF=\"#safebuff()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#save\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"save\"><H3>save</H3></A><PRE>\n  RhostMUSH, unlike lp's, merc's, diku's or similiar mud derivitives, does not\n  have a 'save' option.  Your character, upon creation, is automatically saved.\n  Everything you do, whenever you do it, is also automatically saved.  So just\n  have fun, relax, and enjoy your time on.   Leave the saving to us :)\n  \n</PRE>\n<A HREF=\"#safelog toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#say\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"say\"><H3>say</H3></A><PRE>\n  Command: say[/&lt;switches&gt;] &lt;message&gt;\n  Says &lt;message&gt; out loud to everyone in your current room. You can also\n  use '&quot;&lt;message&gt;'.  No switches are allowed with the '&quot;' shorthand.\n  \n  The following switches exist for the say command:\n    /noansi    - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n  \n  See Also: page, pose, whisper, :, ;, &quot;, @saystring\n  \n</PRE>\n<A HREF=\"#save\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#score\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"score\"><H3>score</H3></A><PRE>\n  Command: score\n  Displays how much money you have.  Helpful to see if any machines are\n  looping.\n  \n  See Also: @ps, LOOPING, inventory\n  \n</PRE>\n<A HREF=\"#say\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#scramble()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"scramble()\"><H3>scramble()</H3></A><PRE>\n  Function:  scramble(&lt;string&gt;)\n   \n  This function scrambles a string, returning a random permutation of its\n  characters. Note that this function does not pay any attention to spaces\n  or other special characters; it will scramble these characters just like\n  normal characters.\n \n  Example:\n    &gt; say scramble(abcdef)\n    You say &quot;cfaedb&quot;\n \n  See Also:  shuffle(), garble()\n  \n</PRE>\n<A HREF=\"#score\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#search classes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"search classes\"><H3>search classes</H3></A><PRE>\n  Topic: SEARCH CLASSES\n \n  You may use the following classes in @search, search() and searchng()\n  function calls:\n  \n  TYPE      - Restricts to objects of the indicated type (OBJECTS, ROOMS,\n              EXITS, PLAYERS).  THINGS may be used as an alias for OBJECTS.\n  NAME      - Restricts to objects whose names start with &lt;restriction&gt;.\n  OBJECTS   - A combination of TYPE=OBJECT and NAME=&lt;restriction&gt;.\n  THINGS    - An alias for OBJECTS.\n  ROOMS     - A combination of TYPE=ROOM and NAME=&lt;restriction&gt;.\n  EXITS     - A combination of TYPE=EXIT and NAME=&lt;restriction&gt;.\n  PLAYERS   - A combination of TYPE=PLAYER and NAME=&lt;restriction&gt;.\n  FLAGS     - Restricts to objects which have the flags listed in\n              &lt;restriction&gt; set..\n  FLAGS2    - Restricts to objects which have the flags listed in\n              &lt;restriction&gt; set.. (uses next set of flags)\n  EVAL      - Evaluates the restriction for each object, replacing ##\n              with the object's database number.  Evaluations that return\n              TRUE (IE, not 0 or #-1) are selected.\n  EOBJECT   - A combination of TYPE=OBJECT and EVAL=&lt;restriction&gt;.\n  ETHING    - An alias for OBJECTS.\n  EROOM     - A combination of TYPE=ROOM and EVAL=&lt;restriction&gt;.\n  EEXIT     - A combination of TYPE=EXIT and EVAL=&lt;restriction&gt;.\n  EPLAYER   - A combination of TYPE=PLAYER and EVAL=&lt;restriction&gt;.\n  \n</PRE>\n<A HREF=\"#scramble()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#search()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"search()\"><H3>SEARCH()</H3></A><PRE>\n  Function: search([&lt;player&gt;] [&lt;class&gt;=&lt;restriction&gt;[,&lt;low&gt;[,&lt;high&gt;]]])\n \n  The search() function returns a list of objects that match the search\n  criteria, which are the same as with the @search command.  This function\n  costs as much as the @search command, so repeated use is expensive.\n \n  Caution: if you use the [ and ] characters in an Eval selection you will\n  need to escape them.\n \n  Examples:\n    &gt; say search()\n    You say &quot;#226 #289 #325 #364 #368 #369&quot;\n    &gt; @stats me\n    6 objects = 0 rooms, 0 exits, 5 things, 1 players. (0 garbage)\n    &gt; say search(eval=\\[eq(money(##),1)\\])\n    You say &quot;#289 #325 #364 #368 #369&quot;\n    &gt; say search(player=wizard)\n    You say &quot;#1&quot;\n  \n  See Also: searchng(), @search, @find, @stat, SEARCH CLASSES\n\n</PRE>\n<A HREF=\"#search classes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#searchng()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"searchng()\"><H3>SEARCHNG()</H3></A><PRE>\n  Function: searchng([&lt;player&gt;] [&lt;class&gt;=&lt;restriction&gt;[,&lt;low&gt;[,&lt;high&gt;]]])\n  \n  This function works exactly as search(), except it will not return any\n  garbage (going/recover) objects in the results.\n  \n  Examples:\n    &gt; say searchng()\n    You say &quot;#226 #289 #325 #364 #368 #369&quot;\n  \n  See Also: search(), @search, @find, @stat, SEARCH CLASSES\n  \n</PRE>\n<A HREF=\"#search()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#secs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"secs()\"><H3>SECS()</H3></A><PRE>\n  Function: secs()\n \n  Returns the number of elapsed seconds since midnight, January 1, 1970.\n  This is an easy way to time things.\n \n  Example:\n     &gt; say secs()\n     You say &quot;692636020&quot;\n     ... wait a bit ...\n     &gt; say secs()\n     You say &quot;692636043&quot;\n  \n  See Also: convsecs(), convtime(), time(), timefmt()\n  \n</PRE>\n<A HREF=\"#searchng()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#secure()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"secure()\"><H3>SECURE()</H3></A><PRE>\n  Function: secure(&lt;string&gt;)\n \n  Returns &lt;string&gt; after replacing the characters [](){};%\\$, with spaces.\n  This prevents strings entered by players from causing undesired side\n  effects when used, such as making your object perform unintended commands\n  or give out information to which you have access.  Note that this function\n  is only needed when the resulting string is to be passed through the @force\n  command or be used as an attribute for an object (like the success message\n  for a mail message object).\n \n  Examples:\n    &gt; @va me=Sneak a peek at Wiz's desc... [get(#1/desc)]\n    &gt; say secure(%va)\n    You say &quot;Sneak a peek at Wiz's desc...  get #1/desc  &quot;\n    &gt; say secure($foobar:this {is} a really, tough ; test.)\n    You say &quot; foobar:this is a really tough   test.&quot;\n \n  Note: 'say secure(Sneak a peek at Wiz's desc... [get(#1/desc)])' does not\n  produce the expected result because the argument is evaluated BEFORE being\n  processed by secure(), therefore the [get()] call has already been\n  performed.\n  \n  See Also: escape(), escapex(), esclist(), unesclist()\n  \n</PRE>\n<A HREF=\"#secs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#securex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"securex()\"><H3>SECUREX()</H3></A><PRE>\n  function: securex(&lt;string&gt; [,&lt;omission&gt;])\n  \n  This functions exactly like secure(), except you may specify what characters\n  you do not wish to be secured out.  The following special characters are\n  available for omitting:\n     a - ignore all forms of ansi subsitutions from the string.\n  \n  Examples:\n    &gt; @va me=Sneak a peek at Wiz's desc... [get(#1/desc)]\n    &gt; say securex(%va)\n    You say &quot;Sneak a peek at Wiz's desc...  get #1/desc  &quot;\n    &gt; say securex($foobar:this {is} a really, tough ; test.,;)\n    You say &quot; foobar:this is a really tough ; test.&quot;\n    &gt; @va me=%rTest?  Yes, a test.\n    &gt; say securex(v(va),\\%)\n    You say &quot;%rTest?  Yes  a test.\n    &gt; say securex(v(va),\\%\\,)\n    You say &quot;%rTest?  Yes, a test.\n  \n  See Also: secure(), escape(), escapex(), esclist(), unesclist()\n  \n</PRE>\n<A HREF=\"#secure()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sees()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sees()\"><H3>sees()</H3></A><PRE>\n  Function: sees(&lt;object&gt;, &lt;target&gt; [,&lt;type&gt;])\n  \n  This function returns true (1) if the object is able to see target at\n  target's location.  Otherwise, it will return false (0).  You need to\n  control the object to be able to successfully return the result else\n  '0' will always be returned.  This will work similiar if you actually\n  looked at the room.  Naturally, as you wouldn't see yourself, it'll\n  return '0' for that condition.\n  \n  You may specify &lt;type&gt; as '1' if you wish to check for exits.  Normally\n  exits will be ignored.\n  \n  Examples:\n    &gt; look\n    A room\n    You see a room before you.\n    Contents:\n    testobj\n    &gt; say sees(me,me)\n    You say &quot;0&quot;\n    &gt; say sees(me,testobj)\n    You say &quot;1&quot;\n  \n  See Also: look, visible()\n  \n</PRE>\n<A HREF=\"#securex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#semaphores\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"semaphores\"><H3>SEMAPHORES</H3></A><PRE>\n  Topic: SEMAPHORES\n \n  Semaphores may be used for synchronizing complex objects or for enforcing\n  mutual exclusion.  You may use any object you own or any LINK_OK object as\n  a semaphore, and any type of object (thing, room, player, or exit) may be\n  used.\n \n  The semaphore state of an object is shown by the Semaphore attribute (which\n  is read-only); a positive number indicates the number of commands awaiting\n  notifies, and a negative number indicates the number of waits on that\n  semaphore that will not block.\n \n  Use the '@wait &lt;object&gt;' form of the @wait command to request a command be\n  delayed until &lt;object&gt; is notified with the @notify command.  The @drain\n  and @notify/all commands clear the semaphore on &lt;object&gt;, either\n  discarding or executing all pending commands.  Remember that the\n  object performing the @wait executes the command, not the object used\n  as a semaphore. \n  \n{ 'help semaphores2' for more }\n</PRE>\n<A HREF=\"#sees()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#semaphores2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"semaphores2\"><H3>semaphores2</H3></A><PRE>\n  You may also combine the semaphore and timer options of @wait with\n  '@wait &lt;object&gt;/&lt;timeout&gt; = &lt;command&gt;'  If the time period expires before\n  the semaphore is notified, then the command is executed and the semaphore\n  count is decremented, just as if the command had been run because the\n  semaphore had been notified.\n \n  Examples: &lt;simple&gt;     @wait semaphore=&quot;Foo\n                         @notify semaphore\n            &lt;mutex lock&gt; @va mutex lock=@wait me=@trig me/vb\n                         @vb mutex lock=&quot;Got it!;@notify me\n                         @startup mutex lock=@notify me\n            &lt;timed wait&gt; @wait timer/60 = &quot;Sixty Second Timer.\n \n  In the above examples you will say &quot;Foo&quot; after semaphore is notified,\n  you will say &quot;Got it&quot; when you have the mutual exclusion lock mutex lock\n  (You could have also modified object registers that need to be protected\n  from concurrent update), and you will say &quot;Sixty Second Timer.&quot; either when\n  timer is notified or after sixty seconds pass.\n \n  See Also: @drain, @notify, @wait, @halt\n  \n</PRE>\n<A HREF=\"#semaphores\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#senses\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"senses\"><H3>SENSES</H3></A><PRE>\n  Senses are the five senses that a human has (keeping 6th sense or other\n  perceptuary abilities out of the loop).  These senses are re-enacted with\n  the five following commands.\n        LOOK   - allows you to view things (mush standard)\n                 @desc     - what enactor sees.\n                 @adesc    - action that occurs.\n                 @odesc    - what everyone but enactor sees.\n        TOUCH  - allows you to touch things with following reactions.\n                 @stouch   - what enactor sees.\n                 @satouch  - action that occurs.\n                 @sotouch  - what everyone but enactor sees.\n        TASTE  - allows you to taste things with following reactions.\n                 @staste   - what enactor sees.\n                 @sataste  - action that occurs.\n                 @sotaste  - what everyone but enactor sees.\n        LISTEN - allows you to hear things with following reactions.\n                 @slisten  - what enactor sees.\n                 @salisten - action that occurs.\n                 @solisten - what everyone but enactor sees.\n        SMELL  - allows you to smell things with following reactions.\n                 @ssmell   - what enactor sees.\n                 @sasmell  - action that occurs.\n                 @sosmell  - what everyone but enactor sees.\n        \n</PRE>\n<A HREF=\"#semaphores2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#session\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"session\"><H3>SESSION</H3></A><PRE>\n  Command: SESSION\n  Displays information on how many characters you have sent and received\n  during this session, and which (Internal) port you are connected to on the\n  mush.  It must be typed in all uppercase.\n \n  Example:\n   &gt; SESSION\n                                   Characters Input----  Characters Output---\n  Player Name     On For Idle Cmds Pend  Lost     Total  Pend  Lost     Total\n  Mortal           00:06   0s   16    0     0        44   156     0      2679\n  2 Players logged in.\n \n  Pending characters are those waiting to be acted on as commands (for input)\n  or waiting to be sent out over the network (output).  Lost characters are\n  due to overflowing either the MUSH's input or output buffers, either as the\n  result of running a single command that produces too much output (such as\n  @find and @search commands that match a large number of objects), or from\n  typing too much on one line.\n \n  Note: your Pending count for output will always be nonzero, as the output\n  of the SESSION command hasn't been sent out over the network yet.\n  \n  See Also: WHO, DOING\n  \n</PRE>\n<A HREF=\"#senses\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#set()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"set()\"><H3>SET()</H3></A><PRE>\n  Function: set(&lt;object&gt;,&lt;[!]&lt;flag&gt; [[!]&lt;flag&gt; [!]&lt;flag&gt; ...]&gt;)\n            set(&lt;object&gt;,&lt;&lt;attribute&gt;:&lt;value&gt;&gt; [,&lt;tree&gt;])\n            set(&lt;object&gt;,&lt;&lt;attribute&gt;:_&lt;fromobj&gt;/&lt;fromattr&gt;&gt; [,&lt;tree&gt;])\n            set(&lt;object&gt;/&lt;attr&gt;,[!]&lt;attrflag&gt;)\n  \n  The set() function is a side-effect for the @set command.  Everything that\n  worked with @set will work with set().  It follows the same permissions and\n  restrictions of the command.  The SIDEFX flag is required to use set().\n  \n  You may specify the optional &lt;tree&gt; of '1' to specifically set a TREE with\n  all branches filled (that do not exist) on the target.  A TREE set will\n  also verify permission on every branch of that tree prior to setting.  \n  Failure to set any of the branches, for any reason, will disallow \n  setting the attribute as well.\n  \n  The &lt;tree&gt; toggle is ignored on any method of set() that does not \n  set or clear attributes.\n   \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; @set me=safe\n  Set.\n  &gt; say set(me,safe)\n  You say &quot;&quot;\n  \n  See Also: rset(), writable(), &amp;, @set, SIDEEFFECTS, ATTRIBUTE TREES\n  \n</PRE>\n<A HREF=\"#session\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setdiff()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setdiff()\"><H3>SETDIFF()</H3></A><PRE>\n  Function: setdiff(&lt;list1&gt;, &lt;list2&gt;[, &lt;delim&gt; [, &lt;sep&gt; [, &lt;sorttype&gt;]]])\n   \n  This function returns the difference of two sets -- i.e., the elements in\n  &lt;list1&gt; that aren't in &lt;list2&gt;. The list that is returned is sorted.\n   \n  If &lt;delim&gt; is specified, it (rather than a space) is used to separate items\n  in the list.\n  \n  If &lt;sep&gt; is specified, it will be used (rather than a space) for the output\n  seperator for the list.\n  \n  If &lt;sorttype&gt; is specified, you may have a different sort than the default\n  alphanumerical sort.  (d)bref, (n)umeric, (f)loat, (a)lphanumeric.\n   \n  Example:\n    &gt; say setdiff(foo baz gleep bar, bar moof gleep)\n    You say, &quot;baz foo&quot;\n    &gt; say setdiff(foo baz gleep bar, bar moof gleep,,-)\n    You say, &quot;baz-foo&quot;\n  \n  See Also: setinter(), setunion(), sort(), listdiff()\n  \n</PRE>\n<A HREF=\"#set()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setinter()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setinter()\"><H3>SETINTER()</H3></A><PRE>\n  Function: setinter(&lt;list1&gt;, &lt;list2&gt;[, &lt;delim&gt; [, &lt;sep&gt; [, &lt;sorttype&gt;]]])\n   \n  This function returns the intersection of two sets -- i.e., the elements\n  that are in both &lt;list1&gt; and &lt;list2&gt;. The list that is returned is sorted.\n  \n  If &lt;delim&gt; is specified, it (rather than a space) is used to separate items\n  in the list.\n   \n  If &lt;sep&gt; is specified, it will be used (rather than a space) for the output\n  seperator for the list.\n  \n  If &lt;sorttype&gt; is specified, you may have a different sort than the default\n  alphanumerical sort.  (d)bref, (n)umeric, (f)loat, (a)lphanumeric.\n  \n  Example:\n    &gt; say setinter(foo baz gleep bar, bar moof gleep)\n    You say, &quot;bar gleep&quot;\n    &gt; say setinter(foo baz gleep bar, bar moof gleep,,-)\n    You say, &quot;bar-gleep&quot;\n  \n  See Also: setdiff(), setunion(), sort(), listinter()\n  \n</PRE>\n<A HREF=\"#setdiff()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setq()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setq()\"><H3>SETQ()</H3></A><PRE>\n  Function: setq(&lt;number&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setq(&lt;label&gt;,&lt;string&gt;[,&lt;label&gt;)\n            setq(!,&lt;string&gt;,&lt;label&gt;)\n            setq(+,&lt;string&gt;,&lt;label&gt;)\n \n  The setq() function is used to copy strings into local registers.\n  It returns a null string; it is a purely &quot;side effect&quot; function.\n  \n  There are ten local registers, numbered 0 through 9. They are cleared\n  at the start of each command. They are most useful for storing complex\n  function evaluations which are used repeatedly within a single command.\n  The local registers may be read via the r() function, and a common use\n  of setq()/r() is to temporarily store the result of a complex evaluation\n  whose result is needed more than once.\n \n  setq() can be used to improve the readability of MUSH code, as well as to\n  cut down the amount of time needed to do complex evaluations.\n  \n  If enhanced setq has been enabled at compiletime, you may use a-z as well.\n  Enabling this in the code can cause some excess memory usage.\n  \n  Compiletime may also switch this functionality with SETQ_OLD().  Check\n  @list options to see if it was.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the &lt;number&gt;.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first  unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n   \n  Example:\n    &gt; &amp;TEST me=Test on [mudname()] at [time()].\n    &gt; say [setq(0,u(TEST))]'[r(0)]' has length [strlen(r(0))].\n    You say &quot;'Test on TestMUSH at Tue Feb 23 17:00:51 1993.' has length 45.&quot;\n    &gt; say [setq(0,u(TEST),test)][setq(test,Test: [u(test)])][r(0)]\n    You say &quot;Test: Test on TestMUSH at Tue Feb 23 17:00:51 1993&quot;\n  \n  See Also: setr(), setr_old(), setq_old(), r(), nameq(), inc(), dec(), \n            setqmatch(), SETQ_TEMPLATE\n  \n</PRE>\n<A HREF=\"#setinter()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setq_old()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setq_old()\"><H3>SETQ_OLD()</H3></A><PRE>\n  Function: setq_old(&lt;number&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setq_old(&lt;label&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setq_old(!,&lt;string&gt;,&lt;label&gt;)\n            setq_old(+,&lt;string&gt;,&lt;label&gt;)\n  \n  This functions exactly like setq(), except it is using the old MUSH \n  method of evaluation.  This tends to be less abraisive on braces and\n  brackets.\n  \n  Please check @list options to see if SETQ_OLD and SETQ are switched\n  at compiletime.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the &lt;number&gt;.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n\n  See Also: setr_old(), setq(), setr(), nameq(), SETQ_TEMPLATE\n  \n</PRE>\n<A HREF=\"#setq()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setq_templates\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setq_templates\"><H3>SETQ_TEMPLATES</H3></A><PRE>\n  You can specify 'templates' for setq registers to automatically have \n  pre-defined labels for each individual object.  This is done by setting\n  a string in the attribute 'SETQ_TEMPLATE' on the object.  The attribute\n  should be in the format:  &lt;register&gt;:&lt;string&gt;\n  \n  So an example would be:   0:foobar 1:xyzzy q:myqreg\n  \n  This would set a template on an object where it would preassign the\n  label 'foobar' to register 0, 'xyzzy' to register 1, and 'myqreg' to\n  register q.\n  \n  Note:  These are only useful for the immediate calling $commands.\n  They are not transversed through u() functions, @triggers, or other\n  action based events.\n  \n  You may redefine these labels as you would normally with nameq(), \n  setq(), or setr().\n  \n  See Also: nameq(), setq(), setr()\n  \n</PRE>\n<A HREF=\"#setq_old()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setqmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setqmatch()\"><H3>SETQMATCH()</H3></A><PRE>\n  Function: setqmatch(&lt;string&gt;, &lt;pattern&gt;[,delim])\n \n  The setqmatch() function tries to match &lt;pattern&gt; against &lt;string&gt;. If it\n  succeeds, it returns 1 and puts the text that matched each wildcard (up to\n  ten) into successive setq registers. The first wildcard's match goes into\n  register 0, the second into register 1, etc.\n \n  (If it reaches '10' and there's more, dump the remaining into\n   '10' if '10' is a '*' wildcard and not a '?' wildcard)\n \n  If it fails, it returns 0.  If optional delimiter of 'n' is specified,\n  then it returns nothing for failures or successes.  Default is 'y' for\n  returning values.\n \n  Example:\n    &gt; say setqmatch(This is a test, *test) -- [r(0)]\n    You say &quot;1 -- This is a &quot;\n    &gt; say setqmatch(open the door hal, open * ???) -- [r(0)] -- [r(2)]\n    You say &quot;1 -- the door -- a&quot;\n    &gt; say setqmatch(kow, wok)\n    You say &quot;0&quot;\n    &gt; say setqmatch(kow, wok, n)\n    You say &quot;&quot;\n  \n  See Also: listmatch(), match(), totmatch(), wildmatch(), setq()\n  \n</PRE>\n<A HREF=\"#setq_templates\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setr()\"><H3>SETR()</H3></A><PRE>\n  Function: setr(&lt;number&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setr(&lt;label&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setr(!,&lt;string&gt;,&lt;label&gt;)\n            setr(+,&lt;string&gt;,&lt;label&gt;)\n \n  The setr() function is used to copy strings into local registers.\n  Unlike setq(), it returns its &lt;string&gt; argument.\n  In all other respects it is identical to setq().\n  \n  If enhanced setq has been enabled at compiletime, you may use a-z as well.\n  Enabling this in the code can cause some excess memory usage.\n  \n  Compiletime may also switch this functionality with SETR_OLD().  Check\n  @list options to see if it was.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the &lt;number&gt;.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n   \n  Example: \n    &gt; &amp;TEST me=Test on [mudname()] at [time()].\n    &gt; say '[setr(0,u(TEST))]' has length [strlen(r(0))].\n    You say &quot;'Test on TestMUSH at Tue Feb 23 17:00:51 1993.' has length 45.&quot;\n  \n  See Also: setq(), setq_old(), setr_old(), r(), nameq(), inc(), dec(),\n            setqmatch(), SETQ_TEMPLATE\n  \n</PRE>\n<A HREF=\"#setqmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setr_old()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setr_old()\"><H3>SETR_OLD()</H3></A><PRE>\n  Function: setr_old(&lt;number&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setr_old(&lt;label&gt;,&lt;string&gt;[,&lt;label&gt;])\n            setr_old(!,&lt;string&gt;,&lt;label&gt;)\n            setr_old(+,&lt;string&gt;,&lt;label&gt;)\n  \n  This functions exactly like setr(), except it is using the old MUSH \n  method of evaluation.  This tends to be less abraisive on braces and\n  brackets.\n  \n  Please check @list options to see if SETR_OLD and SETR are switched\n  at compiletime.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the &lt;number&gt;.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n  \n  See Also: setq_old(), setq(), setr(), nameq(), SETQ_TEMPLATE\n  \n</PRE>\n<A HREF=\"#setr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#setunion()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"setunion()\"><H3>SETUNION()</H3></A><PRE>\n  Function: setunion(&lt;list1&gt;, &lt;list2&gt;[, &lt;delim&gt; [, &lt;sep&gt; [, &lt;sorttype&gt;]]])\n   \n  This function returns the union of two sets -- i.e., all the elements of\n  both &lt;list1&gt; and &lt;list2&gt;, minus any duplicate elements. Think of it as\n  CAT() without duplicated words.  The list returned is sorted.\n   \n  If &lt;delim&gt; is specified, it (rather than a space) is used to separate items\n  in the list.\n   \n  If &lt;sep&gt; is specified, it will be used (rather than a space) for the output\n  seperator for the list.\n  \n  If &lt;sorttype&gt; is specified, you may have a different sort than the default\n  alphanumerical sort.  (d)bref, (n)umeric, (f)loat, (a)lphanumeric.\n   \n  Example:\n    &gt; say setunion(foo baz gleep bar, bar moof gleep)\n    You say, &quot;bar baz foo gleep moof&quot;\n    &gt; say setunion(foo baz gleep bar, bar moof gleep,,-)\n    You say, &quot;bar-baz-foo-gleep-moof&quot;\n  \n  See Also: setdiff(), setinter(), sort(), listunion()\n  \n</PRE>\n<A HREF=\"#setr_old()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#shift()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"shift()\"><H3>SHIFT()</H3></A><PRE>\n  Function: shift(&lt;value&gt;)\n            shift()\n  \n  This function controls the values returned with %0-%9 (or v(0)-v(9)) with\n  regards to u() attributes, functions or @functions.  Each increment to\n  shift will shift the values 10.  So shift(1) will make %5 actually be\n  the 15's argument, not the 5th.  You can shift up to the max arguments\n  currently allowed by the mush.  The default is 30 total arguments, thus\n  you can shift to the value '3'.\n  \n  If you do not specify an argument, it shows you what the current shift \n  value is set to.  This value resets itself for each pass through the\n  queue (or by user-intervention).\n\n  See Also: v()\n\n</PRE>\n<A HREF=\"#setunion()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#shl()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"shl()\"><H3>shl()</H3></A><PRE>\n  Function: shl(&lt;number or string&gt;,&lt;count&gt;)\n  \n  Performs a leftwards bit-shift on &lt;number&gt;, shifting it &lt;count&gt; times.\n  This is equivalent to mul(&lt;number&gt;,pow(2,&lt;count&gt;), but much faster.\n  This function also shifts left a given string &lt;count&gt; number\n  of characters.\n  \n  Examples:\n    &gt; say shl(1,4)\n    You say &quot;16&quot;\n    &gt; say shl(weird!!!,3)\n    You say &quot;rd!!!&quot;\n  \n  See Also: shr(), rotl(), rotr()\n  \n</PRE>\n<A HREF=\"#shift()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#showfailcmd\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"showfailcmd\"><H3>SHOWFAILCMD</H3></A><PRE>\n  Flag: SHOWFAILCMD([f])  \n  \n  This flag, when set on an item, will return the \n  appropiate @ufail messages (ufail, aufail, oufail), if there is a\n  matching $command and the object is uselocked against you.\n  \n</PRE>\n<A HREF=\"#shl()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#shr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"shr()\"><H3>shr()</H3></A><PRE>\n  Function: shr(&lt;number or string&gt;,&lt;count&gt;)\n  \n  Performs a rightwards bit-shift on &lt;number&gt;, shifting it &lt;count&gt; times.\n  This is equivalent to div(&lt;number&gt;,pow(2,&lt;count&gt;), but much faster.\n  Function: case(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;]...[,&lt;dflt&gt;]).  This function also\n  shifts right a given string &lt;count&gt; number of characters.\n  \n  Examples:\n    &gt; say shr(16,3)\n    You say &quot;2&quot;\n    &gt; say shr(weird!!!,4)\n    You say &quot;weir&quot;\n  \n  See Also: shl(), rotl(), rotr()\n  \n</PRE>\n<A HREF=\"#showfailcmd\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#shuffle()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"shuffle()\"><H3>shuffle()</H3></A><PRE>\n  Function: shuffle(&lt;string&gt; [,&lt;delim&gt; [,&lt;output sep&gt;]])\n  \n  Returns the string randomly 'shuffled' or mixed up with regards to order.\n  You may specify an optional delimiter instead of the default 'space' as\n  well as an optional filler.\n  \n  Example:\n    &gt; say shuffle(This is a test)\n    You say &quot;This a is test&quot;               (seperator is a space ' ')\n    &gt; say shuffle(This is a test)\n    You say &quot;a test This is&quot;\n    &gt; say shuffle(This@is@a@test,@)\n    You say &quot;is@a@This@test&quot;               (seperator is a '@')\n    &gt; say shuffle(This@is@a@test,@,|)\n    You say &quot;This|test|a|is&quot;               (seperator is '@', filler is '|')\n  \n  See Also: rand(), scramble(), sort(), setdiff(), setinter(), setunion() \n  \n</PRE>\n<A HREF=\"#shr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#side effect functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"side effect functions\"><H3>side effect functions</H3></A><PRE>\n  Function Lists: Side Effect Functions.\n    \n  clone()         - Clones an object.\n  create()        - Creates an object.\n  destroy()       - Destroys an object.\n  dig()           - Creates a room object.\n  emit()          - Emits a string to your location.\n  lemit()         - Like emit(), but finds the outermost room of your location.\n  link()          - Links an object to another.\n  list()          - Like iter(), but is buffer limit safe.\n  lock()          - Sets a specified lock on an object.\n  name()          - Sets the name of an object.\n  nameq()         - (Re)names setq variables with a new label.\n  npemit()        - Like pemit(), but will not strip spaces.\n  oemit()         - Like emit(), but will omit a specified target.\n  open()          - Opens an exit.\n  parent()        - Parents an object to another.\n  pemit()         - Emits a string to a list of targets.\n  r()             - Accesses local registers, and outputs its contents.\n  remit()         - Emits text to a specified room.\n  rset()          - Like set(), but returns the string that is set.\n  rxlevel()       - Sets or unsets a reality receive level for an object.\n  set()           - Sets an attribute on an object.\n  setq()          - Copies a string into a local register.\n  setq_old()      - Like setq(), but with old-style MUSH functionality.\n  setr()          - Like setq(), but also displays the string.\n  setr_old()      - Like setr(), but with old-style MUSH functionality.\n  tel()           - Teleports an object to a location.\n  toggle()        - Toggles a toggle on an object.\n  txlevel()       - Sets or unsets a reality transmit level for an object.\n  wipe()          - Wipes attribute(s) from object.\n  zemit()         - Emits a string to every room of a zone.\n  sqlite_query()  - SQL Lite database query.\n  sql()           - MySQL database query.\n  sqlescape()     - MySQL escape driven query.\n  sqlon()         - MySQL database enabler.\n  sqloff()        - MySQL database deabler.\n\n</PRE>\n<A HREF=\"#shuffle()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sideeffects\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sideeffects\"><H3>SIDEEFFECTS</H3></A><PRE>\n  RhostMUSH supports side-effect functions.  This has to be enabled by\n  the site owner before they can be used.  In addition, due to the many\n  security issues that arise from using side-effects, before the \n  function is accessable, it must be set SIDEFX.\n  \n  Please check @list options to see if side effects are enabled and\n  what side effects are enabled of the list.  list(), being relatively\n  harmless in how it's coded, is omitted from the restrictions \n  found with normal side-effects.\n  \n  MUX and PENN style sideeffects are both supported.  Support for the\n  force(), trigger() and wait() functions found in TinyMUSH 3.0 will \n  NOT be supported ever.  They're silly functions to add and the\n  security issues involved with these functions are too large to ignore.\n  \n  NOTE:  Side-effects are generally frowned upon and should not be used\n         at all.  This was only done for compatibility.\n  \n  Type '@list options' to see what side-effects are currently in effect.\n    \n  MUX sideeffects supported:   TEL, SET, PEMIT, CREATE, LIST, and LINK\n  PENN sideeffects supported:  TEL, SET, PEMIT, CREATE, LINK, DIG, OPEN, EMIT,\n                               LEMIT, OEMIT, CLONE, LOCK, PARENT, NAME,\n                               WIPE, ZEMIT, and REMIT\n  OTHER sideeffects supported: DESTROY, TOGGLE, TXLEVEL, RXLEVEL, RSET, \n                               and MOVE\n  DATABASE sideeffects supported: SQLITE_QUERY\n  \n  Help is available on MUX, PENN and OTHER side-effects by name.\n  \n</PRE>\n<A HREF=\"#side effect functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sidefx\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sidefx\"><H3>SIDEFX</H3></A><PRE>\n  Flag: SIDEFX([s])  \n  \n  If set on the target, the target is gained the ability\n  to be able to execute (and use) side-effects.  Without this flag,\n  it is impossible to use side-effects.  \n  \n  Please check '@list options' to see what side-effects (if any) are\n  enabled on the RhostMUSH you're on and if you have access to them.\n  \n</PRE>\n<A HREF=\"#sideeffects\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sign()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sign()\"><H3>SIGN()</H3></A><PRE>\n  Function: sign(&lt;number&gt;)\n \n  Returns -1, 0, or 1 depending on whether its argument is negative, zero, or\n  positive (respectively).\n \n  Example:\n  &gt; say sign(-4)\n  You say &quot;-1&quot;\n  &gt; say sign(4)\n  You say &quot;1&quot;\n  &gt; say sign(0)\n  You say &quot;0&quot;\n  &gt; say sign(-1)\n  You say &quot;-1&quot;\n  \n  See Also: abs()\n  \n</PRE>\n<A HREF=\"#sidefx\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sin()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sin()\"><H3>SIN()</H3></A><PRE>\n  Function: sin(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the sine of &lt;number&gt;, expressed in radians.\n  \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say sin(0)\n    You say &quot;0&quot;\n    &gt; say sin(fdiv(pi(),2))\n    You say &quot;1&quot;\n    &gt; say sin(fdiv(pi(),4))\n    You say &quot;0.707107&quot;\n    &gt; say sin(fdiv(pi(),6))\n    You say &quot;0.5&quot;\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), tan(), ctu(), \n            sinh(), cosh(), tanh()\n  \n</PRE>\n<A HREF=\"#sign()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#singlethreading\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"singlethreading\"><H3>SINGLETHREADING</H3></A><PRE>\n  You can accomplish 'single-threading' $commands by setting the attribute\n  on the object SINGLETHREAD.  Once set, you must have at the end of the\n  processing a way to set the attribute !NO_COMMAND, else that $command\n  will no longer be executable until the attribute's NO_COMMAND flag is\n  removed.\n  \n  You may globally set the attribute SINGLETHREAD as well.\n  \n</PRE>\n<A HREF=\"#sin()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#singletime()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"singletime()\"><H3>SINGLETIME()</H3></A><PRE>\n  Function: singletime(&lt;seconds&gt;)\n \n  This function converts seconds to a single time element which is\n  the lowest approximation to the given number of &lt;seconds&gt;.\n \n  Example:\n    &gt; say singletime(45)\n    You say &quot;45s&quot;\n    &gt; say singletime(12345)\n    You say &quot;3h&quot;\n    &gt; say singletime(123456)\n    You say &quot;1d&quot;\n \n  Related Topics: secs(), time(), timefmt()\n</PRE>\n<A HREF=\"#singlethreading\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sinh()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sinh()\"><H3>SINH()</H3></A><PRE>\n  Function: sinh(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the hyperbolic sine of &lt;number&gt;, expressed in radians.\n  \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say sinh(0)\n    You say &quot;0&quot;\n    &gt; say sinh(fdiv(pi(),2))\n    You say &quot;2.301298&quot;\n    &gt; say sinh(fdiv(pi(),4))\n    You say &quot;0.868671&quot;\n    &gt; say sinh(fdiv(pi(),6))\n    You say &quot;0.547854&quot;\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), tan(), ctu(), \n            cosh(), tanh(), sin()\n\n</PRE>\n<A HREF=\"#singletime()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#slave\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"slave\"><H3>SLAVE</H3></A><PRE>\n  Flag: SLAVE(x)\n \n  If set on a player, neither the player nor any of his objects may perform\n  any commands that change the database.  Some sites may restrict additional\n  commands.  This flag may only be set or cleared by wizards.\n  \n  See Also: FUBAR\n  \n</PRE>\n<A HREF=\"#sinh()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#smell\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"smell\"><H3>smell</H3></A><PRE>\n  Command: smell [&lt;object&gt;]\n  Displays the smells of &lt;object&gt;, or the location you're in if you don't\n  specify an object.  Specifying object as &lt;name&gt; or #&lt;dbref&gt; or 'me' or\n  'here' is legal.  You can also use smell to smell objects held by other\n  people.  Just use 'smell &lt;person&gt;'s &lt;object&gt;'.\n  \n  See Also: look, touch, taste, listen, @ssmell, @sasmell, @sosmell\n  \n</PRE>\n<A HREF=\"#slave\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sort()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sort()\"><H3>SORT()</H3></A><PRE>\n  Function: sort(&lt;list&gt;[, &lt;sort type&gt;[, &lt;delim&gt; [, &lt;sep&gt;]]])\n   \n  * Takes a list of words, numbers, or dbref, and sorts them into ascending\n    order.  Lexicographic order is used for words, and numeric order is used\n    for numbers and dbrefs.\n  * &lt;sort type&gt; may be used to specify the type of sort to perform (use d for\n    dbref, n for integer numeric, f for floating numeric, and a for\n    alphanumeric).  If omitted or left blank, the sort() function will\n    automatically determine the type of sort to perform.\n  * If &lt;delim&gt; is specified, it (rather than a space) is used to separate items\n    in the list.  You may specify an alternate delimiter without specifying\n    a sort type by passing a null &lt;sort type&gt; parameter.\n  * If &lt;sep&gt; is specified, it (rather than a space) is used to seperate items\n    in the output.\n   \n  Examples:\n    &gt; say sort(This is a test)\n    You say &quot;This a is test&quot;\n    &gt; say sort(98 99 100 101)\n    You say &quot;98 99 100 102&quot;\n    &gt; say sort(foo-bar-bletch,,-)\n    You say &quot;bar-bletch-foo&quot;\n    &gt; say sort(foo-bar-bletch,,-,+)\n    You say &quot;bar+bletch+foo&quot;\n  \n  See Also: sortby(), munge(), map(), setinter(), setunion(), setdiff(),\n            sortlist()\n  \n</PRE>\n<A HREF=\"#smell\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sortby()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sortby()\"><H3>SORTBY()</H3></A><PRE>\n  Function: sortby([&lt;obj&gt;/]&lt;attrib&gt;,&lt;list&gt;[,&lt;delim&gt; [,&lt;sep&gt;]])\n  \n  This sorts an arbitrary list according to the u-function &lt;obj&gt;/&lt;attrib&gt;.\n  This u-function should compare two arbitrary elements, %0 and %1, and\n  return zero (equal), a negative integer (element 1 is less than element 2)\n  or a positive integer (element 1 is greater than element 2).\n  \n  A simple example, which imitates a normal alphabetic sort:\n    &gt; &amp;ALPHASORT test=[comp(%0,%1)]\n    &gt; say [sortby(test/ALPHASORT,foo bar baz)]\n    You say &quot;bar baz foo&quot;\n  \n  A slightly more complicated sort. #1 is &quot;God&quot;, #2 is &quot;Amby&quot;, &quot;#3&quot; is &quot;Bob&quot;:\n    &gt; &amp;NAMESORT me=[comp(name(%0),name(%1))]\n    &gt; say [sortby(NAMESORT,#1 #2 #3)]\n    You say &quot;#2 #3 #1&quot;\n  \n  Warning: the function invocation limit applies to this function. If\n  this limit is exceeded, the function will fail _silently_. List and\n  function sizes should be kept reasonable.\n  \n  See Also: sort(), munge(), map(), setinter(), setunion(), setdiff()\n  \n</PRE>\n<A HREF=\"#sort()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sortlist()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sortlist()\"><H3>SORTLIST()</H3></A><PRE>\n  Function: sortlist(&lt;order&gt;, &lt;sep&gt;, &lt;list1&gt;, &lt;list2&gt;, [...,&lt;listN&gt;])\n  \n  This function takes 2 or more lists and chooses from each sample the max\n  or min value based on the sorting value type.  The &lt;order&gt; must have as the\n  first character a + for maxsort or a - for minsort.  If you do not specify\n  a sort type after the +/- or if the value is invalid, it assumes alphanum.\n  \n  The lists may be unequal lists.\n  \n  The following &lt;order&gt; types are allowed:  \n    +a  -- (default) sort alphanumerically by maximum value \n    -a  -- (default) sort alphanumerically by minimum value\n    +n  -- sort integers numerically by maximum value\n    -n  -- sort integers numerically by minimum value\n    +f  -- sort floating numerically by maximum value\n    -f  -- sort floating numerically by minimum value\n    +d  -- sort dbref#'s numerically by maximum valid dbref# (#-1 if invalid)\n    -d  -- sort dbref#'s numerically by minimum valid dbref# (#-1 if invalid)\n  \n  With the dbref# sort, any invalid dbref# is assigned the value #-1.  If all\n  arguments in that list order are all invalid, #-1 will be seen for the\n  value.\n  \n  Examples:\n    &gt; say sortlist(+n,,1 2 3,10 0 20, 0 0 0)\n    You say &quot;10 2 20&quot;\n    &gt; say sortlist(-n,,1 2 3,10 0 20, -100 100 200)\n    You say &quot;-100 0 3&quot;\n    &gt; say sortlist(-n,:,1:2:3,5:6:7,4:4:4,0:9:20)\n    You say &quot;5:9:20&quot;\n    &gt; say sortlist(+f,,1.2 2.5 3.3,1.3 2.4 -1.2)\n    You say &quot;1.3 2.5 3.3&quot;\n    &gt; say sortlist(+d,,#1 #2 #3,#10 #0 #20 #3735 #100 #200 #333,#-1 #3 #3735)\n    (Note: #3735 in this example is a Garbage/Recover/Non-Existant dbref#)\n    You say &quot;#10 #3 #20 #-1 #100 #200 #333&quot;\n  \n  See Also: sort(), munge(), map(), setinter(), setunion(), setdiff(),\n            listinter(), listunion(), listdiff()\n\n</PRE>\n<A HREF=\"#sortby()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#soundex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"soundex()\"><H3>SOUNDEX()</H3></A><PRE>\n  Function: soundex(&lt;word&gt;)\n   \n  The soundex function returns the soundex pattern for a word.\n  A soundex pattern represents the sound of the word, and similar\n  sounding words should have the same soundex pattern. Soundex patterns\n  consist of an uppercase letter and 3 digits.\n   \n  Example:\n    &gt; think soundex(foobar)\n    F160\n   \n  For details of how the algorithm works, see help soundex2\n  \n  See Also: soundlike()\n  \n</PRE>\n<A HREF=\"#sortlist()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#soundex2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"soundex2\"><H3>SOUNDEX2</H3></A><PRE>\n  Here's how the soundex algorithm works:\n  1. The first letter of the soundex code is the first letter of\n     the word (exception: words starting with PH get a soundex\n     starting with F)\n  2. Each remaining letter is converted to a number:\n      vowels, h, w, y ---------&gt; 0\n      b, p, f, v --------------&gt; 1\n      c, g, j, k, q, s, x, z --&gt; 2\n      d, t --------------------&gt; 3\n      l -----------------------&gt; 4\n      m, n --------------------&gt; 5\n      r -----------------------&gt; 6\n     At this stage, &quot;foobar&quot; is &quot;F00106&quot; \n  3. Strings of the same number are condensed. &quot;F0106&quot;\n  4. All 0's are removed, because vowels are much less important\n     than consonants in distinguishing words. &quot;F16&quot;\n  5. The string is padded with 0's or truncated to 4 characters. &quot;F160&quot;\n  That's it. It's not foolproof (enough = &quot;E520&quot;, enuf = &quot;E510&quot;) but\n  it works pretty well. :)\n  \n  Help borrowed from Penn with permission.\n  \n</PRE>\n<A HREF=\"#soundex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#soundlike()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"soundlike()\"><H3>SOUNDLIKE()</H3></A><PRE>\n  Function: soundlike(&lt;word&gt;,&lt;word&gt;)\n  Function: soundslike(&lt;word&gt;,&lt;word&gt;) (aliased)\n   \n  The soundslike function returns 1 if the two words have the same\n  soundex code (see help soundex() for information), which means, \n  in general, if they sound alike. For example:\n   \n  Examples:\n    &gt; think soundlike(robin,robbyn)\n    1\n    &gt; think soundlike(robin,roebuck)\n    0\n  \n  See Also: soundex()\n  \n  Help borrowed from Penn with permission.\n  \n</PRE>\n<A HREF=\"#soundex2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#soundslike()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"soundslike()\"><H3>SOUNDSLIKE()</H3></A><PRE>\n  Function: soundslike(&lt;word&gt;,&lt;word&gt;) (aliased)\n  Function: soundlike(&lt;word&gt;,&lt;word&gt;)\n   \n  The soundslike function returns 1 if the two words have the same\n  soundex code (see help soundex() for information), which means, \n  in general, if they sound alike. For example:\n   \n  Examples:\n    &gt; think soundslike(robin,robbyn)\n    1\n    &gt; think soundslike(robin,roebuck)\n    0\n  \n  See Also: soundex()\n  \n  Help borrowed from Penn with permission.\n  \n</PRE>\n<A HREF=\"#soundlike()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#space()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"space()\"><H3>SPACE()</H3></A><PRE>\n  Function: space(&lt;count&gt;)\n \n  Returns the number of indicated spaces.  If &lt;count&gt; is missing, negative,\n  or cannot be converted to a number, one space is returned.  This function\n  is useful when you want to pass a single space (or more than one) as a\n  function to an argument, because normally leading and trailing spaces are\n  stripped from function arguments.\n \n  Examples:\n    &gt; say space(4)\n    You say &quot;    &quot;\n    &gt; say edit(Foo bar bletch, space(), X)\n    You say &quot;FooXbarXbletch&quot;\n  \n  See Also: repeat(), SUBSTITUTIONS\n  \n</PRE>\n<A HREF=\"#soundslike()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#speak()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"speak()\"><H3>SPEAK()</H3></A><PRE>\n  See 'help parsestr()'\n  \n</PRE>\n<A HREF=\"#space()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#spellnum()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"spellnum()\"><H3>SPELLNUM()</H3></A><PRE>\n  Function: spellnum(&lt;number&gt;)\n  \n  This function, when fed a number (decimal or floating point) will return\n  the long name of the number (or in other wordes, the number in words).\n  \n  Examples:\n    &gt; say spellnum(10)\n    You say &quot;ten&quot;\n    &gt; say spellnum(1010)\n    You say &quot;one thousand ten&quot;\n  \n  See Also: strmath()\n\n</PRE>\n<A HREF=\"#speak()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#splice()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"splice()\"><H3>SPLICE()</H3></A><PRE>\n  Function: splice(&lt;list1&gt;, &lt;list2&gt;, &lt;word&gt;[, &lt;delim&gt; [, &lt;sep&gt; ]])\n  \n  This function splices &lt;list1&gt; and &lt;list2&gt; together. &lt;list1&gt; and &lt;list2&gt;\n  are space-separated lists of words\n  \n  If a word in &lt;list1&gt; is the same as &lt;word&gt;, it is replaced by the word\n  in the corresponding position in &lt;list2&gt;.  Both lists must have the\n  same number of words.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than a space.  \n  \n  &lt;sep&gt; may be used to specify an output seperator other than a space.\n   \n  Example:\n    &gt; say splice(foo bar baz,eek moof gleep,bar)\n    You say, &quot;foo moof baz&quot;\n    &gt; say splice(foo bar baz,eek moof gleep,bar,,-)\n    You say, &quot;foo-moof-baz&quot;\n  \n  See Also: merge()\n  \n</PRE>\n<A HREF=\"#spellnum()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#spoofing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"spoofing\"><H3>SPOOFING</H3></A><PRE>\n  Topic: SPOOFING\n \n  Spoofing is the act of making other characters think that a person said or\n  did something that they did not.  This is very easy to accomplish, and has\n  some good effects, which is why it is allowed.  Note that the NOSPOOF flag\n  allows players to see exactly who is spoofing what.  Be warned, wizards are\n  rumored to have ways to find those who spoof them.\n \n  Example:\n    ... From TinyJerk's perspective ...\n    &gt; @emit Wizard is a jerk!\n    Wizard is a jerk.\n \n   ... From Wizard's perspective, Wizard is set NO_SPOOF ...\n   [TinyJerk(#226)] Wizard is a jerk!\n   &gt; @boot tinyjerk\n   You booted TinyJerk off!\n   TinyJerk has disconnected.\n   1 connection closed.\n \n   ... TinyJerk's perspective again ...\n   Wizard gently shows you the door.\n   *** Disconnected ***\n  \n  See Also: @emit, @pemit, \\\\\n  \n</PRE>\n<A HREF=\"#splice()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sql\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sql\"><H3>SQL</H3></A><PRE>\n  SQL is available in two flavors in RhostMUSH, both are built in and both can\n  be ran at the same time.  \n  \n  SQLITE:  \n  This is a 'lite' form of SQL.  It has a good solid base, but doesn't offer\n  some of the more advanced features that MySQL/MariaDB has.  The hosting\n  server must have a workign SQLITE library to successfully link to and use\n  this database offering.\n  \n  MySQL/MariaDB:\n  This is an advanced form of SQL.  It allows all the feature-rich\n  capabilities of a fully function SQL engine.  The hosting server must have\n  mysql or mariadb to be able to link to and use this offering.\n  \n  See Also: sqlite_query(), @sql, @sqlconnect, @sqldisconnect, sql(), sqlon,\n            sqloff(), sqlping()\n\n</PRE>\n<A HREF=\"#spoofing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sql()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sql()\"><H3>SQL()</H3></A><PRE>\n  Function: sql(&lt;SQL statement&gt; [,&lt;delim&gt;,[&lt;field delim&gt;]])\n            sqlescape(&lt;SQL statement&gt;\n   \n  This function sends a SQL statement to an external SQL database and\n  returns the results. The user must be wizard or immortal.  On failure,\n  or a problem with executing the SQL statement, the function returns #-1.\n   \n  If multiple rows are returned, each row will be delimited by &lt;delim&gt;;\n  if &lt;delim&gt; is not specified, a space will be used. If multiple fields\n  are returned, each field will be delimited by &lt;field delim&gt; if specified,\n  or &lt;delim&gt; if not, or a space by default.\n   \n  Please not that special characters to mush (%, {, }, [, ], (, ), \\) may\n  have to be escaped for use in queries.  Please use ' for quotes for fields.\n  Only wizards+ can use this feature.\n\n  Examples: (borrowed from TinyMUSH3's help file)\n  &gt; @sql SELECT player_name, dbref_num FROM test WHERE race='Vampire'\n  Row 1, Field 1: Nos\n  Row 1, Field 2: 4\n  Row 2, Field 1: Caine\n  Row 2, Field 2: 389\n  &gt; &amp;VAMPS me = SELECT player_name, dbref_num FROM test WHERE race='Vampire'\n                ORDER BY player_name\n  &gt; say [sql(v(VAMPS))] -- [sql(v(VAMPS),|)]\n  You say &quot;Caine 389 Nos 4 -- Caine|389|Nos|4&quot;\n  &gt; @sql UPDATE test SET race='Vampire' WHERE dbref_num=672\n  SQL query touched 1 row.\n  &gt; say [sql(v(VAMPS),|,)] -- [sql(v(VAMPS),|,/)]\n  You say &quot;Caine 389|Nos 4|Rufus 672 -- Caine/389|Nos/4|Rufus/672&quot;\n  \n  See Also: sqlescape(), @sql, sqlon(), sqloff(), @sqlconnect, @sqldisconnect,\n            sqlping(), esclist(), unesclist()\n\n</PRE>\n<A HREF=\"#sql\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqlescape()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqlescape()\"><H3>SQLESCAPE()</H3></A><PRE>\n  Function: sqlescape(&lt;string&gt;)\n  \n  This function performs SQL-server-implemented escaping of &lt;string&gt;. It's\n  important to escape arbitrary data before passing it to the sql() function,\n  or @sql command, to prevent SQL injection attacks.\n   \n  When used in an SQL query, the results of an sqlescape() function\n  should be enclosed in single quotes.\n   \n  Note: You must be a wizard (or higher) to utilize this function.\n  \n  Example:\n    &gt; say sqlescape(You don't say)\n    You say &quot;You don\\'t say&quot;\n  \n  See Also: sql(), @sql, sqlon(), sqloff(), @sqlconnect, @sqldisconnect,\n            sqlping(), esclist(), unesclist()\n\n</PRE>\n<A HREF=\"#sql()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqlite_query()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqlite_query()\"><H3>SQLITE_QUERY()</H3></A><PRE>\n  Function: sqlite_query(&lt;db&gt;,&lt;query&gt;[,&lt;cdel&gt;[,&lt;rdel&gt;[,&lt;arg1&gt;,...,&lt;argN&gt;]]])\n  \n  This function executes the given query on a SQLite database. The database is\n  automatically created when necessary, so no additional set-up is needed to\n  begin using SQLite. The default column delimiter is '|', and the default row\n  delimiter is '^'.\n  \n  Note that SQL statements often contain characters like ',', '(', or ')', so\n  it can be particularly helpful to save queries in an attribute and use V()\n  or U() to access them.\n  \n  Since sqlite_query supports parameterized queries, this is even easier. The\n  second INSERT statement below demonstrates parameterized queries. One\n  important note is that the column and row delimiter arguments are still\n  required for all queries, even though they are only used for queries that\n  return data, such as SELECT queries.\n  \n  The arguments are the &lt;db&gt; [dbname], &lt;query&gt; [database query], \n  &lt;cdel&gt; [column delimiter], &lt;rdel&gt; [row delimiter], and &lt;arg1&gt; through &lt;argN&gt;\n  which are the parameters.\n \n  {see SQLITE_QUERY2 for examples}\n\n</PRE>\n<A HREF=\"#sqlescape()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqlite_query2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqlite_query2\"><H3>SQLITE_QUERY2</H3></A><PRE>\n  (CONTINUED)\n  Function: sqlite_query(&lt;db&gt;,&lt;query&gt;[,&lt;cdel&gt;[,&lt;rdel&gt;[,&lt;arg1&gt;,...,&lt;argN&gt;]]])\n  \n  Example:\n    &gt; @va me = CREATE TABLE test ( testFieldA STRING, testFieldB STRING )\n    Set.\n    &gt; say sqlite_query( testdb, v(va) )\n    You say &quot;&quot;\n    &gt; @va me = INSERT INTO test VALUES ( 'a', 'b' )\n    Set.\n    &gt; say sqlite_query( testdb, v(va) )\n    You say &quot;&quot;\n    &gt; say sqlite_query( testdb, SELECT * FROM test )\n    You say &quot;a|b&quot;\n    &gt; @va me = INSERT INTO test VALUES ( ?, ? )\n    Set.\n    &gt; say sqlite_query( testdb, v(va), , , c, d )\n    You say &quot;&quot;\n    &gt; say sqlite_query( testdb, SELECT * FROM test )\n    You say &quot;a|b^c|d&quot;\n  \n  See Also: @cluster \n\n</PRE>\n<A HREF=\"#sqlite_query()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqloff()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqloff()\"><H3>SQLOFF()</H3></A><PRE>\n  Function: sqloff()\n  \n  This function is essentially just the function equivelant of @sqlconnect.\n  Only wizards+ can use this feature.\n  \n  Example:\n    &gt; say sqloff()\n    You say &quot;0&quot;\n  \n  See Also: @sqlconnect, sqloff(), @sqldisconnect, @sql, sql(), sqlescape(),\n            sqlping()\n\n</PRE>\n<A HREF=\"#sqlite_query2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqlon()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqlon()\"><H3>SQLON()</H3></A><PRE>\n  Function: sqlon()\n  \n  This function is essentially just the function equivelant of @sqlconnect.\n  Only wizards+ can use this feature.\n  \n  Example:\n    &gt; say sqlon()\n    You say &quot;0&quot;\n  \n  See Also: @sqlconnect, sqloff(), @sqldisconnect, @sql, sql(), sqlescape(),\n            sqlping()\n\n</PRE>\n<A HREF=\"#sqloff()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqlping()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqlping()\"><H3>SQLPING()</H3></A><PRE>\n  Function: sqlping()\n  \n  This function returns '0' if the database is alive and active, or non-zero\n  (usually '1') if the database has an error with connectivity.\n  \n  Example:\n    &gt; say sqlping()\n    You say &quot;0&quot;\n    \n  See Also: @sqlconnect, sqloff(), @sqldisconnect, @sql, sql(), sqlescape(),\n            sqlon()\n\n</PRE>\n<A HREF=\"#sqlon()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sqrt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sqrt()\"><H3>SQRT()</H3></A><PRE>\n  Function: sqrt(&lt;number&gt;)\n \n  Returns the square root of &lt;number&gt;.  &lt;number&gt; may be a floating point\n  number, and a floating point result is returned.  &lt;number&gt; may not be\n  negative.\n \n  Examples:\n    &gt; say sqrt(2)\n    You say &quot;1.414214&quot;\n    &gt; say sqrt(100)\n    You say &quot;10&quot;\n    &gt; say sqrt(0)\n    You say &quot;0&quot;\n    &gt; say sqrt(-1)\n    You say &quot;#-1 SQUARE ROOT OF NEGATIVE&quot;\n  \n  See Also: power(), power10()\n  \n</PRE>\n<A HREF=\"#sqlping()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#squish()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"squish()\"><H3>SQUISH()</H3></A><PRE>\n  Function: squish(string)\n  \n  This function takes out all leading and ending spaces and reduces all spaces\n  in-between to only one space.\n  \n  Example:\n   &gt;say squish([space(10)]hi![space(10)]Bye![space(10)])\n    You say &quot;hi! Bye!&quot;\n  \n  See Also: s()\n  \n</PRE>\n<A HREF=\"#sqrt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#squish()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"squish()\"><H3>SQUISH()</H3></A><PRE>\n  Function squish(&lt;string&gt;[,&lt;delimeter&gt;])\n  \n  This function will remove multiple spaces (or specified delimiter) from\n  the string.  This is meant for the ability to remove excess spaces from\n  strings.\n  \n  Examples:\n    &gt; @wait 0=@va me=Test[space(20)]Test\n    Set.\n    &gt; say v(va)\n    You say &quot;Test                    Test&quot;\n    &gt; say squish(v(va))\n    You say &quot;Test Test&quot;\n    &gt; @vb me=TestaaaaaaaaaaaaaaaaaTest\n    Set.\n    &gt; say v(vb)\n    You say &quot;TestaaaaaaaaaaaaaaaaaTest&quot;\n    &gt; say squish(v(vb),a)\n    You say &quot;TestaTest&quot;\n  \n  See Also: s(), strip(), creplace(), trim()\n  \n</PRE>\n<A HREF=\"#squish()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#stack\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"stack\"><H3>STACK</H3></A><PRE>\n  Topic: STACK\n \n  Command lists that are run on objects can have up to 10 stack values\n  named %0 through %9 (or [v(0)] through [v(9)]).  Stack values can be set\n  by the @trigger command, or by matching wildcard characters in the Listen\n  attribute (in the case of the Ahear, Aahear, and Amhear attributes).\n \n  Example:\n    &gt; @listen item = * foo *\n    Set.\n    &gt; @ahear item = &quot;--&gt;[v(1)]&lt;-- bar --&gt;[v(0)]&lt;--\n    Set.\n    &gt; say Fee fie foo fum\n    You say &quot;Fee fie foo fum&quot;\n    item says &quot;--&gt;fum&quot;&lt;-- bar --&gt;Wizard says &quot;Fee fie&lt;--&quot;\n  \n  See Also: setq(), r(), setr(), nameq(), SUBSTITUTIONS\n  \n</PRE>\n<A HREF=\"#squish()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#startsecs()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"startsecs()\"><H3>STARTSECS()</H3></A><PRE>\n  Function: startsecs()\n   \n  Returns a string which is the time the MUSH last started in seconds.  \n  \n  Example:\n    &gt; say startsecs()\n    You say &quot;2324234&quot;\n   \n  See Also: startime(), secs(), rebootsecs(), reboottime()\n  \n</PRE>\n<A HREF=\"#stack\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#starttime()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"starttime()\"><H3>STARTTIME()</H3></A><PRE>\n  Function: starttime()\n \n  Returns a string which is the time the MUSH last started.  The time\n  is in the same format as the TIME() function returns.\n \n  Example:\n    &gt; say starttime()\n    You say &quot;Sat Dec  7 00:09:13 1991\n  \n  See Also: convtime(), reboottime(), startsecs(), rebootsecs()\n  \n</PRE>\n<A HREF=\"#startsecs()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#stats()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"stats()\"><H3>STATS()</H3></A><PRE>\n  Function: stats([&lt;player&gt;])\n \n  This function returns information about the number of objects on the MUSH,\n  much like the @stats command.  If the argument is omitted or is 'all', then\n  the stats for the entire MUSH are returned, otherwise the stats for the\n  named player are returned.  You can only get stats for yourself.\n \n  The stats are returned as a set of 6 numbers, in the same order as reported\n  by the @stats command: total objects, rooms, exits, things, players, and\n  garbage.  This command costs as much as the equivalent @stats command (IE:\n  '@stats/all' or '@stats &lt;player&gt;', not the free '@stats').\n \n  Examples:\n    &gt; @stats me\n    6 objects = 0 rooms, 0 exits, 5 things, 1 players. (0 garbage)\n    &gt; say stats(me)\n    You say &quot;6 0 0 5 1 0&quot;\n    &gt; say stats()\n    You say &quot;377 51 165 134 20 7&quot;\n    &gt; @stats/all\n    377 objects = 51 rooms, 165 exits, 134 things, 20 players. (7 garbage)\n  \n  See Also: @stats, @search, search(), searchng()\n  \n</PRE>\n<A HREF=\"#starttime()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#step()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"step()\"><H3>STEP()</H3></A><PRE>\n  Function: step([&lt;obj&gt;/]&lt;attr&gt;,&lt;list&gt;,&lt;step size&gt;[,&lt;delim&gt;[,&lt;output delim&gt;]])\n  \n  This function takes elements of &lt;list&gt;, &lt;step size&gt; elements at a time,\n  and passes them to the function defined by &lt;attr&gt;, as %0, %1, %2,\n  etc. The number of elements in the list does not need to be evenly\n  divisible by the step size. If no delimiters are provided, a space is\n  used as the delimiter. The step size must be at least 1, and no greater\n  than 30. Calling this function with a step size of 1 is equivalent to\n  using map().  Anything over argument 9 (%9) can be called with v().  Such\n  as v(10), v(20), and so forth.\n  \n  Example:\n    &gt; &amp;print_line me = %r%0 -- %1 -- %2\n    Set.\n    &gt; say [step(print_line,1 2 3 4 5 6 7 8,3)]\n    You say &quot;\n    1 -- 2 -- 3\n    4 -- 5 -- 6\n    7 -- 8 --&quot;\n  \n  This function provided for compatibility with TinyMUSH 3.0\n  \n  See Also: while(), map(), munge(), iter(), columns()\n  \n</PRE>\n<A HREF=\"#stats()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sticky\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sticky\"><H3>STICKY</H3></A><PRE>\n  Flag: STICKY(S) \n  \n  If a thing is STICKY, it goes home when dropped \n  (See HOMES). If a room is STICKY, its drop-to is delayed until the \n  last person leaves (See DROP-TOs). Only meaningful for things and \n  rooms. \n  \n  See Also: HOMES, DROP-TOS\n  \n</PRE>\n<A HREF=\"#step()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#str()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"str()\"><H3>STR()</H3></A><PRE>\n  Function: str(&lt;string&gt;,&lt;match&gt;)\n  \n  The str function works very similar to after() and very much like the\n  C function strstr.  This takes the string starting at the first match\n  and returns that string to the end of that string.  This function runs\n  faster than the after() function.\n  \n  Examples:\n    &gt; say str(This is a test,his)\n    You say &quot;his is a test&quot;\n  \n  See Also: nostr(), before(), after()\n  \n</PRE>\n<A HREF=\"#sticky\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strallof()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strallof()\"><H3>STRALLOF()</H3></A><PRE>\n  Function: ofparse(&lt;type&gt;, [&lt;eval1&gt; [,&lt;eval2&gt; ... &lt;evalN or delim&gt;]])\n\n  Type 1&amp;3: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 2&amp;4: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Type 5&amp;7: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 6&amp;8: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  \n  This function will take each &lt;eval&gt; and returns it based on the &lt;type&gt;.\n  \n  The following types exist:\n    1  -- Issue a firstof().  Essentially return the first &lt;eval&gt; that is\n          a true boolean.  This stops evaluation on first true &lt;eval&gt;.\n          The &lt;default&gt; is returned if no evals are met.  The &lt;default&gt;\n          is the assumed argument if only passed a single argument.\n    2  -- Issue an allof().  Essentially returning every &lt;eval&gt; that is\n          a true boolean.  This evaluates every argument.\n    3  -- This is the reverse of '1'.  It returns the first &lt;eval&gt; that\n          is a false boolean.  IT stops evaluation on first false &lt;eval&gt;.\n          This again assumes &lt;default&gt; if no other arguments.\n    4  -- This is the reverse of '2'.  It returns every false &lt;eval&gt;\n          boolean. This evaluates every argument.\n    5  -- Issue a strfirstof().  Essentially returns the first &lt;eval&gt; that\n          is a non-null string.  This stops evaluation on first non-null\n          &lt;eval&gt;.\n    6  -- Issues a strallof().  Essentially returns every &lt;eval&gt; that is\n          a non-null string.  This evaluates everyu argument.\n    7  -- This is the reverse of '5'.  It essentially will either return\n          a null or the default value.\n    8  -- This is the reverse of '6'.  It essentially will return\n          a list of nulls if you have such in your list.  This evaluates\n          every argument.\n  \n  For PennMUSH function lineup:\n      firstof(x,y)    == ofparse(1,x,y)\n      allof(x,y,z)    == ofparse(2,x,y,z)\n      strfirstof(x,y) == ofparse(5,x,y)\n      strallof(x,y,z) == ofparse(6,x,y,z)\n  \n{ see 'help ofparse2' for examples }\n\n</PRE>\n<A HREF=\"#str()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strcat()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strcat()\"><H3>STRCAT()</H3></A><PRE>\n  Function: strcat(&lt;string&gt;[,&lt;string2&gt;,...,&lt;stringx&gt;])\n  \n  Returns the strings concatinated with no spaces between them.\n  \n  Example:\n    &gt; say strcat(this,is,a,test)\n    You say &quot;thisisatest&quot;\n    &gt; say strcat(one,2,three,4)\n    You say &quot;one2three4&quot;\n  \n  See Also: cat()\n  \n</PRE>\n<A HREF=\"#strallof()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strdistance()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strdistance()\"><H3>STRDISTANCE()</H3></A><PRE>\n  Function: strdistance(&lt;string1&gt;, &lt;string2&gt; [,&lt;type&gt; [,&lt;damareu match&gt;]])\n  \n  This function will calculate the levenshtein distance between two strings.\n  This basically is the value calculated by the number of letters that differ\n  between the two strings entered.  If either string fed to this function\n  is null, it returns a -1.  You may specify the &lt;type&gt; of '1' to expressly\n  require case insensitivity in the matching.  The default behavior is case\n  sensitivity.  The optional forth argument enables damareu style matching\n  which considers the transposing of characters a single difference istead of\n  two.\n  \n  Examples:\n    &gt; say [strdistance(this,thiz)]\n    You say &quot;1&quot;\n    &gt; say [strdistance(this,This)]\n    You say &quot;1&quot;\n    &gt; say [strdistance(this,This,1)]\n    You say &quot;0&quot;\n    &gt; say [strdistance(the,teh)]\n    You say &quot;2&quot;\n    &gt; say [strdistance(the,teh,,1)]\n    You say &quot;1&quot;\n  \n  See Also: comp()\n\n  \n</PRE>\n<A HREF=\"#strcat()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#streq()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"streq()\"><H3>STREQ()</H3></A><PRE>\n  Function: streq(&lt;string1&gt;,&lt;string2&gt;)\n  \n  This function takes two strings and compares them.  If they match, it\n  returns a '1', if not, it returns a '0'.  This is not case sensitive.\n  \n  Examples:\n    &gt; streq(this is a test,THIS is A TesT)\n    You say &quot;1&quot;\n    &gt; streq(this is a test,this is a test?)\n    You say &quot;0&quot;\n  \n  See Also: comp(), ncomp(), match(), member()\n  \n</PRE>\n<A HREF=\"#strdistance()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#streval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"streval()\"><H3>STREVAL()</H3></A><PRE>\n  Function: streval(&lt;string&gt;, &lt;evaluation level&gt; [,&lt;arg&gt;,&lt;arg2&gt;,...,&lt;argN&gt;])\n  \n  This function works similar to u() or eval() where it takes the &lt;string&gt;\n  then evaluates it according to the permission of &lt;evaluation level&gt;.  You\n  must be equal to or less than the bitlevel specified or it assumes your\n  own level.  By default, none of the arguments passed will be evaluated.\n  \n  Evaluation Levels allowed:\n      CIT[IZEN]     -- Mortal (bit level 1)\n      GUILD[MASTER] -- Staff (bit level 2)\n      ARCH[ITECT]   -- Staff (bit level 3)\n      COUN[CILOR]   -- Staff (bit level 4)\n      ROY[ALTY]     -- Staff (bit level 5) -- This is a full Wizard\n      IMM[ORTAL]    -- Staff (bit level 6) -- This is essentially #1\n      GOD           -- Staff (bit level 7) -- Can only be ran as #1\n  \n  Examples: (assuming your a full wizard (royalty))\n    &gt; say streval(My bitlevel: [bittype(me)],immortal)\n    You say &quot;5&quot;                  (immortal is above your lvl, so ignores)\n    &gt; say streval(My bitlevel: [bittype(me)],councilor)\n    You say &quot;4&quot;\n    &gt; say streval(My bitlevel: [bittype(me)] -- Arg %0,citizen,foo!)]\n    You say &quot;1 -- Arg foo!&quot;\n    &gt; say streval(NoEval: %0 ... Eval: [s(%0)],citizen,[add(1,1)])\n    You say &quot;Noeval: [add(1,1)] ... Eval: 2&quot;\n    &gt; say streval(Test: [s(%0)],citizen,[bittype(me)])\n    You say &quot;Test: 1&quot;\n  \n  See Also: ueval(), u(), default(), @lfunction\n    \n</PRE>\n<A HREF=\"#streq()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strfirstof()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strfirstof()\"><H3>STRFIRSTOF()</H3></A><PRE>\n  Function: ofparse(&lt;type&gt;, [&lt;eval1&gt; [,&lt;eval2&gt; ... &lt;evalN or delim&gt;]])\n\n  Type 1&amp;3: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 2&amp;4: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  Type 5&amp;7: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;default&gt;)\n  Type 6&amp;8: ofparse(1,[&lt;eval1&gt; ,&lt;eval2&gt; ... &lt;evalN&gt;], &lt;output seperator&gt;)\n  \n  This function will take each &lt;eval&gt; and returns it based on the &lt;type&gt;.\n  \n  The following types exist:\n    1  -- Issue a firstof().  Essentially return the first &lt;eval&gt; that is\n          a true boolean.  This stops evaluation on first true &lt;eval&gt;.\n          The &lt;default&gt; is returned if no evals are met.  The &lt;default&gt;\n          is the assumed argument if only passed a single argument.\n    2  -- Issue an allof().  Essentially returning every &lt;eval&gt; that is\n          a true boolean.  This evaluates every argument.\n    3  -- This is the reverse of '1'.  It returns the first &lt;eval&gt; that\n          is a false boolean.  IT stops evaluation on first false &lt;eval&gt;.\n          This again assumes &lt;default&gt; if no other arguments.\n    4  -- This is the reverse of '2'.  It returns every false &lt;eval&gt;\n          boolean. This evaluates every argument.\n    5  -- Issue a strfirstof().  Essentially returns the first &lt;eval&gt; that\n          is a non-null string.  This stops evaluation on first non-null\n          &lt;eval&gt;.\n    6  -- Issues a strallof().  Essentially returns every &lt;eval&gt; that is\n          a non-null string.  This evaluates everyu argument.\n    7  -- This is the reverse of '5'.  It essentially will either return\n          a null or the default value.\n    8  -- This is the reverse of '6'.  It essentially will return\n          a list of nulls if you have such in your list.  This evaluates\n          every argument.\n  \n  For PennMUSH function lineup:\n      firstof(x,y)    == ofparse(1,x,y)\n      allof(x,y,z)    == ofparse(2,x,y,z)\n      strfirstof(x,y) == ofparse(5,x,y)\n      strallof(x,y,z) == ofparse(6,x,y,z)\n  \n{ see 'help ofparse2' for examples }\n\n</PRE>\n<A HREF=\"#streval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strfunc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strfunc()\"><H3>STRFUNC()</H3></A><PRE>\n  Function: strfunc(&lt;function&gt;, &lt;list of arguments&gt;[,&lt;delim&gt;])\n  \n  The strfunc (string function) function is used to transform a \n  string of arguments into seperate identified arguments and feed \n  them into the specified function.  If you do not have access to the \n  function or if you give the target function an invalid number of \n  arguments, an error message will be displayed.\n  \n  This in effect will turn any function in the game into a string\n  oriented function.  Thus the name, 'strfunc'.\n  \n  Examples:\n    &gt; say add(1,2,3,4)\n    You say &quot;10&quot;\n    &gt; say strfunc(add,1 2 3 4)\n    You say &quot;10&quot;\n    &gt; say strfunc(add,1@2@3@4,@)\n    You say &quot;10&quot;\n    &gt; say hastype(me,player)\n    You say &quot;1&quot;\n    &gt; say strfunc(hastype,me player)\n    You say &quot;1&quot;\n    &gt; say switch(add(1,1),2,match,1,nope,0,nope,nope)\n    You say &quot;match&quot;\n    &gt; say strfunc(switch,add(1,1) 2 match 1 nope 0 nope nope)\n    You say &quot;match&quot;\n  \n  See Also: strmath(), ladd(), lsub(), ldiv(), lmul()\n  \n</PRE>\n<A HREF=\"#strfirstof()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#string functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"string functions\"><H3>string functions</H3></A><PRE>\n  Function Lists: String Functions\n     \n  accent()      - Apply high order bit accent/umlaut/etc on strings.\n  after()       - Returns the contents of a string after the specified word.\n  andchr()      - Returns 1 if specified string contains specified characters.\n  before()      - Returns the contents of a string before the specified word.\n  brackets()    - Returns a count of left and right (,{ and [ in a string\n  capstr()      - Capitalizes a string.\n  case()        - Case is like switch(), but does not do wildcard matching.\n  caseall()     - Like case(), but will match all cases not just the first.\n  cat()         - Concaternates two strings together.\n  center()      - Centers text on a specified width.\n  chomp()       - Strips carriage returns from start, end or both of a string.\n  columns()     - Powerful column formatting tool.\n  comp()        - Compares two strings. \n  creplace()    - Like replace(), but works on characters instead of words.\n  decode64()    - Decode a 64 compressed string.\n  decrypt()     - Decrypt a string based on an offset.\n  delete()      - Deletes characters from a string.\n  edit()        - Edits a string, replacing, prepending or appending text.\n  editansi()    - Edits the ansi encoding of a string.\n  elementpos()  - Return the character(s) specified by the positions.\n  encode64()    - Encode a string to compressed 64.\n  encrypt()     - Encrypt a string based on an offset.\n  escape()      - Adds escape characters to some special characters.\n  escapex()     - Like escape() but allows specifying characters not to escape.\n  esclist()     - Escape optionally specified characters from a string.\n  eval()        - Evaluates code.\n  garble()      - Garbles input by replacing text.\n  ifelse()      - Returns true if an expression evaluates as true.\n  isalnum()     - Returns true if first character of input is alphanumeric.\n  isalpha()     - Returns true if first character of input is an alpha char.\n  isdbref()     - Returns true if passed a valid dbref.\n  isdigit()     - Returns true if first character of input is a digit.\n  \n  { Continued in string functions2 }\n\n</PRE>\n<A HREF=\"#strfunc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#string functions2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"string functions2\"><H3>string functions2</H3></A><PRE>\n  Continued from String Functions.\n      \n  isnum()       - Returns true if input is a number.\n  ispunct()     - Returns true if first character of input is a punctuation.\n  isspace()     - Returns true if first character of input is a whitespace.\n  isword()      - Returns true if the argument contains only alpha characters. \n  isxdigit()    - Returns true if first character of input is a hexadecimal.\n  lcstr()       - Lowercases a string.\n  left()        - Extracts X characters from a string, starting from the left.\n  lit()         - Returns a string as-is, without formatting or evaluation.\n  ljc()         - Left justifies and cuts a string to a specified width.\n  ljust()       - Pads a string with trailing fill characters.\n  merge()       - Merges two strings together.\n  mid()         - Extracts X characters from a string, from anywhere inside it.\n  mwords()      - Returns the number of words in a string (with multi-delim).\n  nostr()       - The exact opposite of str().\n  notchr()      - Returns true if NONE of the specified chars are in string.\n  numpos()      - Returns the total number of matches of a character in string.\n  ofparse()     - Returns various manipulations of evaluated strings.\n  orchr()       - Returns true if any of the specified chars are in a string.\n  parsestr()    - Parses a string according to formatting rules.\n  pedit()       - Like edit(), but with PennMUSH functionality.\n  pos()         - Returns the position of where a substring begins in a string.\n  printf()      - Formats text left, center, right, or stretched justification.\n  randpos()     - Like totpos(), but totally randomizes output.\n  repeat()      - Repeats input X times.\n  replace()     - Replaces a word in a list at a specified position.\n  right()       - Extracts X characters from a string, starting from the right.\n  rjc()         - Right justifies and cuts a string to a specified width.\n  rjust()       - Right justifies a string by padding it with specified char.\n  rotl()        - Rotates a string X characters to the left.\n  rotr()        - Rotates a string X characters to the right.\n  s()           - Performs pronoun substitution on a string.\n  \n  { Continued in string functions3 }\n\n</PRE>\n<A HREF=\"#string functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#string functions3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"string functions3\"><H3>string functions3</H3></A><PRE>\n  Continued from string functions2\n    \n  scramble()    - Scrambles a string, returning the characters randomly.\n  secure()      - Removes special characters from a string.\n  securex()     - Like secure(), but you can specify characters not to remove.\n  shl()         - Performs a leftwards bitshift on a number.\n  shr()         - Performs a rightwards bitshift on a number.\n  shuffle()     - Shuffles the words of a string.\n  space()       - Returns X number of whitespace.\n  splice()      - Splices two lists together.\n  squish()      - Removes excess spaces or delimiters from a string.\n  str()         - Like after(), and similar to C strstr().\n  strdistance() - Calculates the levenshtein distance between two strings.\n  streq()       - Compares two strings, returning true if they match.\n  streval()     - Evaluates the string based on the permission level specified.\n  strip()       - Strips out every occurrence of a character in a string.\n  stripaccents()- Strip accents from specified string.\n  strlen()      - Returns the length of a string.\n  strlenraw()   - Returns the length of the RAW string.\n  strlenvis()   - Returns the length of the VISUAL string.\n  strmatch()    - Returns true if a pattern is found in a string.\n  subnetmatch() - Returns true if an IP address is part of a subnet.\n  switch()      - Powerful string-pattern conditional.\n  switchall()   - Like switch(), but matches all occurrences of a pattern.\n  t()           - Unifies MUSH responses of 0, null or #-* to return 0.\n  totpos()      - Returns all the positions of a match in a string.\n  tr()          - Transforms a string based on find and replace lists.\n  translate()   - Translates special characters to percent substitutions.\n  trim()        - Trims trailing and leading spaces from a string.\n  ucstr()       - Upper-cases a string.\n  unesclist()   - Escape optionally specified characters from a string.\n  wordpos()     - Returns the position of a word in a string.\n  words()       - Returns the number of words in a string.\n  wrap()        - Formats a string by wrapping it, much like columns()\n  wrapcolumns() - Like wrap() and columns(). See help for more.\n  xorchr()      - Returns true if only ONE occurrence of a character is found.\n\n\n</PRE>\n<A HREF=\"#string functions2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strip()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strip()\"><H3>STRIP()</H3></A><PRE>\n  Function: strip(&lt;string1&gt;,&lt;string2&gt; [,&lt;type&gt;])\n  \n  This function strips out every occurance of every character of &lt;string2&gt;\n  from &lt;string1&gt; and returns &lt;string1&gt;.  The strip function is case\n  sensitive.\n  \n  If &lt;type&gt; is specified as '1', then the functionality is reversed and\n  it will only keep all characters in &lt;string1&gt; that exist in &lt;string2&gt;.\n  \n  Examples:\n    &gt; say strip(This is a test,is)\n    You say &quot;Th  a tet&quot;\n    &gt; say strip(abcdefgABCDEFG,azGy!7$B)\n    You say &quot;bcdefgACDEF&quot;\n    &gt; say strip(This is a test,is,1)\n    You say &quot;isiss&quot;\n  \n  See Also: @edit, edit(), editansi(), garble(), chomp(), regedit(),\n            elementpos()\n  \n</PRE>\n<A HREF=\"#string functions3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#stripaccents()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"stripaccents()\"><H3>STRIPACCENTS()</H3></A><PRE>\n  Function: stripaccents(&lt;string&gt;)\n  \n  Returns the string with accented characters converted to non-accented.\n  This function assumes the ISO 8859-1 character set.\n  \n  Example:\n    &gt; say stripaccents(Aul(e-with-diaeresis))\n    You say &quot;Aule&quot;\n   \n  See Also: chr(), asc(), strip(), stripansi(), tr(), accent(), ACCENTS.\n\n  \n</PRE>\n<A HREF=\"#strip()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#stripansi()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"stripansi()\"><H3>STRIPANSI()</H3></A><PRE>\n  Function: stripansi(&lt;string&gt;)\n  \n  Returns the string with all ansi codes removed.\n  \n  Example:\n    &gt; say stripansi(ansi(hr,red))\n    You say &quot;red&quot;\n  \n  See Also: NO_FLASH, ANSI, ANSICOLOR, stripaccents()\n  \n</PRE>\n<A HREF=\"#stripaccents()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strlen()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strlen()\"><H3>STRLEN()</H3></A><PRE>\n  Function: strlen(&lt;string&gt;)\n            strlenvis(&lt;string&gt;)\n            strlenraw(&lt;string&gt;)\n \n  Returns the number of characters in &lt;string&gt;.\n \n  Example:\n    &gt; say strlen(This is a test)\n    You say &quot;14&quot;\n    &gt; say strlen(Would you like coffee, or perhaps tea)\n    You say &quot;37&quot;\n  \n  The strlenvis() function adjusts the string to the VISUAL size of\n  the string when using chr() codes (which are normally 6 characters each).\n  This is so you can specially padd when using special chr() values.\n  \n  The strlenraw() function displays the raw length of the string, including\n  any 'markup' codes that are generally used for accents and raw ansi.  This\n  is mostly intended when you need to see the absolute length of a string\n  for length checks or the like.\n    \n  See Also: words(), wordpos()\n  \n</PRE>\n<A HREF=\"#stripansi()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strlenraw()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strlenraw()\"><H3>STRLENRAW()</H3></A><PRE>\n  Function: strlen(&lt;string&gt;)\n            strlenvis(&lt;string&gt;)\n            strlenraw(&lt;string&gt;)\n \n  Returns the number of characters in &lt;string&gt;.\n \n  Example:\n    &gt; say strlen(This is a test)\n    You say &quot;14&quot;\n    &gt; say strlen(Would you like coffee, or perhaps tea)\n    You say &quot;37&quot;\n  \n  The strlenvis() function adjusts the string to the VISUAL size of\n  the string when using chr() codes (which are normally 6 characters each).\n  This is so you can specially padd when using special chr() values.\n  \n  The strlenraw() function displays the raw length of the string, including\n  any 'markup' codes that are generally used for accents and raw ansi.  This\n  is mostly intended when you need to see the absolute length of a string\n  for length checks or the like.\n    \n  See Also: words(), wordpos()\n  \n</PRE>\n<A HREF=\"#strlen()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strlenvis()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strlenvis()\"><H3>STRLENVIS()</H3></A><PRE>\n  Function: strlen(&lt;string&gt;)\n            strlenvis(&lt;string&gt;)\n            strlenraw(&lt;string&gt;)\n \n  Returns the number of characters in &lt;string&gt;.\n \n  Example:\n    &gt; say strlen(This is a test)\n    You say &quot;14&quot;\n    &gt; say strlen(Would you like coffee, or perhaps tea)\n    You say &quot;37&quot;\n  \n  The strlenvis() function adjusts the string to the VISUAL size of\n  the string when using chr() codes (which are normally 6 characters each).\n  This is so you can specially padd when using special chr() values.\n  \n  The strlenraw() function displays the raw length of the string, including\n  any 'markup' codes that are generally used for accents and raw ansi.  This\n  is mostly intended when you need to see the absolute length of a string\n  for length checks or the like.\n    \n  See Also: words(), wordpos()\n  \n</PRE>\n<A HREF=\"#strlenraw()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strmatch()\"><H3>STRMATCH()</H3></A><PRE>\n  Function: strmatch(&lt;string&gt;,&lt;pattern&gt;)\n \n  This function matches &lt;pattern&gt; against the entire &lt;string&gt;, returning 1\n  if it matches and 0 if it does not.  The case of the characters being\n  matched is not significant.\n \n  The pattern may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 's?x' would match 'sex' or 'six', but not to 'socx', but 's*x' would\n  match any of them.\n \n  Examples:\n    &gt; say strmatch(This is a test,*Test)\n    You say &quot;1&quot;\n    &gt; say strmatch(This is a test,*This)\n    You say &quot;0&quot;\n    &gt; say strmatch(This is a test,*is*is*)\n    You say &quot;1&quot;\n  \n  See Also: match(), member(), nummatch(), nummember(), totmatch(), totmember()\n\n</PRE>\n<A HREF=\"#strlenvis()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strmath()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strmath()\"><H3>strmath()</H3></A><PRE>\n  Function: strmath(&lt;str&gt;,&lt;num&gt;,&lt;math&gt;[,&lt;dlm&gt;,&lt;sep&gt;,&lt;st&gt;,&lt;amt&gt;,&lt;idlm&gt;,&lt;isep&gt;)\n  \n  The strmath function is used to apply math to the entire string.  Numbers\n  in the string are modified based on the math chosen applied to the number.\n  You may specify optional input and output seperators.  You may also specify\n  the word to start (&lt;st&gt;) the math on and how many words (&lt;amt&gt;) after the \n  start you wish to use. If no math is specified, '+' is used as a default.\n  The &lt;idlm&gt; and &lt;isep&gt; are inner delimiter and seperator to use for the \n  normal delimited string.  This is so you can separate values such as:\n                    To hit:5|To Damage:10|Base AC:15\n  \n  Note:  It handles floating point notation, so values with decimals are seen.\n   \n    Key:  str  -- input string    num  -- value to apply  math -- math to use\n          dlm  -- delimiter       sep  -- seperator       st   -- start value\n          amt  -- word count      idlm -- inner delim     isep -- inner sep\n  \n  Valid math arguments are:\n        + - apply addition to all numbers in the string.\n        - - apply subtraction to all numbers in the string.\n        / - apply division to all numbers in the string.\n        * - apply multiplication to all numbers in the string.\n       %% - return remainder of division. (you need to use two %%'s)\n  \n  Examples:\n    &gt; say strmath(1 fish 2 fish green fish blue fish,10,+)   (default)\n    You say &quot;11 fish 12 fish green fish blue fish&quot;\n    &gt; say strmath(1 fish 2 fish green fish blue fish,10,*)\n    You say &quot;10 fish 20 fish green fish blue fish&quot;\n    &gt; say strmath(1 fish 2 fish 3 shoe 4 shoe,10,+,,,3,2)\n    You say &quot;1 fish 12 fish 13 shoe 4 shoe&quot;\n    &gt; say strmath(To hit:5|To Damage:10|Base AC:15,150,+,|,|,1,0,:,:)\n    You say &quot;To hit:155|To Damage:10|Base AC:15&quot;\n  \n  See Also: add(), sub(), mul(), div(), mod(), strfunc(), spellnum()\n  \n</PRE>\n<A HREF=\"#strmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#strtrunc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"strtrunc()\"><H3>STRTRUNC()</H3></A><PRE>\n  Function: left(&lt;string&gt;, &lt;position&gt;)\n   (Alias): strtrunc(&lt;string&gt;,&lt;position&gt;)\n  \n  Left will take a string and return the left-most position of characters\n  from the string.\n  \n  Example:\n    &gt; say left(this is a test,5)\n    You say &quot;this &quot;\n    &gt; say left(this is a test,10000)\n    You say &quot;this is a test&quot;\n    &gt; say left(this is a test,0)\n    You say &quot;&quot;\n  \n  See Also: right(), mid(), delete(), ljc(), rjc()\n  \n</PRE>\n<A HREF=\"#strmath()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#sub()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"sub()\"><H3>SUB()</H3></A><PRE>\n  Function: sub(&lt;number1&gt;,&lt;number2&gt;[,&lt;numberN&gt;]...)\n   \n  Returns the result of subtracting &lt;number2&gt; from &lt;number1&gt;.\n  The numbers may be floating point numbers, and a floating point result\n  is returned.  \n   \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Example:\n    &gt; say sub(5,2)\n    You say &quot;3&quot;\n  \n  See Also: add(), div(), mod(), mul()\n  \n</PRE>\n<A HREF=\"#strtrunc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#subj()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"subj()\"><H3>SUBJ()</H3></A><PRE>\n  Function: subj(&lt;object&gt;)\n \n  Returns the proper subjective pronoun (he, she, it, they) for referring to\n  &lt;object&gt;, based on the object's Sex attribute.  You must either control\n  or be near &lt;object&gt;.\n  \n  Example:\n    &gt; @sex me=male\n    Set.\n    &gt; say subj(me)\n    You say &quot;he&quot;\n   \n  See Also: SUBSTITUTIONS, obj(), poss(), aposs()\n  \n</PRE>\n<A HREF=\"#sub()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#subnetmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"subnetmatch()\"><H3>SUBNETMATCH()</H3></A><PRE>\n  Function: subnetmatch(&lt;ip&gt;,&lt;netstart&gt;,&lt;netmask&gt;)\n            subnetmatch(&lt;ip&gt;,&lt;netstart&gt;/&lt;CIDR&gt;)\n  \n  This function allows you to check wether an IP falls into a certain subnet\n  or not. The function allows you to use either a format specifying the\n  subnet address and netmask, or the common CIDR format.\n  \n  It returns 1 if the IP address is part of the subnet, 0 if it is not.\n  \n  Examples:\n    subnetmatch(123.123.123.123, 123.0.0.0, 255.0.0.0) -&gt; 1\n    subnetmatch(123.123.123.123, 123.0.0.0, 255.255.0.0) -&gt; 0\n    subnetmatch(123.123.123.123, 123.0.0.0/8) -&gt; 1\n    subnetmatch(123.123.123.123, 123.0.0.0/16) -&gt; 0\n  \n</PRE>\n<A HREF=\"#subj()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#substitutions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"substitutions\"><H3>SUBSTITUTIONS</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S  = Name, he, she, it, they.        (subjective)\n    %o, %O  = Name, him, her, it, them.       (objective)\n    %p, %P  = Name's, his, her, its, their.   (possessive)\n    %a, %A  = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N  = the player's name.\n    %k, %K  = the player's colorized/accented name.\n    %w, %W  = the target dbref# of the twinklock (if applicable)\n    %r      = carriage return.\n    %t      = tab character.\n    %b      = space character.\n    %%      = literal '%' character.\n    %0-%9   = Value of positional parameter/stack location 0 through 9.\n    %-      = Stack 10+ that are comma delimited\n    %i0-%i9 = Equivalent to itext(0) through itext(9). [%il for outer]\n    %d0-%d9 = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n              Only useable with /inline only.\n    %q0-%q9 = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n    %qa-%qz = Extended value of registers.\n    %va-%vz = Contents of attribute va through vz.\n  \n  Note: %q&lt;label&gt; works for setq labels.  ie.  [setq(0,foo,bar)]%q&lt;bar&gt;\n  \n{ 'help substitutions2' for more }\n\n</PRE>\n<A HREF=\"#subnetmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#substitutions2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"substitutions2\"><H3>substitutions2</H3></A><PRE>\n    %#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %&lt;      = Used for UNICODE (ASCII 160 through 255).  Syntax: %&lt;###&gt;\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%&lt;' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %&lt;whatever&gt; is equivalent to [v(&lt;whatever&gt;)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()\n  \n</PRE>\n<A HREF=\"#substitutions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#success\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"success\"><H3>SUCCESS</H3></A><PRE>\n  Topic: SUCCESS\n \n  You successfully use a player or a thing when you take it (because you\n  passed the lock).  You successfully use an exit when you go through it.\n  You successfully use a room when you look around and the room is not locked\n  against you.\n  \n  See Also: get, look, @asuccess, @lock, @osuccess, @success\n  \n</PRE>\n<A HREF=\"#substitutions2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#superMINUSroyalty\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"superMINUSroyalty\"><H3>SUPER-ROYALTY</H3></A><PRE>\n  Flag: SUPER-ROYALTY (IMMORTAL)(i)   \n  \n  This flag when set on a player allows them to be a hybrid wizard.  \n  They can basically do anything, see anything, be anything.  The \n  only thing they can not do is set or unset this flag or directly \n  affect #1.  It's generally wise if you don't annoy these people.\n  \n  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, ROYALTY\n  \n</PRE>\n<A HREF=\"#success\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#switch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"switch()\"><H3>SWITCH()</H3></A><PRE>\n  Function: switch(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;]...[,&lt;dflt&gt;])\n   \n  The switch function compares &lt;str&gt; against &lt;pat1&gt;, &lt;pat2&gt;, etc (allowing *\n  to match any number of characters and ? to match any 1 character), and\n  returns the corresponding &lt;resN&gt; parameter for the first &lt;patN&gt; pattern\n  that matches.  If none match, then the default result &lt;dflt&gt; is returned.\n   \n  Example:\n    &gt; say switch(c,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say &quot;C&quot;\n    &gt; say switch(f,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say &quot;E&quot;\n    &gt; say switch(cab,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say &quot;A&quot;\n    &gt; say switch(f,*a*,A,*b*,B,*c*,C,*d*,D)  \n    You say &quot;&quot;\n  \n  If configured, you may use #$ as a substition.   #$ is substituted with \n  the value of &lt;string&gt;. In this way, the commands in &lt;res11&gt;..&lt;dflt&gt; \n  have a short-hand way of getting at the matched value. \n  \n  Please check @list options if this has been enabled. \n  \n  See Also: @switch, match(), case(), ifelse(), switchall()\n  \n</PRE>\n<A HREF=\"#superMINUSroyalty\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#switchall()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"switchall()\"><H3>SWITCHALL()</H3></A><PRE>\n  Function: switchall(&lt;str&gt;[,&lt;pat1&gt;,&lt;res1&gt;]...[,&lt;dflt&gt;])\n   \n  The switchall function compares &lt;str&gt; against &lt;pat1&gt;, &lt;pat2&gt;, etc (allowing *\n  to match any number of characters and ? to match any 1 character), and\n  returns all corresponding &lt;resN&gt; parameters for all &lt;patN&gt; patterns\n  that matches.  If none match, then the default result &lt;dflt&gt; is returned.\n \n  Example:\n    &gt; say switchall(c,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say &quot;C&quot;\n    &gt; say switchall(f,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say &quot;E&quot;\n    &gt; say switchall(cab,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say &quot;ABC&quot;\n    &gt; say switchall(f,*a*,A,*b*,B,*c*,C,*d*,D)  \n    You say &quot;&quot;\n  \n  If configured, you may use #$ as a substition.   #$ is substituted with \n  the value of &lt;string&gt;. In this way, the commands in &lt;res11&gt;..&lt;dflt&gt; \n  have a short-hand way of getting at the matched value. \n  \n  Please check @list options if this has been enabled. \n  \n  See Also: @switch, match(), case(), ifelse(), switch()\n  \n</PRE>\n<A HREF=\"#switch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#switches\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"switches\"><H3>SWITCHES</H3></A><PRE>\n  Topic: SWITCHES\n \n  Some commands have command switches associated with them that can be used\n  to modify their behavior.  For instance, switches on the @ps command\n  control the amount of information displayed, and switches on the @switch\n  command indicate whether to perform all actionlists whose targets match\n  the search string, or just the first.\n  \n  See Also: @list\n  \n</PRE>\n<A HREF=\"#switchall()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#t()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"t()\"><H3>T()</H3></A><PRE>\n  Function: t(&lt;string&gt;)\n  \n  Returns a '0' if the string is null (empty), a '0', or a # followed by any\n  negative number, or a string containing nothing but spaces.  \n  Otherwise, it returns a '1'.\n  \n  Example:\n    &gt; say t()\n    You say &quot;0&quot;\n    &gt; say t(0)\n    You say &quot;0&quot;\n    &gt; say t(#-1)\n    You say &quot;0&quot;\n    &gt; say t(900)\n    You say &quot;1&quot;\n    &gt; say t(this is a test)\n    You say &quot;1&quot;\n    &gt; say t(space(100))\n    You say &quot;0&quot;\n  \n  See Also: isdbref(), isspace(), s()\n  \n</PRE>\n<A HREF=\"#switches\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#take\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"take\"><H3>take</H3></A><PRE>\n  Command: take[/&lt;switch&gt;] &lt;object&gt;\n           take[/&lt;switch&gt;] &lt;exit&gt;\n           take[/&lt;switch&gt;] &lt;object&gt;'s &lt;sub-object&gt;\n \n  The first form picks up &lt;object&gt; from your location and adds it to your\n  inventory.  It will fail if the object is locked against you, or if you\n  are inside a player or object that you don't control and which isn't\n  set ENTER_OK.\n \n  The second form takes an exit from your location and adds it to you.\n  Anyone inside you may then use the exit to travel to the exit's destination.\n  You may take exits that you own, and exits owned by others in locations that\n  you own.\n \n  The third form takes &lt;sub-object&gt; from &lt;object&gt; and adds it to your\n  inventory.  &lt;object&gt; must be ENTER_OK and &lt;sub-object&gt; must not be locked\n  against you for this to work.  The lock on &lt;object&gt; is not checked.\n  \n{ 'help take2' for more }\n  \n</PRE>\n<A HREF=\"#t()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#take2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"take2\"><H3>take2</H3></A><PRE>\n  The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes\n                on the target object.  This switch only works if you control\n                the object.\n \n  &lt;object&gt; and &lt;sub-object&gt; may be either players or things.\n  'get' is the same as 'take'.\n  \n  See Also: drop, @afail, @asucc, @fail, @ofail, @osucc, @succ, ENTER_OK,\n            FAILURE, SUCCESS\n  \n</PRE>\n<A HREF=\"#take\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tan()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tan()\"><H3>TAN()</H3></A><PRE>\n  Function: tan(&lt;number&gt; [,&lt;units&gt;])\n   \n  Returns the tangent of &lt;number&gt;, expressed in radians.\n  \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    &gt; say tan(0)\n    You say &quot;0&quot;\n    &gt; say tan(1)\n    You say &quot;1.557408&quot;\n    &gt; say tan(fdiv(pi(),4))\n    You say &quot;1&quot;\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), sin(), ctu(), \n            cosh(), sinh(), tanh()\n  \n</PRE>\n<A HREF=\"#take2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tanh()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tanh()\"><H3>TANH()</H3></A><PRE>\n  Function: tanh(&lt;number&gt; [,&lt;units&gt;])\n  \n  Returns the hyperbolic tangent of &lt;number&gt;, expressed in radians.\n \n  You may specify &lt;units&gt; which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n  \n  Examples:  \n    &gt; say tanh(0)\n    You say &quot;0&quot;\n    &gt; say tanh(1)\n    You say &quot;0.761594&quot;\n    &gt; say tanh(fdiv(pi(),4))\n    You say &quot;1.324609&quot;\n\n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), sin(), ctu(), \n            cosh(), sinh() \n\n</PRE>\n<A HREF=\"#tan()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#taste\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"taste\"><H3>taste</H3></A><PRE>\n  Command: taste [&lt;object&gt;]\n  Displays the tastes of &lt;object&gt;, or the location you're in if you don't\n  specify an object.  Specifying object as &lt;name&gt; or #&lt;dbref&gt; or 'me' or\n  'here' is legal.  You can also use taste to taste objects held by other\n  people.  Just use 'taste &lt;person&gt;'s &lt;object&gt;'.\n  \n  See Also: look, smell, touch, listen, @staste, @sataste, @sotaste\n  \n</PRE>\n<A HREF=\"#tanh()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tel()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tel()\"><H3>TEL()</H3></A><PRE>\n  Function: tel(&lt;obj&gt; [&lt;obj2&gt;...],&lt;loc&gt; [&lt;loc2&gt;...] [,&lt;silent&gt;])\n  \n  This function works like @tel/list works.  It will teleport one or\n  more objects to one or more destinations.  It follows the same \n  permissions and restrictions that @tel will follow.  The SIDEFX flag\n  is required for this function.  \n  \n  The value of the optional argument 'silent' can be either 0 or 1. If\n  set to 1 then the attributes 'atport', 'otport', 'oxtport' and 'tport'\n  are not evaluated.\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  The last example teleports you to #0, bob to #2, and joe to #4.\n  \n  Example:\n  &gt; say tel(me,#0)\n  You say &quot;&quot;\n  The Beginning(#0)\n  A simple room\n  &gt; @tel/list me=#0\n  The Beginning(#0)\n  A simple room\n  &gt; say tel(me bob joe,#0 #2 #4)\n  You say &quot;&quot;\n  \n  See Also: @tel, move(), SIDEEFFECTS\n  \n</PRE>\n<A HREF=\"#taste\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#telok\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"telok\"><H3>TELOK</H3></A><PRE>\n  Flag: TELOK([T])   \n  \n  The TELOK flag is used to enable bitted players (staff)\n  the ability to set up so that they can be teleported around as if they\n  were a mortal.  This is handy in testing code where @teleport is used.\n  \n  See Also: JUMP_OK, @teleport\n  \n</PRE>\n<A HREF=\"#tel()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#temple\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"temple\"><H3>TEMPLE</H3></A><PRE>\n  Flag: TEMPLE(T)  \n  \n  The TEMPLE flag is no longer a part of RhostMUSH. Check +help\n  for information on +sacrifice.\n  \n  See Also: score\n  \n</PRE>\n<A HREF=\"#telok\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#terse\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"terse\"><H3>TERSE</H3></A><PRE>\n  Flag: TERSE(t)\n   \n  If you are set TERSE then you are not shown the description, success/failure\n  messages, contents, or exits of locations you enter.  You must use the LOOK\n  or EXAMINE commands to see this information.\n   \n  Others in the location still get the osucc/ofail messages and the asucc or\n  afail command list is still run.\n  \n  If this is set on a ROOM, then the room will behave as if the person \n  entering is set TERSE.\n   \n  See Also: examine, look, MYOPIC\n  \n</PRE>\n<A HREF=\"#temple\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#thing\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"thing\"><H3>THING</H3></A><PRE>\n  Type: THING(T)\n  A thing is a type that is neither exit, room, or player type.  It is\n  something that can both be carried and which can carry something.\n  \n</PRE>\n<A HREF=\"#terse\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#think\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"think\"><H3>think</H3></A><PRE>\n  Command: think[/&lt;swiches&gt;] &lt;string&gt;\n  Returns the string to the enactor at the permission level of the enactor.\n  This works just as @pemit me=&lt;string&gt; would work.\n  \n  The following switches are available:\n     /noansi   - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n    \n  See Also: @pemit, @emit, say, pose\n \n</PRE>\n<A HREF=\"#thing\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#throw\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"throw\"><H3>throw</H3></A><PRE>\n  Command: throw[/&lt;switch&gt;] &lt;object&gt;\n           throw[/&lt;switch&gt;] &lt;exit&gt;\n \n  The first form removes &lt;object&gt; from your inventory and puts it in your\n  location, except for the following special cases: Dropping a STICKY thing\n  sends it home, and dropping a thing in a room with a drop-to sends the\n  thing to the drop-to location.\n \n  The second form removes &lt;exit&gt; from your list of exits and adds it to the\n  list of exits for the current location.  Anyone in the same location as\n  you may then use the exit to travel to the exit's destination.  You can\n  only drop exits when you own the location where you are dropping them.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @odrop/@adrop attributes on the dropped\n                 object.  This switch only works if you control the object.\n \n  'drop' is the same as 'throw'.\n  \n  See Also: get, @adrop, @drop, @odrop, DROP-TO, STICKY\n  \n</PRE>\n<A HREF=\"#think\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#time functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"time functions\"><H3>time functions</H3></A><PRE>\n  Function Lists: Time Functions.\n     \n  convsecs()    - Converts Unix seconds to a time string.\n  convtime()    - Converts a time string to Unix seconds.\n  ptimefmt()    - Performs time formatting, PennMUSH style.\n  secs()        - Returns the current time in Unix seconds.\n  singletime()  - Converts seconds to a single time element.\n  time()        - Returns the current time, formatted as a string.\n  timefmt()     - Returns the current, or a specified time, formatted.\n\n</PRE>\n<A HREF=\"#throw\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#time()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"time()\"><H3>TIME()</H3></A><PRE>\n  Function: time()\n \n  Gives you the current time.\n  WARNING!  This is the time on the machine that the mud is running on, and\n  not where you are.\n \n  Example:\n    &gt; say time()\n    You say &quot;Thu Dec 19 09:48:06 1991&quot;\n  \n  See Also: convsecs(), convtime(), secs()\n \n</PRE>\n<A HREF=\"#time functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt advanced\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt advanced\"><H3>TIMEFMT ADVANCED</H3></A><PRE>\n     The advanced syntax of the timefmt format string adds the ability to \n  do special processing for 0 valued fields. The new format sequence looks \n  like: $[PROCOPT][-][FIELDWIDTH]FORMATSPEC\n  \n     The PROCOPT character is one of the following:\n        '!' - Don't print field if value is 0\n        '~' - Don't print field if value is 0, but pad w/ spaces to fld width\n        '@' - Only print field if current field value or a previous\n              field value was not 0\n        '#' - Only print field if current field value or a previous\n              field value was not 0, but pad w/ spaces to fld width\n  \n     If a field is not printed, the copying of any literal text following\n  the format specifier is suppressed until the next format sequence at which\n  point copying is turned back on. You can turn the copying function back on\n  at any point in the literal text which follows a sequence with a PROCOPT\n  by repeating the same PROCOPT character at the point in the literal text\n  which you want copying to be always on. \n  \n  See Also: timefmt advanced2, timefmt advanced example, timefmt escapes\n  \n</PRE>\n<A HREF=\"#time()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt advanced example\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt advanced example\"><H3>TIMEFMT ADVANCED EXAMPLE</H3></A><PRE>\n  The following examples take an elapsed time (which is hard coded as the\n  second argument for illustration purposes) and format it in such a way\n  that any fields which are irrelevant are eliminated. Several examples\n  are shown with the same format string and different &lt;secs&gt; argument to \n  illustrate how the output changes depending on this input. Note the \n  '#' character following 'secs' in the format string, this ensures\n  that even if the $#G field is 0 and the 'secs' text is not printed that\n  the ' &lt;-' text will still be printed.\n  \n    timefmt(Elapsed -&gt; $#2c days $#2X hours $#2F mins $#G secs# &lt;-, 111111111)\n    OUTPUT: Elapsed -&gt; 12 days  0 hours 11 mins 51 secs &lt;-\n  \n    timefmt(Elapsed -&gt; $#2c days $#2X hours $#2F mins $#G secs# &lt;-, 11111)\n    OUTPUT: Elapsed -&gt;          3 hours  5 mins 11 secs &lt;-\n  \n    timefmt(Elapsed -&gt; $#2c days $#2X hours $#2F mins $#G secs# &lt;-, 1111)\n    OUTPUT: Elapsed -&gt;                  18 mins 31 secs &lt;-\n  \n  Now note how the output changes with the '@' PROCOPT used instead of '#':\n    timefmt(Elapsed -&gt; $@2c days $@2X hours $@2F mins $@G secs@ &lt;-, 1111)\n    OUTPUT: Elapsed -&gt; 18 mins 31 secs &lt;-\n  \n  The '~' and '!' PROCOPT characters operate similarly but they only pay\n  attention to the current field being 0 or not.\n  \n  See Also: timefmt codelist\n  \n</PRE>\n<A HREF=\"#timefmt advanced\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt advanced2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt advanced2\"><H3>TIMEFMT ADVANCED2</H3></A><PRE>\n  With the '~' and '#' PROCOPT types, any literal text which was turned \n  off by a 0 value field will be substituted by spaces. This keeps text \n  aligned in columns. Should one of the PROCOPT characters be needed as \n  a literal text character following a field that contains a PROCOPT, \n  the character can be escaped by doubling it, IE '@@' would print '@'\n  if it was embedded in text which followed a sequence like $@G.\n  \n  See Also: timefmt advanced example, timefmt escapes\n  \n</PRE>\n<A HREF=\"#timefmt advanced example\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt codelist\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt codelist\"><H3>TIMEFMT CODELIST</H3></A><PRE>\n  Following codes exist for formatting for timefmt(&lt;format&gt;,&lt;time-in-secs&gt;)\n  \n  Code Type              Range         Code Type            Range\n  ---- --------------    ------------  ---- --------------  ------------------\n  H    hour of day       1 - 12        A    Weekday (long)  Sunday - Saturday\n  h    military day      0 - 23        a    Weekday (short) Sun - Sat\n  T    minute in hour    0 - 59        W    Weekday (num)   0 - 6\n  S    sec. in min.      0 - 59        B    Month (long)    January - December\n  P    Time of day       AM - PM       b    Month (short)   Jan - Dec\n  p    Time of day       am - pm       M    Month (number)  1 - 12\n  Z    Elapsed years     0 - ????      D    Day of month    1 - 31\n  E    Months in years   0 - 12        J    Day of year     1 - 366\n  e    Elapsed months    0 - ????      Y    Year (four dig) 0 - ????\n  C    Days in months    0 - 31        y    Year (two dig)  0 - ??\n  d    Days in weeks     0 - 6         I    Seconds offset from GMT time\n  w    Weeks in month    0 - 4         z    Returns '1' if daylight savings\n  u    Years in century  0 - 99        i    Returns the timezone abbreviation\n  U    Century in Mill   0 - 9         N    Returns the longname of timezone\n  m    Elapsed Millenium 0 - ????      n    Return the shortname of timezone\n *c    Elapsed days      0 - ????      t    Seconds offset of existing timezone\n *X    Hours in day      0 - 24       *!    Don't print field if value is 0\n  x    Elapsed hours     0 - ????      ~    Pad with space but not if value 0\n *F    Mins. in hours    0 - 60        @    Prnt if value or prev. value not 0\n  f    Elapsed mins.     0 - ????      #    Pad with spc if val/prev val not 0\n  G    Secs. in minute   0 - 60       *0-9  Format column with # allignment   \n  g    Elapsed secs.     0 - ????      $    Use special code (this list)     \n  \n  Note: Codes with a '*' were used in the example that follows.\n  \n{ help timefmt codelist2 for an example with great details }\n  \n</PRE>\n<A HREF=\"#timefmt advanced2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt codelist2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt codelist2\"><H3>TIMEFMT CODELIST2</H3></A><PRE>\n  Syntax:   timefmt($&lt;code&gt; $&lt;code&gt; ... $&lt;code&gt;,&lt;time-in-seconds&gt;)\n  \n  Example:  ---[timefmt($!2cd$02X:$02F,conn(me))]---\n  Output:   --- 3d12:03---\n  \n  Description: This tells to format the time and to display the day field only\n               if this value is non-zero, then return the hours and minutes, \n               in a time format (IE: ##:## - the 02 says pad with zeroes a \n               total of two spaces no matter the result).  It then passes the \n               total time you were connected (the conn() function) into the \n               format you specified for timefmt(). Broken up, these codes are:\n  \n  Details:  $!2cd - $ tells timefmt() it's a special timefmt() code.\n                    ! tells it to not print this field if zero\n                   2c tells it to print a two character field and pad with\n                      a space if the value is less than two characters.\n                      If you use $!02cd it would return '03d' instead of ' 3d'\n            $02X  - $ tells timefmt() it's a special timefmt() code.\n                  02X tells it to print the hour field and pad with zeroes if\n                      the total character count is less than two. IE: '06'\n            $02F  - $ tells timefmt() it's a special timefmt() code.\n                  02F tells it to print the minute field and pad with zeroes \n                      if the total character count is less than two. IE: '12'\n  \n</PRE>\n<A HREF=\"#timefmt codelist\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt date\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt date\"><H3>TIMEFMT DATE</H3></A><PRE>\n  The following format specifiers are available for processing the &lt;secs&gt;\n  argument as calendar time for purposes of displaying dates. Calendar\n  time is the number of seconds since 0:00 1/1/70 such as that returned by\n  the secs() function.\n  \n  SPEC   DESC                     RANGE              NOTE\n  'A'    Weekday long name        Sunday..Saturday\n  'a'    Weekday short name       Sun..Sat\n  'W'    Weekday number           0..6               0 = Sunday\n  'B'    Month long name          January..December\n  'b'    Month short name         Jan..Dec\n  'M'    Month number             1..12\n  'D'    Day of month             1..31\n  'J'    Day of year              1..366\n  'Y'    Year                     0..????\n  'y'    Year (two digit)         0..99\n  \n  See Also: timefmt examples, secs()\n  \n</PRE>\n<A HREF=\"#timefmt codelist2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt elapsed\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt elapsed\"><H3>TIMEFMT ELAPSED</H3></A><PRE>\n  The following format specifiers are available for processing the &lt;secs&gt;\n  argument as elapsed time. An example of elapsed time would be those\n  number of seconds returned by the conn() function.\n  \n  SPEC   DESC                           RANGE     NOTE\n  'm'    Elapsed Millenium              0..????\n  'U'    Elapsed Century in Millenium   0..9\n  'u'    Elapsed years in Century       0..99\n  'Z'    Elapsed years                  0..????   Uses 365 day years\n  'E'    Elapsed months in year         0..12     Uses 31 day months/365 days\n  'e'    Elapsed months absolute        0..????   Uses 31 day months\n  'C'    Elapsed days in month          0..31     Uses 31 day months\n  'w'    Elapsed weeks in month         0..4\n  'd'    Elapsed days in week           0..6\n  'c'    Elapsed days absolute          0..????\n  'X'    Elapsed hours in day           0..24     \n  'x'    Elapsed hours absolute         0..????\n  'F'    Elapsed minutes in hour        0..60\n  'f'    Elapsed minutes absolute       0..????\n  'G'    Elapsed seconds in minute      0..60\n  'g'    Elapsed seconds absolute       0..????\n  \n  See Also: timefmt examples, conn()\n  \n</PRE>\n<A HREF=\"#timefmt date\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt escapes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt escapes\"><H3>TIMEFMT ESCAPES</H3></A><PRE>\n  To cause the timefmt function to output a '$' character it must be\n  repeated twice, example:\n    @emit timefmt($$MONEY$$ at $H O'clock,secs())\n    SAMPLE OUTPUT: $MONEY$ at 3 O'clock\n  \n  ADVANCED TIMEFMT ESCAPES\n  To cause the timefmt function to output a PROCOPT character from within\n  literal text which follows a format sequence which also contains the\n  needed PROCOPT character it must be repeated twice. Otherwise, the character\n  is a special signal to the timefmt function to tell it that even if a\n  field was suppressed due to a 0 value field that you want to override the\n  conditional processing for the literal text which follows the PROCOPT\n  character. Example:\n    @emit timefmt($!g Seconds Elapsed Dude!! Way to go.,conn())\n    SAMPLE OUTPUT: 5 Seconds Elapsed Dude! Way to go.\n  \n  If the '!' character was not doubled in the above example, and the\n  $g field equated to 0, then the output would go like this:\n    @emit timefmt($!g Seconds Elapsed Dude! Way to go.,0)\n    SAMPLE OUTPUT:  Way to go.\n  \n  See Also: timefmt advanced\n  \n</PRE>\n<A HREF=\"#timefmt elapsed\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt examples\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt examples\"><H3>TIMEFMT EXAMPLES</H3></A><PRE>\n    Wordy time and date:\n      @emit timefmt($A $B $2D\\, $04Y $02H:$02T $P and $02S seconds, secs())\n      SAMPLE OUTPUT: Monday January 20, 1997 03:05 AM and 55 seconds\n  \n    A week-long calendar starting today including Julian date:\n      @emit nsiter(lnum(7),timefmt($a $b $02D $04Y \\\\[$04Y.$03J\\\\], \n      add(secs(),mul(86400,##)))%r)\n      SAMPLE OUTPUT: Mon Jan 20 1997 [1997.020]\n                     Tue Jan 21 1997 [1997.021]\n                     Wed Jan 22 1997 [1997.022]\n                     Thu Jan 23 1997 [1997.023]\n                     Fri Jan 24 1997 [1997.024]\n                     Sat Jan 25 1997 [1997.025]\n                     Sun Jan 26 1997 [1997.026]\n  \n    Mimicking the time() function:\n      @emit timefmt($a $b $2D $02h:$02T:$02S $04Y,secs())\n      SAMPLE OUTPUT: Mon Jan 20 03:20:39 1997\n  \n    Elapsed time such as displayed on WHO in 'On For' column:\n      @emit timefmt($!2cd$02X:$02F,conn(me))\n      SAMPLE OUTPUT:  3d12:03\n      NOTE: This example uses advanced features, see: help timefmt advanced\n  \n  See Also: timefmt advanced\n  \n</PRE>\n<A HREF=\"#timefmt escapes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt syntax\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt syntax\"><H3>TIMEFMT SYNTAX</H3></A><PRE>\n     The timefmt format string can contain two types of data. First it can\n  contain literal text which is mearly copied to the function's output.\n  Second it can contain format sequences. Every format sequence in the\n  format string describes a field to be filled in by the timefmt function.\n  Fields are by default variable width and right justified.\n  A format sequence begins with a '$' character and is followed by an \n  optional left justification character ('-'),\n  a field width, and a mandatory format specifier. The syntax can be\n  described visually as follows: $[-][FIELDWIDTH]FORMATSPEC\n  \n     A field width is specified as a sequence of digits representing the\n  required width of the field. If a field width number begins with a \n  '0' the field will be zero padded, the default is to pad with spaces.\n  \n     An example of a format sequence would be '$-5M' which would print the\n  month name left justified in a field with a width of 5. Should the month\n  name be longer than 5 then the name will be truncated.\n  \n  See Also: timefmt syntax2\n  \n</PRE>\n<A HREF=\"#timefmt examples\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt syntax2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt syntax2\"><H3>TIMEFMT SYNTAX2</H3></A><PRE>\n     Should it be necessary to use a '$' without wishing it to be interpreted\n  as the start of a format sequence, use two '$' characters in a row as in\n  '$$'. These two will be compressed into one literal '$'.\n  \n     There are other advanced features in the syntax which are not described\n  here so as not to confuse the basic topic.\n  \n  See Also: timefmt, timefmt advanced, timefmt escapes\n  \n</PRE>\n<A HREF=\"#timefmt syntax\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt time\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt time\"><H3>TIMEFMT TIME</H3></A><PRE>\n  The following format specifiers are available for processing the &lt;secs&gt;\n  argument as calendar time for purposes of displaying the time. Calendar\n  time is the number of seconds since 0:00 1/1/70 such as that returned by\n  the secs() function.\n  \n  SPEC   DESC                     RANGE\n  'H'    Hour of day              1..12\n  'h'    Hour of day              0..23\n  'T'    Minute in hour           0..59\n  'S'    Second in minute         0..59\n  'P'    AM or PM                 AM/PM\n  'p'    am or pm                 am/pm\n  \n  See Also: timefmt examples, secs()\n  \n</PRE>\n<A HREF=\"#timefmt syntax2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt timezone\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt timezone\"><H3>TIMEFMT TIMEZONE</H3></A><PRE>\n  Following are codes used specifically for timezone manipulation and \n  identification.\n  \n  SPEC   DESC                           RANGE     NOTE\n  'z'    Daylight Savings Toggle        0..1      Boolean to show if active\n  't'    Offset of MUSH local TZ        0..?      Offset in secs of current TZ\n  'I'    Offset from GMT time           0..?      Offset in secs from GMT\n  'i'    Abbreviation of Timezone       XYZ       \n  'N'    Timezone Longname              &lt;str&gt;     Returns the Timezone Name\n  'n'    Timezone Shortname             &lt;str&gt;     Returns geographical area\n  \n  See Also: timefmt codelist\n\n</PRE>\n<A HREF=\"#timefmt time\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timefmt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timefmt()\"><H3>TIMEFMT()</H3></A><PRE>\n  Function: timefmt(&lt;format string&gt;, &lt;secs&gt; [,&lt;output timezone&gt;])\n  \n  Uses the provided &lt;format string&gt; to output the &lt;secs&gt; in many useful\n  ways. The function can be used to interpret &lt;secs&gt; as calendar time,\n  or as elapsed time. Due to the many capabilities of this function,\n  help for it is broken up into several sections.\n  \n  You may specify an optional output timezone for the time.  For a\n  list of timezones, please see 'help timezone list'.\n  \n  ALL AVAILABLE CODES:  help timefmt codelist  (very handy!)\n  FORMAT SYNTAX:        help timefmt syntax\n  TIME FORMATS:         help timefmt time\n  DATE FORMATS:         help timefmt date\n  ELAPSED TIME FORMATS: help timefmt elapsed\n  EXAMPLES:             help timefmt examples\n  ESCAPE SEQUENCES:     help timefmt escapes\n  TIMEZONE FORMATS:     help timefmt timezone\n  \n  See Also: time(), singletime(), ptimefmt(), timezone list\n  \n</PRE>\n<A HREF=\"#timefmt timezone\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list\"><H3>timezone list</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  A      Alpha Time Zone                     Military         UTC + 1 hour\n  ADT    Atlantic Daylight Time              Atlantic         UTC - 3 hours\n  ADT1   Atlantic Daylight Time              North America    UTC - 3 hours\n  AFT    Afghanistan Time                    Asia             UTC + 4:30 hours\n  AKDT   Alaska Daylight Time                North America    UTC - 8 hours\n  AKST   Alaska Standard Time                North America    UTC - 9 hours\n  ALMT   Alma-Ata Time                       Asia             UTC + 6 hours\n  AMST   Armenia Summer Time                 Asia             UTC + 5 hours\n  AMST   Amazon Summer Time                  South America    UTC - 3 hours\n  AMT    Armenia Time                        Asia             UTC + 4 hours\n  AMT1   Amazon Time                         South America    UTC - 4 hours\n  ANAST  Anadyr Summer Time                  Asia             UTC + 12 hours\n  ANAT   Anadyr Time                         Asia             UTC + 12 hours\n  AQTT   Aqtobe Time                         Asia             UTC + 5 hours\n  ART    Argentina Time                      South America    UTC - 3 hours\n  AST    Atlantic Standard Time              Atlantic         UTC - 4 hours\n  AST1   Atlantic Standard Time              Caribbean        UTC - 4 hours\n  AST2   Atlantic Standard Time              North America    UTC - 4 hours\n  AST3   Arabia Standard Time                Asia             UTC + 3 hours\n  AWST   Australian Western Standard Time    Australia        UTC + 8 hours\n  AZOST  Azores Summer Time                  Atlantic         UTC\n  AZOT   Azores Time                         Atlantic         UTC - 1 hour\n  AZST   Azerbaijan Summer Time              Asia             UTC + 5 hours\n  \n{ timezone list2 to continue }   1 of 12\n\n</PRE>\n<A HREF=\"#timefmt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list10\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list10\"><H3>timezone list10</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  S      Sierra Time Zone                    Military         UTC - 6 hours\n  SAMT   Samara Time                         Europe           UTC + 4 hours\n  SAST   South Africa Standard Time          Africa           UTC + 2 hours\n  SBT    Solomon IslandsTime                 Pacific          UTC + 11 hours\n  SCT    Seychelles Time                     Africa           UTC + 4 hours\n  SGT    Singapore Time                      Asia             UTC + 8 hours\n  SRT    Suriname Time                       South America    UTC - 3 hours\n  SST    Samoa Standard Time                 Pacific          UTC - 11 hours\n  T      Tango Time Zone                     Military         UTC - 7 hours\n  TAHT   Tahiti Time                         Pacific          UTC - 10 hours\n  TFT    French Southern and Antarctic Time  Indian Ocean     UTC + 5 hours\n  TJT    Tajikistan Time                     Asia             UTC + 5 hours\n  TKT    Tokelau Time                        Pacific          UTC - 10 hours\n  TLT    East Timor Time                     Asia             UTC + 9 hours\n  TMT    Turkmenistan Time                   Asia             UTC + 5 hours\n  TVT    Tuvalu Time                         Pacific          UTC + 12 hours\n  U      Uniform Time Zone                   Military         UTC - 8 hours\n  ULAT   Ulaanbaatar Time                    Asia             UTC + 8 hours\n  UT1    Universal Time Principal            Zulu Time        UTC\n  UTC    Coordinated Universal Time          Zulu Time        UTC \n  UYST   Uruguay Summer Time                 South America    UTC - 2 hours\n  UYT    Uruguay Time                        South America    UTC - 3 hours\n  UZT    Uzbekistan Time                     Asia             UTC + 5 hours\n  \n{ timezone list11 to continue }    10 of 12\n\n</PRE>\n<A HREF=\"#timezone list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list11\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list11\"><H3>timezone list11</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  V      Victor Time Zone                    Military         UTC - 9 hours\n  VET    Venezuelan Standard Time            South America    UTC - 4:30 hours\n  VLAST  Vladivostok Summer Time             Asia             UTC + 11 hours\n  VLAT   Vladivostok Time                    Asia             UTC + 10 hours\n  VUT    Vanuatu Time                        Pacific          UTC + 11 hours\n  W      Whiskey Time Zone                   Military         UTC - 10 hours\n  WAST   West Africa Summer Time             Africa           UTC + 2 hours\n  WAT    West Africa Time                    Africa           UTC + 1 hour\n  WDT    Western Daylight Time               Australia        UTC + 9 hours\n  WEST   Western European Summer Time        Europe           UTC + 1 hour\n  WEST1  Western European Summer Time        Africa           UTC + 1 hour\n  WET    Western European Time               Europe           UTC\n  WET1   Western European Time               Africa           UTC\n  WFT    Wallis and Futuna Time              Pacific          UTC + 12 hours\n  WGST   Western Greenland Summer Time       North America    UTC - 2 hours\n  WGT    West Greenland Time                 North America    UTC - 3 hours\n  WIB    Western Indonesian Time             Asia             UTC + 7 hours\n  WIT    Eastern Indonesian Time             Asia             UTC + 9 hours\n  WITA   Central Indonesian Time             Asia             UTC + 8 hours\n  WST    West Samoa Time                     Pacific          UTC - 11 hours\n  WST1   Western Standard Time               Australia        UTC + 8 hours\n  WST2   Western Sahara Summer Time          Africa           UTC + 1 hour\n  \n{ timezone list12 to continue }    11 of 12\n\n</PRE>\n<A HREF=\"#timezone list10\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list12\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list12\"><H3>timezone list12</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  WT     Western Sahara Standard Time        Africa           UTC\n  X      X-ray Time Zone                     Military         UTC - 11 hours\n  Y      Yankee Time Zone                    Military         UTC - 12 hours\n  YAKST  Yakutsk Summer Time                 Asia             UTC + 10 hours\n  YAKT   Yakutsk Time                        Asia             UTC + 9 hours\n  YAPT   Yap Time                            Pacific          UTC + 10 hours\n  YEKST  Yekaterinburg Summer Time           Asia             UTC + 6 hours\n  YEKT   Yekaterinburg Time                  Asia             UTC + 5 hours\n  Z      Zulu Time Zone                      Military         UTC\n  \n  See Also: timefmt()\n\n</PRE>\n<A HREF=\"#timezone list11\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list2\"><H3>timezone list2</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  AZT    Azerbaijan Time                     Asia             UTC + 4 hours\n  B      Bravo Time Zone                     Military         UTC + 2 hours\n  BNT    Brunei Darussalam Time              Asia             UTC + 8 hours\n  BOT    Bolivia Time                        South America    UTC - 4 hours\n  BRST   Brasilia Summer Time                South America    UTC - 2 hours\n  BRT    Brasilia time                       South America    UTC - 3 hours\n  BST    Bangladesh Standard Time            Asia             UTC + 6 hours\n  BST1   British Summer Time                 Europe           UTC + 1 hour\n  BTT    Bhutan Time                         Asia             UTC + 6 hours\n  C      Charlie Time Zone                   Military         UTC + 3 hours\n  CAST   Casey Time                          Antarctica       UTC + 8 hours\n  CAT    Central Africa Time                 Africa           UTC + 2 hours\n  CCT    Cocos Islands Time                  Indian Ocean     UTC + 6:30 hours\n  CDT    Central Daylight Time               North America    UTC - 5 hours\n  CDT1   Central Daylight Time               Australia        UTC + 10:30 hours\n  CDT2   Cuba Daylight Time                  Caribbean        UTC - 4 hours\n  CEST   Central European Summer Time        Europe           UTC + 2 hours\n  CET    Central European Time               Europe           UTC + 1 hour\n  CET1   Central European Time               Africa           UTC + 1 hour\n  CHADT  Chatham Island Daylight Time        Pacific          UTC + 13:45 hours\n  CHAST  Chatham Island Standard Time        Pacific          UTC + 12:45 hours\n  CKT    Cook Island Time                    Pacific          UTC - 10 hours\n  \n{ timezone list3 to continue }    2 of 12\n\n</PRE>\n<A HREF=\"#timezone list12\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list3\"><H3>timezone list3</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  CLST   Chile Summer Time                   South America    UTC - 3 hours\n  CLT    Chile Standard Time                 South America    UTC - 4 hours\n  COT    Colombia Time                       South America    UTC - 5 hours\n  CST    Central Standard Time               North America    UTC - 6 hours\n  CST1   Central Standard Time               Central America  UTC - 6 hours\n  CST2   Central Standard Time               Australia        UTC + 9:30 hours\n  CST3   China Standard Time                 Asia             UTC + 8 hours\n  CST4   Cuba Standard Time                  Caribbean        UTC - 5 hours\n  CVT    Cape Verde Time                     Africa           UTC - 1 hour\n  CXT    Christmas Island Time               Australia        UTC + 7 hours\n  ChST   Chamorro Standard Time              Pacific          UTC + 10 hours\n  D      Delta Time Zone                     Military         UTC + 4 hours\n  DAVT   Davis Time                          Antarctica       UTC + 7 hours\n  E      Echo Time Zone                      Military         UTC + 5 hours\n  EASST  Easter Island Summer Time           Pacific          UTC - 5 hours\n  EAST   Easter Island Standard Time         Pacific          UTC - 6 hours\n  EAT    Eastern Africa Time                 Africa           UTC + 3 hours\n  EAT1   East Africa Time                    Indian Ocean     UTC + 3 hours\n  ECT    Ecuador Time                        South America    UTC - 5 hours\n  EDT    Eastern Daylight Time               North America    UTC - 4 hours\n  EDT1   Eastern Daylight Time               Pacific          UTC + 11 hours\n  EDT2   Eastern Daylight Time               Australia        UTC + 11 hours\n  \n{ timezone list4 to continue }    3 of 12\n\n</PRE>\n<A HREF=\"#timezone list2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list4\"><H3>timezone list4</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  EDT3   Eastern Daylight Time               Caribbean        UTC - 4 hours\n  EEST   Eastern European Summer Time        Europe           UTC + 3 hours\n  EEST1  Eastern European Summer Time        Africa           UTC + 3 hours\n  EEST2  Eastern European Summer Time        Asia             UTC + 3 hours\n  EET    Eastern European Time               Europe           UTC + 2 hours\n  EET1   Eastern European Time               Africa           UTC + 2 hours\n  EET2   Eastern European Time               Asia             UTC + 2 hours\n  EGST   Eastern Greenland Summer Time       North America    UTC\n  EGT    East Greenland Time                 North America    UTC - 1 hour\n  EST    Eastern Standard Time               North America    UTC - 5 hours\n  EST1   Eastern Standard Time               Central America  UTC - 5 hours\n  EST2   Eastern Standard Time               Australia        UTC + 10 hours\n  EST3   Eastern Standard Time               Caribbean        UTC - 5 hours\n  ET     Tiempo Del Este                     North America    UTC - 5 hours\n  ET1    Tiempo del Este                     Central America  UTC - 5 hours\n  ET2    Tiempo del Este                     Caribbean        UTC - 5 hours\n  F      Foxtrot Time Zone                   Military         UTC + 6 hours\n  FJST   Fiji Summer Time                    Pacific          UTC + 13 hours\n  FJT    Fiji Time                           Pacific          UTC + 12 hours\n  FKST   Falkland Islands Summer Time        South America    UTC - 3 hours\n  FKT    Falkland Island Time                South America    UTC - 4 hours\n  FNT    Fernando de Noronha Time            South America    UTC - 2 hours\n  \n{ timezone list5 to continue }    4 of 12\n\n</PRE>\n<A HREF=\"#timezone list3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list5\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list5\"><H3>timezone list5</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  G      Golf Time Zone                      Military         UTC + 7 hours\n  GALT   Galapagos Time                      Pacific          UTC - 6 hours\n  GAMT   Gambier Time                        Pacific          UTC - 9 hours\n  GET    Georgia Standard Time               Asia             UTC + 4 hours\n  GFT    French Guiana Time                  South America    UTC - 3 hours\n  GILT   Gilbert Island Time                 Pacific          UTC + 12 hours\n  GMT    Greenwich Mean Time                 Europe           UTC\n  GMT1   Greenwich Mean Time                 Africa           UTC\n  GST    Gulf Standard Time                  Asia             UTC + 4 hours\n  GYT    Guyana Time                         South America    UTC - 4 hours\n  H      Hotel Time Zone                     Military         UTC + 8 hours\n  HAA    Heure Avancee de l'Atlantique       North America    UTC - 3 hours\n  HAA1   Heure Avancee de l'Atlantique       Atlantic         UTC - 3 hours\n  HAC    Heure Avancee du Centre             North America    UTC - 5 hours\n  HADT   Hawaii-Aleutian Daylight Time       North America    UTC - 9 hours\n  HAE    Heure Avancee de l'Est              North America    UTC - 4 hours\n  HAE1   Heure Avancee de l'Est              Caribbean        UTC - 4 hours\n  HAP    Heure Avancee du Pacifique          North America    UTC - 7 hours\n  HAR    Heure Avancee des Rocheuses         North America    UTC - 6 hours\n  HAST   Hawaii-Aleutian Standard Time       North America    UTC - 10 hours\n  HAT    Heure Avancee de Terre-Neuve        North America    UTC - 2:30 hours\n  HAY    Heure Avancee du Yukon              North America    UTC - 8 hours\n  \n{ timezone list6 to continue }    5 of 12\n\n</PRE>\n<A HREF=\"#timezone list4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list6\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list6\"><H3>timezone list6</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  HKT    Hong Kong Time                      Asia             UTC + 8 hours\n  HLV    Hora Legal de Venezuela             South America    UTC - 4:30 hours\n  HNA    Heure Normale de l'Atlantique       North America    UTC - 4 hours\n  HNA1   Heure Normale de l'Atlantique       Atlantic         UTC - 4 hours\n  HNA2   Heure Normale de l'Atlantique       Caribbean        UTC - 4 hours\n  HNC    Heure Normale du Centre             North America    UTC - 6 hours\n  HNC1   Heure Normale du Centre             Central America  UTC - 6 hours\n  HNE    Heure Normale de l'Est              North America    UTC - 5 hours\n  HNE1   Heure Normale de l'Est              Central America  UTC - 5 hours\n  HNE2   Heure Normale de l'Est              Caribbean        UTC - 5 hours\n  HNP    Heure Normale du Pacifique          North America    UTC - 8 hours\n  HNR    Heure Normale des Rocheuses         North America    UTC - 7 hours\n  HNT    Heure Normale de Terre-Neuve        North America    UTC - 3:30 hours\n  HNY    Heure Normale du Yukon              North America    UTC - 9 hours\n  HOVT   Hovd Time                           Asia             UTC + 7 hours\n  I      India Time Zone                     Military         UTC + 9 hours\n  ICT    Indochina Time                      Asia             UTC + 7 hours\n  IDT    Israel Daylight Time                Asia             UTC + 3 hours\n  IOT    Indian Chagos Time                  Indian Ocean     UTC + 6 hours\n  IRDT   Iran Daylight Time                  Asia             UTC + 4:30 hours\n  IRKST  Irkutsk Summer Time                 Asia             UTC + 9 hours\n  IRKT   Irkutsk Time                        Asia             UTC + 8 hours\n  \n{ timezone list7 to continue }    6 of 12\n\n</PRE>\n<A HREF=\"#timezone list5\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list7\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list7\"><H3>timezone list7</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  IRST   Iran Standard Time                  Asia             UTC + 3:30 hours\n  IST    Irish Standard Time                 Europe           UTC + 1 hour\n  IST1   Israel Standard Time                Asia             UTC + 2 hours\n  IST2   India Standard Time                 Asia             UTC + 5:30 hours\n  JST    Japan Standard Time                 Asia             UTC + 9 hours\n  K      Kilo Time Zone                      Military         UTC + 10 hours\n  KGT    Kyrgyzstan Time                     Asia             UTC + 6 hours\n  KRAST  Krasnoyarsk Summer Time             Asia             UTC + 8 hours\n  KRAT   Krasnoyarsk Time                    Asia             UTC + 7 hours\n  KST    Korea Standard Time                 Asia             UTC + 9 hours\n  KUYT   Kuybyshev Time                      Europe           UTC + 4 hours\n  L      Lima Time Zone                      Military         UTC + 11 hours\n  LHDT   Lord Howe Daylight Time             Australia        UTC + 11 hours\n  LHST   Lord Howe Standard Time             Australia        UTC + 10:30 hours\n  LINT   Line Islands Time                   Pacific          UTC + 14 hours\n  M      Mike Time Zone                      Military         UTC + 12 hours\n  MAGST  Magadan Summer Time                 Asia             UTC + 12 hours\n  MAGT   Magadan Time                        Asia             UTC + 11 hours\n  MART   Marquesas Time                      Pacific          UTC - 9:30 hours\n  MAWT   Mawson Time                         Antarctica       UTC + 5 hours\n  MDT    Mountain Daylight Time              North America    UTC - 6 hours\n  MHT    Marshall Islands Time               Pacific          UTC + 12 hours\n  \n{ timezone list8 to continue }    7 of 12\n\n</PRE>\n<A HREF=\"#timezone list6\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list8\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list8\"><H3>timezone list8</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  MMT    Myanmar Time                        Asia             UTC + 6:30 hours\n  MSD    Moscow Daylight Time                Europe           UTC + 4 hours\n  MSK    Moscow Standard Time                Europe           UTC + 3 hours\n  MST    Mountain Standard Time              North America    UTC - 7 hours\n  MUT    Mauritius Time                      Africa           UTC + 4 hours\n  MVT    Maldives Time                       Asia             UTC + 5 hours\n  MYT    Malaysia Time                       Asia             UTC + 8 hours\n  N      November Time Zone                  Military         UTC - 1 hour\n  NCT    New Caledonia Time                  Pacific          UTC + 11 hours\n  NDT    Newfoundland Daylight Time          North America    UTC - 2:30 hours\n  NFT    Norfolk Time                        Australia        UTC + 11:30 hours\n  NOVST  Novosibirsk Summer Time             Asia             UTC + 7 hours\n  NOVT   Novosibirsk Time                    Asia             UTC + 6 hours\n  NPT    Nepal Time                          Asia             UTC + 5:45 hours\n  NST    Newfoundland Standard Time          North America    UTC - 3:30 hours\n  NUT    Niue Time                           Pacific          UTC - 11 hours\n  NZDT   New Zealand Daylight Time           Pacific          UTC + 13 hours\n  NZDT1  New Zealand Daylight Time           Antarctica       UTC + 13 hours\n  NZST   New Zealand Standard Time           Pacific          UTC + 12 hours\n  NZST1  New Zealand Standard Time           Antarctica       UTC + 12 hours\n  O      Oscar Time Zone                     Military         UTC - 2 hours\n  OMSST  Omsk Summer Time                    Asia             UTC + 7 hours\n  \n{ timezone list9 to continue }    8 of 12\n\n</PRE>\n<A HREF=\"#timezone list7\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#timezone list9\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"timezone list9\"><H3>timezone list9</H3></A><PRE>\n  Zone   Zone Name                           Zone Location    UTC/GMT Offset\n  ------ ----------------------------------- ---------------- -----------------\n  OMST   Omsk Standard Time                  Asia             UTC + 6 hours\n  P      Papa Time Zone                      Military         UTC - 3 hours\n  PDT    Pacific Daylight Time               North America    UTC - 7 hours\n  PET    Peru Time                           South America    UTC - 5 hours\n  PETST  Kamchatka Summer Time               Asia             UTC + 12 hours\n  PETT   Kamchatka Time                      Asia             UTC + 12 hours\n  PGT    Papua New Guinea Time               Pacific          UTC + 10 hours\n  PHOT   Phoenix Island Time                 Pacific          UTC + 13 hours\n  PHT    Philippine Time                     Asia             UTC + 8 hours\n  PKT    Pakistan Standard Time              Asia             UTC + 5 hours\n  PMDT   Pierre &amp; Miquelon Daylight Time     North America    UTC - 2 hours\n  PMST   Pierre &amp; Miquelon Standard Time     North America    UTC - 3 hours\n  PONT   Pohnpei Standard Time               Pacific          UTC + 11 hours\n  PST    Pacific Standard Time               North America    UTC - 8 hours\n  PST1   Pitcairn Standard Time              Pacific          UTC - 8 hours\n  PT     Tiempo del Pacifico                 North America    UTC - 8 hours\n  PWT    Palau Time                          Pacific          UTC + 9 hours\n  PYST   Paraguay Summer Time                South America    UTC - 3 hours\n  PYT    Paraguay Time                       South America    UTC - 4 hours\n  Q      Quebec Time Zone                    Military         UTC - 4 hours\n  R      Romeo Time Zone                     Military         UTC - 5 hours\n  RET    Reunion Time                        Africa           UTC + 4 hours\n  \n{ timezone list10 to continue }    9 of 12\n\n</PRE>\n<A HREF=\"#timezone list8\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tobin()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tobin()\"><H3>TOBIN()</H3></A><PRE>\n  Function: tobin(&lt;number&gt;)\n  \n  Todec converts the inputted number into binary.  The following formats\n  are used to send to it:\n \n        0x&lt;number&gt;  - used to specify a hexidecimal number. (base 16) \n        0&lt;number&gt;   - used to specify an octal number.      (base 8)\n        0b&lt;number&gt;  - used to specify a binary number.      (base 2)\n        &lt;number&gt;    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    &gt; say tobin(011)\n    You say &quot;00000000000000000000000000001001&quot;\n    &gt; say tobin(3)\n    You say &quot;00000000000000000000000000000011&quot;\n    &gt; say tobin(0x11)\n    You say &quot;00000000000000000000000000010001&quot;\n \n  See Also: tohex(), tooct(), todec()\n  \n</PRE>\n<A HREF=\"#timezone list9\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#todec()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"todec()\"><H3>TODEC()</H3></A><PRE>\n  Function: todec(&lt;number&gt;)\n  \n  Todec converts the inputted number into decimal.  The following formats\n  are used to send to it:\n \n        0x&lt;number&gt;  - used to specify a hexidecimal number. (base 16) \n        0&lt;number&gt;   - used to specify an octal number.      (base 8)\n        0b&lt;number&gt;  - used to specify a binary number.      (base 2)\n        &lt;number&gt;    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    &gt; say todec(011)\n    You say &quot;9&quot;\n    &gt; say todec(0b11)\n    You say &quot;3&quot;\n    &gt; say todec(0x11)\n    You say &quot;17&quot;\n \n  See Also: tohex(), tooct(), tobin()\n  \n</PRE>\n<A HREF=\"#tobin()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#toggle list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"toggle list\"><H3>TOGGLE LIST</H3></A><PRE>\n  Toggle                  Toggle                  Toggle\n  ----------------------- ----------------------- -------------------------\n  MONITOR                 VANILLA_ERRORS          NO_ANSI_EX\n  CPUTIME                 NOTIFY_LINK             NO_ANSI_PLAYER\n  NO_ANSI_THING           NO_ANSI_ROOM            NO_ANSI_EXIT\n  ZONE_AUTOADD            ZONE_AUTOADDALL         BRANDY_MAIL\n  EXTANSI                 PENN_MAIL               MAIL_STRIPRETURN\n  VPAGE                   MAIL_NOPARSE            MUXPAGE\n  NOZONEPARENT            NOGLOBPARENT            VARIABLE\n  KEEPALIVE               NOISY                   ZONECMDCHK\n  ACCENTS                 MAILVALIDATE            SAFELOG\n  \n  For information on a particular toggle, type 'help &lt;togglename&gt;'.\n  If the name of a toggle is similar to the name of another help\n  entry you may need to add the word 'toggle'. As in 'help monitor toggle'.\n  \n  See Also: @toggle\n \n</PRE>\n<A HREF=\"#todec()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#toggle()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"toggle()\"><H3>toggle()</H3></A><PRE>\n  Function: toggle(&lt;object&gt;,[!]&lt;toggle&gt;)\n  \n  The toggle() function is a side-effect for the @toggle command.  It can\n  only be used to set and remove toggles.  It follows the same permissions\n  and restrictions of the command.  The SIDEFX flag is required to use\n  toggle().\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  &gt; @toggle me=vpage\n  Set.\n  &gt; say toggle(me,vpage)\n  You say &quot;&quot;\n  \n</PRE>\n<A HREF=\"#toggle list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#toggles\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"toggles\"><H3>TOGGLES</H3></A><PRE>\n  Topic: TOGGLES\n  \n  Toggles may be set on objects to alter the way the mush treats them.\n  They are similar to flags, but are usually of a more minor \n  consequence. To set or unset a toggle, the @toggle command is used.\n  For a list of toggles see 'help toggle list'.\n  \n  See Also: @toggle, toggle list \n  \n</PRE>\n<A HREF=\"#toggle()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tohex()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tohex()\"><H3>TOHEX()</H3></A><PRE>\n  Function: tohex(&lt;number&gt;)\n  \n  Todec converts the inputted number into hexidecimal.  The following \n  formats are used to send to it:\n \n        0x&lt;number&gt;  - used to specify a hexidecimal number. (base 16) \n        0&lt;number&gt;   - used to specify an octal number.      (base 8)\n        0b&lt;number&gt;  - used to specify a binary number.      (base 2)\n        &lt;number&gt;    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    &gt; say tohex(017)\n    You say &quot;F&quot;\n    &gt; say tohex(0b11)\n    You say &quot;3&quot;\n    &gt; say tohex(-1)\n    You say &quot;FFFFFFFF&quot;\n \n  See Also: todec(), tooct(), tobin()\n  \n</PRE>\n<A HREF=\"#toggles\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tooct()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tooct()\"><H3>TOOCT()</H3></A><PRE>\n  Function: tooct(&lt;number&gt;)\n  \n  Tooct converts the inputted number into octal.  The following formats\n  are used to send to it:\n \n        0x&lt;number&gt;  - used to specify a hexidecimal number. (base 16) \n        0&lt;number&gt;   - used to specify an octal number.      (base 8)\n        0b&lt;number&gt;  - used to specify a binary number.      (base 2)\n        &lt;number&gt;    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    &gt; say tooct(11)\n    You say &quot;13&quot;\n    &gt; say tooct(0b11)\n    You say &quot;3&quot;\n    &gt; say tooct(0x10)\n    You say &quot;20&quot;\n \n  See Also: tohex(), todec(), tobin()\n  \n</PRE>\n<A HREF=\"#tohex()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#topics\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"topics\"><H3>topics</H3></A><PRE>\n  Help available on the following Topics:\n \n  ALT INVENTORIES     ALTNAMES          ANSINAMES            ARBITRARY COMMANDS\n  ATTRIBUTE USELOCKS  ATTRIBUTE FLAGS   ATTRIBUTE OWNERSHIP  ATTRIBUTE TREES\n  BANG NOTATION       BEING KILLED      BOGUS COMMANDS       BOOLEAN VALUES    \n  CHANGES             CHANNEL           COLORS               COMMAND EVALUATION\n  CONTROL             COPYRIGHT         COSTS                CREDITS         \n  CLUSTERS            DROP-TO           ENACTOR              EXITS           \n  FAILURE             FLAG ALIAS        FLAG LIST            FLAGS           \n  FUNCTION ALIASES    FUNCTION LIST     FUNCTION TYPES       FUNCTIONS       \n  GENDER              GOALS             GUESTS               HERE              \n  HOMES               LINKING           LISTENING            LISTS            \n  LOOPING             MAIL              ME                   MONEY          \n  MOVING              OBJECT TYPES      PARENT OBJECTS       PUPPETS       \n  QUICKREFERENCE      REALITY LEVELS    REGEXPS              REGEXP SYNTAX    \n  REGEXP CLASSES      REGEXP EXAMPLES   ROBBERY              ROYALTY          \n  SEARCH CLASSES      SEMAPHORES        SENSES               SETQ_TEMPLATES   \n  SQL                 SQLESCAPE         SIDEEFFECTS          SINGLETHREADING  \n  SPOOFING            STACK             SUBSTITUTIONS        SUCCESS          \n  SWITCHES            TOGGLES           USEFUL               USER ATTRIBUTES  \n  VARIABLE EXITS      VATOVZ            VERBS                WANDERER         \n  ZATOZZ              ZONES             $-COMMANDS           #LAMBDA\n  \n</PRE>\n<A HREF=\"#tooct()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#totcmds()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"totcmds()\"><H3>TOTCMDS()</H3></A><PRE>\n  Function: totcmds(&lt;player&gt;)\n  \n  Totcmds returns the total number of commands issued by the player from the\n  time of their creation.  \n  \n  Example:\n    &gt; totcmds(me)\n    You say &quot;12345&quot; \n  \n  See Also: cmds()\n  \n</PRE>\n<A HREF=\"#topics\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#totmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"totmatch()\"><H3>TOTMATCH()</H3></A><PRE>\n  Function: totmatch(&lt;string&gt;, &lt;pattern&gt;[, &lt;delim&gt;])\n  \n  This function returns all matches of &lt;pattern&gt; against each word of\n  &lt;string&gt;.  This works just like match(), except it returns every\n  match and location of each match.  This also understands wildcarding\n  such as '?' or '*'.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  &gt; say totmatch(This is a test, test)\n  You say &quot;4&quot;\n  &gt; say totmatch(This test is a test of totmatch. A test is fun, test)\n  You say &quot;2 5 9&quot;\n  &gt; say totmatch(This test is silly, fred)\n  You say &quot;0&quot;\n  \n  See Also: match(), nummatch(), member(), nummember(), totmember()\n  \n</PRE>\n<A HREF=\"#totcmds()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#totmember()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"totmember()\"><H3>TOTMEMBER()</H3></A><PRE>\n  Function: member(&lt;list&gt;, &lt;word&gt;[, &lt;delim&gt;])\n  \n  Totmember takes a list and a word, and returns the position of every\n  matching word in that list.  If the word does not occur in the list, \n  it will return 0.  Unlike totmatch(), totmember() does not check for\n  wildcarding.  It only takes a single non-space delimited word as\n  the argument for word.  totmember() is case sensitive.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n  \n  Example:\n    &gt; say totmember(This is a totmember test this is, this)\n    You say &quot;6&quot;\n    &gt; say totmember(this is a totmember test this is, this)\n    You say &quot;1 6&quot;\n    &gt; say totmember(This is another test, *e*)\n    You say &quot;0&quot;\n  \n  See Also: TOTMATCH(), MATCH(), MEMBER(), NUMMATCH(), NUMMEMBER()\n  \n</PRE>\n<A HREF=\"#totmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#totpos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"totpos()\"><H3>TOTPOS()</H3></A><PRE>\n  Function: totpos(&lt;match&gt;,&lt;string&gt;[,&lt;type&gt;])\n  \n  This function returns all the positions of 'match' in the given 'string'.\n  This works just like pos() but will give the character placement of\n  all the matches instead of the pos()'s first match.\n  \n  If a match is not found in string, an empty value is returned (null).\n  \n  The following types are available:\n    1 - Tells totpos() to match ANY of the characters specified in \n        &lt;string&gt; and to return all the matches. \n    2 - Tells totpos() to match ANY of the characters specified in\n        &lt;string&gt; and return the characters matched, in order, that\n        were found.\n  \n  Note:  Options 1 and 2 are good mixes to stage and prep replacement\n         with the creplace() function.\n   \n  Example:\n    &gt; say totpos(t,this is a test)\n    You say &quot;1 11 14&quot;\n    &gt; say totpos(ts,this is a test,1)\n    You say &quot;1 4 7 11 13 14&quot;\n    &gt; say totpos(ts,this is a test,2)\n    You say &quot;tsstst&quot;\n    &gt; say totpos(t,foobles)\n    You say &quot;&quot;\n  \n  See Also: numpos(), pos(), randpos(), creplace(), elementpos()\n  \n</PRE>\n<A HREF=\"#totmember()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#totwildmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"totwildmatch()\"><H3>totwildmatch()</H3></A><PRE>\n  Function: totwildmatch(&lt;string&gt;, &lt;pattern&gt;[, &lt;delim&gt;])\n  \n  This function returns all matches of &lt;pattern&gt; against each word of\n  &lt;string&gt;.  This works just like wildmatch(), except it returns every\n  match and location of each match.  String also understands wildcarding\n  such as '?' or '*'.\n  \n  &lt;delim&gt; may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  &gt; say totwildmatch(This is a test, test)\n  You say &quot;4&quot;\n  &gt; say totwildmatch(This test is a test of totmatch. A test is fun, test)\n  You say &quot;2 5 9&quot;\n  &gt; say totwildmatch(This test *e* is silly *ed, fred)\n  You say &quot;3 6&quot;\n  \n  See Also: totmatch(), totmember(), wildmatch(), numwildmatch()\n  \n  \n</PRE>\n<A HREF=\"#totpos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#touch\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"touch\"><H3>touch</H3></A><PRE>\n  Command: touch [&lt;object&gt;]\n  Displays the contours of &lt;object&gt;, or the location you're in if you don't\n  specify an object.  Specifying object as &lt;name&gt; or #&lt;dbref&gt; or 'me' or\n  'here' is legal.  You can also use touch to feel objects held by other\n  people.  Just use 'touch &lt;person&gt;'s &lt;object&gt;'.\n  \n  See Also: look, smell, taste, listen, @stouch, @satouch, @sotouch\n  \n</PRE>\n<A HREF=\"#totwildmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#tr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"tr()\"><H3>TR()</H3></A><PRE>\n  Function: tr(&lt;string&gt;, &lt;find&gt;, &lt;replace&gt; [,&lt;type&gt;])\n\n  This function translates every character in &lt;string&gt; that exists in\n  &lt;find&gt; to the character at an identical position in &lt;replace&gt;. \n  \n  If you specify the &lt;type&gt; of '1', then tr by default will not be made \n  ansi-aware and also process strings faster without the ansi overhead.\n  The default value is '0' which allows tr() to be fully ansi-aware.\n   \n  Ranges of characters seperated by -'s are accepted. &lt;find&gt; and &lt;replace&gt; \n  must be the same length after expansion of ranges. If a character exists \n  more than once in &lt;find&gt;, only the last instance will be counted. The example\n  below is the common ROT-13 algorithm for lower case strings, demonstrated\n  with every letter explicitly listed, and with the equivalent but briefer \n  character ranges. Literal -'s can be in &lt;find&gt; and &lt;replace&gt; if they are the\n  first or last characters in the arguments.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'type' is reversed.\n   \n  Examples:\n    &gt; say tr(hello,abcdefghijklmnopqrstuvwxyz,nopqrstuvwxyzabcdefghijklm)\n      You say, &quot;uryyb&quot;\n    &gt; say tr(uryyb, a-z, n-za-m)\n      You say, &quot;hello&quot;\n \n  See also: merge(), foreach(), garble(), creplace(), edit(), editansi()\n\n</PRE>\n<A HREF=\"#touch\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trace\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trace\"><H3>TRACE</H3></A><PRE>\n  Flag: TRACE(T)\n \n  When a thing is set TRACE, it will report to its owner the result of all\n  substitutions that it performs that change the original string.  The order\n  for displaying nested evaluations (such as when evaluating the arguments to\n  a function) is a site-selected configuration parameter.\n  \n  You may specify a TRACE_GREP attibute on yourself (&amp;TRACE_GREP me=&lt;string&gt;)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.\n   \n  Example:\n  &gt; @set object = trace\n  &gt; @va object = say The result is [add(4,mul(3,%0))].\n  &gt; @trig object/va = 7\n  object(#322)} '%0' -&gt; '7'\n  object(#322)} 'mul(3,%0)' -&gt; '21'\n  object(#322)} 'add(4,mul(3,%0))' -&gt; '25'\n  object(#322)} 'The result is [add(4,mul(3,%0))].' -&gt; 'The result is 25.'\n  object says &quot;The result is 25.&quot;\n  \n{ 'help trace2' for more } \n</PRE>\n<A HREF=\"#tr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trace()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trace()\"><H3>TRACE()</H3></A><PRE>\n  Function: trace(&lt;value&gt;)\n  \n  This function controls the TRACE flag on the object executing the function.\n  If the value is 0, the TRACE flag is removed. If the value is non-0 then\n  the TRACE flag is set.\n  \n  This function can be used to selectively turn on trace output for a piece\n  of MUSH code. This can help to avoid the often spammy output of trace.\n  \n  You may specify a TRACE_GREP attibute on yourself (&amp;TRACE_GREP me=&lt;string&gt;)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.\n   \n  Example: (line 2 wrapped)\n    &gt; &amp;broken object=[add(3,mul)(3,7))]\n    &gt; &amp;test object=$testme *:@emit I am [trace(1)][u(me/broken)][trace(0)][swi\n      tch(%0,0,zero,non-zero)].\n    &gt; testme 0\n   \n  In this example you'll see trace output only for the u() of the broken \n  attribute. You will not see trace output for the @emit or the switch().\n  However, if the TRACE flag was set on the object prior to execution, then\n  you would see trace output for everything up to the trace(0) call.\n  \n  See Also: %_, TRACE, VERBOSE, PUPPET, chktrace()\n  \n</PRE>\n<A HREF=\"#trace\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trace2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trace2\"><H3>trace2</H3></A><PRE>\n  When trace output is displayed in top-down order (final evaluation first,\n  followed by the 'smaller' evaluations needed to perform it), then the total\n  number of trace output lines that may be produced by an evaluation is limited\n  to 200.  Bottom-up trace output is not limited.\n  \n  See Also: VERBOSE, PUPPET, %_, trace(), chktrace()\n\n</PRE>\n<A HREF=\"#trace()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trace_grep\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trace_grep\"><H3>TRACE_GREP</H3></A><PRE>\n  Topic: SUBSTITUTIONS\n  Syntax: %_&lt;label&gt;  -- enables debugging if &lt;label&gt; is in TRACE attribute.\n          %_&lt;-label&gt; -- disables debugging for &lt;label&gt;\n          %_&lt;off&gt;    -- disables all debugging\n  \n  The %_ substitution is a special substitution as it allows you to enbed\n  breakpoints into code to toggle on and off debugging on the fly dynamically.\n  This is handled by the enactors 'TRACE' attribute that houses the marker\n  that you specify for the substitutions.  The marker can be any string.\n  \n  You use - for the label to turn off debugging for that particular debug\n  marker.  For stacked debugging this will decrement the debug stack count.\n   \n  Using the &lt;label&gt; adds to the debug stack and using &lt;-label&gt; reduces one\n  from the debug stack.  This allows you to essentially nest debugging\n  breakpoints within code and only enable/disable them when you set\n  the specified label in your TRACE value.  For instance, &amp;TRACE me=123\n  \n  Note: This has absolutely no impact on the TRACE flag and uses another\n  method to keep track of how it's tracing information.  You can use\n  this in addition to the TRACE flag if you so wish.\n  \n  You may use the attribute TRACE_COLOR to set a standard color for your\n  labels.   For instance, &amp;TRACE_COLOR me=+purple.  You may specify colors\n  by label as &amp;TRACE_COLOR_&lt;label&gt; me=+orange.  Like &amp;TRACE_COLOR_123.\n  This will fall back on 'TRACE_COLOR' if the by label isn't found.\n  \n  You may specify a TRACE_GREP attibute on yourself (&amp;TRACE_GREP me=&lt;string&gt;)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.  If the TRACE_GREP attribute\n  is attribute-set REGEXP, it will take the string as a regexp match.\n   \n  Examples:\n    &gt; &amp;TRACE me=123\n    &gt; say Debugging: [add(1,1)]%_&lt;123&gt;[add(2,2)]%_&lt;-123&gt;[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -&gt; '4'\n    You say &quot;Debugging: 246&quot;\n    &gt; say Debugging: [add(1,1)]%_&lt;123&gt;[add(2,2)]%_&lt;off&gt;[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -&gt; '4'\n    You say &quot;Debugging: 246&quot;\n    &gt; &amp;TRACE_COLOR me=+orange\n    &gt; say Debugging: [add(1,1)]%_&lt;123&gt;[add(2,2)]%_&lt;off&gt;[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -&gt; '4'\n    You say &quot;Debugging: 246&quot;\n  \n  In the last exampole, the 123 inside the []'s would have been orange.\n  \n  See Also: SUBSTITUTIONS, TRACE, trace()\n  \n</PRE>\n<A HREF=\"#trace2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#train\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"train\"><H3>train</H3></A><PRE>\n  Command: train\n  The train command is used to output to the player what exactly you have \n  typed.  The output is not parsed and is taken verbatum and displayed as\n  is. \n  \n  Example:\n    &gt; train @emit To do addition, type:  say add(1,1) = 2\n    YourName types -=&gt; @emit To do addition, type: say add(1,1) = 2\n    To do addition, type: say add(1,1) = 2                         \n  \n  See Also: @emit, pose, @pemit, think, ]\n  \n</PRE>\n<A HREF=\"#trace_grep\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#translate()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"translate()\"><H3>TRANSLATE()</H3></A><PRE>\n  Function: translate(&lt;string&gt;,&lt;type&gt;)\n  \n  This function, when given a 'p' or '1', will translate all special \n  characters (like tabs, returns, ansi, etc) to the proper percent\n  substitutions.  When given a 's' or '0', it will convert all the special\n  characters to spaces.  Please keep in mind that as RhostMUSH strips ansi\n  at the function level, that this will not work as you expect with ansi!\n  \n  Examples:\n    &gt; @wait 0=@va me=This%t%tis%ratest\n    Set.\n    &gt; say v(va)\n    You say &quot;You say &quot;This           is\n    atest&quot;\n    &gt; say translate(v(va),p)\n    You say &quot;This%t%tis%ratest&quot;\n    &gt; say translate(v(va),s)\n    You say &quot;this  is atest&quot;\n  \n  See Also: strip(), edit(), editansi(), s(), eval(), regedit()\n  \n</PRE>\n<A HREF=\"#train\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#transparent\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"transparent\"><H3>TRANSPARENT</H3></A><PRE>\n  Flag: TRANSPARENT(T)\n \n  If an exit is TRANSPARENT, then when you look at it you see the description\n  of the room on the other side of the exit in addition to the description\n  of the exit.  \n  \n  If a room is TRANSPARENT, it will use a long-list of exits and display them\n  in the given room by showing the names of the rooms the exits link to.\n  \n  For example:\n  A room that is not set TRANSPARENT:\n    &gt; look\n    Room\n    This is a description\n    Obvious Exits:\n    North &lt;N&gt;  South &lt;S&gt;\n  \n  The same room set TRANSPARENT:\n    &gt; look\n    Room\n    This is a description\n    Obvious Exits:\n    North &lt;N&gt; [leads to 'Room with a view']\n    South &lt;S&gt; [leads to 'Under the carpet']\n  \n  See Also: @open, @dig\n  \n</PRE>\n<A HREF=\"#translate()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trigonometry functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trigonometry functions\"><H3>trigonometry functions</H3></A><PRE>\n  Function Lists: Trigonometry Functions.\n     \n  acos()        - Returns the arc-cosine of a number in radians.\n  asin()        - Returns the arc-sine of a number in radians.\n  atan()        - Returns the arc-tangent of a number in radians.\n  atan2()       - Returns the arc-tangent of a two numbers in radians.\n  cos()         - Returns the cosine of a number in radians.\n  ctu()         - Converts a trigonometric unit from  one to another.\n  dist2d()      - Returns the integer distance of two Cartesian points in 2d.\n  dist3d()      - Returns the integer distance of two Cartesian points in 3d.\n  sin()         - Returns the sine of a number in radians.\n  tan()         - Returns the tangent of a number in radians.\n  vadd()        - Returns the sum of two vectors.\n  vcross()      - Returns a cross product of two vectors.\n  vdim()        - Returns the dimensionality of two vectors.\n  vdot()        - Returns the dot product of two vectors.\n  vmag()        - Returns the magnitude of a vector.\n  vmul()        - Returns the result of multiplying a vector by a number.\n  vsub()        - Returns the difference between two vectors.\n  vunit()       - Returns an unit vector.\n\n\n</PRE>\n<A HREF=\"#transparent\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trim()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trim()\"><H3>TRIM()</H3></A><PRE>\n  Function: trim(&lt;string&gt; [,&lt;trim style&gt; [,&lt;trim character(s)&gt;]])\n \n  This function will trim trailing and/or lead characters on the string\n  that you specify.  &lt;trim character&gt; specifies the character to trim (default\n  is space), and &lt;trim style&gt; tells the kind of trimming to perform (default\n  is trim both sides of the string).  You may specify more than one character\n  for trimming.\n \n  The following values for &lt;trim style&gt; are recognized:\n      'b' :   Trim both ends of the string (default)\n      'l' :   Trim the left end of the string.\n      'r' :   Trim the right end of the string.\n  Note: anything else specified for &lt;trim style&gt; will trim both sides.\n \n  Example:\n    &gt; say trim(;;;Wacka;;;,,;)\n    You say &quot;Wacka&quot;\n    &gt; say trim(%b%b%b Polly Parrot %b%b%b%b,r)\n    You say &quot;    Polly Parrot&quot;\n    &gt; say trim(---Trim Rules!---,l,-)\n    You say &quot;Trim Rules!---&quot;\n  \n  See Also: center(), ljust(), rjust(), ljc(), rjc(), s(), printf()\n  \n</PRE>\n<A HREF=\"#trigonometry functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#trunc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"trunc()\"><H3>TRUNC()</H3></A><PRE>\n  Function: trunc(&lt;number&gt;)\n \n  Returns the value of &lt;number&gt; after truncating off any fractional value.\n  &lt;number&gt; may be a floating point number, and an integer result is returned.\n \n  Examples:\n    &gt; say trunc(5)\n    You say &quot;5&quot;\n    &gt; say trunc(5.2)\n    You say &quot;5&quot;\n    &gt; say trunc(5.8)\n    You say &quot;5&quot;\n    &gt; say trunc(-5)\n    You say &quot;-5&quot;\n    &gt; say trunc(-5.2)\n    You say &quot;-5&quot;\n  \n  See Also: div(), floor(), mod(), round()\n  \n</PRE>\n<A HREF=\"#trim()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#txlevel()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"txlevel()\"><H3>TXLEVEL()</H3></A><PRE>\n  Function: txlevel(&lt;target&gt; [,&lt;value&gt;])\n  \n  Returns a space separated list of &lt;target&gt;'s Tx Levels. You must control\n  &lt;target&gt;.  If no levels are listed, nothing is returned.  If you do not \n  control the target, or if the target does not exist, '#-1' is returned.\n  \n  You may specify a value to set or unset if this SIDEEFFECT feature\n  is enabled.  The enactor MUST be set SIDEFX for this to work.  You\n  must have permission to set reality levels to use this.  Use\n  listrlevels() or @list rlevel to see the levels you can set.\n  \n  Example:\n    &gt; say txlevel(me)\n    You say &quot;Real&quot;.\n    &gt; say txlevel(me, !real)\n    You say &quot;&quot;\n    &gt; say txlevel(me)\n    You say &quot;&quot;\n  \n  See Also: hasrxlevel(), hastxlevel(), rxlevel(), listrlevels(), chkreality()\n  \n</PRE>\n<A HREF=\"#trunc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#type()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"type()\"><H3>type()</H3></A><PRE>\n  Function: type(&lt;object&gt;)\n  Returns a string indicating the object type of &lt;object&gt;, either EXIT,\n  PLAYER, ROOM, or THING.\n \n  Example:\n    &gt; say type(me)\n    You say &quot;PLAYER&quot;\n    &gt; say type(here)\n    You say &quot;ROOM&quot;\n  \n  See Also: OBJECT TYPES\n  \n</PRE>\n<A HREF=\"#txlevel()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#u()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"u()\"><H3>U()</H3></A><PRE>\n  Function: u([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n \n  The u function evaluates an attribute, either from the object performing the\n  function or from another object you own, passing in arguments and returning\n  the result.\n  \n  When evaluating the fetched attribute, %# refers to the original enactor and\n  not the 'calling' object, and 'me' refers to the object that supplied the\n  attribute.\n  \n  See '@list options' to see if this functionality switched with u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  Examples:\n    &gt; @va me=Word is [extract(v(vb),add(%0,1),1)], arg2 is %1.\n    &gt; @vb me=This is a test of the u function.\n    &gt; say u(va,4,Testing 123)\n    You say &quot;Word is of, arg2 is Testing 123.&quot;\n    &gt; say u(va,7)\n    You say &quot;Word is function., arg2 is .&quot;\n    &gt; say u(me/va,6,Foobar)\n    You say &quot;Word is u, arg2 is Foobar.&quot;\n  \n  See Also: s(), v(), get(), get_eval(), map(), ueval(), streval(),\n            objeval(), @lfunction\n  \n</PRE>\n<A HREF=\"#type()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#u2()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"u2()\"><H3>U2()</H3></A><PRE>\n  Function: u2([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n  \n  This is nearly exactly like the original u() function except it parses\n  in an object-dependant way like the old mushes.  It works by evaluating\n  the function(s) by the power of the owner of the item it's on, and not\n  by the power of the enactor.  \n  \n  This command is also very handy to keep security.\n  \n  See '@list options' to see if this functionality switched with u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  For examples or more information, look at u()\n  \n  See Also: u(), u2local(), u2ldefault(), @lfunction\n  \n</PRE>\n<A HREF=\"#u()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#u2default()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"u2default()\"><H3>u2default()</H3></A><PRE>\n  Function:  u2default([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  Works like udefault() but uses the u2() function instead of u()\n  \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the u2() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say u2default(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say u2default(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also:  get(), get_eval(), u2(), default(), edefault()\n  \n</PRE>\n<A HREF=\"#u2()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#u2ldefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"u2ldefault()\"><H3>u2ldefault()</H3></A><PRE>\n  Function:  u2ldefault([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the u2local() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike u2default(), it doesn't clobber\n  %q0-%q9 registers.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say u2ldefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say u2ldefault(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also: get(), get_eval(), u(), default(), edefault()\n  \n</PRE>\n<A HREF=\"#u2default()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#u2local()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"u2local()\"><H3>U2LOCAL()</H3></A><PRE>\n  Function:  u2local([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n \n  The u2local() function is almost identical to u2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n \n  However, unlike the u2() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  &quot;below&quot; the level of the u2() can reset global registers for temporary\n  calculations, without needing to worry about &quot;clobbering&quot; the original\n  values.\n \n  This makes u2local() particularly useful for global or shared code which\n  calls arbitrary u2() functions, where global register values need to be\n  preserved from accidental user clobbering.\n \n{ See &quot;help u2local2&quot; for examples. }\n \n</PRE>\n<A HREF=\"#u2ldefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#u2local2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"u2local2\"><H3>U2LOCAL2</H3></A><PRE>\n  Example of u2local():\n    &gt; &amp;FRUIT me=apples bananas oranges pears\n    &gt; &amp;SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][u2local(SUB-FUNCTION,%0)] %q0\n    &gt; say u2(TOP-FUNCTION,b*)\n    You say &quot;bananas are delicious!&quot;\n \n  If SUB-FUNCTION had been called with u2() instead of u2local():\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][u2(SUB-FUNCTION,%0)] %q0\n    &gt; say u2(TOP-FUNCTION,b*)\n    You say &quot;bananas apples bananas oranges pears&quot;\n \n  In this second example, in SUB-FUNCTION, %q0 was set to &quot;apples bananas\n  oranges pears&quot;, so that when the u2() &quot;returned&quot; and TOP-FUNCTION evaluated\n  %q0, this is what was printed. In the first example, u2local() reset the\n  value of %q0 to its original &quot;are delicious!&quot;\n \n  See Also:  ulocal(), u(), u2(), uldefault(), u2ldefault(), setq(), r()\n  \n</PRE>\n<A HREF=\"#u2local()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ucstr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ucstr()\"><H3>UCSTR()</H3></A><PRE>\n  Function: ucstr(&lt;string&gt;)\n \n  Returns &lt;string&gt; with all letters converted to uppercase.\n \n  Example:\n    &gt; say ucstr(This is a test, really!)\n    You say &quot;THIS IS A TEST, REALLY!&quot;\n  \n  See Also: capstr(), lcstr()\n  \n</PRE>\n<A HREF=\"#u2local2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#udefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"udefault()\"><H3>udefault()</H3></A><PRE>\n  Function:  udefault([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the u() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say udefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say udefault(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also: get(), get_eval(), u(), default(), edefault()\n  \n</PRE>\n<A HREF=\"#ucstr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ueval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ueval()\"><H3>UEVAL()</H3></A><PRE>\n  Function: ueval([&lt;obj&gt;/]&lt;attr&gt;/permission[,&lt;arg&gt;],...)\n  \n  The ueval function evaluates an attribute, either from the object performing\n  the function or from another object you own, passing in arguments and\n  returning the result.  In this way it works just like 'u()', except you \n  pass in a permission to specify what permission level you wish to use for\n  evaluation.  It assumes the enactor (owner) of the function always succeeds.\n  When evaluating the fetched attribute, %# refers to the original enactor and\n  not the 'calling' object, and 'me' refers to the object that supplied the\n  attribute.  For more detail on functionality, look at U().\n \n  The available permission levels are CIT[IZEN], GUILD[MASTER], ARCH[ITECT],\n  COUN[CILOR], ROY[ALTY], IMM[ORTAL].  You must have the permissions of the\n  given level in order to use it else it defaults to your permission level.\n  The permission must be included for the function to work.\n  \n  Examples:\n    &gt; @set me=royalty (let's assume you're a wizard)\n    &gt; @va me=[num(*Miriar)] (the ghod character - #1)\n    &gt; say ueval(va/royalty)\n    You say &quot;#1&quot;\n    &gt; say ueval(va/citizen)\n    You say &quot;#-1&quot;\n  \n  See Also: u(), u2(), objeval(), ulocal(), u2local(), streval()\n  \n</PRE>\n<A HREF=\"#udefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#uldefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"uldefault()\"><H3>uldefault()</H3></A><PRE>\n  Function:  uldefault([&lt;obj&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;obj&gt;/&lt;attr&gt;), as if retrieved via\n  the ulocal() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike udefault(), it doesn't clobber %q0-%q9\n  registers.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say uldefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say uldefault(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also: get(), get_eval(), u(), default(), edefault()\n  \n</PRE>\n<A HREF=\"#ueval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ulocal()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ulocal()\"><H3>ULOCAL()</H3></A><PRE>\n  Function:  ulocal([&lt;obj&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n   \n  The ulocal() function is almost identical to u() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n   \n  However, unlike the u() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  &quot;below&quot; the level of the u() can reset global registers for temporary\n  calculations, without needing to worry about &quot;clobbering&quot; the original\n  values.\n   \n  This makes ulocal() particularly useful for global or shared code which\n  calls arbitrary u() functions, where global register values need to be\n  preserved from accidental user clobbering.\n   \n{ See &quot;help ulocal2&quot; for examples. }\n \n</PRE>\n<A HREF=\"#uldefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#ulocal2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"ulocal2\"><H3>ULOCAL2</H3></A><PRE>\n  Example of ulocal():\n    &gt; &amp;FRUIT me=apples bananas oranges pears\n    &gt; &amp;SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][ulocal(SUB-FUNCTION,%0)] %q0\n    &gt; say u(TOP-FUNCTION,b*)\n    You say &quot;bananas are delicious!&quot;\n   \n  If SUB-FUNCTION had been called with u() instead of ulocal():\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][u(SUB-FUNCTION,%0)] %q0\n    &gt; say u(TOP-FUNCTION,b*)\n    You say &quot;bananas apples bananas oranges pears&quot;\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to &quot;apples bananas\n  oranges pears&quot;, so that when the u() &quot;returned&quot; and TOP-FUNCTION evaluated\n  %q0, this is what was printed. In the first example, ulocal() reset the\n  value of %q0 to its original &quot;are delicious!&quot;\n   \n  See Also:  ulocal2(), u(), u2(), uldefault(), u2ldefault(), setq(), r(),\n             @lfunction\n  \n</PRE>\n<A HREF=\"#ulocal()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#unesclist()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"unesclist()\"><H3>UNESCLIST()</H3></A><PRE>\n  Function: unesclist(&lt;list of characters to un-escape&gt;|&lt;string&gt;)\n  \n  This function takes an optional list of characters you wish to un-escape \n  and then un-escapes them (via removing the \\ character before it) from \n  every character that you specified.  This is intended to be used with \n  weird escape situations like calling external sources.\n  \n  Examples:\n    &gt; @va me=Test: \\'A string\\' and \\&quot;anoter string\\&quot;\\, I say.\n    Set.\n    &gt; say unesclist('&quot;,|[v(va)])\n    You say &quot;Test: 'A string' and &quot;anoter string&quot;, I say.&quot;\n    &gt; say unesclist('|[v(va)])\n    You say &quot;Test: 'A string' and &quot;anoter string&quot;, I say.&quot;\n  \n  See Also: escape(), escapex(), esclist()\n  \n</PRE>\n<A HREF=\"#ulocal2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#unfindable\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"unfindable\"><H3>UNFINDABLE</H3></A><PRE>\n  Flag: UNFINDABLE(U) \n  \n  If a player is set UNFINDABLE, he cannot be found by \n  the loc() or room() functions.  Bummer.\n  \n  If a room is set UNFINDABLE, players in that room (or inside objects\n  in the room) cannot be found by loc(),room(), or similiar functionality.\n  \n  See Also: DARK\n  \n</PRE>\n<A HREF=\"#unesclist()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#unpack()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"unpack()\"><H3>UNPACK()</H3></A><PRE>\n  Function: unpack(&lt;packed number&gt;[[,&lt;radix&gt;][,&lt;penn compat flag&gt;]])\n   \n  Returns the equivalent normal base-10 number of the given\n  packed-number using the specified base. The default radix is 64.\n  The inverse function of unpack is pack.  The radix can be between\n  2 and 64.\n  \n  You may specify tghe PennMUSh compatable toggle (1) which will mimic Penn's\n  64 bit packing algo.\n   \n  Examples:\n    &gt;think unpack(bVxTM)\n    629126998\n    &gt;think unpack(1111,2)\n    15\n   \n  See Also: pack(), crc32(), mask(), tobin(), tohex(), tooct(), todec()\n  \n</PRE>\n<A HREF=\"#unfindable\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#use\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"use\"><H3>use</H3></A><PRE>\n  Command: use &lt;object&gt;\n  Uses &lt;object&gt;.  Some objects will do interesting, useful, or dangerous\n  things when used, for instance, using a camera should result in a \n  picture being taken.\n  \n  See Also: @ause, @ouse, @use\n  \n</PRE>\n<A HREF=\"#unpack()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#useful\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"useful\"><H3>USEFUL</H3></A><PRE>\n  The following topics should be of greater import to learn for new users.\n  \n  news cmdlist          - lists all commands with the news system\n  mail cmdlist          - lists all commands with the mail system\n  mail write cmdlist    - lists all commands with the mail line-editor\n  folder cmdlist        - lists all commands with the mail folder system\n  page                  - lists differences in the page system\n  WHO                   - needs to be capitalized to who (unless changed)\n  QUIT                  - needs to be capitalized to quit (unless changed)\n  LOGOUT                - needs to be capitalized to logout (unless changed)\n  \n  Type 'help &lt;topic&gt;' for help on a particular topic.\n  \n  There are also differences on this platform compared to MUX/TINY.\n  For these differences, please type:\n  \n                         help differences\n  \n</PRE>\n<A HREF=\"#use\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#user attributes\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"user attributes\"><H3>USER ATTRIBUTES</H3></A><PRE>\n  User attributes are defined as personally designed or created attribute\n  names by the user.  These can be mostly anything you want, up to the\n  length of the current SBUF (32 or 64 characters) and starting with\n  a-z, A-Z, ~ (if configured), # (if configured), or _ (wiz only).\n  \n  Attributes may not start with any other character, but after the initial\n  character they are able to contain most characters up to the SBUF\n  lenght.\n  \n  You can set these attributes with the &amp; (or clustered &gt;) command, or by\n  using @set or set().  Individual help for each of those is available.\n  \n  Attribute permissions may not be possible to set based on locks that may\n  exist, control of the object you're trying to set it on, or global \n  permissions prefixes that may be established.\n  \n  See Also: &amp;, &gt;, @set, set(), @cpattr, @mvattr\n  \n</PRE>\n<A HREF=\"#useful\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#userlocks\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"userlocks\"><H3>userlocks</H3></A><PRE>\n  Userlocks are created, viewed, and checked by utilizing three functions.\n  \n    lockencode(&lt;string&gt;) --------- this will encode the lock key \n                                   (any valid key) into a 64 byte encoding \n                                   (like mime encapsulation) that you can \n                                   then store pretty much anywhere that you \n                                   want.\n  \n    lockdecode(&lt;string&gt;) --------- this will decode the specified encoded key\n                                   value into the human-readable lock format. \n                                   The output will be the same as if you did \n                                   a lock() on a @lock.\n  \n    lockcheck(&lt;string&gt;,target&gt;) -- this will compare the 64 byte encoded lock\n                                   against the specified target.  It returns\n                                   a '1' for success or a '0' for failure. \n                                   This works like elock() on a @lock.\n  \n  See Also: lockencode(), lockdecode(), lockcheck(), lock(), elock(), @lock\n\n</PRE>\n<A HREF=\"#user attributes\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#v()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"v()\"><H3>V()</H3></A><PRE>\n  Function: v(&lt;string&gt;)\n  The V function can be used as an alternative for percent (%) substitution\n  and also as a replacement for get(me/&lt;arg&gt;).  If the argument is two\n  characters long or longer and starts with a letter, then the object\n  performing the v() call (and its parent, if necessary) is searched for the\n  named attribute, and its value is returned if possible.  Otherwise, a\n  percent substitution is performed on the argument (so that v(o) is\n  equivalent to %o, for instance).  The percent form (%o in the previous\n  example) is preferred as it is faster, and there are no longer any security\n  problems associated with it.  Note that attributes with single-character\n  names cannot be retrieved with v().  \n  \n  '#' will return the dbref# of the enactor, UNLESS there is a valid char\n  after it in which it will attempt to pull the attribute.\n  \n  Do note that the '%' substitution for attributes only works for @va to @vz.\n  \n  Limitations:  v() can not call single-character attributes.  Use get() for\n                any attribute with a single character.\n  \n  Notes: v() allows you to grab values past %9 without resorting to shift().\n  \n  Examples:\n    &gt; &amp;# me=test\n    Set\n    &gt; &amp;#123 me=Test 2\n    Set\n    &gt; say num(me)\n    You say &quot;#123&quot;\n    &gt; say v(#)\n    You say &quot;#123&quot;\n    &gt; say get(me/#)\n    You say &quot;test&quot;\n    &gt; say v(#123)\n    You say &quot;Test 2&quot;\n  \n  See Also: GENDER, SUBSTITUTION, PARENT OBJECTS, SHIFT()\n  \n</PRE>\n<A HREF=\"#userlocks\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vadd()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vadd()\"><H3>VADD()</H3></A><PRE>\n  Function: vadd(&lt;vector&gt;,&lt;vector&gt;[[,&lt;delimiter&gt;],&lt;seperator&gt;])\n   \n  Returns the sum of two vectors.  A vector is a list of numbers\n  separated by spaces or a delimiter.  The vector lists must contain\n  the same number of items or it will return an error.  You may\n  specify an optional output seperator.\n   \n  Examples:\n    &gt; think vadd(1 2 3,4 5 6)\n    5 7 9\n    &gt; think vadd(0|0|0,1|2|3,|)\n    1|2|3\n    &gt; think vadd(0|0|0,1|2|3,|,@)\n    1@2@3\n  \n  See Also: vdim(), vunit(), vdot(), vmul(), vsub(), vmag(), vcross()\n  \n</PRE>\n<A HREF=\"#v()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#valid()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"valid()\"><H3>VALID()</H3></A><PRE>\n  Function: valid(&lt;option&gt;, &lt;string&gt;)\n  \n  This function returns 1 if &lt;string&gt; is valid for &lt;option&gt;, and 0\n  if it is not.\n  \n  The following options are available for the valid function:\n     name       - returns '1' if the string is a valid object name\n     attrname   - returns '1' if the string is a valid attribute name\n     playername - returns '1' if the string is a valid player name.  This \n                  also checks if the player already exists.\n     password   - returns '1' if the string is a valid password.\n     command    - returns '1' if string is a valid command (or alias).\n     function   - returns '1' if string is a valid function.\n     ufunction  - returns '1' if string is valid @function/@lfunction.\n     flag       - returns '1' if string is a valid flag.\n     toggle     - returns '1' if string is a valid toggle.\n     qreg       - returns '1' if string is valid qreg label.\n     colorname  - returns '1' if string is a valid +name for ansi.\n     ansicodes  - always returns '1'.  Meant for Penn compatibility.\n     timezone   - returns '1' if string is a valid timezone.\n     locktype   - returns '1' if string is a valid lock switch/type.\n     lockkey    - returns '1' if string is a valid string for locking.\n  \n  If a valid option is not specified, this function returns #-1.\n  \n  Examples:\n    &gt; say valid(name, Fred)\n    You say &quot;1&quot;\n    &gt; say valid(name, )\n    You say &quot;0&quot;\n    &gt; say valid(playername,me)\n    You say &quot;0&quot;\n  \n  See Also: isdbref(), name()\n  \n</PRE>\n<A HREF=\"#vadd()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vanilla_errors toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vanilla_errors toggle\"><H3>VANILLA_ERRORS TOGGLE</H3></A><PRE>\n  Toggle: VANILLA_ERRORS\n \n  When this toggle is set on an object, the mush will show that object\n  the normal error message. Otherwise the mush will show something more\n  creative.\n  \n</PRE>\n<A HREF=\"#valid()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#variable exits\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"variable exits\"><H3>VARIABLE EXITS</H3></A><PRE>\n  Variable exits are done somewhat differently than Penn and TinyMUSH3.  First,\n  it doesn't matter where the exit is linked to (though we suggest you do link\n  it somewhere *grin*).  You then @toggle the exit VARIABLE.  It will then \n  check the @exitto attribute on the exit for the destination.  If the \n  destination is not a valid location ('home' or a valid dbref# that can be \n  linked to) it will fail to allow the target through the exit and return an \n  error message.\n  \n  See Also: @exitto, variable toggle\n  \n</PRE>\n<A HREF=\"#vanilla_errors toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#variable toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"variable toggle\"><H3>VARIABLE TOGGLE</H3></A><PRE>\n  Toggle: VARIABLE\n  \n  Specifies that the target exit is a 'variable' exit and that it will\n  parse the @exitto attribute for it's destination location and not where\n  it is currently linked to.\n  \n  If a player sets the VARIABLE toggle on himself, then all ansi via\n  Cname()/%k will show up when that player @walls, poses, or uses say.\n    \n  See Also: variable exits, @exitto\n  \n</PRE>\n<A HREF=\"#variable exits\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vatovz\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vatovz\"><H3>VATOVZ</H3></A><PRE>\n  Command: @va[/&lt;switch&gt;] &lt;object&gt;=&lt;string&gt;\n           ...\n           @vz[/&lt;switch&gt;] &lt;object&gt;=&lt;string&gt;\n  \n  This sets attributes VA - VZ (with @va - @vz) on the target object.\n  This is in effect just like &amp;VA or &amp;VZ but is provided for older MUSH\n  backward compatibility.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  See Also: &amp; \n  \n</PRE>\n<A HREF=\"#variable toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vattrcnt()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vattrcnt()\"><H3>VATTRCNT()</H3></A><PRE>\n  Function: vattrcnt(&lt;object&gt; [,&lt;type&gt;])\n  This function counts just the user-defined attributes that exist on\n  an object.  User defined attributes are attributes that are set\n  with the &amp;attr object=string or @set object=attr:string commands and\n  have no @&lt;attribute&gt; ability. (like @va, @desc, etc)\n  \n  If the &lt;type&gt; is specified to 1, it will reset the vattr count on\n  the attribute.  This should never become out of sync with the true\n  count on the object.  If there is a discrepency, it usually points\n  to larger problems that should be brought to the attention of the\n  developers.  This could be caused from improper database writes\n  to disk, quota/disk limitations, or possible db corruption.\n  \n  Examples:\n    &gt; say vattrcnt(me)\n    You say &quot;14&quot;\n    &gt; say attrcnt(me)\n    You say &quot;20&quot;\n    &gt; say words(lattr(me))\n    You say &quot;20&quot;\n  \n  See Also: words(), lattr(), attrcnt()\n  \n</PRE>\n<A HREF=\"#vatovz\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vcross()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vcross()\"><H3>VCROSS()</H3></A><PRE>\n  Function: vcross(&lt;vector&gt;,&lt;vector&gt;[,&lt;delimiter&gt;],&lt;seperator&gt;])\n   \n  Returns the cross product of two vectors. The cross product of two\n  vectors is a vector.  This function may take an optional seperator.\n  \n                          | a b c |\n  (a,b,c) X (d,e,f) = det | d e f | = i(bf-ce) + j(cd-af) + k(ae-bd)\n                          | i j k |\n  \n  where i, j, and k are taken as unit vectors in cartisian space.\n   \n  Examples:\n  &gt; @pemit me=vcross(1 2 3,2 3 4)\n  -1 2 -1\n  &gt; @pemit me=vcross(1 2 3,2 3 4,,@)\n  -1@2@-1\n  \n  Taken from MUX 2.0 with permission.\n   \n  See Also: vadd(), vdim(), vunit(), vdot(), vmul(), vsub(), vmag()\n  \n  \n</PRE>\n<A HREF=\"#vattrcnt()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vdim()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vdim()\"><H3>VDIM()</H3></A><PRE>\n  Function: vdim(&lt;vector&gt;[,&lt;delimiter&gt;])\n   \n  Returns the dimensionality of a vector.  For all intents and purposes\n  this works just like words().\n   \n  Example:\n    &gt; think vdim(1 2 3 4)\n    4\n    &gt; think vdim(1@2@3@4,@)\n    4\n  \n  See Also: vadd(), vunit(), vdot(), vmul(), vsub(), vmag(), vcross()\n  \n</PRE>\n<A HREF=\"#vcross()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vdot()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vdot()\"><H3>VDOT()</H3></A><PRE>\n  Function: vdot(&lt;vector&gt;,&lt;vector&gt;[,&lt;delimiter&gt;])\n  \n  Returns the dot product of two vectors. A dot product is the sum\n  of the products of the corresponding elements of the two\n  vectors, e.g. vdot(a b c,d e f) = ad + be + cf.\n  The vectors must be of the same length.\n  \n  Example:\n    &gt; think vdot(1 2 3,2 3 4)\n    20\n  \n  See Also: vadd(), vdim(), vunit(), vmul(), vsub(), vmag(), vcross()\n  \n</PRE>\n<A HREF=\"#vdim()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#verbose\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"verbose\"><H3>VERBOSE</H3></A><PRE>\n  Flag: VERBOSE(v)   \n  \n  This flag causes all commands executed by the object having\n  the flag to be sent to the owner of the object.  i.e.:\n  \n      @create foo\n      @set foo=VERBOSE\n      @force foo=&quot;Hi.\n      foo] &quot;Hi.\n      foo says &quot;Hi.&quot;\n  \n  See Also: TRACE, PUPPET, trace()\n  \n</PRE>\n<A HREF=\"#vdot()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#verbs\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"verbs\"><H3>VERBS</H3></A><PRE>\n  Topic: VERBS\n \n  For many verbs there are three attributes that specify messages and actions\n  associated with the verb in addition to the verb's built-in action.\n  The attributes are named Verb, Overb, and Averb.  Verb is the message that\n  the enactor sees, Overb is the message that everyone else in the same room\n  as the enactor sees, and Averb is a list of commands that are run.\n  These attributes may be set using the @&lt;attribute&gt; command, so the commands\n  to set the attributes related to the 'drop' command are @drop, @odrop, and\n  @adrop.\n  \n  See Also: @verb\n  \n</PRE>\n<A HREF=\"#verbose\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#version\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"version\"><H3>version</H3></A><PRE>\n  Command: version\n  Displays the version of MUSH that is running and the date it was last\n  rebuilt.\n  \n  See Also: +uptime\n  \n</PRE>\n<A HREF=\"#verbs\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#version()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"version()\"><H3>VERSION()</H3></A><PRE>\n  Function: version(&lt;arg&gt;)\n \n  Returns a string which contains various version information for the MUSH\n  you're on.\n  \n  Optional arguments are:\n    0 - Show the version of RhostMUSH running (default)\n    1 - Show the build date of RhostMUSH\n \n  Example:\n     &gt; version\n     RhostMUSH Version 3.5 patchlevel 0 #3\n     Build date: Thu Dec  5 10:10:07 EST 1991\n     &gt; say version()\n     You say &quot;RhostMUSH Version 3.5 patchlevel 0 #3&quot;\n  \n  See Also: version\n  \n</PRE>\n<A HREF=\"#version\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#visible()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"visible()\"><H3>visible()</H3></A><PRE>\n  Function:  visible(&lt;victim&gt;)\n  \n  Returns '1' if &lt;victim&gt; is visible by the enactor, '0' otherwise.\n  \n  Example:\n    &gt; say visible(thingy)\n    You say &quot;0&quot;\n  \n  See Also: visiblemux(), ishidden()\n  \n</PRE>\n<A HREF=\"#version()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#visiblemux()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"visiblemux()\"><H3>visiblemux()</H3></A><PRE>\n  Function:  visiblemux(&lt;object&gt;,&lt;victim&gt;[/&lt;attr&gt;])\n   \n  Returns 1 if &lt;object&gt; can examine &lt;victim&gt;, or 0 otherwise. If\n  &lt;object&gt; or &lt;victim&gt; do not exist, 0 is returned.\n \n  If an object-attribute pair is provided, 1 is returned if &lt;object&gt;\n  can see &lt;attr&gt; on &lt;victim&gt;. If &lt;attr&gt; is not present on &lt;victim&gt;,\n  1 is returned if &lt;object&gt; can examine &lt;victim&gt;.\n  \n  Examples:\n    &gt; say visiblemux(#1,me)\n    You say &quot;0&quot;\n    &gt; say visiblemux(me,me)\n    You say &quot;1&quot;\n    &gt; say visiblemux(me,me/desc)\n    You say &quot;1&quot;\n  \n  See Also: ishidden(), visible()\n  \n</PRE>\n<A HREF=\"#visible()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#visual\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"visual\"><H3>VISUAL</H3></A><PRE>\n  Flag: VISUAL(V)  \n  \n  The flag a lot of players have been waiting for. When set on\n  your object, it allows other players to examine it and see all the\n  object's attributes as if they owned the object. They cannot make \n  any changes to the object.  This was previously called SEE_OK in\n  some MUSHes.\n  \n  See Also: ATTRIBUTE FLAGS\n  \n</PRE>\n<A HREF=\"#visiblemux()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vmag()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vmag()\"><H3>VMAG()</H3></A><PRE>\n  Function: vmag(&lt;vector&gt;[,&lt;delimiter&gt;]\n   \n  Returns the magnitude of a vector, using a euclidean distance metric.\n  That is, for vector a b c d, returns sqrt(a^2+b^2+c^2+d^2).\n  The vectors must be the same length.\n   \n  Example:\n    &gt; think vmag(3 4) \n    5\n  \n  See Also: vadd(), vdim(), vunit(), vdot(), vmul(), vsub(), vcross()\n  \n</PRE>\n<A HREF=\"#visual\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vmul()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vmul()\"><H3>VMUL()</H3></A><PRE>\n  Function: vmul(&lt;vector|number&gt;,&lt;vector|number&gt;[[,&lt;delimiter&gt;],&lt;seperator&gt;])\n   \n  Returns the result of either multiplying a vector by a number,\n  or the elementwise product of two vectors.  This function may take an \n  optional output seperator.\n  \n  Examples: \n    &gt; think vmul(1 2 3,2)      (this is a vector by number)\n    2 4 6\n    &gt; think vmul(1 2 3,2 3 4)  (this is a vector by vector)\n    2 6 12\n    &gt; think vmul(1@2@3,2@3@4,@,|)  (this is a vector by vector)\n    2|6|12\n  \n  See Also: vadd(), vdim(), vunit(), vdot(), vsub(), vmag(), vcross()\n  \n</PRE>\n<A HREF=\"#vmag()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vpage toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vpage toggle\"><H3>VPAGE TOGGLE</H3></A><PRE>\n  Toggle: VPAGE\n  \n  When set on a player, it allows them to see the aliases (if existing)\n  on the list of players the page went to as well as the person who\n  sent the page.  If the alias does not exist, no alias info is \n  displayed.\n  \n</PRE>\n<A HREF=\"#vmul()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vsub()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vsub()\"><H3>VSUB()</H3></A><PRE>\n  Function: vsub(&lt;vector&gt;,&lt;vector&gt;[[,&lt;delimiter&gt;],&lt;seperator&gt;])\n   \n  Returns the difference between two vectors.  The vectors must be\n  the same length.  This function may take an optional output\n  seperator.\n   \n  Example:\n    &gt; think vsub(3 4 5,3 2 1)\n    0 2 4\n    &gt; think vsub(3 4 5,3 2 1,,@)\n    0@2@4\n  \n  See Also: vadd(), vdim(), vunit(), vdot(), vmul(), vmag(), vcross()\n  \n</PRE>\n<A HREF=\"#vpage toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#vunit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"vunit()\"><H3>VUNIT()</H3></A><PRE>\n  Function: vunit(&lt;vector&gt;[[,&lt;delimiter&gt;],&lt;seperator&gt;])\n   \n  Returns the unit vector (a vector of magnitude 1), which points\n  in the same direction as the given vector.  This function may take\n  an optional output seperator.\n   \n  Examples:\n    &gt; think vunit(2 0 0)\n    1 0 0\n    &gt; think vunit(2 0 0,,@)\n    1@0@0\n    &gt; think vmul(vunit(5 6 7),vmag(5 6 7))\n    5 6 7\n  \n  See Also: vadd(), vdim(), vdot(), vmul(), vsub(), vmag(), vcross()\n  \n</PRE>\n<A HREF=\"#vsub()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wanderer\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wanderer\"><H3>wanderer</H3></A><PRE>\n  Reference: wanderer\n  \n  The wanderer is what shows up on the default WHO/DOING listing for the mush.\n  This is in effect a reference to show you are new to the mush and have been\n  on for only a short bit.  However, depending on the guidelines of the mush\n  you are on, this meaning can be changed arbitrarily.  Also, the value of\n  'Wanderer' in the 'Guild' field in the WHO/DOING can be changed to something\n  else as well depending on the configuration on that particular RhostMUSH.\n  \n  There also is a flag 'wanderer' that gets set on any new player.  This will\n  in effect disable all building of the player (wizard/immortal overrides\n  this flag) until this flag is removed.  \n  \n  For wizards wanting to remove this on new player creation, please see the\n  wizard help for the 'start_build' config parameter.\n\n</PRE>\n<A HREF=\"#vunit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#where()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"where()\"><H3>WHERE()</H3></A><PRE>\n  Function: where(&lt;object&gt;)\n \n  This function returns the &quot;true&quot; location of an object. You must control\n  the object or be near it in order for it to work. For players and things,\n  the &quot;true&quot; location is the normal location of the object. For exits, the\n  &quot;true&quot; location is the source room. For rooms, it is #-1.\n  \n  Example:\n    &gt; say where(me)\n    You say &quot;#123&quot;\n    &gt; say loc(me)\n    You say &quot;#123&quot;\n   \n  See Also: loc(), rloc(), @whereis, @whereall\n  \n</PRE>\n<A HREF=\"#wanderer\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#while()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"while()\"><H3>WHILE()</H3></A><PRE>\n  while([&lt;uobj&gt;/]&lt;uattr&gt;,[&lt;cobj&gt;/]&lt;cattr&gt;,&lt;list&gt;,&lt;str&gt;[,&lt;delim&gt;[,&lt;output d&gt;]])\n  \n  This function evaluates the elements of &lt;list&gt;, until a termination\n  condition is reached or the end of the list is reached.\n  \n  [&lt;uobj&gt;/]&lt;uattr&gt; is an attribute or object/attribute pair, like the first\n  argument of map(). The &lt;list&gt; is passed to that function element-by-element\n  (based on the input &lt;delim&gt; delimiter) as %0, just as if map() were being\n  called, and the output is returned &lt;output d&gt;-delimited, again just as if\n  map() were being called.\n  \n  However, for each element, after that evaluation is done, a second\n  evaluation is done, to check a &quot;termination value&quot;. [&lt;cobj&gt;/]&lt;cattr&gt;\n  is an attribute or object/attribute pair, again like map(), and the\n  same list elements are passed to that function as %0. However, the\n  result of this evaluation is not kept; instead, it is compared to\n  &lt;str&gt;, and if it matches exactly (case-sensitive, no wildcards),\n  the no further elements of the list are processed.\n  \n{ Continued in 'help while2'. }\n  \n</PRE>\n<A HREF=\"#where()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#while2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"while2\"><H3>WHILE2</H3></A><PRE>\n  while([&lt;uobj&gt;/]&lt;uattr&gt;,[&lt;cobj&gt;/]&lt;cattr&gt;,&lt;list&gt;,&lt;str&gt;[,&lt;delim&gt;[,&lt;output d&gt;]])\n  \n                              (CONTINUED)\n  \n  If the contents of [&lt;uobj&gt;/]&lt;uattr&gt; and [&lt;cobj&gt;/]&lt;cattr&gt; are the\n  same, the element is not evaluated twice; the result of the first\n  evaluation is directly compared against &lt;str&gt;. (Note that the\n  two object/attributes don't have to be the same -- just their\n  contents need to be the same, since this function treats the\n  pair like map(), not like u().)\n  \n  Examples:\n    &gt; &amp;EVAL_FN me = [reverse(%0)]\n    &gt; &amp;COND_FN me = [strlen(%0)]\n    &gt; say [while(EVAL_FN,COND_FN,foo bar meep flibble baz,4)]\n    You say &quot;oof rab peem&quot;\n    &gt; SAY [while(EVAL_FN,COND_FN,foo|bar|meep|flibble|baz,4,|,-)]\n    You say &quot;oof-rab-peem&quot;\n  \n  This function provided for TinyMUSH 3.0 compatibility.\n  \n  See Also: map(), step(), foreach(), iter()\n  \n</PRE>\n<A HREF=\"#while()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#whisper\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"whisper\"><H3>whisper</H3></A><PRE>\n  Command: whisper &lt;player&gt;=&lt;message&gt;\n  Whispers the message to the named person, if they are in the same room as\n  you. No one else can see the message that you whisper.\n \n  You can format the message one of several ways by specifying ':', ';', or\n  '&quot;' as the first character of the message.  ':' and ';' format the message\n  as 'You sense &lt;player&gt; &lt;message&gt;', with ';' omitting the space between\n  &lt;player&gt; and &lt;message&gt;.  '&quot;' formats the message in normal whisper format\n  (this is the default).\n  \n  See Also: page, pose, say, :, ;, &quot;\n  \n</PRE>\n<A HREF=\"#while2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#who\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"who\"><H3>who</H3></A><PRE>\n  Command: WHO &lt;prefix&gt;\n  Displays a list of players currently connected to the MUSH.\n  The WHO report tells you how long a player has been on, how long they\n  have been inactive, and what they are doing (if they have used the @doing\n  command).  If &lt;prefix&gt; is specified, only players whose names start with\n  &lt;prefix&gt; are listed.  There are two forms of the WHO listing.  One\n  shows GUILDS (an arbitrary attribute called 'guild' on a player) and\n  the other has just the basic information.  The GUILD field in the DOING\n  can be optionally changed to another field.  If you see another field than\n  'Guilds' the default value has been changed.\n  \n  Also, if enabled, you may see either a '*' or the actual bit of the staff\n  when you do a WHO.\n  \n  Note:  WHO must be in all caps to work.\n  \n  See Also: @doing, DOING\n  \n</PRE>\n<A HREF=\"#whisper\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wielded\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wielded\"><H3>wielded</H3></A><PRE>\n  Command: wielded\n  If alternate inventories are enabled, this command will show you what is\n  currently being 'wielded' by yourself.  Things 'wielded' are identified by\n  having a special wizard @toggle 'WIELDED' set on them.\n  \n  See Also: inventory, worn\n  \n</PRE>\n<A HREF=\"#who\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wildmatch()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wildmatch()\"><H3>wildmatch()</H3></A><PRE>\n  Function: wildmatch(&lt;string&gt;, &lt;pattern&gt;[, &lt;delim&gt;])\n \n  This function matches &lt;pattern&gt; against each word of &lt;string&gt;, returning\n  the number of the first word that matches.  If no words match then 0 is\n  returned.  The case of the characters being matched is not significant.\n \n  The words in the string  may contain the wildcards '*' and '?'.  '?' \n  matches any one character, while '*' matches any number of characters, \n  including none.  So 's?x' would match 'sex' or 'six', but not to 'socx', \n  but 's*x' would match any of them.  &lt;delim&gt; may be used specified to \n  specify a delimiter other than a space.\n  Examples:\n    &gt; say wildmatch(This is a test, test)\n    You say &quot;4&quot;\n    &gt; say wildmatch(This is a test, is)\n    You say &quot;2&quot;\n    &gt; say wildmatch(This *is* a test, whiss)\n    You say &quot;2&quot;\n    &gt; say wildmatch(This is a test *, *not*)\n    You say &quot;5&quot;\n    &gt; say wildmatch(This is a test, is a)\n    You say &quot;0&quot;\n  \n  See Also: member(), strmatch(), subnetmatch(), numwildmatch(), \n            totwildmatch(), match()\n  \n</PRE>\n<A HREF=\"#wielded\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wipe()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wipe()\"><H3>WIPE()</H3></A><PRE>\n  Function: wipe(&lt;obj&gt;[/wildattr] [,&lt;regexp&gt;])\n  \n  The wipe() function will remove all matching attributes specified by\n  a wildcard, or, if no attribute is specified, remove all attributes of\n  the specified object.  This function works like @wipe and follows all\n  permissions and restrictions of the matching command.\n  \n  If &lt;regexp&gt; is specified as '1', then &lt;wildattr&gt; is evaluated as a\n  regular expresion instead of the default expresion.\n  \n  Check @list options to see if this side-effect is enabled.\n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Examples:\n    &gt; say wipe(#123/*foo*)\n    You say &quot;Wipe: 8 attributes wiped.&quot;\n    &gt; say wipe(#123/^.*ab$,1)\n    You say &quot;Wipe: 2 attributes wiped.&quot;\n    &gt; say wipe(#123)\n    You say &quot;Wipe: 218 attributes wiped.&quot;\n  \n  See Also: @wipe, @set, &amp;, set()\n  \n</PRE>\n<A HREF=\"#wildmatch()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wizards\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wizards\"><H3>WIZARDS</H3></A><PRE>\n  Topic: WIZARDS\n  \n  There are various levels of wizards.  From GUILDMASTER to IMMORTAL.\n   \n  Wizards are the people that help run the game and make sure that everything\n  is working properly.  They have special powers to tweak reality in ways\n  mortals can only dream of.  Be nice to them, they are going out of their\n  way to help keep the game running smoothly.\n \n  At RhostMUSH there is an additional class of administrators.\n  There are currently the following bit levels:\n  \n    Immortal, Royalty, Councilor, Architect, Guildmaster, Wanderer, Guest\n  \n  Check news for a current list of all Royalty and Admins.\n  \n  See Also: IMMORTAL, ROYALTY, COUNCILOR, ARCHITECT, GUILDMASTER\n  \n</PRE>\n<A HREF=\"#wipe()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wordpos()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wordpos()\"><H3>wordpos()</H3></A><PRE>\n  Function: wordpos(&lt;string&gt;, &lt;charpos&gt;[, &lt;delim&gt;])\n \n  Returns the number of the word within &lt;string&gt; where the character position\n  &lt;charpos&gt; falls.  Spaces between words are treated as belonging to the word\n  that follows them.  If &lt;charpos&gt; is not within the string, the value #-1 is\n  returned.  Both words and characters are numbered starting at 1.\n \n  &lt;delim&gt; may be used to specify a delimiter other than a space.\n \n  Example:\n    &gt; say wordpos(This is a test, 4)\n    You say &quot;1&quot;\n    &gt; say wordpos(This is a test, 5)\n    You say &quot;2&quot;\n    &gt; say wordpos(This is a test, 6)\n    You say &quot;2&quot;\n    &gt; say wordpos(This is a test, 20)\n    You say &quot;#-1&quot;\n  \n  See Also: words(), strlen()\n  \n</PRE>\n<A HREF=\"#wizards\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#words()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"words()\"><H3>WORDS()</H3></A><PRE>\n  Function:  words(&lt;string&gt;[, &lt;delim&gt;])\n            mwords(&lt;string&gt;[, &lt;multi-character-delim&gt;])\n   \n  Returns the number of words in &lt;string&gt;.  &lt;delim&gt; may be used to specify\n  a delimiter other than a space.  mwords() works just like words, except\n  that ignores ansi and allows a multi-character delimiter.\n   \n  Example:\n    &gt; say words(This is a test)\n    You say &quot;4&quot;\n    say words(Would you like coffee or perhaps tea?)\n    &gt; You say &quot;7&quot;\n    say words(This:is:a:colon:separated:list,:)\n    &gt; You say &quot;6&quot;\n  \n  See Also: wordpos(), strlen(), extract(), extractword()\n  \n</PRE>\n<A HREF=\"#wordpos()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#worn\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"worn\"><H3>worn</H3></A><PRE>\n  Command: worn\n  If alternate inventories are enabled, this command will show you what is\n  currently being 'worn' by yourself.  Things 'worn' are identified by having\n  a special wizard @toggle 'WORN' set on them.\n  \n  See Also: inventory, wielded\n  \n</PRE>\n<A HREF=\"#words()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wrap()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wrap()\"><H3>WRAP()</H3></A><PRE>\n  Function: wrap(&lt;txt&gt;,&lt;width&gt;[,&lt;jst&gt;,[&lt;ltxt&gt;[,&lt;rtxt&gt;[,&lt;hanging&gt;][,&lt;jstcut&gt;]]])\n   \n  This function word wraps the text to fit into a column of the\n  specified width.  Words are separated by spaces. If a word in the text\n  is longer than a single line, it is simply broken at the end of the\n  line. Tabs are expanded to 8 spaces, and %r's are treated as a force\n  to the next line, overriding the logic of the word wrapping. \n  \n  &lt;jst&gt; may be any of the following.  You can just use the first character.\n     left      - all text is wrapped to the left margen\n     right     - all text is wrapped to the right margen\n     center    - all text is wrapped to the center\n     justified - all text is 'stretched' from the left to right margen.\n                 This has a newspaper like effect.\n     ignore    - all text is wrapped but padding is ignored.  This is useful\n                 to pass into other functions such as printf().\n   \n  The &lt;ltxt&gt; and &lt;rtxt&gt; specify text to insert as borders on either the left\n  side or right side of each line. They default to nothing.\n    \n  The &lt;hanging&gt; argument specifies an optional number of spaces to insert on\n  the left margin for any line that is not the first line. This is commonly\n  called a hanging indent in word processing.\n  \n{ 'help wrap2' for more }\n  \n</PRE>\n<A HREF=\"#worn\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wrap2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wrap2\"><H3>WRAP2</H3></A><PRE>\n  Function: wrap(&lt;txt&gt;,&lt;width&gt;[,&lt;jst&gt;,[&lt;ltxt&gt;[,&lt;rtxt&gt;[,&lt;hanging&gt;][,&lt;jstcut&gt;]]])\n  \n  The &lt;jstcut&gt; is used for when the string sent to wrap() isn't as large\n  as the width you specified.  If this condition is true, and you use\n  'justified' as the justification method, then it will assume a left\n  justification for that line.  This is to avoid large spaces between\n  strings for the very last line in a wrap().  \n   \n  Examples:\n    &gt; @emit wrap(Hi there. How are you?, 10, right, |%b, %b|)\n      |  Hi there. |\n      |    How are |\n      |       you? |\n    \n    &gt; @emit DESC: [wrap(get(me/desc), 10, left,,,6)]\n      DESC: You see \n            before \n            you a\n            stranger.\n   \n  \n  The width can not be above 4000 characters.\n  \n  See Also: ljust(), rjust(), center(), columns(), wrapcolumns(), printf(),\n            array()\n  \n</PRE>\n<A HREF=\"#wrap()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wrapcolumns()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wrapcolumns()\"><H3>WRAPCOLUMNS()</H3></A><PRE>\n  Function: wrapcolumns()  Syntax follows:\n  wrapcolumns(&lt;txt&gt;,&lt;wd&gt;,&lt;col&gt;,&lt;jus&gt;,&lt;crp&gt;,&lt;cut&gt;,&lt;lbd&gt;,&lt;mbd&gt;,&lt;rbd&gt;,&lt;dsp&gt;,&lt;ext&gt;)\n  \n  This function has a huge number of uses, and all help will be given to show\n  examples for what this function can do.  Unlike the columns() function, this\n  one will wrap as many words as possible into a columns.  Like a newspaper.\n  The arguments to this function are as follows.\n    &lt;txt&gt;    - The text that you will be passing into columns.\n    &lt;wd&gt;     - The maximum column size you desire.\n    &lt;col&gt;    - The total number of columns you wish per line.\n  * &lt;jus&gt;    - The justification of text in the columns (default left) \n               Arguments: (l)eft, (c)enter, (r)ight, or (j)ustified\n  * &lt;crp&gt;    - Specifies if you want the columns cropped to the longest word or\n               the max columns size whatever is smaller.\n               Arguments: 1 to crop, 0 for no cropping (default).\n  * &lt;cut&gt;    - Specifies that the word be cut off if over maximum columns size.\n               Arguments: 1 to cut, 0 for no cutting (default).\n  * &lt;lbd&gt;    - What text you want displayed as the left border of the line.\n  * &lt;mbd&gt;    - What text you want as the seperator between columns on the line.\n  * &lt;rbd&gt;    - What text you want displayed as the right border of the line.\n  * &lt;dsp&gt;    - What display type you want.  Down then over or over then down.\n               Arguments: 1 for over then down, 0 for down then over (default)\n  * &lt;ext&gt;    - Extension argument.  When toggled to '1' will extend a partial\n               row to the maximum column width by padding it with spaces.\n               This will use the column separator if the padding requires \n               multiple columns.\n  \n  Anything with an '*' are optional *only* if the first three args are used.\n{ Type 'help wrapcolumns2' for examples }\n  \n</PRE>\n<A HREF=\"#wrap2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wrapcolumns2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wrapcolumns2\"><H3>WRAPCOLUMNS2</H3></A><PRE>\n  Function: wrapcolumns()  (CONTINUED)\n  wrapcolumns(&lt;txt&gt;,&lt;wd&gt;,&lt;col&gt;,&lt;jus&gt;,&lt;crp&gt;,&lt;cut&gt;,&lt;lbd&gt;,&lt;mbd&gt;,&lt;rbd&gt;,&lt;dsp&gt;,&lt;ext&gt;)\n \n  There are various syntax possibilities for this command.  \n  Examples:\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3)\n      this is a wrapcolumns         \n      test of   \n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,L,,,,,,1)\n      this is a test of   wrapcolumn\n      s         \n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,R)\n       this is awrapcolumn         s\n         test of\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0)\n       this is awrapcolumn         s\n         test of\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,1)\n       this is awrapcolumn         s\n         test of\n  \n{ type 'help wrapcolumns3' for more examples }\n  \n</PRE>\n<A HREF=\"#wrapcolumns()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#wrapcolumns3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"wrapcolumns3\"><H3>WRAPCOLUMNS3</H3></A><PRE>\n  Function: wrapcolumns()  (CONTINUED)\n  wrapcolumns(&lt;txt&gt;,&lt;wd&gt;,&lt;col&gt;,&lt;jus&gt;,&lt;crp&gt;,&lt;cut&gt;,&lt;lbd&gt;,&lt;mbd&gt;,&lt;rbd&gt;,&lt;dsp&gt;,&lt;ext&gt;)\n  \n  Examples: (Continued)\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,3,3,R,0,0)\n      thitespco\n        s  tlum\n       is of ns\n        awra\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,3,3,R,0,1)\n      thi  a of\n       isteswra\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0,0,&lt;*,|,*&gt;,0)\n      &lt;* this is a|wrapcolumn|         s*&gt;\n      &lt;*   test of*&gt;\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0,0,&lt;*,|,*&gt;,1)\n      &lt;* this is a|   test of|wrapcolumn*&gt;\n      &lt;*         s*&gt;\n    &gt; @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0,1,&lt;*,|,*&gt;,1)\n      &lt;* this is a|   test of|wrapcolumn*&gt;\n  \n  See Also: columns(), wrap(), printf(), array()\n  \n</PRE>\n<A HREF=\"#wrapcolumns2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#writable()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"writable()\"><H3>WRITABLE()</H3></A><PRE>\n  Function: writable(&lt;player&gt;, &lt;target&gt;/&lt;attrib&gt;)\n  \n  This function checks if &lt;player&gt; can set attribute &lt;attrib&gt; on target player\n  &lt;target&gt;.  You must control &lt;player&gt; otherwise it returns a failure (0).\n  \n  If &lt;player&gt; or &lt;target&gt; does not exist, it will return a failure (0).\n  \n  If &lt;attrib&gt; does not exist, it will return a success, but only if the first\n  two conditions wouldn't cause a failure.\n  \n  Example:\n    &gt; say writable(bob, fred/desc)\n    You say &quot;0&quot;\n  \n  See Also: set(), rset()\n\n</PRE>\n<A HREF=\"#wrapcolumns3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xcon()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xcon()\"><H3>XCON()</H3></A><PRE>\n  Function: xcon(&lt;object&gt;[/switch],&lt;start&gt;,&lt;count&gt; [,&lt;switch&gt;])\n  \n  This function is similiar to lcon() except it returns a space-seperated list\n  of the contents of &lt;object&gt; starting at point &lt;start&gt; and returning &lt;count&gt;\n  number of contents.  It takes a specific switch as an option:\n      /PLAYER  -- lists all TYPE players in the contents.\n      /OBJECT  -- lists all TYPE objects in the contents.\n      /CONNECT -- lists all connected players in the contents.\n      /PUPPET  -- lists all flag type 'PUPPET' in the contents.\n      /LISTEN  -- lists all listening things in the contents.\n  \n  You may optionally specify the switch as the second argument, without \n  the '/' before it, to do the same thing.  This will cause any /switch\n  you have in the first argument to assume it's part of the object name.\n  \n{ type 'help xcon2' for examples }\n  \n</PRE>\n<A HREF=\"#writable()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xcon2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xcon2\"><H3>XCON2</H3></A><PRE>\n  Function: xcon(&lt;object&gt;[/switch],&lt;start&gt;,&lt;count&gt;)  (continued)\n  \n  Example:\n    &gt; inv\n    t1(#366)\n    radio(#223p)\n    The Wizard's Pointy Hat(#188S0)\n    A red rose(#1234C)\n    Spybot(#2672p)\n    You have 1086 Gold Coins.\n    &gt; say lcon(me)\n    You say &quot;#366 #223 #188 #1234 #2672&quot;\n    &gt; say xcon(me,2,2)\n    You say &quot;#223 #188&quot;\n    &gt; say lcon(me/puppet)\n    You say &quot;#223 #2672&quot;\n    &gt; say xcon(me/puppet,2,1)\n    You say &quot;#2672&quot;\n    &gt; say xcon(me,2,1,puppet)   \n    You say &quot;#2672&quot;\n  \n  See Also: lexits(), lcon()\n  \n</PRE>\n<A HREF=\"#xcon()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xdec()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xdec()\"><H3>XDEC()</H3></A><PRE>\n  Function: xdec(&lt;number&gt;)\n  \n  The xdec() function is used to decrement the number passed into it.\n  Any number passed into it is automatically decremented by one.\n  \n  Example:\n    &gt; say dec(5)\n    You say &quot;4&quot;\n    &gt; say dec(-5)\n    You say &quot;-6&quot;\n  \n  See Also: xinc(), inc(), dec(), add(), sub()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.\n  \n</PRE>\n<A HREF=\"#xcon2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xget()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xget()\"><H3>XGET()</H3></A><PRE>\n  Function: xget(&lt;object&gt;,&lt;attribute&gt;)\n   \n  The xget function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on &lt;object&gt;, its parent is searched for the attribute.\n   \n  Example:\n    &gt; read me\n    &gt; say xget(me,desc)\n    You say &quot;My Desc&quot;\n  \n  See Also: get_eval(), u(), get()\n  \n</PRE>\n<A HREF=\"#xdec()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xinc()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xinc()\"><H3>XINC()</H3></A><PRE>\n  Function: xinc(&lt;number&gt;)\n  \n  The xinc() function is used to increment the number passed into it.\n  Any number passed into it is automatically incremented by one.\n  \n  Example:\n    &gt; say inc(5)\n    You say &quot;6&quot;\n    &gt; say inc(-5)\n    You say &quot;-4&quot;\n  \n  See Also: xdec(), inc(), dec(), add(), sub()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.\n  \n</PRE>\n<A HREF=\"#xget()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xnor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xnor()\"><H3>XNOR()</H3></A><PRE>\n  Function: xnor(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n  \n  Takes two or more booleans, and returns true(1) if both values are\n  true(1) or false(0) and returns false(0) if any one value is\n  false(0) but the other(s) are true(1).\n  \n  Example: \n    &gt; say [xnor(1,0)] @ [xnor(0,0)] @ [xnor(0,1)] @ [xnor(1,1)]\n    You say &quot;0 @ 1 @ 0 @ 1&quot;\n  \n  See Also: BOOLEAN VALUES, and(), xor(), or(), nand(), nor()\n  \n</PRE>\n<A HREF=\"#xinc()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xor()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xor()\"><H3>XOR()</H3></A><PRE>\n  Function: xor(&lt;boolean1&gt;,&lt;boolean2&gt;[,&lt;booleanN&gt;]...)\n   \n  Takes two or more booleans, and returns 1 if an odd number of them are\n  equivalent to true(1).\n    \n  Example: \n    &gt; say [xor(1,0)] @ [xor(0,0)] @ [xor(0,1)] @ [xor(1,1)]\n    You say &quot;1 @ 0 @ 1 @ 0&quot;\n  \n  See Also: BOOLEAN VALUES, and(), nor(), or(), nand(), xnor()\n  \n</PRE>\n<A HREF=\"#xnor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xorchr()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xorchr()\"><H3>XORCHR()</H3></A><PRE>\n  Function: xorchr(&lt;string&gt;,&lt;listofcharacters&gt;)\n  \n  This function returns true(1) if only ONE of the characters in\n  &lt;listofcharacters&gt; exists in &lt;string&gt;.  It will return false(0)\n  under every other situation.\n  \n  Examples:\n    &gt; say xorchr(wizards,qim)\n    You say &quot;1&quot;\n    &gt; say xorchr(wizards,qmp)\n    You say &quot;0&quot;\n    &gt; say xorchr(wizards,izdw)\n    You say &quot;0&quot;\n  \n  See Also: andchr(), orchr(), notchr()\n  \n</PRE>\n<A HREF=\"#xor()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xtermcolor\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xtermcolor\"><H3>XTERMCOLOR</H3></A><PRE>\n  Flag: XTERMCOLOR([t])\n  \n  This flag is only meaningful for players.  When set in conjunction with\n  the ANSI and ANSICOLOR flags, this will allow 256 ansi color support using\n  the XTERM color pallet to be sent to the player's terminal.\n  \n  You need all three flags:  ANSI, ANSICOLOR, and XTERMCOLOR to see extended.\n  \n  See Also: ANSI, ANSICOLOR, SUBSTITUTIONS, ANSI(), NOFLASH, COLORS()\n\n</PRE>\n<A HREF=\"#xorchr()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xtermcolor list\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xtermcolor list\"><H3>XTERMCOLOR LIST</H3></A><PRE>\n             256 Color suport list.  [ansi(fg-value/bg-value,string)]\n  With %c subs, use the 2 digit HEX value.  The ansi() function can use either.\n        %c0x## -- foreground color (i.e. %c0x03%cn) -- ansi(0x03/,string)\n        %c0X## -- background color (i.e. %c0X03%cn) -- ansi(/3,string)\n  \n  000 [0x00] Black           021 [0x15] Blue1         042 [0x2A] SpringGreen2\n  001 [0x01] Red             022 [0x16] DarkGreen     043 [0x2B] Cyan3 \n  002 [0x02] Green           023 [0x17] DeepSkyBlue4  044 [0x2C] DarkTurquoise \n  003 [0x03] Yellow          024 [0x18] DeepSkyBlue4  045 [0x2D] Turquoise2 \n  004 [0x04] Blue            025 [0x19] DeepSkyBlue4  046 [0x2E] Green1 \n  005 [0x05] Magenta         026 [0x1A] DodgerBlue3   047 [0x2F] SpringGreen2 \n  006 [0x06] Cyan            027 [0x1B] DodgerBlue2   048 [0x30] SpringGreen1 \n  007 [0x07] White           028 [0x1C] Green4        049 [0x31] MedSpringGreen\n  008 [0x08] HilightBlack    029 [0x1D] SpringGreen4  050 [0x32] Cyan2 \n  009 [0x09] HilightRed      030 [0x1E] Turquoise4    051 [0x33] Cyan1 \n  010 [0x0A] HilightGreen    031 [0x1F] DeepSkyBlue3  052 [0x34] DarkRed \n  011 [0x0B] HilightYellow   032 [0x20] DeepSkyBlue3  053 [0x35] DeepPink4 \n  012 [0x0C] HilightBlue     033 [0x21] DodgerBlue1   054 [0x36] Purple4 \n  013 [0x0D] HilightMagenta  034 [0x22] Green3        055 [0x37] Purple4 \n  014 [0x0E] HilightCyan     035 [0x23] SpringGreen3  056 [0x38] Purple3 \n  015 [0x0F] HilightWhite    036 [0x24] DarkCyan      057 [0x39] BlueViolet \n  016 [0x10] Grey0           037 [0x25] LightSeaGreen 058 [0x3A] Orange4 \n  017 [0x11] NavyBlue        038 [0x26] DeepSkyBlue2  059 [0x3B] Grey37 \n  018 [0x12] DarkBlue        039 [0x27] DeepSkyBlue1  060 [0x3C] MediumPurple4 \n  019 [0x13] Blue3           040 [0x28] Green3        061 [0x3D] SlateBlue3 \n  020 [0x14] Blue3           041 [0x29] SpringGreen3  062 [0x3E] SlateBlue3 \n  \n  {see 'help xtermcolor list2' for more} \n\n</PRE>\n<A HREF=\"#xtermcolor\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xtermcolor list2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xtermcolor list2\"><H3>XTERMCOLOR LIST2</H3></A><PRE>\n                                 [continued]\n             256 Color suport list.  [ansi(fg-value/bg-value,string)]\n  With %c subs, use the 2 digit HEX value.  The ansi() function can use either.\n  \n  063 [0x3F] RoyalBlue1      084 [0x54] SeaGreen1     105 [0x69] LightSlateBlue\n  064 [0x40] Chartreuse4     085 [0x55] SeaGreen1     106 [0x6A] Yellow4      \n  065 [0x41] DarkSeaGreen4   086 [0x56] Aquamarine1   107 [0x6B] DrkOliveGreen3\n  066 [0x42] PaleTurquoise4  087 [0x57] DrkSlateGray2 108 [0x6C] DarkSeaGreen  \n  067 [0x43] SteelBlue       088 [0x58] DarkRed       109 [0x6D] LightSkyBlue3 \n  068 [0x44] SteelBlue3      089 [0x59] DeepPink4     110 [0x6E] LightSkyBlue3 \n  069 [0x45] CornflowerBlue  090 [0x5A] DarkMagenta   111 [0x6F] SkyBlue2      \n  070 [0x46] Chartreuse3     091 [0x5B] DarkMagenta   112 [0x70] Chartreuse2   \n  071 [0x47] DarkSeaGreen4   092 [0x5C] DarkViolet    113 [0x71] DrkOliveGreen3\n  072 [0x48] CadetBlue       093 [0x5D] Purple        114 [0x72] PaleGreen3    \n  073 [0x49] CadetBlue       094 [0x5E] Orange4       115 [0x73] DarkSeaGreen3 \n  074 [0x4A] SkyBlue3        095 [0x5F] LightPink4    116 [0x74] DarkSlateGray3\n  075 [0x4B] SteelBlue1      096 [0x60] Plum4         117 [0x75] SkyBlue1      \n  076 [0x4C] Chartreuse3     097 [0x61] MediumPurple3 118 [0x76] Chartreuse1   \n  077 [0x4D] PaleGreen3      098 [0x62] MediumPurple3 119 [0x77] LightGreen    \n  078 [0x4E] SeaGreen3       099 [0x63] SlateBlue1    120 [0x78] LightGreen    \n  079 [0x4F] Aquamarine3     100 [0x64] Yellow4       121 [0x79] PaleGreen1    \n  080 [0x50] MediumTurquoise 101 [0x65] Wheat4        122 [0x7A] Aquamarine1   \n  081 [0x51] SteelBlue1      102 [0x66] Grey53        123 [0x7B] DarkSlateGray1\n  082 [0x52] Chartreuse2     103 [0x67] LghtSlateGrey 124 [0x7C] Red3         \n  083 [0x53] SeaGreen2       104 [0x68] MediumPurple  125 [0x7D] DeepPink4     \n  \n  {see 'help xtermcolor list3' for more} \n\n</PRE>\n<A HREF=\"#xtermcolor list\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xtermcolor list3\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xtermcolor list3\"><H3>XTERMCOLOR LIST3</H3></A><PRE>\n                                 [continued]\n             256 Color suport list.  [ansi(fg-value/bg-value,string)]\n  With %c subs, use the 2 digit HEX value.  The ansi() function can use either.\n  \n  126 [0x7E] MediumVioletRed 147 [0x93] LghtSteelBlue 168 [0xA8] HotPink3    \n  127 [0x7F] Magenta3        148 [0x94] Yellow3       169 [0xA9] HotPink2    \n  128 [0x80] DarkViolet      149 [0x95] DkOliveGreen3 170 [0xAA] Orchid      \n  129 [0x81] Purple          150 [0x96] DarkSeaGreen3 171 [0xAB] MediumOrchid1\n  130 [0x82] DarkOrange3     151 [0x97] DarkSeaGreen2 172 [0xAC] Orange3\n  131 [0x83] IndianRed       152 [0x98] LightCyan3    173 [0xAD] LightSalmon3\n  132 [0x84] HotPink3        153 [0x99] LightSkyBlue1 174 [0xAE] LightPink3\n  133 [0x85] MediumOrchid3   154 [0x9A] GreenYellow   175 [0xAF] Pink3 \n  134 [0x86] MediumOrchid    155 [0x9B] DkOliveGreen2 176 [0xB0] Plum3 \n  135 [0x87] MediumPurple2   156 [0x9C] PaleGreen1    177 [0xB1] Violet\n  136 [0x88] DarkGoldenrod   157 [0x9D] DarkSeaGreen2 178 [0xB2] Gold3 \n  137 [0x89] LightSalmon3    158 [0x9E] DarkSeaGreen1 179 [0xB3] LteGoldenrod3\n  138 [0x8A] RosyBrown       159 [0x9F] PalTurquoise1 180 [0xB4] Tan \n  139 [0x8B] Grey63          160 [0xA0] Red3          181 [0xB5] MistyRose3 \n  140 [0x8C] MediumPurple2   161 [0xA1] DeepPink3     182 [0xB6] Thistle3\n  141 [0x8D] MediumPurple1   162 [0xA2] DeepPink3     183 [0xB7] Plum2  \n  142 [0x8E] Gold3           163 [0xA3] Magenta3      184 [0xB8] Yellow3\n  143 [0x8F] DarkKhaki       164 [0xA4] Magenta3      185 [0xB9] Khaki3  \n  144 [0x90] NavajoWhite3    165 [0xA5] Magenta2      186 [0xBA] LteGoldenrod2\n  145 [0x91] Grey69          166 [0xA6] DarkOrange3   187 [0xBB] LightYellow3\n  146 [0x92] LightSteelBlue3 167 [0xA7] IndianRed     188 [0xBC] Grey84 \n  \n  {see 'help xtermcolor list4' for more} \n\n\n</PRE>\n<A HREF=\"#xtermcolor list2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xtermcolor list4\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xtermcolor list4\"><H3>XTERMCOLOR LIST4</H3></A><PRE>\n                                 [continued]\n             256 Color suport list.  [ansi(fg-value/bg-value,string)]\n  With %c subs, use the 2 digit HEX value.  The ansi() function can use either.\n\n  189 [0xBD] LightSteelBlue1 211 [0xD3] PalVioletRed1 233 [0xE9] Grey7  \n  190 [0xBE] Yellow2         212 [0xD4] Orchid2       234 [0xEA] Grey11 \n  191 [0xBF] DarkOliveGreen1 213 [0xD5] Orchid1       235 [0xEB] Grey15 \n  192 [0xC0] DarkOliveGreen1 214 [0xD6] Orange1       236 [0xEC] Grey19\n  193 [0xC1] DarkSeaGreen1   215 [0xD7] SandyBrown    237 [0xED] Grey23\n  194 [0xC2] Honeydew2       216 [0xD8] LightSalmon1  238 [0xEE] Grey27 \n  195 [0xC3] LightCyan1      217 [0xD9] LightPink1    239 [0xEF] Grey30   \n  196 [0xC4] Red1            218 [0xDA] Pink1         240 [0xF0] Grey35\n  197 [0xC5] DeepPink2       219 [0xDB] Plum1         241 [0xF1] Grey39  \n  198 [0xC6] DeepPink1       220 [0xDC] Gold1         242 [0xF2] Grey42\n  199 [0xC7] DeepPink1       221 [0xDD] LteGoldenrod2 243 [0xF3] Grey46 \n  200 [0xC8] Magenta2        222 [0xDE] LteGoldenrod2 244 [0xF4] Grey50\n  201 [0xC9] Magenta1        223 [0xDF] NavajoWhite1  245 [0xF5] Grey54\n  202 [0xCA] OrangeRed1      224 [0xE0] MistyRose1    246 [0xF6] Grey58\n  203 [0xCB] IndianRed1      225 [0xE1] Thistle1      247 [0xF7] Grey62\n  204 [0xCC] IndianRed1      226 [0xE2] Yellow1       248 [0xF8] Grey66 \n  205 [0xCD] HotPink         227 [0xE3] LteGoldenrod1 249 [0xF9] Grey70 \n  206 [0xCE] HotPink         228 [0xE4] Khaki1        249 [0xF9] Grey70  \n  207 [0xCF] MediumOrchid1   229 [0xE5] Wheat1        250 [0xFA] Grey74 \n  208 [0xD0] DarkOrange      230 [0xE6] Cornsilk1     251 [0xFB] Grey78 \n  209 [0xD1] Salmon1         231 [0xE7] Grey100       252 [0xFC] Grey82 \n  210 [0xD2] LightCoral      232 [0xE8] Grey3         253 [0xFD] Grey85     \n                                                      254 [0xFE] Grey89    \n  Please see 'help xtermcolor syntax' for color test  255 [0xFF] Grey93   \n  \n  See Also: XTERMCOLOR, ANSI, ANSICOLOR, ANSI()\n\n</PRE>\n<A HREF=\"#xtermcolor list3\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#xtermcolor syntax\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"xtermcolor syntax\"><H3>XTERMCOLOR SYNTAX</H3></A><PRE>\n  @emit the following code (append the lines)\n  \n  System colors:%r[iter(lnum(0,7),%c0X[printf($02s,pack(##,16))]%b%b,,)]\n  %cn%r[iter(lnum(8,15),%c0X[printf($02s,pack(##,16))]%b%b,,)]%cn%r%r\n  Color cube, 6x6x6:%r[iter(lnum(0,5),iter(lnum(0,5),iter(lnum(0,5),%c0X\n  [printf($02s,pack(add(16,mul(itext(1),36),mul(itext(2),6),itext(0)),16))]\n  %b%b,,)%cn%b,,),,%r)]%cn%r%rGrayscale ramp:%r[iter(lnum(232,255),%c0X\n  [printf($02s,pack(##,16))]%b%b,,)]%cn\n  \n  This will return a 256 color map for you.\n  \n  See Also: XTERMCOLOR, ANSI, ANSICOLOR, ANSI()\n\n</PRE>\n<A HREF=\"#xtermcolor list4\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zatozz\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zatozz\"><H3>ZATOZZ</H3></A><PRE>\n  Command: @za[/&lt;switch&gt;] &lt;object&gt;=&lt;string&gt;\n           ...\n           @zz[/&lt;switch&gt;] &lt;object&gt;=&lt;string&gt;\n  \n  This sets attributes ZA - ZZ (with @za - @zz) on the target object.\n  This is in effect just like &amp;ZA or &amp;ZZ but is provided for older MUSH\n  backward compatibility.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  See Also: &amp;\n \n</PRE>\n<A HREF=\"#xtermcolor syntax\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zemit()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zemit()\"><H3>ZEMIT()</H3></A><PRE>\n  Function: zemit(&lt;list of zones&gt;,&lt;text&gt;)\n  \n  The zemit() function returns 'text' to every room of every zone in\n  the specified list.  If the target zone is not a zonemaster, but still\n  is contained in a zone, then it will just return the text to that room.\n  \n  This works similiarilly to @pemit/zone/list\n  \n  Check @list options to see if this side-effect is enabled.  \n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Examples:\n    &gt; @zone here=#0\n    &gt; say zemit(#0,blarg)\n    blarg   (Note: blarg will have been sent to all rooms of the zonemaster!)\n    You say &quot;&quot;\n    &gt; say zemit(here,blarg)\n    blarg   (Note: blarg is just sent to this current room)\n    You say &quot;&quot;\n    &gt; @zone/purge here\n    &gt; say zemit(here,blarg)\n    Invalid zone.\n    You say &quot;&quot;\n  \n  See Also: @pemit, @emit, emit()\n  \n</PRE>\n<A HREF=\"#zatozz\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfun()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfun()\"><H3>ZFUN()</H3></A><PRE>\n  Function: zfun([&lt;zone&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n   \n  The zfun function (similiar to u()) evaluates an attribute, either from the \n  default zone of the object performing the function or from another zone you \n  control or pass the zonemaster lock on, passing in arguments and returning\n  the result.\n  \n  When evaluating the fetched attribute, %# refers to the original enactor and\n  not the 'calling' object, and 'me' refers to the object that supplied the\n  attribute.  Check @list options to see if zfun and zfun2 functionality are\n  switched.\n   \n  Examples:\n    &gt; @zone me=#2 (if #2 is a valid zonemaster that you can link to)\n    &gt; @va #2=Word is [extract(v(vb),add(%0,1),1)], arg2 is %1.\n    &gt; @vb me=This is a test of the zfun function.\n    &gt; say lzone(me)\n    You say &quot;#2&quot;\n    &gt; say zfun(va,4,Testing 123)\n    You say &quot;Word is of, arg2 is Testing 123.&quot;\n    &gt; say zfun(va,7)\n    You say &quot;Word is function., arg2 is .&quot;\n    &gt; say zfun(#2/va,6,Foobar)\n    You say &quot;Word is zfun, arg2 is Foobar.&quot;\n  \n  See Also: zfun2(), zfuneval(), zfundefault(), zfunldefault(), zfunlocal(),\n            zemit(), @pemit\n  \n</PRE>\n<A HREF=\"#zemit()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfun2()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfun2()\"><H3>ZFUN2()</H3></A><PRE>\n  Function: zfun2([&lt;zone&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n  \n  This is nearly exactly like the original zfun() function except it parses\n  in an object-dependant way like the old mushes.  It works by evaluating\n  the function(s) by the power of the owner of the item it's on, and not\n  by the power of the enactor.  \n  \n  This command is also very handy to keep security.\n  \n  For examples or more information, look at zfun()\n  \n  See Also: zfun(), zfun2local(), zfun2ldefault()\n  \n</PRE>\n<A HREF=\"#zfun()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfun2default()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfun2default()\"><H3>zfun2default()</H3></A><PRE>\n  Function:  zfun2default([&lt;zone&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  Works like zfundefault() but uses the zfun2() function instead of zfun()\n  \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;zone&gt;/&lt;attr&gt;), as if retrieved via\n  the zfun2() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say zfun2default(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say zfun2default(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also:  get(), get_eval(), zfun2(), zfundefault()\n  \n</PRE>\n<A HREF=\"#zfun2()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfun2ldefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfun2ldefault()\"><H3>zfun2ldefault()</H3></A><PRE>\n  Function:  zfun2ldefault([&lt;zone&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;zone&gt;/&lt;attr&gt;), as if retrieved via\n  the u2local() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike zfun2default(), it doesn't clobber\n  %q0-%q9 registers.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say zfun2ldefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say zfun2ldefault(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also: get(), get_eval(), zfun(), zfundefault()\n  \n</PRE>\n<A HREF=\"#zfun2default()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfun2local()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfun2local()\"><H3>ZFUN2LOCAL()</H3></A><PRE>\n  Function:  zfun2local([&lt;zone&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n \n  The zfun2local() function is almost identical to zfun2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n \n  However, unlike the zfun2() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  &quot;below&quot; the level of the zfun2() can reset global registers for temporary\n  calculations, without needing to worry about &quot;clobbering&quot; the original\n  values.\n \n  This makes zfun2local() particularly useful for global or shared code which\n  calls arbitrary zfun2() functions, where global register values need to be\n  preserved from accidental user clobbering.\n \n{ See &quot;help zfun2local2&quot; for examples. }\n \n</PRE>\n<A HREF=\"#zfun2ldefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfun2local2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfun2local2\"><H3>ZFUN2LOCAL2</H3></A><PRE>\n  Example of zfun2local():\n    &gt; @zone #2=#0\n    &gt; &amp;FRUIT #2=apples bananas oranges pears\n    &gt; &amp;SUB-FUNCTION #2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    &gt; &amp;TOP-FUNCTION #2=[setq(0,are delicious!)][zfun2local(SUB-FUNCTION,%0)] %q0\n    &gt; say zfun2(TOP-FUNCTION,b*)\n    You say &quot;bananas are delicious!&quot;\n \n  If SUB-FUNCTION had been called with zfun2() instead of zfun2local():\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][zfun2(SUB-FUNCTION,%0)] %q0\n    &gt; say zfun2(TOP-FUNCTION,b*)\n    You say &quot;bananas apples bananas oranges pears&quot;\n \n  In this second example, in SUB-FUNCTION, %q0 was set to &quot;apples bananas\n  oranges pears&quot;, so that when the zfun2() &quot;returned&quot; and TOP-FUNCTION \n  evaluated %q0, this is what was printed. In the first example, zfun2local() \n  reset the value of %q0 to its original &quot;are delicious!&quot;\n \n  See Also:  ulocal(), u(), u2(), uldefault(), u2ldefault(), setq(), r()\n\n</PRE>\n<A HREF=\"#zfun2local()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfundefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfundefault()\"><H3>zfundefault()</H3></A><PRE>\n  Function:  zfundefault([&lt;zone&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n   \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;zone&gt;/&lt;attr&gt;), as if retrieved via\n  the zfun() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n   \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say zfundefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say zfundefault(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n   \n  See Also: get(), get_eval(), zfun(), zfundefault()\n  \n</PRE>\n<A HREF=\"#zfun2local2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfuneval()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfuneval()\"><H3>ZFUNEVAL()</H3></A><PRE>\n  Function: zfuneval([&lt;zone&gt;/]&lt;attr&gt;/permission[,&lt;arg&gt;],...)\n  \n  The zfuneval function evaluates an attribute, either from the object \n  performing the function or from another zone you control, passing in \n  arguments and returning the result.  In this way it works just like 'zfun()',\n  except you pass in a permission to specify what permission level you wish to\n  use for evaluation.  It assumes the enactor (owner) of the function always \n  succeeds.  When evaluating the fetched attribute, %# refers to the original \n  enactor and not the 'calling' object, and 'me' refers to the object that \n  supplied the attribute.  For more detail on functionality, look at ZFUN().\n \n  The available permission levels are CIT[IZEN], GUILD[MASTER], ARCH[ITECT],\n  COUN[CILOR], ROY[ALTY], IMM[ORTAL].  You must have the permissions of the\n  given level in order to use it else it defaults to your permission level.\n  The permission must be included for the function to work.\n  \n  Examples:\n    &gt; @set me=royalty (let's assume you're a wizard)\n    &gt; @va #2=[num(*Miriar)] (the ghod character - #1) (#2 a zone you control)\n    &gt; say zfuneval(va/royalty)\n    You say &quot;#1&quot;\n    &gt; say zfuneval(va/citizen)\n    You say &quot;#-1&quot;\n  \n  See Also: zfun(), zfun2(), objeval(), zfunlocal(), zfun2local()\n  \n</PRE>\n<A HREF=\"#zfundefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfunldefault()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfunldefault()\"><H3>zfunldefault()</H3></A><PRE>\n  Function:  zfunldefault([&lt;zone&gt;/]&lt;attr&gt;,&lt;default case&gt;[,&lt;arg&gt;]...)\n \n  This function returns the value of the user-defined function\n  as defined by &lt;attr&gt; (or &lt;zone&gt;/&lt;attr&gt;), as if retrieved via\n  the zfunlocal() function, with &lt;args&gt;, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike zfundefault(), it doesn't clobber \n  %q0-%q9 registers.\n \n  Examples:\n    &gt; &amp;TEST me=[center(%0,5,*)]\n    &gt; say zfunldefault(Test,-- BOOM --,ACK)\n    You say &quot;*ACK*&quot;\n    &gt; &amp;TEST me\n    &gt; say zfunldefault(me/Test,-- BOOM --,ACK)\n    You say &quot;-- BOOM --&quot;\n \n  See Also: get(), get_eval(), u(), default(), edefault()\n  \n</PRE>\n<A HREF=\"#zfuneval()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfunlocal()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfunlocal()\"><H3>ZFUNLOCAL()</H3></A><PRE>\n  Function:  zfunlocal([&lt;zone&gt;/]&lt;attr&gt;[,&lt;arg&gt;]...)\n   \n  The zfunlocal() function is almost identical to zfun() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n   \n  However, unlike the zfun() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  &quot;below&quot; the level of the zfun() can reset global registers for temporary\n  calculations, without needing to worry about &quot;clobbering&quot; the original\n  values.\n   \n  This makes zfunlocal() particularly useful for global or shared code which\n  calls arbitrary zfun() functions, where global register values need to be\n  preserved from accidental user clobbering.\n   \n{ See &quot;help zfunlocal2&quot; for examples. }\n \n</PRE>\n<A HREF=\"#zfunldefault()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zfunlocal2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zfunlocal2\"><H3>ZFUNLOCAL2</H3></A><PRE>\n  Example of zfunlocal():\n    &gt; @zone #2=#0\n    &gt; &amp;FRUIT me=apples bananas oranges pears\n    &gt; &amp;SUB-FUNCTION #2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    &gt; &amp;TOP-FUNCTION #2=[setq(0,are delicious!)][zfunlocal(SUB-FUNCTION,%0)] %q0\n    &gt; say zfun(TOP-FUNCTION,b*)\n    You say &quot;bananas are delicious!&quot;\n   \n  If SUB-FUNCTION had been called with zfun() instead of zfunlocal():\n    &gt; &amp;TOP-FUNCTION me=[setq(0,are delicious!)][zfun(SUB-FUNCTION,%0)] %q0\n    &gt; say zfun(TOP-FUNCTION,b*)\n    You say &quot;bananas apples bananas oranges pears&quot;\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to &quot;apples bananas\n  oranges pears&quot;, so that when the zfun() &quot;returned&quot; and TOP-FUNCTION evaluated\n  %q0, this is what was printed. In the first example, zfunlocal() reset the\n  value of %q0 to its original &quot;are delicious!&quot;\n   \n  See Also:  zfunlocal2(), zfun(), zfun2(), zfunldefault(), zfun2ldefault(), \n             setq(), r()\n  \n</PRE>\n<A HREF=\"#zfunlocal()\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zone functions\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zone functions\"><H3>zone functions</H3></A><PRE>\n  Function Lists: Zone Functions.\n    \n  inzone()       - Returns the room in the specified zone master.\n  zfun()         - Like u(), but from the perspective of a zone object.\n  zfun2()        - Like u2(), but from the perspective of a zone object.\n  zfundefault()  - Like udefault(), but from the perspective of a zone object. \n  zfun2default() - Like udefault2(), but from the perspective of a zone object.\n  zfuneval()     - Evaluates code from the perspective of a zone object.\n  zfunldefault() - Like uldefault(), but from the perspective of a zone object.\n  zfunldefault2()- Like udefault2(), but from the perspective of a zone object.\n  zfunlocal()    - Like ulocal(), but from the perspective of a zone object.\n  zfun2local()   - Like u2local(), but from the perspective of a zone object.\n  zwho()         - Returns the players in a specified zone master.\n\n</PRE>\n<A HREF=\"#zfunlocal2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zone_autoadd toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zone_autoadd toggle\"><H3>ZONE_AUTOADD TOGGLE</H3></A><PRE>\n  Toggle: ZONE_AUTOADD\n  \n  When this toggle is set on the target, whenever that target creates\n  anything new (via @dig, @open, etc), that target will inherit the\n  FIRST zone that the target belongs to.  If the target has no zones\n  or if this toggle is not set, the zone addition is ignored.  If the\n  target is also toggled ZONE_AUTOADDALL, that toggle will take\n  presidence.\n  \n  See Also: ZONE_AUTOADDALL\n  \n</PRE>\n<A HREF=\"#zone functions\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zone_autoaddall toggle\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zone_autoaddall toggle\"><H3>ZONE_AUTOADDALL TOGGLE</H3></A><PRE>\n  Toggle: ZONE_AUTOADDALL\n  \n  When this toggle is set on the target, whenever that target creates\n  anything new (via @dig, @open, etc), that target will inherit ALL\n  of the zones that the target belongs to.  If the target has no zones\n  or if this toggle is not set, the zone addition is ignored.  This\n  toggle has presidence over ZONE_AUTOADD.\n  \n  See Also: ZONE_AUTOADD\n  \n</PRE>\n<A HREF=\"#zone_autoadd toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zonecmdchk\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zonecmdchk\"><H3>ZONECMDCHK</H3></A><PRE>\n  Toggle: ZONECMDCHK(k)\n  \n  This toggle, when set, will enable the target to search for $commands\n  from a zone as if it were a parent.  This is only useful on commands\n  and players.  This toggle is meaningless on rooms (as rooms are already\n  searched).\n  \n\n</PRE>\n<A HREF=\"#zone_autoaddall toggle\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zonecontents\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zonecontents\"><H3>ZONECONTENTS</H3></A><PRE>\n  Flag: ZONECONTENTS([z])\n  \n  When this flag is set on a room which is also set ZONEMASTER, then that\n  zonemaster's contents will be searched for any matching $command.\n  This will, in effect, work like a mini-master room.\n  \n  The ZONEMASTER flag must be set before this flag can be set.\n  \n  See Also: ZONES, IC, COMBAT, ZONEMASTER, @zone\n  \n</PRE>\n<A HREF=\"#zonecmdchk\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zonemaster\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zonemaster\"><H3>ZONEMASTER</H3></A><PRE>\n  Flag: ZONEMASTER([Z])\n \n  When this flag is set on a room or object it specifies it as the control\n  object for a zone. A zone is defined in two ways. First a zone is a \n  group of ROOMS that create a physical geographic area (need not be \n  connected, but would be nice). These rooms are zoned to the zone master\n  and whenever anyone enters a command that is not matched on an object \n  local to them, the zone master is searched for the command. If the command\n  is found on the zone master then it is executed with the zone master as %!\n  and the player/object that entered the command as %#.\n \n  A zone is also defined as a group of rooms/objects/exits/players who\n  are zoned to the zone master. These objects may be modified and controlled\n  by anyone who passes the ZoneWizLock on the zonemaster.\n  \n  If the item is also set ZONECONTENTS, this flag can not be removed without\n  the ZONECONTENTS flag being removed first.  Also, if there are existing \n  zones on the Zone Master, this flag can not be removed.\n   \n  See Also: ZONES, IC, COMBAT, ZONECONTENTS, @zone\n  \n</PRE>\n<A HREF=\"#zonecontents\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zoneparent \">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zoneparent \"><H3>ZONEPARENT </H3></A><PRE>\n  Flag: ZONEPARENT([y])\n  \n  This flag specifies if the ZMO is to 'distribute' or allow its attributes\n  to be inherited to the things that belong to its zone.  Anything that\n  you do not wish to inherit its attributes, if it is set ZONEPARENT, must\n  be set NOZONEPARENT.  Alternately, individual attributes may be specified\n  to not be inheritable if set NO_INHERIT.\n  \n  See Also: NOZONEPARENT, @set2\n  \n</PRE>\n<A HREF=\"#zonemaster\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zones\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zones\"><H3>zones</H3></A><PRE>\n  The RhostMUSH zone system works as follows:\n  \n  A zone is held together by a Zone Master. A Zone Master is an object or\n  room that has it's ZONEMASTER flag set. Once the flag is set, you may\n  do several things. To start with, you may decide you want others to\n  be able to have their objects join your zone. To do this set up a \n  ZoneToLock on your ZONEMASTER. This lock defaults to false unlike most\n  other locks which default to true if they are missing.\n \n  You may also want select few people to have control over objects in your\n  zone. These people will have wizard-like control within your zone.\n  To allow others control and modification ability to objects in your\n  zone you would set a ZoneWizLock on your zone master. This lock defaults\n  to false if missing (allowing no-one control). Note that you as an owner\n  of the zone master must still give yourself explicit zone wizard status\n  by putting yourself in the lock.\n  \n  You may also set a ZONEMASTER, ZONECONTENTS.  This flag will enable\n  searching the contents of the Zone Master for matching $commands.\n  \n  You may also set a ZONEMASTER, ZONEPARENT.  This allows the zonemaster\n  to allow its children to inherit attributes off the ZONEMASTER.  An object\n  @toggled NOZONEPARENT will not inherit attributes from any zonemaster.\n     \n  { Type 'help zones2' for more info. }\n  \n</PRE>\n<A HREF=\"#zoneparent \">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zones2\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zones2\"><H3>zones2</H3></A><PRE>\n  You may also want a VERY select few to be able to alter the zone master\n  object itself. To do this set a TwinkLock on the zone master. This lock\n  defaults to false. \n  \n  Any commands that you place on your zone master object will be searched\n  for by objects or players entering commands that are not matched on\n  an object local to them if they are essentially in a room of your zone.\n  Essentially in your zone means that they or any level of container that\n  they are within is physically in a room that is zoned to your zone master.\n  The parent of a zone master is not searched for commands when this\n  command search occurs.\n \n  Once you have set up your zone master, you (or anyone in your \n  zone master's ZoneToLock) may begin to add objects to your zone.\n  To do this, use the @zone/add, @zone/del, and @zone/purge commands.\n \n  See Also: @zone, @lock, lzone(), ZONEMASTER, ZONECONTENTS, ZONEPARENT\n  \n</PRE>\n<A HREF=\"#zones\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<A HREF=\"#zwho()\">[NEXT]</A>\n<BR>\n<HR><A NAME=\"zwho()\"><H3>ZWHO()</H3></A><PRE>\n  Function: zwho(&lt;zone&gt; [,&lt;type&gt;])\n  Returns the players in the specified zonemaster.  If the target is not\n  a zonemaster, or if the object is not a valid zone, it returns an\n  empty list.  This is _not_ database intensive.  This is the default \n  &lt;type&gt; '0'.\n  \n  If you specify &lt;type&gt; '1' for the zwho(), it lists all players that reside\n  inside every single location belonging to that zone.  Also not overly\n  cost intensive.\n  \n  Example:\n    &gt; @set here=zonemaster\n    &gt; @zone here=#0   (a room)\n    &gt; say lcon(#0,player)\n      You say &quot;#1 #3 #5&quot;\n    &gt; @zone here=#534 (a room)\n    &gt; @zone here=#987 (a player)\n    &gt; say lzone(here)\n    You say &quot;#0 #534 #987&quot;\n    &gt; say zwho(here)\n    You say &quot;#987&quot;\n    &gt; say zwho(here,1)\n    You say &quot;#1 #3 #5&quot;\n  \n  See Also: @zone, ZONES, lzone(), inzone()\n  \n</PRE>\n<A HREF=\"#zones2\">[PREV]</A>\n<A HREF=\"#topic index\">[TOP]</A>\n<BR>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["wizhelpfile", "<span class=\"section-number\">16. </span>RhostMUSH Internal Wizhelp Files", "N", "next"], ["powers", "<span class=\"section-number\">14. </span>Comparison of powers", "P", "previous"]], "sourcename": "helpfile.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">15. RhostMUSH Internal Help Files</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "helpfile", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12", "karma_sphinx_theme_version": "0.0.8"}
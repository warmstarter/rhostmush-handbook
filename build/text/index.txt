RhostMUSH Handbook
******************

The RhostMUSH source tree offers many abilities and options not
normally found in any other flavor of mush.  This doesn't make it
better than other servers (though we think so *j/k*) but it does give
you a wider selection of configurability, which, as you know, is the
best part of setting up a mush. (yea, right)

* A high-performance dual-quota system.

* A complete rewrite of key areas and referbishments of all the other
  areas.

* An on-line recover tool for accidental db destruction.

* Multi-wizard architecture for better control of staff.

* Multi-power system to tweek abilities of players.

* Multi-zone system where people can belong to multiple zones.

* Built in error correction for db corruption or other misuse.

* Built in accounting for those annoying twinks who try to hack.

* Many new functions and commands not seen anywhere else.

* A lot more that could drag this document out for pages.

Table of Contents

* 1. RhostMUSH Requirements

  * 1.1. System Requirements

  * 1.2. Software Requirements

  * 1.3. Hosting Requirements

* 2. Installing RhostMUSH

  * 2.1. Obtaining RhostMUSH Source Code

  * 2.2. Options for making a MUSH

  * 2.3. Compiling RhostMush

  * 2.4. Configuring the game

  * 2.5. Creating RHostMUSH with a Provided DB

  * 2.6. Basic Instructions for starting a new RhostMUSH

  * 2.7. Customtize the textfiles for your game

  * 2.8. Three Options for Starting a MUSH

* 3. Installing using an ansible playbook

* 4. What RhostMUSH is about and what's so great about RhostMUSH

  * 4.1. Recycle bin

  * 4.2. @snapshot

  * 4.3. Wizard and Immortals by default

  * 4.4. Titles and Captions to a player's name

  * 4.5. Have an alternate name with locks for NPC obfuscation

  * 4.6. Have multiple player aliases

  * 4.7. Actively control how dark works both game-wide and
    individually

  * 4.8. Make config file changes in-game without having to reboot or
    have shell access

  * 4.9. Execute any binary or script as a localized function

  * 4.10. Customized percent substitutions (like %n, %#, etc)

  * 4.11. Redefine percent substitutions (like %n, %#, etc)

  * 4.12. Localize command and function overrides in a sandbox

  * 4.13. Multiple Zones

  * 4.14. Optionally control, enable, or disable sideeffects

  * 4.15. Have 31 cross-interactive realities for locations

  * 4.16. Override any command with softcode

  * 4.17. The abilility to raise or lower permissions on the various

  * 4.18. Customize new commands on the connect screen

  * 4.19. Softcode any txt file (like connect.txt)

  * 4.20. Advanced tracing methods for debugging your code including
    labels!

  * 4.21. Built in pretty-printing of attributes with the parenmatch()
    function

  * 4.22. Plenty more not mentioned!

  * 4.23. Advanced features of RhostMUSH

  * 4.24. Random notes and things to know about RhostMUSH

* 5. What FLAGS, TOGGLES, POWERS, and DEPOWERS mean in RhostMUSH

  * 5.1. What are Flags?

  * 5.2. What are Toggles?

  * 5.3. What is an @power?

  * 5.4. What is an @depower?

* 6. Multi-tiered bitlevel systems

  * 6.1. Altering bitlevels

  * 6.2. ghod (#1) <bitlevel 7>

  * 6.3. Immortal(i) <Level 6> - Basically #1

  * 6.4. Royalty(W) <Level 5> - FULL wizbit level

  * 6.5. Councilor(a) <Level 4> - High wizbit level

  * 6.6. Architect(B) <Level 3> - Middle wizbit level

  * 6.7. Guildmaster(g) <Level 2> - Lowest wizbit level

  * 6.8. Wanderer <bitlevel 0>

  * 6.9. Guest <bitlevel 0 as well>

* 7. Comparison of modern MUSH servers

  * 7.1. Differences to expect to the end user between PennMUSH, MUX,
    and RhostMUSH

  * 7.2. Comparison of features between RhostMUSH, PennMUSH, and MUX2

  * 7.3. Organization of help and wizhelp

  * 7.4. Mail, comsystem, guests, master rooms, etc..

  * 7.5. Comparisons of features

  * 7.6. @commands with equivalents

  * 7.7. @commands unique to RhostMUSH

  * 7.8. @lock equivalents

  * 7.9. @locks that exist in Rhost that have no PennMUSH equivelant

  * 7.10. Flag and toggle equivalents

  * 7.11. Flags and toggles that only exist in RhostMUSH

  * 7.12. @power equivalents

  * 7.13. Functions equivalents

  * 7.14. What may need to be modified to get softcode from PennMUSH,
    TinyMUSH2, TinyMUSH3, or MUX2 to work on Rhost

  * 7.15. Things other mushes can do that Rhost can not and how to
    emulate it

* 8. Database

  * 8.1. Loading an existing Database

  * 8.2. Converting a flatfile database for use in RhostMUSH

  * 8.3. Note about Compiling

* 9. Getting Started

  * 9.1. What to type to get the basics running if you did not choose
    a pre-existing flatfile

  * 9.2. Minimal DB instructions

* 10. Ambrosia's Minimal Rhost DB

  * 10.1. Version history

  * 10.2. AmbrosiaDB Introduction

  * 10.3. AmbrosiaDB Features

  * 10.4. AmbrosiaDB Bitlevels

  * 10.5. AmbrosiaDB Globals

  * 10.6. AmbrosiaDB Quota

  * 10.7. AmbrosiaDB Adding Functions

  * 10.8. AmbrosiaDB Compiling

* 11. Security

  * 11.1. Considerations to locking down restrictions in RhostMUSH

  * 11.2. Extended lockdown of the mush and considerations

  * 11.3. Methods to block anonymous connections and the pros and cons
    of doing so

* 12. What to Do if your MUSH is Attacked

* 13. Setting up an SSL tunnel for secure connection options

  * 13.1. Quickstart for SSL setup with stunnel

  * 13.2. Detailed SSL setup with stunnel

* 14. Maintenance

  * 14.1. Note about Patching

  * 14.2. Daily Backups for RhostMUSH

  * 14.3. Signals and why you need them for control

  * 14.4. Shutting down RhostMUSH gracefully

  * 14.5. Network Port redirector

  * 14.6. Using the built-in cron system for periodically running
    commands

  * 14.7. The following scripts are used in the game directory

  * 14.8. Textfiles for RhostMUSH

* 15. Troubleshooting

  * 15.1. Reporting bugs or getting help

  * 15.2. Stack limit and debugging

  * 15.3. How to reset the password for #1

  * 15.4. Troubleshooting difficulties compiling RhostMUSH

  * 15.5. Dealing with DB Corruption

  * 15.6. Dealing with a corrupt mail database

* 16. Advanced Features

  * 16.1. Adding hardcoded modules

  * 16.2. Reality Levels Setup

  * 16.3. Execscript and external programs and scripts

  * 16.4. Using printf() for advanced text output

* 17. Format for image files

  * 17.1. HELP key indexes for the values

* 18. Requirements if Using Windows

  * 18.1. Installing on Windows 10 with BASH

  * 18.2. Installing on Windows with Cygwin

  * 18.3. Startig RhostMUSH on Windows

* 19. Upgrading a Legacy RhostMUSH Installation

  * 19.1. Converting database betwen GDBM and QDBM

  * 19.2. Updating RhostMUSH prior to 3.9.5p2

  * 19.3. Adding MySQL to RhostMUSH older than 3.9.5p2

* 20. Comparison of Flags

* 21. Comparison of powers

* 22. Historical Non-Disclosure Agreement

* 23. Copyright

* 24. RhostMUSH Internal Help Files

* 25. RhostMUSH Internal WizHelp Files

Welcome to RhostMUSH Handbook's documentation!
**********************************************

* What RhostMUSH is about and what’s so great about RhostMUSH.

  * Recycle bin

  * @snapshot

  * Wizard and Immortals by default

  * Titles and Captions to a player’s name

  * Have an alternate name with locks for NPC obfuscation

  * Have multiple player aliases

  * Actively control how dark works both game-wide and individually

  * Make config file changes in-game without having to reboot or have
    shell access

  * Execute any binary or script as a localized function

  * Customized percent substitutions (like %n, %#, etc)

  * Redefine percent substitutions (like %n, %#, etc)

  * Localize command and function overrides in a sandbox

  * Multiple Zones

  * Optionally control, enable, or disable sideeffects

  * Have 31 cross-interactive realities for locations

  * Override any command with softcode

  * The abilility to raise or lower permissions on the various

  * Customize new commands on the connect screen

  * Softcode any txt file (like connect.txt)

  * Advanced tracing methods for debugging your code including labels!

  * Built in pretty-printing of attributes with the parenmatch()
    function

  * Plenty more not mentioned!

* What to type to Compile and Install RhostMUSH

  * Note about Compiling

  * Note about Recompiling

  * Note about Patching

* How to convert a database from another mush to RhostMUSH

  * Converting a flatfile database for use in RhostMUSH

* What to type to configure and get your RhostMUSH up and running

  * Creating a new game with a blank database

  * Creating a new game with Ambrosia’s default database

  * Creating a new game with the generic default database

  * Starting your MUSH

  * Backups for RhostMUSH

  * Troubleshooting issues with starting up

* What to type to get the basics running if you did not choose a pre-
  existing flatfile

  * Login to #1 from the connect screen

  * Change #1’s password to something you’ll remember but is hard to
    guess

  * Master Room

  * Flag and protect Master Room

  * Player Holder Characters

    * Immortal Holder

    * Royalty/Wizard Holder

    * Councilor/Admin Holder

    * Architect/Staff Holder

    * Guildmaster/Lead Holder

  * Chown #0 (The starting room) and #2 (The Master room) to immholder

  * Create yourself your own immortal player then log off #1 and into
    this immortal player

  * Log out of #1 and log into your immortal player

  * Create your guest characters

  * Dig a closet to store important objects but non-master room

  * Set the flags on the closet and ownership of it

  * Create an Admin object for future ease of customization

  * Set the flags on the admin object and ownership and location

  * Add admin object to configuration

  * Reboot your mush to load up the change for the admin object

  * Do @admin/list to see if it shows the admin object

  * Load in all the various softcode that you want

    * Myrddin MushCron

    * AshCom

    * Mail Wrappers

    * Myrddin BBS

    * Other Mushcode

* Considerations to locking down restrictions in RhostMUSH

  * Online: Blocking object abilities

    * FLAGS (access with @set)

    * TOGGLES (@toggle)

    * @powers, @depowers, and @locks

  * Offline: Blocking twinks from being abusive on your game

* What FLAGS, TOGGLES, POWERS, and DEPOWERS mean in RhostMUSH

  * Flags

  * Toggles

  * @power

  * @depower

* Extended lockdown of the mush and considerations.

  * Attribute Restriction

  * Command Restriction

  * Flag/Toggle Restriction

  * Config restrictions

  * Function Restrictions

  * Flags

  * Toggles

  * @powers

  * @depowers

  * Site Restrictions

    * IP based restrictions

    * DNS based restrictions

* Methods to block anonymous connections and the pros and cons of
  doing so

  * Blacklisting through external tor_pull.sh script

  * Blacklisting through internal @blacklist command

  * Blacklisting through internal @tor command

  * Blacklisting through internal @admin command

* What may need to be modified to get softcode from PennMUSH,
  TinyMUSH2, TinyMUSH3, or MUX2 to work on Rhost

  * Problematic functions between codebases

  * Problematic features between codebases

  * Problematic commands

  * SIDEFX flag

  * Variable exits

  * Zones

  * @powers

  * Attribute length

  * Attribute contents

  * 256 color

  * Unicode/UTF8

  * Attributes per object

  * Destroying

  * object id’s

  * lsearch() and search()

  * @locks can be different

  * Customer user-locks

  * Attribute trees

  * Prefix permission locking

  * align() and printf()

  * MySQL

  * Mail System

  * Comsystem

  * Various Functions

  * Empty Attributes

  * Player Stats

  * Percent Substitutions

  * Switches

  * Flags

  * Aliases

* The differences to expect to the end user between PennMUSH, MUX, and
  RhostMUSH as of 08/06/2016

  * PennMUSH

  * MUX

  * Rhost

* Advanced features of RhostMUSH

  * Debugging/Tracing

  * Zoning

  * Reality Levels

  * Function and Command Overriding

  * The Recycle Bin

  * Percent Substitution Adding/Overriding

  * Hooking

  * Command based uselocks

  * Differentating between command and listen locks

  * Wizard auto-overiding and how to disable it

  * Advanced FLAG and TOGGLE control

  * Advanced site control

  * Auto-Registration

  * Which bit level is best?

  * What are the limits for size/growth for RhostMUSH?

  * Sqlite and MySQL/Maria setup and why use it?

  * Executing outside scripts and binaries within RhostMUSH

  * Pulling external data into RhostMUSH

  * Integrating a unix cron right into RhostMUSH

  * Signal handling, how it works, and when and why use it

  * Setting up global parents, global @parents, global attribute
    formatting, and other global setups

  * RhostMUSH limitations and how to get around them

  * Things other mushes can do that Rhost can not and how to emulate
    it

    * PennMUSH

    * MUX

  * Advanced guest setup

  * Attribute permission masking and the joys of the power behind it

  * The amazing @cluster and what it can do for you

  * What we plan for the future

* Signals and why you need them for control

  * TERM (kill -TERM or kill -15)

  * USR1 (kill -USR1)

  * USR2 (kill -USR2)

  * KILL (kill -KILL or kill -9)

* Setting up an SSL tunnel for secure connection options

  * Quickstart for SSL setup with stunnel

  * Detailed SSL setup with stunnel

    * stunnel directory

    * Modifying netrhost.conf

    * Running the stunnel setup program

    * Starting the stunnel proxy

    * Shutting down the stunnel proxy

    * Configuring firewall on the host

* Multi-tiered bitlevel systems

  * ghod (#1) <bitlevel 7>

  * Immortal <bitlevel 6>

  * Royalty <bitlevel 5>

  * Councilor <bitlevel 4>

  * Architect <bitlevel 3>

  * Guildmaster <bitlevel 2>

  * Wanderer <bitlevel 0>

  * Guest <bitlevel 0 as well>

  * Altering bitlevels

* Adding hardcoded modules

  * Modifying sourcode to add a module

  * Adding an @startup to make use of modules

  * Contributing your module back to Rhost

* Shutting down gracefully

  * Rhostmush has many ways to shut down the game cleanly

  * WARNING: Never kill -9 Rhost

* Stack limit and debugging

* Reality levels

  * Visibility

  * Descriptions

  * Configuration parameters

  * Example mush.conf

  * Commands

  * Functions

  * Example 1: A simplified Witchcraft setup

  * Example 2: A WoD setup

  * Example 3: Softcode

* Execscript and external programs and scripts

  * Mush variables

    * Built in variables

    * Dynamic variables

    * Register variables

  * set object

    * The format of the fields are

      * Dynamic variables

        * Examples

      * Register variables

        * Examples (The last example clears register 0)

  * Example bash script

  * Notes and warnings

* Using printf() for advanced text output

  * Example one

  * Example two

  * Example three

* Installing using an ansible playbook

* Random notes and things to know about RhostMUSH

  * Note on bits, their levels, and things they do

  * You need to @pcreate your guest characters and set them GUEST

  * @powers are INHERITED

  * @depowers are automatically checked first before anything else

  * Zones are unique

  * The db auto-repares itself when it can

  * You can get your connect.txt to parse ansi

  * Re-compiled binaries do not require an @shutdown

  * Softcode emulations of functions from other servers are included

* Quickinstall guide to RhostMUSH

  * Obtaining RhostMUSH

  * Important before you actually start building

  * Using the prebuilt flatfile

    * To load a prebuilt flatfile

  * Starting from scratch with a brand new database

  * Instructions for starting a new RhostMUSH

    * Setup directory permissions

    * Compile the source code

      * Manual configuration of source code

  * Loading a database for your MUSH

    * Option: Only perform these steps if using a provided database

  * Configure the netrhost.conf file for your MUSH

  * Start the MUSH and login

  * Option: Things to do once you have connected if you did NOT use a
    provided database

  * Setup new character, staff, and take tasks that can only be
    accomplished by #1

  * Setup daily backups for your game

  * Customtize the textfiles for your game

  * Make sure to read up further

* How to reset the password for #1

  * Method 1

  * Method 2

* Troubleshooting difficulties compiling RhostMUSH

  * Changes to conf for high-bit CPUs

  * Changes to autconf for certain systems

* Dealing with DB Corruption

  * If the mush says it can’t find your database files

    * Check the names of the database files in your ‘data’ directory

    * Check your netrhost.conf file

    * Check your mush.config file

  * If the mush says it can’t read or load your database files

    * Verify you have enough disk space. (quota)

    * Verify you have enough disk space.  (system)

  * If the mush seems to load fine but I can’t log in anyone and when
    I do all the names and attributes of things seem to be gone!

    * The bad news

    * The good news

    * Now, to restore your database?

  * Bringing up your mail database

    * If after restoring main database your mail database works

    * If after restoring main database your mail database does not
      work

* Dealing with a corrupt mail database

  * Backing up your mail database

  * Automatically recovering your mail database

  * Manually recovering your mail database

* Additional simplified notes on setting up RhostMUSH

  * RhostMUSH offers the following over other mushes

  * Bit levels have various powers, abilities, flags, etc available to
    them

    * Guildmaster(g) <Level 2> - Lowest wizbit level

    * Architect(B) <Level 3> - Middle wizbit level

    * Councilor(a) <Level 4> - High wizbit level

    * Royalty(W) <Level 5> - FULL wizbit level

    * Immortal(i) <Level 6> - Basically #1

  * Compiling the code

  * Configuring the game

  * Starting the game

  * First login to the game

  * Reporting bugs or getting help

  * This code is known to compile and run cleanly on the following
    platforms

    * Systems known to not support

    * Untested Systems

    * Known bugs

* Using the built-in cron system for periodically running commands

  * Syntax for rhost.cron

  * Example syntaxt for rhost.cron

* Comparison of features between RhostMUSH, PennMUSH, and MUX2

  * Organization of help and wizhelp

  * Mail, comsystem, guests, master rooms, etc..

  * Comparisons of features

  * @commands with equivalents

  * @commands unique to RhostMUSH

  * @lock equivalents

  * @locks that only exist in RhostMUSH

  * Flag and toggle equivalents

  * Flags and toggles that only exist in RhostMUSH

  * @power equivalents

  * @power unique to RhostMUSH

  * Functions equivalents

  * Functions that only exist in RhostMUSH

* Loading an existing Database

  * Then you just follow the prompts to load in your flatfile there.

* Converting database betwen GDBM and QDBM

  * Downgrading QDBM to GDBM

  * Upgradging GDBM to QDBM

    * While logged in to your mush, issue the following commands

    * Verify the files exist

    * Shutdown the MUSH

    * From the Server directory

    * From the Server/game directory

    * While logged into the mush issue the following commands

    * Verify that you have QDBM running and your valid values

* Updating RhostMUSH prior to 3.9.5p2

  * Adding MySQL to RhostMUSH older than 3.9.5p2

    * ** IMPORTANT ** IMPORTANT ** IMPORTANT ** IMPORTANT **IMPORTANT
      ** IMPORTANT **

* Textfiles for RhostMUSH

  * Textfile Frequently Asked Questions

* The following scripts are used in the game directory

* Scripts to be used with execscript

* Format for image filses

* HELP key indexes for the values:

* Network Port redirector

* Autoshutdown script

* Minimal DB instructions

* Ambrosia’s Minimal Rhost DB

  * Version: 1.0.5          2020-01-31

* RhostMUSH Internal Help Files

* RhostMUSH Internal Help Files

* Comparison of Flags

* Comparison of powers

* Changelog

* Requirements

  * System Requirements

  * Requirements

  * Optional Packages

  * Hosting Requirements

* Windows

  * Installing on Windows 10 with BASH

  * Installing on Windows with Cygwin

* Copyright

* Historical Non-Disclosure Agreement


Indices and tables
******************

* Index

* Module Index

* Search Page

5. Gettin Started
*****************


5.1. What to ype to get the basics running if you did not choose a pre-existing flatfile
========================================================================================

If you decided to get a bare-bone configuration, you will find your
mush has just two things.  The #1 (God) player and the starting room
#0.  That’s it.


5.1.1. Login to #1 from the connect screen
------------------------------------------

Nyctasia is the default password:

   co #1 Nyctasia


5.1.2. Change #1’s password to something you’ll remember but is hard to guess
-----------------------------------------------------------------------------

Note: yourpasswordgoeshere can be any password you choose.  Choose
well:

   @password Nyctasia=YOURPASSWORDGOESHERE


5.1.3. Master Room
------------------

At this point you should create your master room:

   @dig Master Room

Note:

  Reason: You need a master room to contain global $commands for
  players ^listens are not global for intentional reasons.  It’s far
  too much overhead for far too minimal gains that few people need or
  use.


5.1.4. Flag and protect Master Room
-----------------------------------

It will return a dbref#, it should be #2 if you’ve not created
anything else:

   @set #2=safe ind halt float


5.1.5. Player Holder Characters
-------------------------------

Feel free to change the password to what you want

Note:

  Reason: You will want to chown global room or global areas to a
  given bitlevel and a method to keep organized. Note: wizhelp control
  will give you a complete breakdown of what each bit can do.


5.1.5.1. Immortal Holder
~~~~~~~~~~~~~~~~~~~~~~~~

   @pcreate ImmHolder=abc123
   @set *Immholder=no_connect !wanderer immortal
   @badsite *immholder=*


5.1.5.2. Royalty/Wizard Holder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   @pcreate WizHolder=abc123
   @set *wizholder=no_connect !wanderer royalty
   @badsite *wizholder=*


5.1.5.3. Councilor/Admin Holder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   @pcreate AdminHolder=abc123
   @set *adminholder=no_connect !wanderer councilor
   @badsite *adminholder=*


5.1.5.4. Architect/Staff Holder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   @pcreate StaffHolder=abc123
   @set *staffholder=no_connect !wanderer architect
   @badsite *staffholder=*


5.1.5.5. Guildmaster/Lead Holder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   @pcreate GuildHolder=abc123
   @set *guildholder=no_connect !wanderer guildmaster
   @badsite *guildholder=*


5.1.6. Chown #0 (The starting room) and #2 (The Master room) to immholder
-------------------------------------------------------------------------

Note:

  #0 you can chown to a different bitlevel if you want, but the master
  room should always be owned by an immortal

   @chown/preserve #0=*immholder
   @chown/preserve #2=*immholder


5.1.7. Create yourself your own immortal player then log off #1 and into this immortal player
---------------------------------------------------------------------------------------------

Note:

  Pick what you want for playername and playerpassword

   @pcreate PLAYERNAME=PLAYERPASSWORD
   @set *playername=!wanderer immortal


5.1.8. Log out of #1 and log into your immortal player
------------------------------------------------------

Note:

  Use the playername and password you created in the step before

   LOGOUT
   co PLAYERNAME PLAYERPASSWORD


5.1.9. Create your guest characters
-----------------------------------

Note:

  Feel free to change the description if you want

   @dolist lnum(1,10)={@pcreate Guest##=guest;@set *Guest##=guest;@adisconnect *Guest##=home;@lock *Guest##=*Guest##;@desc *Guest##=A Stranger in a strange land.}


5.1.10. Dig a closet to store important objects but non-master room
-------------------------------------------------------------------

Note:

  name it anything you want, just remember it.

   @dig Closet


5.1.11. Set the flags on the closet and ownership of it
-------------------------------------------------------

Note:

  Use the dbref# that it returned when digging the closet and not #123

   @set #123=inh safe ind float
   @chown/pres #123=*immholder


5.1.12. Create an Admin object for future ease of customization
---------------------------------------------------------------

   @create AdminObject


5.1.13. Set the flags on the admin object and ownership and location
--------------------------------------------------------------------

Note:

  this object must be immortal owned.  Use the dbref# returned
  previously instead of #123

Note:

  Use the closet dbref# instead of #234

   @set AdminObject=halt safe ind
   @chown/pres #123=*immholder
   @tel adminobject=#234


5.1.14. Add admin object to configuration
-----------------------------------------

Modify the netrhost.conf file with the following line at the bottom
after the line ‘# define local alises here’ where you replace 123 with
the dbref# of the admin object that you made:

   admin_object 123


5.1.15. Reboot your mush to load up the change for the admin object
-------------------------------------------------------------------

   @reboot


5.1.16. Do @admin/list to see if it shows the admin object
----------------------------------------------------------

Note:

  do wizhelp @admin for more information on how to use this

   @admin/list


5.1.17. Load in all the various softcode that you want
------------------------------------------------------

This is client dependant based on whatever method it uses to load
softcode.


5.1.17.1. Myrddin MushCron
~~~~~~~~~~~~~~~~~~~~~~~~~~

Load in the Myrddin Mush Cron. It’s a very handy piece of software and
strongly suggested to do so.  You can find this in the ‘Mushcode’
directory off the main Rhost directory. Filename:

   ~/Rhost/Mushcode/MyrddinCRON

Note:

  The globalroom() function returns the dbref# of the master room.
  Handy!

   @chown/preserve the myrddin mush cron to immholder, then move to maste room.
   @chown/pres Myrddin=*Immholder
   @tel Myrddin=#234 (where #234 is the dbref# of your code closet)


5.1.17.2. AshCom
~~~~~~~~~~~~~~~~

Load in default softcoded comsystem.  This is PennMUSH and MUX/TM3
compatible. Filename:

   ~/Rhost/Mushcode/comsys

Chown the Comsystem and everything inside it to immholder:

   @chown/pres ChanSys=*Immholder
   @dolist lcon(chansys)=@chown/pres ##=*immholder
   @tel Chansys=globalroom()


5.1.17.3. Mail Wrappers
~~~~~~~~~~~~~~~~~~~~~~~

Load in mail wrappers if you want MUX/TM3 and/or Penn mail wrapping.
Filename (MUX/TM3):

   ~/Rhost/Mushcode/mailwrappers/muxmail.wrap

Filename (Penn):

   ~/Rhost/Mushcode/mailwrappers/pennmail.wrap

Chown to immholder:

   @chown/pres MUX=*Immholder
   @chown/pres Penn=*Immholder
   @tel/list mux penn=globalroom()


5.1.17.4. Myrddin BBS
~~~~~~~~~~~~~~~~~~~~~

Load in Myrddin’s BBS Filename:

   ~/Rhost/Mushcode/MyrddinBBS

Chown to immholder and the contents of it as well:

   @chown/pres Myrddin=*Immholder
   @dolist lcon(myrddin)=@chown/pres ##=*immholder
   @tel myrddin=globalroom()


5.1.17.5. Other Mushcode
~~~~~~~~~~~~~~~~~~~~~~~~

There’s other code in the Mushcode directory that you are welcome to
install.  You would follow similar procedures for loading it in,
chowning it, and moving to the master room as you did above.

Likewise, any softcode you find on the internet or on other mushes
should be portable to RhostMUSH with little to no changes depending on
the complexity of the code in question.


5.2. Minimal DB instructions
============================

The ‘retired’ directory has older image files if you’re interested

Please use the netrhost.conf file with the database as they’re linked.

The flatfile must be loaded in as a new db

This is a minimal db with basic ‘features’ built in.

Copy the txt files into the Rhost’s txt directory off game:

   cp txt/* ~/Rhost/Server/game/txt

mkindx the files (substitute FILENAME with the filename):

   cd ~/Rhost/Server/game/txt
   ../mkindx FILENAME.txt FILENAME.indx


5.2.1. Startup Steps
--------------------

1. Using the Startmush utility for the first time, select the load db
   method

— or —

1. copy the netrhost.conf file into the games directory

2. make any relevant changes you wish

3. db_load the flatfile

   1. go into the game directory

   2. type:

         ./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new

4. Startmush as expected


5.3. Ambrosia’s Minimal Rhost DB
================================


5.3.1. Version: 1.0.5          2020-01-31
-----------------------------------------

Version history:
   1.0.0
      * Initial database setup.

   1.0.1
      * Small fixes of objid(), isstaff() and bccheck() permissions
        and handling.

      * bittype() access lowered to Architect level

      * NO_CODE flag made visual to Architect

   1.0.2
      * Several convenience changes and fixes: _ Attributes moved to
        @aflags system, allowing Architects to set, Guildmasters to
        see them.

      * @flagdef lowered to Royalty level. @quota/max, @quota/unlock
        and @convert moved to Architect level.

      * NO_CODE flag made settable/unsettable by Architects.

      * Fixed typo in conf file: ifselse -> ifelse

      * Switched _Attributes to use the @aflags system See:
        Guildmaster Set: Architect

   1.0.3
      * Removed @flagdefs from in-game softcode, converted to
        flag_access_* config options

      * Lowered mailstatus() access to architect.

   1.0.4
      * Changed softcoded objid() to tag(), due to Rhost’s new
        hardcoded objid() which does perform a different
        functionality.

      * Added more staff recommendations to this file.

      * Added Reality TXLevel ‘Admin’ to all objects in the db except
        #1

   1.0.5
      * Replaced softcoded tag() system with Rhost’s new hardcoded
        @tag/tag() system. All previous tags are set on the database.
        The Tag Object was removed.

      * @function startup on BC-Admin-Royalty fixed - @wait 1
        workaround for Tags in place.

      * Places System @startup integrated into BC-Admin-Royalty’s
        @startup

      * Made @dump and @dump/flat available to Councilors in
        netrhost.conf

   1.0.6
      * A small typo fix in netrhost.conf. float_preciiosn ->
        precision and functions_max -> function_max. Thanks to
        Bobbi@COH


5.3.2. AmbrosiaDB Introduction
------------------------------

Note:

  READ THIS DOCUMENT CAREFULLY!

Greetings,

This minimal Rhost DB was made with a secure setup, and as a good base
to start a new game off in mind.


5.3.3. AmbrosiaDB Features
--------------------------


5.3.3.1. AmbrosiaDB Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Limbo, Master Room and Auxiliary room.

* BC-Admin-<bitlevel> characters set up for each bitlevel to own
  global and data objects, and inherit to.

* BC-Admin-Mortal is @powered EXAMINE_ALL(Guildmaster),
  NOFORCE(Architect) and LONG_FINGERS.

* @startup on BC-Admin-Immortal lowers DARK flag access to Councilor
  level, and NO_CODE visual access to Architect level.

* Global Command objects inheriting from each bitlevel, with a
  separate staff-only object for each level.

* Global Function objects inheriting from each bitlevel.

* local Function objects inheriting from each bitlevel.

* @function and @hook access lowered to Royalty level to remove
  immediate need for Immortals or actual Immortal code.

* @rxlevel, @txlevel, bittype() access lowered to Architect level to
  remove immediate need for Royalty in many cases.

* @startup on BC-Admin-Royalty to automatically load @hooks and
  @functions from the Global Function objects, based on attribute
  naming.

* Misc Data object to hold general data, like Staff lists etc.

* Reality levels ‘Real’ and ‘Admin’.

Note:

  All created items and players by default are in Recieve-Level ‘Real’
  and Transmit-Levels ‘Real’ and ‘Admin’.

* All globals, Master Room, BCs-*, and other staff/code-related
  objects currently have only ‘Admin’ as their Transmit-Level. This
  does not prevent them fromi working properly. The only exception is
  #1, who has empty reality levels.

* The supplied netrhost.conf offers a secure setup of options, allows
  Royalty to use @hook and @function, and also sets the
  function_access of several functions to !no_code, which allows
  NO_CODE players to use the comsys properly.

Note:

  IT IS HIGHLY RECOMMENDED to use this .conf as a base for this DB.
  The ‘Port’ configuration parameter is XXXX’d out. Set it first
  before starting your game.

* All existing objects have been @set SAFE and INDESTRUCTABLE.

* All existing objects have a paranoid series of @locks set on
  themselves.

* The +supersafe command is provided on #1 as an example of what was
  used to easily set this on objects.

* Players are @set NO_CODE and WANDERER by default. They get 40
  credits on creation, and a 1-credit-per-day paycheck.

* All *mit sideeffects, as well as set(), create() and list() are
  enabled. The latter three are necessary for the Comsystem. The rest
  of sideeffects are disabled completely.

* Flashing ansi is disabled.

* _Attributes are settable by Architects, and seeable by Guildmasters.
  Read: Still invisible and unsettable by mortals.

* Architects can set up, unlock, and change alternate @quota on
  players.

* Architects can set/unset the NO_CODE flag.

* Guildmasters can see _Attributes

* Architects can set _Attributes


5.3.3.2. AmbeosiaDB Softcode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Set-up compatibility SoftFunctions and @hook object.

* Set up Comsys 1.0.9b at Architect level. (+bbhelp command)

* Set up Myrddin +bboard at Architect level.

* Set up Myrddon Cron at Architect level.

* Anomaly Jobs (+jhelp)

* SGP Places & Mutter

* Set up Penn-style follow.

* Set up @scan (Up to architect-level items).

* Set up Penn- and Mux compatibility Mailwrappers. (phelp and mhelp
  commands)

* help .txt files and .indx files for the above.

* @dynhelp access lowered to architect to call above helpfiles.


5.3.3.3. AmbrosiaDB Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* isstaff() - Softcoded function that returns ‘1’ if its argument
  matches a #dbref in the ‘isstaff’ attribute on the Misc Data object.

* bccheck() - Softcoded function that returns ‘1’ if its argument
  matches a #dbref in the ‘bcs’ attribute on the Misc Data object.

* width() - Softcoded function that returns 78 for now. For cross-MU*
  compatibility.

* pass() - Softcoded function that takes a number as its parameter,
  and return a random string of that length. Perfect for setting
  random passwords.

* cmdmessage() - Softcoded function that takes two strings as its
  parameters. Returns ‘<< STRING1 >> String2’. The <<>> part is
  highlighted red. Good for all kinds of messages sent by game
  commands.

* header() - Highly versatile, and a buffer-saving alternative to
  using printf() for centering with ansi borders. HIGHLY recommended
  to use instead of printf() for such things.

   header(text,width,filler,fillercolor,outerpadding,paddingcolor,
          leftinnerpadding,leftinnercolor,rightinnerpadding,rightinnercolor)
     text - Text to center
     width - Width of the header, defaults to width()
     filler - Character(s) to draw the line with. Default: =
     fillercolor - ansicode to color the line with
     outerpadding - Characters to frame the outer ends of the line with.
     paddingcolor - ansicode to color the outer characters with
     leftinnerpadding - characters to put at the left side of <text>
     leftinnercolor - ansicode to color the leftside characters with
     rightinnerpadding - characters to put at the right side of <text>
     rightinnercolor - ansicode to color the rightside characters with

Note:

  ALL of header()’s parameters are optional. By default, header()
  simply draws a 78-char wide line of =’s. Simply leave parameters
  empty if you want to set one of the latter parameters.


5.3.4. AmbrosiaDB Bitlevels
---------------------------

The whole DB is highly geared for a low-bitlevel setup. I am a strong
believer in least-privileges-needed to do the job. Bittypes and powers
are tools to do that job, not badges of friendship or trust that get
tossed about.

Note:

  Here is my suggested list of powers and bittypes for staffers.


5.3.4.1. AmbrosiaDB Storytellers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@powered TEL_ANYWHERE, JOIN_PLAYER and GRAB_PLAYER on Guildmaster
level.


5.3.4.2. AmbrosiaDB Builder-BCs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mortal, with @quota and money for their job. There should be one
shared BC for each area of the game, like BC-Houston. Special Rooms,
items or exits that require privilegs to examine or @tel a player
should belong to a BC-Houston-Powered that is @powered EXAMINE_ALL,
LONG_FINGERS And TEL_ANYTHING on Guildmaster level. If the object
actually needs to modify a player directly, have it use a restricted
staff Global, or if you absolutely must, make a BC-Houston-Admin and
@set it Architect. Do not give normal builders access to it, only
@chown things to it and @set them inherit after review.

Both the -powered and -admin BCs can have random passwords and be @set
NO_CONNECT.


5.3.4.3. AmbrosiaDB Building Head
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@set Guildmaster, powered TEL_ANYWHERE, TEL_ANYTHING and optionally
CHOWN_OTHER on Guildmaster level. Mind that the latter technically
allows them to @chown anything guildmaster- and lower-owned in the
master and auxiliary rooms. However, it allows the Building Head to
@chown items between BCs- and to the BC-<location>-powered.


5.3.4.4. AmbrosiaDB Enforcers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As Storyteller above, plus being @powered Security at Guildmaster
level, in order to handle problem players.

Optionally always given to Storytellers.


5.3.4.5. AmbrosiaDB Coders
~~~~~~~~~~~~~~~~~~~~~~~~~~

@set Architect


5.3.4.6. AmbrosiaDB Head Coder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Always trust your head coder. @set Architect for the everyday bit.
Give access to a maintenance Councilor bit for special code projects.
Finished code along those lines should get @chowned to the bc-admin-
councilor.

If you as the MU* Head(s) don’t know Softcode well, or want to leave
anything Code to your Head Coder, also give them optional access to a
maintenance Royalty bit in order to properly code banning/blacklisting
+commands and other rare code that requires Royalty powers. Again,
chown finished code to bc-admin-royalty.


5.3.4.7. AmbrosiaDB MU* Head(s)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You’re the boss(es). But please use an Architect bit for your everyday
things. Keep Immortal to yourself. Keep #1 to yourself. And seriously
avoid using either of them except for creating a Royalty bit or doing
intricate DB maintenance.


5.3.4.8. AmbrosiaDB Site Admins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

They already have more powers than any in-game bit can ever have ;)

Depending on actual involvement with your game, their abilities in-
game can range from merely being @powered free_wall for notifying
players of downtimes and/or being @powered shutdown in order to shut
down the game for maintenance, up to being the only person with actual
access to #1.


5.3.4.9. AmbrosiaDB Globals
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Handle necessary functionality for adminning through the admin-only
globals and softcode.

The setup I personally suggest is to have ALL staffers be AT MAX
Architect-level for everyday work and communication, with special
coders that -really- require it having Councilor-characters available
to log into for maintenance or special code setup. Technically if
everything is done right, the Coder(s) of the game do not require
higher privileges than Architect for the vast majority of things.
Royalty-level code should be a rare exception, if at all necessary.
The MU* Head(s) or site-admin should be the only one having access to
#1, Immortals or perhaps even Royalty. The BC’s, Global Function
objects and Function objects at level Royalty and higher have simply
been provided as a if-necessary convenience.

Current objects are only @chowned to certain bitlevels if it is really
required for them to function. Whenever possible, they have been
@chowned to the mortal BC-Admin-Mortal. All custom global functions
listed above are on the semi- -mortal Global Functions object. The
Master Room and Auxiliary Room have been @chowned to BC-Admin-
Architect.

The Comsystem and +bboard are owned by BC-Admin-Architect, which means
that higher bitlevels might not be able to use those systems if they
hide and set themselves DARK. This is intentional. The Architect
bitlevel is enough to freely set attributes on players, so these
systems did not need anything higher, and it prioritizes Councilor+ as
mere mainenance-duty bitlevels. Even the MU* Head should log on as an
Architect for everyday things.

The Comsystem and BBOARD have been modified to be configurable by
Architect and higher. Both systems have a CANUSE attribute with the
according code on them. Note that if you want both systems to be only
configurable by Councilor+, that instead of @chowning them to a
Councilor after changing those attribute for Councilor or higher, I
suggest to simply @set the bboard and comsystem core objects NO_MODIFY
instead, keeping them at Architect-power but making them unmodifyable
by Architects.


5.3.5. AmbrosiaDB Quota
-----------------------

I highly recommend the use of the alternative @quota system. BC-Admin-
Mortal and BC-Admin-Guildmaster both have this @quota system set up on
themselves. Both of them have a high amount of money for everyday
operations. You should not give them free quota or money.


5.3.6. AmbrosiaDB Adding Functions
----------------------------------

I also recommend to setup most global functions with /Privileged even
if they are mortal-powered, to make them work even when players are
set NO_CODE and WANDERER by default.

Enjoy!


5.3.7. AmbrosiaDB Compiling
---------------------------

P.S. the ‘bin/asksource.save0’ file has been supplied for loading in
the ‘make config’ or ‘make confsource’ step of Rhost installation. It
provides the settings I have used when creating this database. Some
settings, like the ANSI substitution, are used in the DB.

–Ambrosia@RhostMUSH

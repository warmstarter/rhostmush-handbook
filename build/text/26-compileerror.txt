Troubleshooting difficulties compiling RhostMUSH
************************************************


Changes to conf for high-bit CPUs
=================================

RhostMUSH automatically detects 64-bit platforms, and should compile
cleanly on these.

In case you are trying to compile Rhost on some other crazy-wide CPUs
such as the PS2, PS3 or other 128 or 256 bit CPUs, you can easily do
so by changing a few lines of code in conf.c.

change: typedef unsigned int    pmath1; typedef int
pmath2; #define ALLIGN1 4

to: typedef unsigned long   pmath1; typedef long            pmath2;
#define ALLIGN1 8

, replacing 8 with the size of your CPU’s long integer. (4 for 32-bit,
8 for 64-bit, 16 for 128-bit, etc etc)

RhostMUSH has only been tested to work on the AMD64, but there is no
reason to believe the same will not hold true for IA64.


Changes to autconf for certain systems
======================================

You should not have to worry about this, but incase something really
weird occurs, you may need to look into these changes…

The autoconfig.h file needs to have modifications to it by hand.

There are three manual entries:

This one sets how it defines the int to character pointer.  It’s safe
to keep it as ‘unsigned int’ for 32 bit platforms.  For non 32-bit,
define it to  how an int is defined on that system.

   typedef unsigned int    pmath1;

This one sets how it defines the signed int to character pointer.
Same restrictions apply as above for unsigned int.

   typedef int     pmath2;

This sets the allignment for the given platform.  4 represents a 32
bit platform.  8 would represent a 64 bit platform, etc.  Change
accordingly.

   #define ALLIGN1 4

Make sure these three entries are defined in your autoconf.h file else
the mush will not compile.

13. Maintenance
***************


13.1. Note about Patching
=========================

There's two ways you can look to patch the source.  If you plan to run
the RhostMUSH source from a git repository, then please use the git
repo to constantly update your code.  If you knew enough to want to
set up a git repo then we expect knowledge on how to keep source trees
updated in the git repo to be used the same as any other source
distribution.

If, however, you have no idea what a git repo even is, or have no
inclination of using git to manage your RhostMUSH source, or just
don't care one way or another, then you can use the included patch.sh
routine (from under the Server directory) to patch your source at any
time.

From the server directory just type:

   ./patch.sh

That will auto-compile your source, auto make all your header files
and essentially keep everything up to date to the latest source. Once
that's done, all you do from within the game is two commands:

   @reboot (or @reboot/silent)  -- This will load in the new binary
   @readcache  -- This will read in all the .txt file changes


13.2. Daily Backups for RhostMUSH
=================================

Make SURE YOU RUN DAILY Backups.  Rhost is very stable, but things
outside the mush can damage the game. paranoia is fine, especially
when they really are out to get you.  TO make the backups, do the
following:

    @dump/flat      -- This makes a flatfile dump of the main database.  You want to run this daily.
    wmail/unload    -- This makes a flatfile dump of the mail database.  You want to run this daily.
    @areg/unload    -- Only worry about this if you are using auto-registration emailing.  Few do.
    newsdb/unload   -- Only worry if you use the hardcoded bbs system.  Most don't use it.


   Backups are already handled and integrated with a script 'backup_flat.sh'.
   If you wish to customize this, feel free.  Again, it is well documented and
   just require changing settings at the top of this script.

   By default, it does 7 contiguous backups.  You may increase or decrease
   this value to any value you want.

   It will, by default, backup all your txt/\*.txt files, your netrhost.conf
   file, your netrhost.db.flat (mush db) file, your RhostMUSH.dump.\*
   (mail db) files, your RhostMUSH.news.\* (internal news/bbs db -- if used),
   your RhostMUSH.areg.\* (the autoregistration db -- if used), and any sqlite
   database you currently may be using which are OPTIONALLY backed up if you
   remove the '#' from before it.

   The backup script also will optionally rcp/scp, ftp, or mail any backups
   you want to a remote destination.  Be forewarned, the backup files can
   potentially get rather large for larger games, even compressed.  The
   average size for these files will be 1-5MB.  It could potentially get
   over 10-20MB in size for excessively large games, so plan accordingly.

   Be aware that the backup system will NOT make successful backups if you
   run out of disk space.  This includes actually running out of disk space
   or running out of disk quota.  There is a mechanism inside the backup
   script to specify an email address that you wish to get alerts from
   in these instances.  I recommend using it.

   If you make changes to your backup_flat.sh script with an already
   active and running mush and wish to just restart the backup procedure
   just issue::

      ./backup_restart.sh


13.3. Signals and why you need them for control
===============================================

Rhost by default allows signals at the shell to handle various
processes in-game.

The following signals are useful.


13.3.1. TERM (kill -TERM or kill -15)
-------------------------------------

   * This will immediately terminate the mush, dumping a special
     flatfile called netrhost.db.TERM and scramming the db in question
     by force-closing it without any writes.  A TERM is the effort for
     the mush to shut down the mush as fast as possible to avoid any
     db corruption if possible since a TERM signal is common during a
     server shutdown, so time is paramount.


13.3.2. USR1 (kill -USR1)
-------------------------

   * This by default issues a reboot on the server.  This is a special
     parameter because this can actually be changed in-game to do any
     number of other things.  Please refer to the RhostMUSH running in
     question if this is the default behavior or if the method for
     USR1 is doing something else.


13.3.3. USR2 (kill -USR2)
-------------------------

   * This will shutdown (cleanly) the mush.  This behaves as if you
     issued a @shutdown from within the game, and follows all proper
     procedure in bringing the game down cleanly and safely.  This
     shoudl be used when doing maintenance on the game or if you need
     to bring it down from the shell.


13.3.4. KILL (kill -KILL or kill -9)
------------------------------------

   * This signal can not be caught and will immediately terminate the
     game without any safty to the database at all.  Short of
     something horribly wrong going on, this should never be used to
     bring down your mush. Doing so will almost certainly corrupt your
     databases (ALL OF THEM) that are open, including but not limited
     to your main database, your mail database, your autoregistration
     database, and so forth.  So if you do this, plan to do some
     database recovery from your flat files. Also, when you bring down
     a mush in this manner, you need to issue Startmush -f to bring it
     back up.


13.4. Shutting down RhostMUSH gracefully
========================================


13.4.1. RhostMUSH has many ways to shutdown the game cleanly
------------------------------------------------------------

1. Log into the mush and issue @shutdown

2. Issue a kill -USR2 to the mush which issues an emergency @shutdown

3. Issue a kill -TERM to the mush which issues an emergency abort and
   clean shutdown.

4. Through the Autoshutdown script

Warning:

  Never kill -9 RhostMUSHUnder NO CIRCUMSTANCES should you kill -9
  your mush unless you don't care for the database.  The reason is if
  the mush happens to be saving, in any method, to the database,
  especially a QDBM database, you will likely have just corrupted your
  database, so pull out a flatfile to recover.Sadly, this also may
  occur if the server hosting you takes a nose-dive in the middle of a
  db write.  Rhost can recover corruption in-game while up, but if it
  bombs in the middle of a write, all bets are off. :)


13.4.2. Autoshutdown script
---------------------------

The makefile will 'make' the program that will STOP the mush. Please
tweek 'autolog.h' with the proper parameters.

The 'startup.sh' will START the mush.

Both of these are intended to be used for automations (automated
processes) like your rc.local file and/or startup scripts when you
bring your server up.


13.5. Network Port redirector
=============================

This is a port redirector incase you decide to move your mush to a new
site/port.  To use, first, compile the code.  To do this you would
type the following:

   cc portmsg.c -o portmsg

if 'cc' is not defined, try the following:

   gcc portmsg.c -o portmsg

Once compiled, you would then modify the file 'file' to describe the
mush, what was done, where it's moved to, then specify the IP address
and the PORT where specified.

To launch the application, you would then type:

   ./portmsg file <port>

Where <port> is the port where the mush used to run at.


13.6. Using the built-in cron system for periodically running commands
======================================================================


13.6.1. Syntax for rhost.cron
-----------------------------

The rhost.cron file will be in the syntax as follows:

   username (or dbref#)
   command1;command2;command3;...;commandN
   command
   command
   command1;command2;command3;...;commandN

You can have commands strung together with a semicolon on the same
line.  This counts as a single line of input. You can have at most 20
lines of commands after the target you wish to execute the commands
as.  The target may be a player name OR a dbref# of any valid dbref#
within the game.  Invalid targets will abort the cron process. Non-
printable characters in the cron file will abort the process.  Any
aborts or warnings will be logged in the netrhost.gamelog.

Here is a working example of the code cron file. This example will
perform dumps of the mush.


13.6.1.1. Example syntaxt for rhost.cron
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   #1
   @dump/flat; @@ dump the main game database to flatfile
   wmail/unload; @@ dump the mail database to flatfile
   @areg/unload; @@ dump the registration database to flatfile
   newsdb/unload; @@ dump the news bbs database to flatfile


13.7. The following scripts are used in the game directory
==========================================================

   Startmush               -- used to Start up the mush
   backup_flat.sh          -- Used to run backups with @dump/flat within the game (Started with Startmush automatically)
   backup_restart.sh       -- Restart the backup_flat.sh if changes are done
   compress_logs.sh        -- Compress logs in 'oldlogs'.  Ran with Startmush
   findit.sh               -- Internal script used to check for flatfile validity
   mailhide.sh             -- Wrapper to hide from address using the 'mail' progam
   minimal.sh              -- Auto-load the minimal db into the mush
   proxysnarf.sha          -- Internal script for the tor_pull.sh tor proxy blacklist
   tor_pullit.sh           -- Internal script for the tor_pull.sh for proxy blacklist
   recovery.sh             -- If your db is corrupt, run this to auto-revert to an earlier flatfile
   tor_pull.sh             -- Create a blacklist.txt file that can be loaded via the internal @blacklist command for proxy handling


13.8. Textfiles for RhostMUSH
=============================

Todo: Notate which need mkindx

   areghost.txt           - file player gets when autoregistration on registered host.
   autoreg.txt            - file player gets when autoregistration on non-registered host.
   autoreg_include.txt    - file player receives in email when they autoregister attached to login/passwd
   badsite.txt            - file player gets when site is not allowed.
   connect.txt            - file player gets when connect
   create_reg.txt         - file player gets when their site is register and they can't create.
   doorconf.txt           - file that is searched for information regarding @door.
   down.txt               - file player gets when the mush has logins disabled (@disable login)
   error.txt              - the 'Huh? (type help for help)' messages.
   full.txt               - file player gets when the mush can't have any more players.
   guest.txt              - file player gets when they connect as a guest.
   help.txt               - your help file
   motd.txt               - your motd file
   news.txt               - your news file
   newuser.txt            - file newly created players get when they connect for the first time.
   noguest.txt            - file player gets when they are not allowed to connect to a guest.
   plushelp.txt           - optional +help file. (needs compile time option)
   quit.txt               - file player gets when they disconnect.
   register.txt           - file player gets when the site is locked down for registration.
   wizhelp.txt            - your wizhelp file
   wizmotd.txt            - your wiz motd file


13.8.1. Textfile Frequently Asked Questions
-------------------------------------------

Q:  How do I put color in these files?

A1: Look at ansi.h and you need to put the literal ASCII codes.  They
will look like: ^[[0m (for ANSI_NORMAL).  That's <ESC>[

A2: You can enable ansi_txtfiles then use %c (or %x/%m) encoding for
ansi, however you compiled your Rhost.

Q:  I want to design my own txt files to read in the mush.

A:  Easy.  Design them like help.txt would be set up, mkindx the file,
then you can access it via @dynhelp online.

Q:  Do I have to mkindx these files whenever I make changes?

A:  Only the ones that have '& ' index. (help.txt, wizhelp.txt,
news.txt, etc)

Q:  Do I have to @readcache in the game whenever I make a change?

A:  Only when you modify any of the files listed in README.TXTFILES.
Not the ones you use with @dynhelp.

Q:  Can't I just make code in the mush that then is used for these
silly txt files?

A:  Absolutely.  Check 'wizhelp file_object'.

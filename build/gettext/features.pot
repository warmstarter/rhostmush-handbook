# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, wstarter
# This file is distributed under the same license as the RhostMUSH Handbook package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RhostMUSH Handbook \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-07 20:41-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/features.rst:3
msgid "What RhostMUSH is about and what's so great about RhostMUSH"
msgstr ""

#: ../../source/features.rst:5
msgid "RhostMUSH was founded in 1989, originally by Natasha Davis (Nyctasia) and as a branch from the original release of TinyMUD code.  It was her desire to make a game that was flexible, with multiple levels of progression and highly customizeable.  She lost time and interest and passed the game to Steve Shivers (Seawolf), Mike McDermott (Thorin), and Jace Hoppel (Ashen-Shugar)"
msgstr ""

#: ../../source/features.rst:11
msgid "Through their work, the stability improved, we fixed it to be multi-platform and as bug free as we could possibly make it.  We introduced several methods both in game and in source that allowed consistent memory bounds checking and various alerts for any mischievous naughtyness in-game or possibilities of any hacks, patches, or alterations in the code causing leaks or issues."
msgstr ""

#: ../../source/features.rst:17
msgid "While not perfect, it has allowed us to have an absolutely outstanding turn around for any bugs sent our way, which anyone who uses RhostMUSH will attest to."
msgstr ""

#: ../../source/features.rst:21
msgid "Over the years, others have joined the RhostMUSH team, including Ambrosia (who is the current dev lead), Lensman, Kage (who kindly provided the UTF8/unicode port), Jeff/Loki, Rook, Noltar, and Odin."
msgstr ""

#: ../../source/features.rst:25
msgid "We also have had hundreds of people who have offered (and provided) help, patches, suggestions, bug fixes, and alternations all on their own and every single one will have had their name mentioned in the RHOST.CHANGES file in the readme directory.  It's far too large to have in the online help files."
msgstr ""

#: ../../source/features.rst:31
msgid "RhostMUSH today provides an amazing tool that allows nearly entire customization in-game of every single feature available in Rhost without having the requirement to modify the hardcode.  This includes but is not limited to:"
msgstr ""

#: ../../source/features.rst:37
msgid "Recycle bin"
msgstr ""

#: ../../source/features.rst:39
msgid "Yup, you guessed it.  RhostMUSH has a windows like recycle bin. This means the objects you @nuke and @destroy become 'destroyed' but not recycled until they are @purged.  If you use the Myrddin CRON in the Mushcode directory, it by default sets up a job to purge anything over 30 days old, which should be more than sufficient for any needs.  The goodness of this?  You can recover nuked things from any period of time, as long as they were not @purged first. Commands: @purge, @nuke, @destroy, @recover, @reclist"
msgstr ""

#: ../../source/features.rst:50
msgid "@snapshot"
msgstr ""

#: ../../source/features.rst:52
msgid "Live image snapshots to unload or load to and from disk.  As many snapshots as you want, as often as you want. It essentially does a flatfile dump of a dbref#.  Great for backups or cross-Rhost portability. Command: @snapshot"
msgstr ""

#: ../../source/features.rst:59
msgid "Wizard and Immortals by default"
msgstr ""

#: ../../source/features.rst:61
msgid "are spoofable.  Meaning all their @pemits by default will not trigger NOSPOOF.  If you do not wish this, set the SPOOF flag this applies to anyone below their level."
msgstr ""

#: ../../source/features.rst:64
msgid "override all locks.  There's two flags to disable this. NO_OVERRIDE to stop overriding all locks (including attribs) and NO_USELOCK to just stop overriding uselocks. This applies to anything their level and lower."
msgstr ""

#: ../../source/features.rst:68
msgid "optionally cloak from all non-immortals/God player. This can be highly abused if not careful and there is a @depower to disable cloaking and/or dark that will disable this."
msgstr ""

#: ../../source/features.rst:72
msgid "immortals can optionally supercloak from even wizards. this can not be disabled, and you must consider that immortals should be treated as the God player (#1) since they are effectively #1 in nearly every way."
msgstr ""

#: ../../source/features.rst:78
msgid "Titles and Captions to a player's name"
msgstr ""

#: ../../source/features.rst:80
msgid "@caption and @titlecaption"
msgstr ""

#: ../../source/features.rst:83
msgid "Have an alternate name with locks for NPC obfuscation"
msgstr ""

#: ../../source/features.rst:85
msgid "@altname @lock/altname"
msgstr ""

#: ../../source/features.rst:89
msgid "Have multiple player aliases"
msgstr ""

#: ../../source/features.rst:91
msgid "As well as a method to reserve player names per player w/o revealing who has what name. @protect"
msgstr ""

#: ../../source/features.rst:97
msgid "Actively control how dark works both game-wide and individually"
msgstr ""

#: ../../source/features.rst:99
msgid "@depower dark @admin allow_whodark, sweep_dark, command_dark, lcon_checks_dark,"
msgstr ""

#: ../../source/features.rst:101
msgid "secure_dark, see_owned_dark, idle_wiz_dark, player_dark"
msgstr ""

#: ../../source/features.rst:102
msgid "@toggle snuffdark @flagdef to redefine who and what can set the DARK flag"
msgstr ""

#: ../../source/features.rst:106
msgid "Make config file changes in-game without having to reboot or have shell access"
msgstr ""

#: ../../source/features.rst:108
msgid "@admin admin_object"
msgstr ""

#: ../../source/features.rst:111
msgid "Execute any binary or script as a localized function"
msgstr ""

#: ../../source/features.rst:113
msgid "EXECSCRIPT (power), SIDEFX (flag)"
msgstr ""

#: ../../source/features.rst:116
msgid "Customized percent substitutions (like %n, %#, etc)"
msgstr ""

#: ../../source/features.rst:118
msgid "@admin sub_include, @hook"
msgstr ""

#: ../../source/features.rst:121
msgid "Redefine percent substitutions (like %n, %#, etc)"
msgstr ""

#: ../../source/features.rst:123
msgid "@admin sub_override, @hook"
msgstr ""

#: ../../source/features.rst:126
msgid "Localize command and function overrides in a sandbox"
msgstr ""

#: ../../source/features.rst:128
msgid "@icmd, @lfunction, subeval(), sandbox()"
msgstr ""

#: ../../source/features.rst:131
msgid "Multiple Zones"
msgstr ""

#: ../../source/features.rst:133
msgid "Have multiple zones which can optionally belong to multiple targets (multiple zones per target allowable!) @zone, zones, lzone(), zonecmd()"
msgstr ""

#: ../../source/features.rst:138
msgid "Optionally control, enable, or disable sideeffects"
msgstr ""

#: ../../source/features.rst:140
msgid "@admin sideeffects, SIDEFX (flag)"
msgstr ""

#: ../../source/features.rst:143
msgid "Have 31 cross-interactive realities for locations"
msgstr ""

#: ../../source/features.rst:145
msgid "This works as a truly independant and self-contained environment. A room can have 31 'layers', each 'layer' is a reality in the same physical space.  These layers can work independently or allow interaction with other layers for vast customization. This affects all methods within the game including all matching, looking, $commands, listens, movement, interaction, pretty much every single aspect of mushing. REALITY LEVELS"
msgstr ""

#: ../../source/features.rst:155
msgid "Override any command with softcode"
msgstr ""

#: ../../source/features.rst:157
msgid "@admin access (check ignore) Master room $commands to then override the hardcode"
msgstr ""

#: ../../source/features.rst:161
msgid "The abilility to raise or lower permissions on the various"
msgstr ""

#: ../../source/features.rst:163
msgid "staff bitlevels for each player. @power, @depower, TOGGLES, FLAGS"
msgstr ""

#: ../../source/features.rst:167
msgid "Customize new commands on the connect screen"
msgstr ""

#: ../../source/features.rst:169
msgid "@admin file_object2"
msgstr ""

#: ../../source/features.rst:172
msgid "Softcode any txt file (like connect.txt)"
msgstr ""

#: ../../source/features.rst:174
msgid "and have it evaluate in-game.  It evaluates as the object it is on. @admin file_object"
msgstr ""

#: ../../source/features.rst:179
msgid "Advanced tracing methods for debugging your code including labels!"
msgstr ""

#: ../../source/features.rst:181
msgid "Commands: @label Functions: parenmatch(), trace() Toggles: CPUTIME Flags: TRACE Attributes: TRACE_GREP, TRACE, TRACE_COLOR, TRACE_COLOR_<attr> Substitutions: %_"
msgstr ""

#: ../../source/features.rst:189
msgid "Built in pretty-printing of attributes with the parenmatch() function"
msgstr ""

#: ../../source/features.rst:191
msgid "Example Code Output : @emit [add(1,sub(2,div(3,4)),5)];@emit [extract(get(me/foo),3,1)"
msgstr ""

#: ../../source/features.rst:194
msgid "Example Pretty Print: @emit ["
msgstr ""

#: ../../source/features.rst:200
msgid "add("
msgstr ""

#: ../../source/features.rst:199
msgid "1,sub("
msgstr ""

#: ../../source/features.rst:198
msgid "2,div("
msgstr ""

#: ../../source/features.rst:199
msgid "3,4"
msgstr ""

#: ../../source/features.rst:200
#: ../../source/features.rst:202
#: ../../source/features.rst:208
msgid ")"
msgstr ""

#: ../../source/features.rst:201
msgid "),5"
msgstr ""

#: ../../source/features.rst:207
msgid "];@emit ["
msgstr ""

#: ../../source/features.rst:206
msgid "extract("
msgstr ""

#: ../../source/features.rst:205
msgid "get("
msgstr ""

#: ../../source/features.rst:206
msgid "me/foo"
msgstr ""

#: ../../source/features.rst:207
msgid "),3,1"
msgstr ""

#: ../../source/features.rst:209
msgid "]"
msgstr ""

#: ../../source/features.rst:213
msgid "Plenty more not mentioned!"
msgstr ""

#: ../../source/features.rst:215
msgid "The flexibility to customize RhostMUSH is what is most daunting. Don't fret, you don't need to do it to run RhostMUSH successfully. In fact, the default configuration is mostly compatible with MUSH and will work correctly out of the box for most needs.  For those wishing to play, of course the sky is the limit of what you want to do."
msgstr ""

#: ../../source/features.rst:223
msgid "Advanced features of RhostMUSH"
msgstr ""

#: ../../source/features.rst:226
msgid "Debugging/Tracing"
msgstr ""

#: ../../source/features.rst:228
msgid "Debugging in Rhost allows for advanced features like expressing where and when to do debugging via a trace() function, with toggled labels, and the ability to grep content from trace output.  There also exists features to color-match parenthesis, braces, and brackets in-game as well as pretty print the output of commands and functions. - help trace - help %_ - help trace() - help parenmatch() - help parenstr()"
msgstr ""

#: ../../source/features.rst:240
msgid "Zoning"
msgstr ""

#: ../../source/features.rst:242
msgid "Zoning in Rhost allows the same functionality of Penn and MUX, though the syntax is different.  It also allows the ability to belong to multiple zones at the same time and take advantage of mulitple zones at once. This allows for increased levels of complexity. - help zones - help @zone - help zonecmd() - help lzone() - help @Lock type twink - help @lock type zone"
msgstr ""

#: ../../source/features.rst:254
msgid "Reality Levels"
msgstr ""

#: ../../source/features.rst:256
msgid "Reality levels allows for the ability to have a sandboxed 'existance' in each physical location across the entirity of the mush.  Each reality is its own sandbox and can either stand alone or work dependently with other realities.  A person can belong to multiple realities at the same time, and realities is geared to a method for send and receive.  Each 'method' requires to be in the given reality to affect it. - help reality levels - wizhelp chkreality - wizhelp reaity level - help @Lock type user"
msgstr ""

#: ../../source/features.rst:269
msgid "Function and Command Overriding"
msgstr ""

#: ../../source/features.rst:271
msgid "Functions and commands can both be overridden with softcode.  To override a hardcoded command you first set the command ignore. There are various levels of ignoring so that you could have it ignored from mortals but have it executed fine for non-mortals. This allows you to use the actual physical command within a softcode override.  You may also use @Hook for altering how a command works.   Functions are overridden by setting the function in question ignored, then writing a softcode alternative that is then executed and fetched appropriately."
msgstr ""

#: ../../source/features.rst:284
msgid "Commands:"
msgstr ""

#: ../../source/features.rst:281
#: ../../source/features.rst:287
msgid "wizhelp @admin"
msgstr ""

#: ../../source/features.rst:282
msgid "wizhelp access"
msgstr ""

#: ../../source/features.rst:283
msgid "wizhelp permissions"
msgstr ""

#: ../../source/features.rst:284
msgid "wizhelp @Hook"
msgstr ""

#: ../../source/features.rst:285
msgid "wizhelp hook setup"
msgstr ""

#: ../../source/features.rst:291
msgid "Functions:"
msgstr ""

#: ../../source/features.rst:288
msgid "wizhelp function_access"
msgstr ""

#: ../../source/features.rst:289
msgid "wizhelp @function"
msgstr ""

#: ../../source/features.rst:290
msgid "help @lfunction"
msgstr ""

#: ../../source/features.rst:291
msgid "wizhelp bypass()"
msgstr ""

#: ../../source/features.rst:294
msgid "The Recycle Bin"
msgstr ""

#: ../../source/features.rst:296
msgid "Rhost has a recycle bin that works a bit like a windows recycle bin. Whenever you destroy something within the mush, it is stacked onto the recycle bin and marked unavailable within the mush.  This marks the dbref# as garbage in any sense of the word.  However, the object is not able to be reused until purged.  Once purged, it is put onto a free list that can then be reassigned to a new object. - wizhelp @nuke - wizhelp @destroy - wizhelp @toad - wizhelp @turtle - wizhelp @purge - wizhelp @recover - wizhelp @reclist"
msgstr ""

#: ../../source/features.rst:312
msgid "Percent Substitution Adding/Overriding"
msgstr ""

#: ../../source/features.rst:314
msgid "Rhost allows the ability to both override percent substitutions as well as creating new ones.  This is done with @Hook and admin params and issues softcode overriding.  Due to how it is evaluated there is no risk of recursion. - wizhelp @hook - wizhelp hook_cmd - wizhelp sub_include - wizhelp sub_override"
msgstr ""

#: ../../source/features.rst:324
msgid "Hooking"
msgstr ""

#: ../../source/features.rst:326
msgid "Hooking allows you to have advanced methods to manipulate commands including adding customized switches to them via softcode. - wizhelp @hook - wizhelp hook_cmd - wizhelp hook_obj - wizhelp hook setup"
msgstr ""

#: ../../source/features.rst:334
msgid "Command based uselocks"
msgstr ""

#: ../../source/features.rst:336
msgid "This allows you to have unique uselocks per $command.  This is done through the use of the USELOCK attribute flag, then you set up a matching attribute name with a prefix of a ~ to specify how the lock is to be evaluated.  This works in the same manner as an evaluation lock.  To be able to use the USELOCK attribute flag you must be empowered to do so with the 'ATRUSE' @toggle.  You may also use the secure_atruselock config parameter to globally enable this and not require the toggle to be set. - wizhelp atruse toggle - help attribute uselocks"
msgstr ""

#: ../../source/features.rst:348
msgid "Differentating between command and listen locks"
msgstr ""

#: ../../source/features.rst:350
msgid "We distinguish between commands and listens with uselocks by passing an optional argument to all locks that are uselocks.  This optional argument is 0 for a default lock, 1 for a command lock and 2 for a listen lock. - help @lock type uselock"
msgstr ""

#: ../../source/features.rst:357
msgid "Wizard auto-overiding and how to disable it"
msgstr ""

#: ../../source/features.rst:359
msgid "By default wizards override all locks, including attribute locks, can see all dark exits, and bypass pagelocks.  This can be troublesome, and even abusive, so there's ways to disable this. - wizhelp @depower (for those abusing it) - wizhelp no_override (disable overiding locks) - wizhelp no_uselock (disable just uselock overriding) - wizhelp pagelock toggle (disable pagelock overriding)"
msgstr ""

#: ../../source/features.rst:368
msgid "Advanced FLAG and TOGGLE control"
msgstr ""

#: ../../source/features.rst:370
msgid "Flags and toggles can be controlled to have multiple permissions and enable/disable targets of how the flags are allowed to be set.  This is done through commands in-game or you can use conf file options to do so. - wizhelp @flagdef - wizhelp @toggledef ------- @admin @flagdef alternatives - wizhelp flag_access_set - wizhelp flag_access_unset - wizhelp flag_access_see - wizhelp flag_access_type ------- @admin @toggledef alternatives - wizhelp toggle_access_set - wizhelp toggle_access_unset - wizhelp toggle_access_see - wizhelp toggle_access_type"
msgstr ""

#: ../../source/features.rst:389
msgid "Advanced site control"
msgstr ""

#: ../../source/features.rst:391
msgid "We allow advanced site control by not only blocking various sites but we can specify how many times a player can be connected at the same time as well as how many times sites are able to connect at the same time.  This is done through normal site manipulation. - wizhelp forbid_host - wizhelp register_host - wizhelp noguest_host - wizhelp @list (site option)"
msgstr ""

#: ../../source/features.rst:401
msgid "Auto-Registration"
msgstr ""

#: ../../source/features.rst:403
msgid "Autoregistration is the method that a player can auto-register by providing their email on the connect screen.  It will email them a password and an optional document that the administrator provides.  This is well described in the wizhelp. - wizhelp autoregistration"
msgstr ""

#: ../../source/features.rst:410
msgid "Which bit level is best?"
msgstr ""

#: ../../source/features.rst:412
msgid "This is something that should be discussed by you and the staff of your game.  As a good rule of thumb, only provide the bitlevel that is required to do the job.  Too much power is always risky. In essence, each tier of bit can do everything the previous bitlevel can do, and then additional stuff on top of it.  The highest bitlevel is #1 itself, being bitlevel 7.  Then immortal, which should be considered the #1 character in most cases and is bitlevel 6.  Then the royalty character, which is equal to wizard on penn, mux, or other codebases.  For most things, this is the bitlevel you want to assign players.  The exception will likely be game owners or people who control the master room code."
msgstr ""

#: ../../source/features.rst:424
msgid "There's a bunch of readme files and online wizhelp that goes into detail of the various bitlevels and what each can do. - XV.   Multi-tiered bitlevel systems - wizhelp control"
msgstr ""

#: ../../source/features.rst:430
msgid "What are the limits for size/growth for RhostMUSH?"
msgstr ""

#: ../../source/features.rst:432
msgid "While using QDBM, there's really no set limits for most things. The limits that we have are as followed: LBUF - 64K.  It is recommended to only use 32K as there is some"
msgstr ""

#: ../../source/features.rst:435
msgid "issues with networking with 64K lbufs."
msgstr ""

#: ../../source/features.rst:436
#: ../../source/features.rst:439
msgid "Compile time option with the menu configurator"
msgstr ""

#: ../../source/features.rst:439
msgid "SBUF - 64 characters (if configured -- it's suggested you do)."
msgstr ""

#: ../../source/features.rst:441
msgid "MBUF - 200 characters.  Not able to be changed."
msgstr ""

#: ../../source/features.rst:449
msgid "MAX CONNECTIONS - Limited by the total number of open sockets"
msgstr ""

#: ../../source/features.rst:444
msgid "and descriptors on the account and server running on. There are various tools to limit connection DoS attemps and other such nastiness.  This is well documented in the netrhost.conf file."
msgstr ""

#: ../../source/features.rst:448
msgid "wizhelp max_players"
msgstr ""

#: ../../source/features.rst:449
#: ../../source/features.rst:462
msgid "~/game/netrhost.conf"
msgstr ""

#: ../../source/features.rst:452
msgid "MEMORY - no limit.  Generally runs between 8-50M depending"
msgstr ""

#: ../../source/features.rst:452
msgid "on the size of the mush and the LBUF size specified."
msgstr ""

#: ../../source/features.rst:462
msgid "CPU  - no limit, but has built in cpu abort in code.  The"
msgstr ""

#: ../../source/features.rst:455
msgid "netrhost.conf file documents this well for customizing. the default values are usually good enough."
msgstr ""

#: ../../source/features.rst:457
msgid "wizhelp max_cpu_cycles"
msgstr ""

#: ../../source/features.rst:458
msgid "wizhelp cpuintervalchk"
msgstr ""

#: ../../source/features.rst:459
msgid "wizhelp cputimechk"
msgstr ""

#: ../../source/features.rst:460
msgid "wizhelp cpu_secure_lvl"
msgstr ""

#: ../../source/features.rst:461
msgid "wizhelp heavy_cpu_max"
msgstr ""

#: ../../source/features.rst:466
msgid "DISK - no limit.  Generally will be 75-200M depending on size,"
msgstr ""

#: ../../source/features.rst:465
msgid "number of backups and if you leave your compiled object files in."
msgstr ""

#: ../../source/features.rst:477
msgid "DB Size - (20000 default) There is no limit on the number of"
msgstr ""

#: ../../source/features.rst:469
msgid "objects the db can have.  By default it's soft limited to 20K objects, which can be changed by a netrhost.conf file change.  We have had this up past 1.5 million objects, and other than a second or two of lag for complex searches we had no real problem."
msgstr ""

#: ../../source/features.rst:474
msgid "wizhelp maximum_size"
msgstr ""

#: ../../source/features.rst:475
msgid "help @quota"
msgstr ""

#: ../../source/features.rst:476
msgid "wizhelp @quota"
msgstr ""

#: ../../source/features.rst:477
#: ../../source/features.rst:483
msgid "wizhelp @limit"
msgstr ""

#: ../../source/features.rst:484
msgid "Attribute Size - 10K as a hard limit.  750 as a soft limit."
msgstr ""

#: ../../source/features.rst:480
msgid "You can increase this but it can't exceed 10000 attributes.  This is to avoid DoS style attacks."
msgstr ""

#: ../../source/features.rst:482
msgid "wizhelp vlimit"
msgstr ""

#: ../../source/features.rst:487
msgid "Sqlite and MySQL/Maria setup and why use it?"
msgstr ""

#: ../../source/features.rst:489
msgid "Both of these can be configured separately or conjointly to run in parallel.  This can be done through the RhostMUSH configuration utility.  You generally want to use SQL for external data storage or accessing a central repository of data to share between multiple projects.  Like, for example between a wiki, a forum, and the mush."
msgstr ""

#: ../../source/features.rst:498
msgid "Executing outside scripts and binaries within RhostMUSH"
msgstr ""

#: ../../source/features.rst:500
msgid "Rhost has execscript() which allows executing outside binaries or scripts as a native function.  All effort has been done to avoid any type of DoS based issue or hang by doing this, however the guidelines presented should be followed before doing so. - wizhelp execscript - wizhelp power execscript - help sidefx - wizhelp writing scripts"
msgstr ""

#: ../../source/features.rst:510
msgid "Pulling external data into RhostMUSH"
msgstr ""

#: ../../source/features.rst:512
msgid "You are capable of pulling external data in to RhostMUSH using several methods.  These are by using:"
msgstr ""

#: ../../source/features.rst:514
msgid "SQL (mysql or sqlite)"
msgstr ""

#: ../../source/features.rst:515
msgid "execscript"
msgstr ""

#: ../../source/features.rst:516
msgid "cron (wizhelp signal)"
msgstr ""

#: ../../source/features.rst:519
msgid "Integrating a unix cron right into RhostMUSH"
msgstr ""

#: ../../source/features.rst:521
msgid "The unix cron can be used to integrate with Rhost fairly easilly by use of signals.  By using SIGUSR1 you can specify Rhost to execute code in-game, which part of that could be to pick up a pre-designed list of commands that the unix cron has set up. - wizhelp signal - wizhelp signal_cron"
msgstr ""

#: ../../source/features.rst:530
msgid "Signal handling, how it works, and when and why use it"
msgstr ""

#: ../../source/features.rst:532
msgid "Signals are used to do different things for the mush.  By default, the following signals are recognized by the mush and will do the following as defaults. - SIGUSR1 - will do a reboot of the mush.  This is also customizable"
msgstr ""

#: ../../source/features.rst:536
msgid "so that you can have it execute code in-mush if you want."
msgstr ""

#: ../../source/features.rst:537
msgid "SIGUSR2 - will do a clean shutdown of the mush."
msgstr ""

#: ../../source/features.rst:541
msgid "SIGTERM - will immediately scram the mush as cleanly and fast"
msgstr ""

#: ../../source/features.rst:539
msgid "as possible.  It will avoid dumping anything to the database to speed up scramming, but write a TERM flat file to be loaded in if corruption."
msgstr ""

#: ../../source/features.rst:544
msgid "Setting up global parents, global @parents, global attribute formatting, and other global setups"
msgstr ""

#: ../../source/features.rst:546
msgid "Global parents are useful when you want to have a global 'parent' without actually having a defined '@parent'.  It always will be the highest tier in a lookup.  The way lookups will go will be:"
msgstr ""

#: ../../source/features.rst:549
msgid "self->@parent(s)->@zone(s)->GlobalParent"
msgstr ""

#: ../../source/features.rst:551
#: ../../source/features.rst:567
#: ../../source/features.rst:583
msgid "The type of the parent does not have to match the target."
msgstr ""

#: ../../source/features.rst:553
msgid "These global parents can be defined either by using a global generic parent or by using the type.  If a type is specified it overrides the generic.  The following parameters are used: - global_parent_obj     - The generic global parent (if defined) - global_parent_room    - The room global parent - global_parent_exit    - The exit global parent - global_parent_thing   - The thing global parent - global_parent_player  - The player global parent"
msgstr ""

#: ../../source/features.rst:562
msgid "Global @parents are different than global parents in that any new item of similar type that is created is automatically assigned this physical @parent.  It's obviously more limiting since it sets the literal physical parent defined."
msgstr ""

#: ../../source/features.rst:569
msgid "The following parameters are used: - room_parent           - The target that new rooms are @parented - exit_parent           - The target that new exits are @parented - thing_parent          - The target that new things are @parented - player_parent         - The target that new players are @parented"
msgstr ""

#: ../../source/features.rst:575
msgid "Global attribute formatting is a method define a wrapper, of sorts, where attributes like @desc, @odesc, @succ, and anything similar can be processed through this.  All attributes will be either &FORMAT<attribute> or &<attribute>FORMAT based on the current configuration.  Example: &FORMATDESC or &DESCFORMAT localy, or use the following global objects for global formatting.  Local formatting has priority."
msgstr ""

#: ../../source/features.rst:585
msgid "room_attr_default     - Target for room formatting"
msgstr ""

#: ../../source/features.rst:586
msgid "exit_attr_default     - Target for exit formatting"
msgstr ""

#: ../../source/features.rst:587
msgid "thing_attr_default    - Target for thing formatting"
msgstr ""

#: ../../source/features.rst:588
msgid "player_attr_default   - Target for player formatting"
msgstr ""

#: ../../source/features.rst:592
msgid "RhostMUSH limitations and how to get around them"
msgstr ""

#: ../../source/features.rst:594
msgid "While Rhost is insanely configurable and quite powerful, there are limitations that exist within it."
msgstr ""

#: ../../source/features.rst:597
msgid "Function invocations.  Sometimes you will hit a ceiling on evaluation. You may want to tweak values to allow more functions or commands to execute.  The following controls that: - function_invocation_limit [25000 default] - specifies the total"
msgstr ""

#: ../../source/features.rst:601
msgid "functions you can execute per command."
msgstr ""

#: ../../source/features.rst:604
msgid "function_recursion_limit [50] - specifies the total times a"
msgstr ""

#: ../../source/features.rst:603
msgid "function can call itself over and over.  Rarely should this be increased and doing so can effect your stack depth."
msgstr ""

#: ../../source/features.rst:606
msgid "Command queue limits.  Sometimes you want more to be queued up for players or wizards. - player_queue_limit  - Max number of entries a player can queue - wizard_queue_limit  - Max number of entries a wizard can queue"
msgstr ""

#: ../../source/features.rst:611
msgid "@limit is a wonderful way to lock down limitations per player or global.  Lots of power is available here. - @limit - vattr_limit_checkwiz - Enable @limit checks for wizards - wizmax_vattr_limit   - Set wizard global VATTR limits - wizmax_dest_limit    - Set wizard global @destroy limits - max_vattr_limit      - Set player global VATTR limits - max_dest_limit       - Set player global @destroy limits"
msgstr ""

#: ../../source/features.rst:620
msgid "Lots of trace output can be cut off.  You can modify this with: - trace_output_limit   - Set lines of trace output shown"
msgstr ""

#: ../../source/features.rst:623
msgid "To define how many commands a minute a player set SPAMMONITOR can use - spam_limit -- default 120"
msgstr ""

#: ../../source/features.rst:626
msgid "If you examine things and see 'Output cut off' messages, you may want to increase your output limit, funny enough, the name of this is similar - output_limit - You should set this no less than 4 times the current"
msgstr ""

#: ../../source/features.rst:630
msgid "size of your LBUF."
msgstr ""

#: ../../source/features.rst:632
msgid "Attributes names can not exceed 64 characters.  Sorry, it's a hard limit"
msgstr ""

#: ../../source/features.rst:634
msgid "Sometime you may find a single \\ may not work for an escape.  You can in most cases use a % instead or double escape the \\ to make it work. Also look at lit() as a solution."
msgstr ""

#: ../../source/features.rst:640
msgid "Things other mushes can do that Rhost can not and how to emulate it"
msgstr ""

#: ../../source/features.rst:643
msgid "PennMUSH"
msgstr ""

#: ../../source/features.rst:645
msgid "Attribute trees.  These are emulated as a base set and can be duplicated enough to at least port code."
msgstr ""

#: ../../source/features.rst:647
msgid "lsearch() will have to be recoded to search()"
msgstr ""

#: ../../source/features.rst:648
msgid "align() will have to be recoded to printf()"
msgstr ""

#: ../../source/features.rst:649
msgid "Penn allows empty attributes.  Rhost does not.  Work will have to be done to take this into consideration."
msgstr ""

#: ../../source/features.rst:651
msgid "All *val() functions in Penn that are used will have to be remapped to a non-*val() function.  It should be as simple as function_alias to the non-*val.  Example:"
msgstr ""

#: ../../source/features.rst:654
msgid "@admin function_alias=hasattrval hasattr"
msgstr ""

#: ../../source/features.rst:655
msgid "Penn's hardcoded comsystem is emulated with the softcode comsys"
msgstr ""

#: ../../source/features.rst:656
msgid "Penn's @mail system is workable with mail wrappers"
msgstr ""

#: ../../source/features.rst:657
#: ../../source/features.rst:670
msgid "Pueblo is not supported."
msgstr ""

#: ../../source/features.rst:658
msgid "json is not supported."
msgstr ""

#: ../../source/features.rst:659
msgid "ssl is not natively supported (yet), see section XIV"
msgstr ""

#: ../../source/features.rst:660
msgid "This uses @shutdown/restart, Rhost uses @reboot"
msgstr ""

#: ../../source/features.rst:663
msgid "MUX"
msgstr ""

#: ../../source/features.rst:665
msgid "Mux has an async mysql database engine.  This is not possible with Rhost.  You'll have to use the sync method instead."
msgstr ""

#: ../../source/features.rst:667
msgid "UTF8 is supported but internally passed differently."
msgstr ""

#: ../../source/features.rst:668
msgid "Mux's hardcoded comsystem is emulated with the softcode comsys"
msgstr ""

#: ../../source/features.rst:669
msgid "MUX's @mail system is workable with mail wrappers"
msgstr ""

#: ../../source/features.rst:671
msgid "This uses @restart, Rhost uses @reboot"
msgstr ""

#: ../../source/features.rst:674
msgid "Advanced guest setup"
msgstr ""

#: ../../source/features.rst:676
msgid "After you set up your guests, you can set unique names to each guest if you so want after defining the dbref#'s your guests use.  This is done by defining them in the guest_namelist parameter.  You can also increase guests (or decrease them) between 0-31 guests. - wizhelp guest_namelist - wizhelp num_guests"
msgstr ""

#: ../../source/features.rst:684
msgid "Attribute permission masking and the joys of the power behind it"
msgstr ""

#: ../../source/features.rst:686
msgid "Attribute contentlocks can be set up so you can lock the actual content that you can set (or even unset!) into an attribute. The beauty of this is that you can specify case sensitive information, lock different ways contents in attributes are set based on who is setting it, or even on where it's being set. The sky's the limit. - global_attrdefault    - Target for defining content locks"
msgstr ""

#: ../../source/features.rst:696
msgid "The amazing @cluster and what it can do for you"
msgstr ""

#: ../../source/features.rst:698
msgid "Clusters is the way to virtually assign multiple objects into a single physical object.  It essentially chains together two or more objects to share attributes between them, so that any attribute set on any object in that cluster can be set or fetched as if it was a singular entity.  This allows some amazing ability to distribute attribute content or even have a farm of a massive amount of attributes without paying a hefty penalty on object bloat."
msgstr ""

#: ../../source/features.rst:705
msgid "help cluster  -- Gives a fantastic overview of how clusters work."
msgstr ""

#: ../../source/features.rst:708
msgid "What we plan for the future"
msgstr ""

#: ../../source/features.rst:710
msgid "Things to look forward to the future with RhostMUSH. - Full Unicode/UTF8 in Rhost 4.0 - A fully featured tag system in Rhost 4.0 - Built in Python API handler in Rhost 4.0 - Hopefully a built in Ruby and Perl API in Rhost 4.0/4.1 - Cross-Mush execution between mushes in Rhost 4.1 - More as we think about it :)"
msgstr ""

#: ../../source/features.rst:718
msgid "EXT: Additional features not covered otherwise Additional features - +/- 5.4 million years can be utilized with the built in time functions"
msgstr ""

#: ../../source/features.rst:721
msgid "which includes timefmt(), secs(), convtime(), convsecs(), and moon().  Party on!"
msgstr ""

#: ../../source/features.rst:722
msgid "Changing permission levels in the middle of execution for evaluation. * see help on the streval and ueval function"
msgstr ""

#: ../../source/features.rst:724
msgid "Full features in-game customization of near every aspect of the game."
msgstr ""

#: ../../source/features.rst:727
msgid "Random notes and things to know about RhostMUSH"
msgstr ""

#: ../../source/features.rst:729
msgid "Here are some things to know about RhostMUSH and what you may or may not want to do.  Things here are not covered in other documents:"
msgstr ""

#: ../../source/features.rst:732
msgid "Admin toggles to configure the WHO, various things you're used to, etc is in the 'netrhost.conf' file.  descriptions Notes in the autoconf.h file is in the README.AUTOCONF file."
msgstr ""

#: ../../source/features.rst:738
msgid "Note on bits, their levels, and things they do"
msgstr ""

#: ../../source/features.rst:740
msgid "IMMORTAL - They can do anything.  Treat this as #1 and only give to people you trust.  Period.   You don't have to use this bit if you do not want to and just assume #1."
msgstr ""

#: ../../source/features.rst:744
msgid "ROYALTY - Unlike PENN/MUX, this is *not* a sub-wizard, this is a FULL wizard.  Plus, they can do a bit more."
msgstr ""

#: ../../source/features.rst:747
msgid "COUNCILOR - Like royalty on PENN/MUX but they can modify."
msgstr ""

#: ../../source/features.rst:749
msgid "ARCHITECT - Can't do as much as councilor, but lot more than BUILDER."
msgstr ""

#: ../../source/features.rst:751
msgid "GUILDMASTER - Very limited.  Sees dbrief#'s, can ex things their level and lower and @quota players."
msgstr ""

#: ../../source/features.rst:756
msgid "You need to @pcreate your guest characters and set them GUEST"
msgstr ""

#: ../../source/features.rst:758
msgid "It doesn't create them on the fly but we considered this better. You have 31 total you can have.  It defaults to 10 in the netrhost.conf file.  You can rename the guests anything you want, but before you do so, you must add the dbref#'s to the param guest_namelist"
msgstr ""

#: ../../source/features.rst:765
msgid "@powers are INHERITED"
msgstr ""

#: ../../source/features.rst:770
msgid "Therefore, you need power_objects enabled (@admin)"
msgstr ""

#: ../../source/features.rst:768
msgid "to make this work properly for non-plauyers. A power is taken before a bit level ONLY if higher than that bit. Yes, powers are multi-level."
msgstr ""

#: ../../source/features.rst:773
msgid "@depowers are automatically checked first before anything else"
msgstr ""

#: ../../source/features.rst:775
msgid "This is also meaningless on objects."
msgstr ""

#: ../../source/features.rst:778
msgid "Zones are unique"
msgstr ""

#: ../../source/features.rst:780
msgid "You can have things in multiple zones."
msgstr ""

#: ../../source/features.rst:783
msgid "The db auto-repares itself when it can"
msgstr ""

#: ../../source/features.rst:785
msgid "It does this by purging anything it can't identify.  Dataloss is better than unrecoverable data. Yes, any such 'repairing' is logged so you know if something is up."
msgstr ""

#: ../../source/features.rst:790
msgid "You can get your connect.txt to parse ansi"
msgstr ""

#: ../../source/features.rst:792
msgid "See ansi_txtfiles in wizhelp. You can also override it with softcode if you so wanted. See file_object in wizhelp for more information on this."
msgstr ""

#: ../../source/features.rst:797
msgid "Re-compiled binaries do not require an @shutdown"
msgstr ""

#: ../../source/features.rst:799
msgid "When re-compiling the binaries, all you have to remember is when done, issue @reboot on the game and @readcache."
msgstr ""

#: ../../source/features.rst:802
msgid "You do not need to @shutdown."
msgstr ""

#: ../../source/features.rst:805
msgid "Softcode emulations of functions from other servers are included"
msgstr ""

#: ../../source/features.rst:807
msgid "Load the file softfunctions into the mush once it's set up.  This are @functions that will alias the functions that PENN, MUX, and TinyMUSH have that is either named differently or we don't have for one reason or another."
msgstr ""

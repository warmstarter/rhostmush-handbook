# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, wstarter
# This file is distributed under the same license as the RhostMUSH Handbook package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RhostMUSH Handbook 0.01a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-30 15:18-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/features.rst:3
msgid "What RhostMUSH is about and what's so great about RhostMUSH"
msgstr ""

#: ../../source/features.rst:5
msgid "RhostMUSH was founded in 1989, originally by Natasha Davis (Nyctasia) and as a branch from the original release of TinyMUD code.  It was her desire to make a game that was flexible, with multiple levels of progression and highly customizeable.  She lost time and interest and passed the game to Steve Shivers (Seawolf), Mike McDermott (Thorin), and Jace Hoppel (Ashen-Shugar)"
msgstr ""

#: ../../source/features.rst:11
msgid "Through their work, the stability improved, we fixed it to be multi-platform and as bug free as we could possibly make it.  We introduced several methods both in game and in source that allowed consistent memory bounds checking and various alerts for any mischievous naughtyness in-game or possibilities of any hacks, patches, or alterations in the code causing leaks or issues."
msgstr ""

#: ../../source/features.rst:17
msgid "While not perfect, it has allowed us to have an absolutely outstanding turn around for any bugs sent our way, which anyone who uses RhostMUSH will attest to."
msgstr ""

#: ../../source/features.rst:21
msgid "Over the years, others have joined the RhostMUSH team, including Ambrosia (who is the current dev lead), Lensman, Kage (who kindly provided the UTF8/unicode port), Jeff/Loki, Rook, Noltar, and Odin."
msgstr ""

#: ../../source/features.rst:25
msgid "We also have had hundreds of people who have offered (and provided) help, patches, suggestions, bug fixes, and alternations all on their own and every single one will have had their name mentioned in the RHOST.CHANGES file in the readme directory.  It's far too large to have in the online help files."
msgstr ""

#: ../../source/features.rst:31
msgid "RhostMUSH today provides an amazing tool that allows nearly entire customization in-game of every single feature available in Rhost without having the requirement to modify the hardcode.  This includes but is not limited to:"
msgstr ""

#: ../../source/features.rst:37
msgid "Recycle bin"
msgstr ""

#: ../../source/features.rst:39
msgid "Yup, you guessed it.  RhostMUSH has a windows like recycle bin. This means the objects you @nuke and @destroy become 'destroyed' but not recycled until they are @purged.  If you use the Myrddin CRON in the Mushcode directory, it by default sets up a job to purge anything over 30 days old, which should be more than sufficient for any needs.  The goodness of this?  You can recover nuked things from any period of time, as long as they were not @purged first."
msgstr ""

#: ../../source/features.rst:48
msgid "Commands: @purge, @nuke, @destroy, @recover, @reclist"
msgstr ""

#: ../../source/features.rst:51
msgid "@snapshot"
msgstr ""

#: ../../source/features.rst:53
msgid "Live image snapshots to unload or load to and from disk.  As many snapshots as you want, as often as you want. It essentially does a flatfile dump of a dbref#.  Great for backups or cross-Rhost portability."
msgstr ""

#: ../../source/features.rst:58
msgid "Command: @snapshot"
msgstr ""

#: ../../source/features.rst:61
msgid "Wizard and Immortals by default"
msgstr ""

#: ../../source/features.rst:63
msgid "are spoofable.  Meaning all their @pemits by default will not trigger NOSPOOF.  If you do not wish this, set the SPOOF flag this applies to anyone below their level."
msgstr ""

#: ../../source/features.rst:66
msgid "override all locks.  There's two flags to disable this. NO_OVERRIDE to stop overriding all locks (including attribs) and NO_USELOCK to just stop overriding uselocks. This applies to anything their level and lower."
msgstr ""

#: ../../source/features.rst:70
msgid "optionally cloak from all non-immortals/God player. This can be highly abused if not careful and there is a @depower to disable cloaking and/or dark that will disable this."
msgstr ""

#: ../../source/features.rst:74
msgid "immortals can optionally supercloak from even wizards. this can not be disabled, and you must consider that immortals should be treated as the God player (#1) since they are effectively #1 in nearly every way."
msgstr ""

#: ../../source/features.rst:80
msgid "Titles and Captions to a player's name"
msgstr ""

#: ../../source/features.rst:82
msgid "@caption and @titlecaption"
msgstr ""

#: ../../source/features.rst:85
msgid "Have an alternate name with locks for NPC obfuscation"
msgstr ""

#: ../../source/features.rst:87
msgid "@altname @lock/altname"
msgstr ""

#: ../../source/features.rst:91
msgid "Have multiple player aliases"
msgstr ""

#: ../../source/features.rst:93
msgid "As well as a method to reserve player names per player w/o revealing who has what name."
msgstr ""

#: ../../source/features.rst:95
msgid "@protect"
msgstr ""

#: ../../source/features.rst:98
msgid "Actively control how dark works both game-wide and individually"
msgstr ""

#: ../../source/features.rst:100
msgid "@depower dark"
msgstr ""

#: ../../source/features.rst:102
msgid "@admin allow_whodark, sweep_dark, command_dark, lcon_checks_dark, secure_dark, see_owned_dark, idle_wiz_dark, player_dark"
msgstr ""

#: ../../source/features.rst:105
msgid "@toggle snuffdark"
msgstr ""

#: ../../source/features.rst:107
msgid "@flagdef to redefine who and what can set the DARK flag"
msgstr ""

#: ../../source/features.rst:110
msgid "Make config file changes in-game without having to reboot or have shell access"
msgstr ""

#: ../../source/features.rst:112
msgid "@admin admin_object"
msgstr ""

#: ../../source/features.rst:115
msgid "Execute any binary or script as a localized function"
msgstr ""

#: ../../source/features.rst:117
msgid "EXECSCRIPT (power), SIDEFX (flag)"
msgstr ""

#: ../../source/features.rst:120
msgid "Customized percent substitutions (like %n, %#, etc)"
msgstr ""

#: ../../source/features.rst:122
msgid "@admin sub_include, @hook"
msgstr ""

#: ../../source/features.rst:125
msgid "Redefine percent substitutions (like %n, %#, etc)"
msgstr ""

#: ../../source/features.rst:127
msgid "@admin sub_override, @hook"
msgstr ""

#: ../../source/features.rst:130
msgid "Localize command and function overrides in a sandbox"
msgstr ""

#: ../../source/features.rst:132
msgid "@icmd, @lfunction, subeval(), sandbox()"
msgstr ""

#: ../../source/features.rst:135
msgid "Multiple Zones"
msgstr ""

#: ../../source/features.rst:137
msgid "Have multiple zones which can optionally belong to multiple targets (multiple zones per target allowable!)"
msgstr ""

#: ../../source/features.rst:139
msgid "@zone, zones, lzone(), zonecmd()"
msgstr ""

#: ../../source/features.rst:142
msgid "Optionally control, enable, or disable sideeffects"
msgstr ""

#: ../../source/features.rst:144
msgid "@admin sideeffects, SIDEFX (flag)"
msgstr ""

#: ../../source/features.rst:147
msgid "Have 31 cross-interactive realities for locations"
msgstr ""

#: ../../source/features.rst:149
msgid "This works as a truly independant and self-contained environment. A room can have 31 'layers', each 'layer' is a reality in the same physical space.  These layers can work independently or allow interaction with other layers for vast customization. This affects all methods within the game including all matching, looking, $commands, listens, movement, interaction, pretty much every single aspect of mushing."
msgstr ""

#: ../../source/features.rst:157
msgid "REALITY LEVELS"
msgstr ""

#: ../../source/features.rst:160
msgid "Override any command with softcode"
msgstr ""

#: ../../source/features.rst:162
msgid "@admin access (check ignore)"
msgstr ""

#: ../../source/features.rst:164
msgid "Master room $commands to then override the hardcode"
msgstr ""

#: ../../source/features.rst:167
msgid "The abilility to raise or lower permissions on the various"
msgstr ""

#: ../../source/features.rst:169
msgid "staff bitlevels for each player."
msgstr ""

#: ../../source/features.rst:171
msgid "@power, @depower, TOGGLES, FLAGS"
msgstr ""

#: ../../source/features.rst:174
msgid "Customize new commands on the connect screen"
msgstr ""

#: ../../source/features.rst:176
msgid "@admin file_object2"
msgstr ""

#: ../../source/features.rst:179
msgid "Softcode any txt file (like connect.txt)"
msgstr ""

#: ../../source/features.rst:181
msgid "and have it evaluate in-game.  It evaluates as the object it is on."
msgstr ""

#: ../../source/features.rst:183
msgid "@admin file_object"
msgstr ""

#: ../../source/features.rst:186
msgid "Advanced tracing methods for debugging your code including labels!"
msgstr ""

#: ../../source/features.rst:188
msgid "Commands: @label"
msgstr ""

#: ../../source/features.rst:190
msgid "Functions: parenmatch(), trace()"
msgstr ""

#: ../../source/features.rst:192
msgid "Toggles: CPUTIME"
msgstr ""

#: ../../source/features.rst:194
msgid "Flags: TRACE"
msgstr ""

#: ../../source/features.rst:196
msgid "Attributes: TRACE_GREP, TRACE, TRACE_COLOR, TRACE_COLOR_<attr>"
msgstr ""

#: ../../source/features.rst:198
msgid "Substitutions: %_"
msgstr ""

#: ../../source/features.rst:201
msgid "Built in pretty-printing of attributes with the parenmatch() function"
msgstr ""

#: ../../source/features.rst:203
msgid "Example Code Output::"
msgstr ""

#: ../../source/features.rst:226
msgid "Plenty more not mentioned!"
msgstr ""

#: ../../source/features.rst:228
msgid "The flexibility to customize RhostMUSH is what is most daunting. Don't fret, you don't need to do it to run RhostMUSH successfully. In fact, the default configuration is mostly compatible with MUSH and will work correctly out of the box for most needs.  For those wishing to play, of course the sky is the limit of what you want to do."
msgstr ""

#: ../../source/features.rst:236
msgid "Advanced features of RhostMUSH"
msgstr ""

#: ../../source/features.rst:239
msgid "Debugging/Tracing"
msgstr ""

#: ../../source/features.rst:241
msgid "Debugging in Rhost allows for advanced features like expressing where and when to do debugging via a trace() function, with toggled labels, and the ability to grep content from trace output.  There also exists features to color-match parenthesis, braces, and brackets in-game as well as pretty print the output of commands and functions."
msgstr ""

#: ../../source/features.rst:247
msgid "help trace"
msgstr ""

#: ../../source/features.rst:248
msgid "help %_"
msgstr ""

#: ../../source/features.rst:249
msgid "help trace()"
msgstr ""

#: ../../source/features.rst:250
msgid "help parenmatch()"
msgstr ""

#: ../../source/features.rst:251
msgid "help parenstr()"
msgstr ""

#: ../../source/features.rst:254
msgid "Zoning"
msgstr ""

#: ../../source/features.rst:256
msgid "Zoning in Rhost allows the same functionality of Penn and MUX, though the syntax is different.  It also allows the ability to belong to multiple zones at the same time and take advantage of mulitple zones at once. This allows for increased levels of complexity."
msgstr ""

#: ../../source/features.rst:261
msgid "help zones"
msgstr ""

#: ../../source/features.rst:262
msgid "help @zone"
msgstr ""

#: ../../source/features.rst:263
msgid "help zonecmd()"
msgstr ""

#: ../../source/features.rst:264
msgid "help lzone()"
msgstr ""

#: ../../source/features.rst:265
msgid "help @Lock type twink"
msgstr ""

#: ../../source/features.rst:266
msgid "help @lock type zone"
msgstr ""

#: ../../source/features.rst:269
msgid "Reality Levels"
msgstr ""

#: ../../source/features.rst:271
msgid "Reality levels allows for the ability to have a sandboxed 'existance' in each physical location across the entirity of the mush.  Each reality is its own sandbox and can either stand alone or work dependently with other realities.  A person can belong to multiple realities at the same time, and realities is geared to a method for send and receive.  Each 'method' requires to be in the given reality to affect it."
msgstr ""

#: ../../source/features.rst:279
msgid "help reality levels"
msgstr ""

#: ../../source/features.rst:280
msgid "wizhelp chkreality"
msgstr ""

#: ../../source/features.rst:281
msgid "wizhelp reaity level"
msgstr ""

#: ../../source/features.rst:282
msgid "help @Lock type user"
msgstr ""

#: ../../source/features.rst:285
msgid "Function and Command Overriding"
msgstr ""

#: ../../source/features.rst:287
msgid "Functions and commands can both be overridden with softcode.  To override a hardcoded command you first set the command ignore. There are various levels of ignoring so that you could have it ignored from mortals but have it executed fine for non-mortals. This allows you to use the actual physical command within a softcode override.  You may also use @Hook for altering how a command works.   Functions are overridden by setting the function in question ignored, then writing a softcode alternative that is then executed and fetched appropriately."
msgstr ""

#: ../../source/features.rst:297
msgid "Commands:"
msgstr ""

#: ../../source/features.rst:299
#: ../../source/features.rst:307
msgid "wizhelp @admin"
msgstr ""

#: ../../source/features.rst:300
msgid "wizhelp access"
msgstr ""

#: ../../source/features.rst:301
msgid "wizhelp permissions"
msgstr ""

#: ../../source/features.rst:302
msgid "wizhelp @Hook"
msgstr ""

#: ../../source/features.rst:303
#: ../../source/features.rst:354
msgid "wizhelp hook setup"
msgstr ""

#: ../../source/features.rst:305
msgid "Functions:"
msgstr ""

#: ../../source/features.rst:308
msgid "wizhelp function_access"
msgstr ""

#: ../../source/features.rst:309
msgid "wizhelp @function"
msgstr ""

#: ../../source/features.rst:310
msgid "help @lfunction"
msgstr ""

#: ../../source/features.rst:311
msgid "wizhelp bypass()"
msgstr ""

#: ../../source/features.rst:314
msgid "The Recycle Bin"
msgstr ""

#: ../../source/features.rst:316
msgid "Rhost has a recycle bin that works a bit like a windows recycle bin. Whenever you destroy something within the mush, it is stacked onto the recycle bin and marked unavailable within the mush.  This marks the dbref# as garbage in any sense of the word.  However, the object is not able to be reused until purged.  Once purged, it is put onto a free list that can then be reassigned to a new object."
msgstr ""

#: ../../source/features.rst:323
msgid "wizhelp @nuke"
msgstr ""

#: ../../source/features.rst:324
msgid "wizhelp @destroy"
msgstr ""

#: ../../source/features.rst:325
msgid "wizhelp @toad"
msgstr ""

#: ../../source/features.rst:326
msgid "wizhelp @turtle"
msgstr ""

#: ../../source/features.rst:327
msgid "wizhelp @purge"
msgstr ""

#: ../../source/features.rst:328
msgid "wizhelp @recover"
msgstr ""

#: ../../source/features.rst:329
msgid "wizhelp @reclist"
msgstr ""

#: ../../source/features.rst:333
msgid "Percent Substitution Adding/Overriding"
msgstr ""

#: ../../source/features.rst:335
msgid "Rhost allows the ability to both override percent substitutions as well as creating new ones.  This is done with @Hook and admin params and issues softcode overriding.  Due to how it is evaluated there is no risk of recursion."
msgstr ""

#: ../../source/features.rst:340
#: ../../source/features.rst:351
msgid "wizhelp @hook"
msgstr ""

#: ../../source/features.rst:341
#: ../../source/features.rst:352
msgid "wizhelp hook_cmd"
msgstr ""

#: ../../source/features.rst:342
msgid "wizhelp sub_include"
msgstr ""

#: ../../source/features.rst:343
msgid "wizhelp sub_override"
msgstr ""

#: ../../source/features.rst:346
msgid "Hooking"
msgstr ""

#: ../../source/features.rst:348
msgid "Hooking allows you to have advanced methods to manipulate commands including adding customized switches to them via softcode."
msgstr ""

#: ../../source/features.rst:353
msgid "wizhelp hook_obj"
msgstr ""

#: ../../source/features.rst:357
msgid "Command based uselocks"
msgstr ""

#: ../../source/features.rst:359
msgid "This allows you to have unique uselocks per $command.  This is done through the use of the USELOCK attribute flag, then you set up a matching attribute name with a prefix of a ~ to specify how the lock is to be evaluated.  This works in the same manner as an evaluation lock.  To be able to use the USELOCK attribute flag you must be empowered to do so with the 'ATRUSE' @toggle.  You may also use the secure_atruselock config parameter to globally enable this and not require the toggle to be set."
msgstr ""

#: ../../source/features.rst:368
msgid "wizhelp atruse toggle"
msgstr ""

#: ../../source/features.rst:369
msgid "help attribute uselocks"
msgstr ""

#: ../../source/features.rst:372
msgid "Differentating between command and listen locks"
msgstr ""

#: ../../source/features.rst:374
msgid "We distinguish between commands and listens with uselocks by passing an optional argument to all locks that are uselocks.  This optional argument is 0 for a default lock, 1 for a command lock and 2 for a listen lock."
msgstr ""

#: ../../source/features.rst:379
msgid "help @lock type uselock"
msgstr ""

#: ../../source/features.rst:382
msgid "Wizard auto-overiding and how to disable it"
msgstr ""

#: ../../source/features.rst:384
msgid "By default wizards override all locks, including attribute locks, can see all dark exits, and bypass pagelocks.  This can be troublesome, and even abusive, so there's ways to disable this."
msgstr ""

#: ../../source/features.rst:388
msgid "wizhelp @depower (for those abusing it)"
msgstr ""

#: ../../source/features.rst:389
msgid "wizhelp no_override (disable overiding locks)"
msgstr ""

#: ../../source/features.rst:390
msgid "wizhelp no_uselock (disable just uselock overriding)"
msgstr ""

#: ../../source/features.rst:391
msgid "wizhelp pagelock toggle (disable pagelock overriding)"
msgstr ""

#: ../../source/features.rst:394
msgid "Advanced FLAG and TOGGLE control"
msgstr ""

#: ../../source/features.rst:396
msgid "Flags and toggles can be controlled to have multiple permissions and enable/disable targets of how the flags are allowed to be set.  This is done through commands in-game or you can use conf file options to do so."
msgstr ""

#: ../../source/features.rst:401
msgid "wizhelp @flagdef"
msgstr ""

#: ../../source/features.rst:402
msgid "wizhelp @toggledef"
msgstr ""

#: ../../source/features.rst:403
msgid "@admin @flagdef alternatives"
msgstr ""

#: ../../source/features.rst:405
msgid "wizhelp flag_access_set"
msgstr ""

#: ../../source/features.rst:406
msgid "wizhelp flag_access_unset"
msgstr ""

#: ../../source/features.rst:407
msgid "wizhelp flag_access_see"
msgstr ""

#: ../../source/features.rst:408
msgid "wizhelp flag_access_type"
msgstr ""

#: ../../source/features.rst:410
msgid "@admin @toggledef alternatives"
msgstr ""

#: ../../source/features.rst:412
msgid "wizhelp toggle_access_set"
msgstr ""

#: ../../source/features.rst:413
msgid "wizhelp toggle_access_unset"
msgstr ""

#: ../../source/features.rst:414
msgid "wizhelp toggle_access_see"
msgstr ""

#: ../../source/features.rst:415
msgid "wizhelp toggle_access_type"
msgstr ""

#: ../../source/features.rst:419
msgid "Advanced site control"
msgstr ""

#: ../../source/features.rst:421
msgid "We allow advanced site control by not only blocking various sites but we can specify how many times a player can be connected at the same time as well as how many times sites are able to connect at the same time.  This is done through normal site manipulation."
msgstr ""

#: ../../source/features.rst:426
msgid "wizhelp forbid_host"
msgstr ""

#: ../../source/features.rst:427
msgid "wizhelp register_host"
msgstr ""

#: ../../source/features.rst:428
msgid "wizhelp noguest_host"
msgstr ""

#: ../../source/features.rst:429
msgid "wizhelp @list (site option)"
msgstr ""

#: ../../source/features.rst:432
msgid "Auto-Registration"
msgstr ""

#: ../../source/features.rst:434
msgid "Autoregistration is the method that a player can auto-register by providing their email on the connect screen.  It will email them a password and an optional document that the administrator provides.  This is well described in the wizhelp."
msgstr ""

#: ../../source/features.rst:439
msgid "wizhelp autoregistration"
msgstr ""

#: ../../source/features.rst:442
msgid "Which bit level is best?"
msgstr ""

#: ../../source/features.rst:444
msgid "This is something that should be discussed by you and the staff of your game.  As a good rule of thumb, only provide the bitlevel that is required to do the job.  Too much power is always risky. In essence, each tier of bit can do everything the previous bitlevel can do, and then additional stuff on top of it.  The highest bitlevel is #1 itself, being bitlevel 7.  Then immortal, which should be considered the #1 character in most cases and is bitlevel 6.  Then the royalty character, which is equal to wizard on penn, mux, or other codebases.  For most things, this is the bitlevel you want to assign players.  The exception will likely be game owners or people who control the master room code."
msgstr ""

#: ../../source/features.rst:456
msgid "There's a bunch of readme files and online wizhelp that goes into detail of the various bitlevels and what each can do."
msgstr ""

#: ../../source/features.rst:459
msgid "wizhelp control"
msgstr ""

#: ../../source/features.rst:462
msgid "What are the limits for size/growth for RhostMUSH?"
msgstr ""

#: ../../source/features.rst:464
msgid "While using QDBM, there's really no set limits for most things. The limits that we have are as followed:"
msgstr ""

#: ../../source/features.rst:467
msgid "LBUF - 64K.  It is recommended to only use 32K as there is some issues with networking with 64K lbufs."
msgstr ""

#: ../../source/features.rst:469
#: ../../source/features.rst:473
msgid "Compile time option with the menu configurator"
msgstr ""

#: ../../source/features.rst:471
msgid "SBUF - 64 characters (if configured -- it's suggested you do)."
msgstr ""

#: ../../source/features.rst:475
msgid "MBUF - 200 characters.  Not able to be changed."
msgstr ""

#: ../../source/features.rst:477
msgid "MAX CONNECTIONS - Limited by the total number of open sockets and descriptors on the account and server running on.  There are various tools to limit connection DoS attemps and other such nastiness.  This is well documented in the netrhost.conf file."
msgstr ""

#: ../../source/features.rst:479
msgid "wizhelp max_players"
msgstr ""

#: ../../source/features.rst:480
#: ../../source/features.rst:491
msgid "~/game/netrhost.conf"
msgstr ""

#: ../../source/features.rst:482
msgid "MEMORY - no limit.  Generally runs between 8-50M depending on the size of the mush and the LBUF size specified."
msgstr ""

#: ../../source/features.rst:484
msgid "CPU  - no limit, but has built in cpu abort in code.  The netrhost.conf file documents this well for customizing.  the default values are usually good enough."
msgstr ""

#: ../../source/features.rst:486
msgid "wizhelp max_cpu_cycles"
msgstr ""

#: ../../source/features.rst:487
msgid "wizhelp cpuintervalchk"
msgstr ""

#: ../../source/features.rst:488
msgid "wizhelp cputimechk"
msgstr ""

#: ../../source/features.rst:489
msgid "wizhelp cpu_secure_lvl"
msgstr ""

#: ../../source/features.rst:490
msgid "wizhelp heavy_cpu_max"
msgstr ""

#: ../../source/features.rst:493
msgid "DISK - no limit.  Generally will be 75-200M depending on size, number of backups and if you leave your compiled object files in."
msgstr ""

#: ../../source/features.rst:495
msgid "DB Size - (20000 default) There is no limit on the number of objects the db can have.  By default it's soft limited to 20K objects, which can be changed by a netrhost.conf file change.  We have had this up past 1.5 million objects, and other than a second or two of lag for complex searches we had no real problem."
msgstr ""

#: ../../source/features.rst:497
msgid "wizhelp maximum_size"
msgstr ""

#: ../../source/features.rst:498
msgid "help @quota"
msgstr ""

#: ../../source/features.rst:499
msgid "wizhelp @quota"
msgstr ""

#: ../../source/features.rst:500
#: ../../source/features.rst:505
msgid "wizhelp @limit"
msgstr ""

#: ../../source/features.rst:502
msgid "Attribute Size - 10K as a hard limit.  750 as a soft limit.  You can increase this but it can't exceed 10000 attributes.  This is to avoid DoS style attacks."
msgstr ""

#: ../../source/features.rst:504
msgid "wizhelp vlimit"
msgstr ""

#: ../../source/features.rst:509
msgid "Sqlite and MySQL/Maria setup and why use it?"
msgstr ""

#: ../../source/features.rst:511
msgid "Both of these can be configured separately or conjointly to run in parallel.  This can be done through the RhostMUSH configuration utility.  You generally want to use SQL for external data storage or accessing a central repository of data to share between multiple projects.  Like, for example between a wiki, a forum, and the mush."
msgstr ""

#: ../../source/features.rst:520
msgid "Executing outside scripts and binaries within RhostMUSH"
msgstr ""

#: ../../source/features.rst:522
msgid "Rhost has execscript() which allows executing outside binaries or scripts as a native function.  All effort has been done to avoid any type of DoS based issue or hang by doing this, however the guidelines presented should be followed before doing so."
msgstr ""

#: ../../source/features.rst:527
msgid "wizhelp execscript"
msgstr ""

#: ../../source/features.rst:528
msgid "wizhelp power execscript"
msgstr ""

#: ../../source/features.rst:529
msgid "help sidefx"
msgstr ""

#: ../../source/features.rst:530
msgid "wizhelp writing scripts"
msgstr ""

#: ../../source/features.rst:533
msgid "Pulling external data into RhostMUSH"
msgstr ""

#: ../../source/features.rst:535
msgid "You are capable of pulling external data in to RhostMUSH using several methods.  These are by using:"
msgstr ""

#: ../../source/features.rst:537
msgid "SQL (mysql or sqlite)"
msgstr ""

#: ../../source/features.rst:538
msgid "execscript"
msgstr ""

#: ../../source/features.rst:539
msgid "cron (wizhelp signal)"
msgstr ""

#: ../../source/features.rst:542
msgid "Integrating a unix cron right into RhostMUSH"
msgstr ""

#: ../../source/features.rst:544
msgid "The unix cron can be used to integrate with Rhost fairly easilly by use of signals.  By using SIGUSR1 you can specify Rhost to execute code in-game, which part of that could be to pick up a pre-designed list of commands that the unix cron has set up."
msgstr ""

#: ../../source/features.rst:550
msgid "wizhelp signal"
msgstr ""

#: ../../source/features.rst:551
msgid "wizhelp signal_cron"
msgstr ""

#: ../../source/features.rst:554
msgid "Signal handling, how it works, and when and why use it"
msgstr ""

#: ../../source/features.rst:556
msgid "Signals are used to do different things for the mush.  By default, the following signals are recognized by the mush and will do the following as defaults."
msgstr ""

#: ../../source/features.rst:560
msgid "SIGUSR1 - will do a reboot of the mush.  This is also customizable so that you can have it execute code in-mush if you want."
msgstr ""

#: ../../source/features.rst:561
msgid "SIGUSR2 - will do a clean shutdown of the mush."
msgstr ""

#: ../../source/features.rst:562
msgid "SIGTERM - will immediately scram the mush as cleanly and fast as possible.  It will avoid dumping anything to the database to speed up scramming, but write a TERM flat file to be loaded in if corruption."
msgstr ""

#: ../../source/features.rst:565
msgid "Setting up global parents, global @parents, global attribute formatting, and other global setups"
msgstr ""

#: ../../source/features.rst:567
msgid "Global parents are useful when you want to have a global 'parent' without actually having a defined '@parent'.  It always will be the highest tier in a lookup.  The way lookups will go will be::"
msgstr ""

#: ../../source/features.rst:573
#: ../../source/features.rst:590
#: ../../source/features.rst:607
msgid "The type of the parent does not have to match the target."
msgstr ""

#: ../../source/features.rst:575
msgid "These global parents can be defined either by using a global generic parent or by using the type.  If a type is specified it overrides the generic.  The following parameters are used:"
msgstr ""

#: ../../source/features.rst:579
msgid "global_parent_obj     - The generic global parent (if defined)"
msgstr ""

#: ../../source/features.rst:580
msgid "global_parent_room    - The room global parent"
msgstr ""

#: ../../source/features.rst:581
msgid "global_parent_exit    - The exit global parent"
msgstr ""

#: ../../source/features.rst:582
msgid "global_parent_thing   - The thing global parent"
msgstr ""

#: ../../source/features.rst:583
msgid "global_parent_player  - The player global parent"
msgstr ""

#: ../../source/features.rst:585
msgid "Global @parents are different than global parents in that any new item of similar type that is created is automatically assigned this physical @parent.  It's obviously more limiting since it sets the literal physical parent defined."
msgstr ""

#: ../../source/features.rst:592
msgid "The following parameters are used:"
msgstr ""

#: ../../source/features.rst:594
msgid "room_parent           - The target that new rooms are @parented"
msgstr ""

#: ../../source/features.rst:595
msgid "exit_parent           - The target that new exits are @parented"
msgstr ""

#: ../../source/features.rst:596
msgid "thing_parent          - The target that new things are @parented"
msgstr ""

#: ../../source/features.rst:597
msgid "player_parent         - The target that new players are @parented"
msgstr ""

#: ../../source/features.rst:599
msgid "Global attribute formatting is a method define a wrapper, of sorts, where attributes like @desc, @odesc, @succ, and anything similar can be processed through this.  All attributes will be either &FORMAT<attribute> or &<attribute>FORMAT based on the current configuration.  Example: &FORMATDESC or &DESCFORMAT localy, or use the following global objects for global formatting.  Local formatting has priority."
msgstr ""

#: ../../source/features.rst:609
msgid "room_attr_default     - Target for room formatting"
msgstr ""

#: ../../source/features.rst:610
msgid "exit_attr_default     - Target for exit formatting"
msgstr ""

#: ../../source/features.rst:611
msgid "thing_attr_default    - Target for thing formatting"
msgstr ""

#: ../../source/features.rst:612
msgid "player_attr_default   - Target for player formatting"
msgstr ""

#: ../../source/features.rst:616
msgid "RhostMUSH limitations and how to get around them"
msgstr ""

#: ../../source/features.rst:618
msgid "While Rhost is insanely configurable and quite powerful, there are limitations that exist within it."
msgstr ""

#: ../../source/features.rst:621
msgid "Function invocations.  Sometimes you will hit a ceiling on evaluation. You may want to tweak values to allow more functions or commands to execute.  The following controls that:"
msgstr ""

#: ../../source/features.rst:625
msgid "function_invocation_limit [25000 default] - specifies the total functions you can execute per command."
msgstr ""

#: ../../source/features.rst:626
msgid "function_recursion_limit [50] - specifies the total times a function can call itself over and over.  Rarely should this be increased and doing so can effect your stack depth."
msgstr ""

#: ../../source/features.rst:628
msgid "Command queue limits.  Sometimes you want more to be queued up for players or wizards."
msgstr ""

#: ../../source/features.rst:631
msgid "player_queue_limit  - Max number of entries a player can queue"
msgstr ""

#: ../../source/features.rst:632
msgid "wizard_queue_limit  - Max number of entries a wizard can queue"
msgstr ""

#: ../../source/features.rst:634
msgid "@limit is a wonderful way to lock down limitations per player or global.  Lots of power is available here."
msgstr ""

#: ../../source/features.rst:636
msgid "@limit"
msgstr ""

#: ../../source/features.rst:637
msgid "vattr_limit_checkwiz - Enable @limit checks for wizards"
msgstr ""

#: ../../source/features.rst:638
msgid "wizmax_vattr_limit   - Set wizard global VATTR limits"
msgstr ""

#: ../../source/features.rst:639
msgid "wizmax_dest_limit    - Set wizard global @destroy limits"
msgstr ""

#: ../../source/features.rst:640
msgid "max_vattr_limit      - Set player global VATTR limits"
msgstr ""

#: ../../source/features.rst:641
msgid "max_dest_limit       - Set player global @destroy limits"
msgstr ""

#: ../../source/features.rst:643
msgid "Lots of trace output can be cut off.  You can modify this with:"
msgstr ""

#: ../../source/features.rst:645
msgid "trace_output_limit   - Set lines of trace output shown"
msgstr ""

#: ../../source/features.rst:647
msgid "To define how many commands a minute a player set SPAMMONITOR can use"
msgstr ""

#: ../../source/features.rst:649
msgid "spam_limit -- default 120"
msgstr ""

#: ../../source/features.rst:651
msgid "If you examine things and see 'Output cut off' messages, you may want to increase your output limit, funny enough, the name of this is similar"
msgstr ""

#: ../../source/features.rst:655
msgid "output_limit - You should set this no less than 4 times the current size of your LBUF."
msgstr ""

#: ../../source/features.rst:657
msgid "Attributes names can not exceed 64 characters.  Sorry, it's a hard limit"
msgstr ""

#: ../../source/features.rst:659
msgid "Sometime you may find a single \\ may not work for an escape.  You can in most cases use a % instead or double escape the \\ to make it work. Also look at lit() as a solution."
msgstr ""

#: ../../source/features.rst:665
msgid "Things other mushes can do that Rhost can not and how to emulate it"
msgstr ""

#: ../../source/features.rst:668
msgid "PennMUSH"
msgstr ""

#: ../../source/features.rst:670
msgid "Attribute trees.  These are emulated as a base set and can be duplicated enough to at least port code."
msgstr ""

#: ../../source/features.rst:671
msgid "lsearch() will have to be recoded to search()"
msgstr ""

#: ../../source/features.rst:672
msgid "align() will have to be recoded to printf()"
msgstr ""

#: ../../source/features.rst:673
msgid "Penn allows empty attributes.  Rhost does not.  Work will have to be done to take this into consideration."
msgstr ""

#: ../../source/features.rst:675
msgid "All \\*val() functions in Penn that are used will have to be remapped to a non-\\*val() function.  It should be as simple as function_alias to the non-\\*val.  Example::"
msgstr ""

#: ../../source/features.rst:679
msgid "Penn's hardcoded comsystem is emulated with the softcode comsys"
msgstr ""

#: ../../source/features.rst:680
msgid "Penn's @mail system is workable with mail wrappers"
msgstr ""

#: ../../source/features.rst:681
#: ../../source/features.rst:693
msgid "Pueblo is not supported."
msgstr ""

#: ../../source/features.rst:682
msgid "json is not supported."
msgstr ""

#: ../../source/features.rst:683
msgid "ssl is not natively supported (yet), see section XIV"
msgstr ""

#: ../../source/features.rst:684
msgid "This uses @shutdown/restart, Rhost uses @reboot"
msgstr ""

#: ../../source/features.rst:687
msgid "MUX"
msgstr ""

#: ../../source/features.rst:689
msgid "Mux has an async mysql database engine.  This is not possible with Rhost.  You'll have to use the sync method instead."
msgstr ""

#: ../../source/features.rst:690
msgid "UTF8 is supported but internally passed differently."
msgstr ""

#: ../../source/features.rst:691
msgid "Mux's hardcoded comsystem is emulated with the softcode comsys"
msgstr ""

#: ../../source/features.rst:692
msgid "MUX's @mail system is workable with mail wrappers"
msgstr ""

#: ../../source/features.rst:694
msgid "This uses @restart, Rhost uses @reboot"
msgstr ""

#: ../../source/features.rst:697
msgid "Advanced guest setup"
msgstr ""

#: ../../source/features.rst:699
msgid "After you set up your guests, you can set unique names to each guest if you so want after defining the dbref#'s your guests use.  This is done by defining them in the guest_namelist parameter.  You can also increase guests (or decrease them) between 0-31 guests."
msgstr ""

#: ../../source/features.rst:704
msgid "wizhelp guest_namelist"
msgstr ""

#: ../../source/features.rst:705
msgid "wizhelp num_guests"
msgstr ""

#: ../../source/features.rst:708
msgid "Attribute permission masking and the joys of the power behind it"
msgstr ""

#: ../../source/features.rst:710
msgid "Attribute contentlocks can be set up so you can lock the actual content that you can set (or even unset!) into an attribute. The beauty of this is that you can specify case sensitive information, lock different ways contents in attributes are set based on who is setting it, or even on where it's being set. The sky's the limit."
msgstr ""

#: ../../source/features.rst:717
msgid "global_attrdefault    - Target for defining content locks"
msgstr ""

#: ../../source/features.rst:721
msgid "The amazing @cluster and what it can do for you"
msgstr ""

#: ../../source/features.rst:723
msgid "Clusters is the way to virtually assign multiple objects into a single physical object.  It essentially chains together two or more objects to share attributes between them, so that any attribute set on any object in that cluster can be set or fetched as if it was a singular entity.  This allows some amazing ability to distribute attribute content or even have a farm of a massive amount of attributes without paying a hefty penalty on object bloat."
msgstr ""

#: ../../source/features.rst:731
msgid "help cluster  -- Gives a fantastic overview of how clusters work."
msgstr ""

#: ../../source/features.rst:734
msgid "What we plan for the future"
msgstr ""

#: ../../source/features.rst:736
msgid "Things to look forward to the future with RhostMUSH."
msgstr ""

#: ../../source/features.rst:738
msgid "Full Unicode/UTF8 in Rhost 4.0"
msgstr ""

#: ../../source/features.rst:739
msgid "A fully featured tag system in Rhost 4.0"
msgstr ""

#: ../../source/features.rst:740
msgid "Built in Python API handler in Rhost 4.0"
msgstr ""

#: ../../source/features.rst:741
msgid "Hopefully a built in Ruby and Perl API in Rhost 4.0/4.1"
msgstr ""

#: ../../source/features.rst:742
msgid "Cross-Mush execution between mushes in Rhost 4.1"
msgstr ""

#: ../../source/features.rst:743
msgid "More as we think about it :)"
msgstr ""

#: ../../source/features.rst:746
msgid "Additional features not covered otherwise"
msgstr ""

#: ../../source/features.rst:748
msgid "+/- 5.4 million years can be utilized with the built in time functions which includes timefmt(), secs(), convtime(), convsecs(), and moon().  Party on!"
msgstr ""

#: ../../source/features.rst:750
msgid "Changing permission levels in the middle of execution for evaluation."
msgstr ""

#: ../../source/features.rst:752
msgid "see help on the streval and ueval function'"
msgstr ""

#: ../../source/features.rst:753
msgid "Full features in-game customization of near every aspect of the game."
msgstr ""

#: ../../source/features.rst:756
msgid "Random notes and things to know about RhostMUSH"
msgstr ""

#: ../../source/features.rst:758
msgid "Here are some things to know about RhostMUSH and what you may or may not want to do.  Things here are not covered in other documents:"
msgstr ""

#: ../../source/features.rst:761
msgid "Admin toggles to configure the WHO, various things you're used to, etc is in the 'netrhost.conf' file.  descriptions Notes in the autoconf.h file is in the README.AUTOCONF file."
msgstr ""

#: ../../source/features.rst:767
msgid "Note on bits, their levels, and things they do"
msgstr ""

#: ../../source/features.rst:769
msgid "IMMORTAL - They can do anything.  Treat this as #1 and only give to people you trust.  Period.   You don't have to use this bit if you do not want to and just assume #1."
msgstr ""

#: ../../source/features.rst:773
msgid "ROYALTY - Unlike PENN/MUX, this is *not* a sub-wizard, this is a FULL wizard.  Plus, they can do a bit more."
msgstr ""

#: ../../source/features.rst:776
msgid "COUNCILOR - Like royalty on PENN/MUX but they can modify."
msgstr ""

#: ../../source/features.rst:778
msgid "ARCHITECT - Can't do as much as councilor, but lot more than BUILDER."
msgstr ""

#: ../../source/features.rst:780
msgid "GUILDMASTER - Very limited.  Sees dbrief#'s, can ex things their level and lower and @quota players."
msgstr ""

#: ../../source/features.rst:785
msgid "You need to @pcreate your guest characters and set them GUEST"
msgstr ""

#: ../../source/features.rst:787
msgid "It doesn't create them on the fly but we considered this better. You have 31 total you can have.  It defaults to 10 in the netrhost.conf file.  You can rename the guests anything you want, but before you do so, you must add the dbref#'s to the param guest_namelist"
msgstr ""

#: ../../source/features.rst:794
msgid "@powers are INHERITED"
msgstr ""

#: ../../source/features.rst:796
msgid "Therefore, you need power_objects enabled (@admin) to make this work properly for non-plauyers. A power is taken before a bit level ONLY if higher than that bit. Yes, powers are multi-level."
msgstr ""

#: ../../source/features.rst:802
msgid "@depowers are automatically checked first before anything else"
msgstr ""

#: ../../source/features.rst:804
msgid "This is also meaningless on objects."
msgstr ""

#: ../../source/features.rst:807
msgid "Zones are unique"
msgstr ""

#: ../../source/features.rst:809
msgid "You can have things in multiple zones."
msgstr ""

#: ../../source/features.rst:812
msgid "The db auto-repares itself when it can"
msgstr ""

#: ../../source/features.rst:814
msgid "It does this by purging anything it can't identify.  Dataloss is better than unrecoverable data. Yes, any such 'repairing' is logged so you know if something is up."
msgstr ""

#: ../../source/features.rst:819
msgid "You can get your connect.txt to parse ansi"
msgstr ""

#: ../../source/features.rst:821
msgid "See ansi_txtfiles in wizhelp."
msgstr ""

#: ../../source/features.rst:823
msgid "You can also override it with softcode if you so wanted."
msgstr ""

#: ../../source/features.rst:825
msgid "See file_object in wizhelp for more information on this."
msgstr ""

#: ../../source/features.rst:828
msgid "Re-compiled binaries do not require an @shutdown"
msgstr ""

#: ../../source/features.rst:830
msgid "When re-compiling the binaries, all you have to remember is when done, issue"
msgstr ""

#: ../../source/features.rst:832
msgid "@reboot on the game and @readcache."
msgstr ""

#: ../../source/features.rst:834
msgid "You do not need to @shutdown."
msgstr ""

#: ../../source/features.rst:837
msgid "Softcode emulations of functions from other servers are included"
msgstr ""

#: ../../source/features.rst:839
msgid "Load the file softfunctions into the mush once it's set up.  This are @functions that will alias the functions that PENN, MUX, and TinyMUSH have that is either named differently or we don't have for one reason or another."
msgstr ""

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush-handbook/source/19-reality.rst">
    <section ids="reality-levels" names="reality\ levels">
        <title>Reality levels</title>
        <paragraph>Reality levels are a means to forbid (or allow) interaction between objects
            in the same location.</paragraph>
        <section ids="visibility" names="visibility">
            <title>Visibility</title>
            <paragraph>Each object (player, room, exit, thing) has two lists of reality levels.
                An Rx list, which describe what it can see and a Tx list, which describe
                where it can be seen. Those are bitfields. In order for X to see Y a bitwise
                ‘and’ is performed between X’s RxLevel and Y’s TxLevel. If the result is not
                0, then X sees Y. If the result is 0, as far as X is concerned, Y doesn’t
                exist. This affects contents lists, exit lists, look, say, pose, @emit,
                @verb, connect/disconnect, has arrived/has left messages, exit and object
                matching. ‘here’ and ‘me’ match always.
                It doesn’t affect @remit, @pemit, page, WHO or channels.
                By default, all new objects are created with an RxLevel of 1 and TxLevel of
                1. Rooms are an exception, created with an RxLevel of 1 and a TxLevel of
                0xFFFFFFFF. Those default levels can be changed with configuration
                parameters.
                An object is always visible to itself, even if its Rx and Tx levels don’t
                match. (See examples below)</paragraph>
        </section>
        <section ids="descriptions" names="descriptions">
            <title>Descriptions</title>
            <paragraph>For every reality level defined, you can define an attribute that serves as
                description. If you look at something and match more than one of its
                TxLevels, you’ll see all the corresponding descriptions on the target
                object. If the object doesn’t have any descriptions for the matching levels,
                you’ll see the regular @desc.
                The @adesc attribute on the target is only triggered if the target can see
                the looker in turn. It’s only triggered once, no matter how many descs the
                looker sees. The @odesc is shown only to those people that see /both/ the
                looker and the target.
                Through extension, @afail/@ofail and similar pairs (@adrop/@odrop,
                @asucc/@osucc etc) work in the same way. @verb commands are similary
                affected.
                Softcoded commands are only matched on the objects that can see the player.
                The player doesn’t have to see the object. This includes commands in the
                Master Room.
                Exits are treated specially. In order to be able to use an exit name (or to
                use the ‘move &lt;exit&gt;’ command) the exit must be visible to the enactor. In
                order to pass through the exit, the exit must see the enactor in turn. There
                are reasons for this, which will become evident in the examples below.</paragraph>
        </section>
        <section ids="configuration-parameters" names="configuration\ parameters">
            <title>Configuration parameters</title>
            <paragraph>A few configuration parameters have been introduced to deal with the reality
                levels.</paragraph>
            <block_quote>
                <paragraph>reality_level &lt;name&gt; &lt;value&gt; [&lt;desc attribute name&gt;]</paragraph>
            </block_quote>
            <paragraph>This directive can only be used in the config file (not with the @admin
                command) and should be repeated for each reality level you want to define.
                It defines a new level named &lt;name&gt; with a bitvalue of &lt;value&gt; and an
                optional desc attribute. There is a limit of 8 characters on &lt;name&gt;, a
                32-bit value on &lt;value&gt; (basically an unsigned long) and 32 characters on
                the attribute name. A maximum of 32 reality levels can be defined.</paragraph>
            <block_quote>
                <paragraph>def_exit_tx &lt;value&gt;
                    def_exit_rx &lt;value&gt;
                    def_room_tx &lt;value&gt;
                    def_room_rx &lt;value&gt;
                    def_player_rx &lt;value&gt;
                    def_player_tx &lt;value&gt;
                    def_thing_rx &lt;value&gt;
                    def_thing_tx &lt;value&gt;</paragraph>
            </block_quote>
            <paragraph>These 8 directives define the default reality levels of newly created
                objects. They can be set in the config file or with the @admin command.
                Like above, &lt;value&gt; must be a decimal number.</paragraph>
            <block_quote>
                <paragraph>wiz_always_real &lt;0|1&gt;</paragraph>
            </block_quote>
            <paragraph>If this parameter is set to 1 then wizards (and immortals on Rhost) will see
                everything and will be visible to everyone. Their effective Rx and Tx levels
                will always be 0xFFFFFFFF. Also settable in the config file and with the
                @admin command.</paragraph>
            <paragraph>Compile with -DREALITY_LEVELS compile time option to enable ‘Real’ needs to be ‘1’
                This is an example file only to be added to the mush.conf file
                Format: reality_level &lt;8 char name&gt; &lt;hex-byte-mask&gt; &lt;optional-desc: DESC default&gt;</paragraph>
        </section>
        <section ids="example-mush-conf" names="example\ mush.conf">
            <title>Example mush.conf</title>
            <paragraph>reality_level Real 1
                reality_level Obf1 2
                reality_level Obf2 4
                reality_level Obf3 8 OBFDESC
                reality_level Obf4 16 OBFDESC
                reality_level Obf5 32 OBFDESC
                reality_level Obf6 64 OBFDESC
                reality_level Obf7 128 OBFDESC
                reality_level Obf8 256 OBFDESC
                reality_level Obf9 512 OBFDESC
                reality_level Obf10 1024 OBFDESC
                reality_level Umbra 2048 UMBRADESC
                reality_level Fae 4096 FAEDESC
                reality_level Shadow 8192 SHADOWDESC
                reality_level Spy 16384
                reality_level Death 32768 DEATHDESC
                reality_level All 4294967295</paragraph>
        </section>
        <section ids="commands" names="commands">
            <title>Commands</title>
            <paragraph>Two wiz-only commands are used to set the reality levels of an object.</paragraph>
            <block_quote>
                <paragraph>@rxlevel &lt;object&gt;=&lt;list&gt;
                    @txlevel &lt;object&gt;=&lt;list&gt;</paragraph>
            </block_quote>
            <paragraph>&lt;list&gt; is a space-separated list of level names that have to be set on the
                object. If a level name is prefixed with an exclamation mark (!) that level
                will be cleared from the object.
                WARNING: Changing the Tx levels of an object might make it invisible to you.
                In this case, you can still manipulate it by using his #dbref (or <problematic ids="id2" refid="id1">*</problematic>player
                for players).</paragraph>
        </section>
        <section ids="functions" names="functions">
            <title>Functions</title>
            <paragraph>There are five functions that deal with reality levels.</paragraph>
            <block_quote>
                <paragraph>hasrxlevel(&lt;object&gt;,&lt;level&gt;)
                    hastxlevel(&lt;object&gt;,&lt;level&gt;)</paragraph>
            </block_quote>
            <paragraph>These two functions check if an object has the specified Rx or Tx level.
                You must control &lt;object&gt;. They return 0 or 1 and #-1 in case the object
                does not exist or you don’t have permissions.</paragraph>
            <block_quote>
                <paragraph>rxlevel(&lt;object&gt;)
                    txlevel(&lt;object&gt;)</paragraph>
            </block_quote>
            <paragraph>These two functions return a space-separated list of the object’s Rx or Tx
                levels. Again, you must control the object.</paragraph>
            <block_quote>
                <paragraph>cansee(&lt;obj1&gt;,&lt;obj2&gt;)</paragraph>
            </block_quote>
            <paragraph>A wiz-only function, returns 1 of &lt;obj1&gt; can see &lt;obj2&gt; from a reality
                levels point of view. It doesn’t check if the objects are in the same
                location, the DARK/CLOAKED flags and so on. Just &lt;obj1&gt;’s Rx level against
                &lt;obj2&gt;’s Tx level.
                WARNING: If you are using it on MUX2.0 with /both/ reality levels and Wod
                Realms enabled, the function will perform both checks and the Wod Realms
                version checks against the DARK flag.</paragraph>
        </section>
        <section ids="example-1-a-simplified-witchcraft-setup" names="example\ 1:\ a\ simplified\ witchcraft\ setup">
            <title>Example 1: A simplified Witchcraft setup</title>
            <paragraph>In Witchcraft, besides the various Gifted classes, characters can be spirits
                There are spirit realms to which the mundane can not travel. Therefore we
                will use 2 reality levels: Real and Ghost. Since some spirits can become
                solid for a limited period of time, we will also use an additional desc for
                the Ghost level, called GHOSTDESC. Therefore in the config file we will
                have:</paragraph>
            <block_quote>
                <paragraph>reality_level Real 1
                    reality_level Ghost 2 GHOSTDESC</paragraph>
            </block_quote>
            <paragraph>Ghosts can pass through most mundane locks, so the exists should allows the
                ghosts to pass:</paragraph>
            <block_quote>
                <paragraph>def_exit_rx 3</paragraph>
            </block_quote>
            <paragraph>Note that def_exit_tx isn’t set. Why? Because ghosts see the mundane world
                anyway, so a spirit character will have:</paragraph>
            <block_quote>
                <paragraph>@txlevel &lt;player&gt;=!Real Ghost
                    @rxlevel &lt;player&gt;=Real Ghost</paragraph>
            </block_quote>
            <paragraph>Let’s assume 3 players:
                John is a Mundane. He won’t see spirits.
                John’s Rx: Real
                John’s Tx: Real
                John’s @desc: This is John.
                John’s &amp;GHOSTDESC: (Not important, since it’s never visible)
                Johh’s @adesc: %N has looked at you.
                John’s @odesc: has looked at John.</paragraph>
            <paragraph>Jack is a Gifted. He will sense spirits, but is still made from flesh
                and blood so visible to mundanes.
                Jack’s Rx: Real Ghost
                Jack’s Tx: Real
                Jack’s @desc: This is Jack.
                Jack’s &amp;GHOSTDESC: (Not important, since it’s never visible)
                Jack’s @adesc: %N has looked at you.
                Jack’s @odesc: has looked at Jack.</paragraph>
            <paragraph>Frank is a ghost. He will see other spirits as well as mundanes, but won’t
                be visible to mundanes. He can also become visible to everybody.
                Frank’s Rx: Real Ghost
                Frank’s Tx: Ghost
                Frank’s @desc: This is Frank, looking human.
                Frank’s &amp;GHOSTDESC: This is Frank’s ghostly shape.
                Frank’s @adesc: %N has looked at you.
                Frank’s @odesc: has looked at Frank.</paragraph>
            <paragraph>Following are commands that each of the players enter and what they see.
                I’ll assume the +materialize command is defined like:
                &amp;CMD_MATERIALIZE &lt;cmdobject&gt;=$+materialize:@txlevel %#=Real; @pemit %#=You
                are now material.</paragraph>
            <block_quote>
                <definition_list>
                    <definition_list_item>
                        <term>John            |         Jack          |         Frank</term>
                        <definition>
                            <line_block>
                                <line><problematic ids="id4" refid="id3">|</problematic></line>
                            </line_block>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </block_quote>
            <paragraph>&gt; l                     |                       |
                A room                  |                       |
                This is a bare room.    |                       |
                Contents:               |                       |
                Jack                    |                       |
                Obvious exits:          |                       |
                Out &lt;O&gt;                 |                       |</paragraph>
            <block_quote>
                <paragraph><problematic ids="id6" refid="id5">|</problematic>&gt; l                    |
                    <problematic ids="id8" refid="id7">|</problematic>A room                 |
                    <problematic ids="id10" refid="id9">|</problematic>This is a bare room.   |
                    <problematic ids="id12" refid="id11">|</problematic>Contents:              |
                    <problematic ids="id14" refid="id13">|</problematic>John Frank             |
                    <problematic ids="id16" refid="id15">|</problematic>Obvious exits:         |
                    <problematic ids="id18" refid="id17">|</problematic>Out &lt;O&gt;                |
                    |                       <problematic ids="id20" refid="id19">|</problematic>&gt; l
                    |                       <problematic ids="id22" refid="id21">|</problematic>A room
                    |                       <problematic ids="id24" refid="id23">|</problematic>This is a bare room.
                    |                       <problematic ids="id26" refid="id25">|</problematic>Contents:
                    |                       <problematic ids="id28" refid="id27">|</problematic>John Jack
                    |                       <problematic ids="id30" refid="id29">|</problematic>Obvious exits:
                    |                       <problematic ids="id32" refid="id31">|</problematic>Out &lt;O&gt;</paragraph>
            </block_quote>
            <paragraph>&gt;l Jack                 |                       |
                Jack                    <problematic ids="id34" refid="id33">|</problematic>John has looked at you.|John has looked at Jack.
                This is Jack.           |                       |
                &gt;l Frank                |                       |
                I don’t see that here.  |                       |</paragraph>
            <block_quote>
                <paragraph><problematic ids="id68" refid="id67">|&gt;l Frank               |
                        |Frank                  |Jack has looked at you.
                        |This is Frank's ghostly|</problematic>
                    <problematic ids="id36" refid="id35">|</problematic>shape.                 |
                    |                       <problematic ids="id38" refid="id37">|</problematic>&gt;l John
                    <problematic ids="id40" refid="id39">|</problematic>Frank has looked at    <problematic ids="id42" refid="id41">|</problematic>John
                    <problematic ids="id44" refid="id43">|</problematic>John.                  <problematic ids="id46" refid="id45">|</problematic>This is John.
                    |                       <problematic ids="id48" refid="id47">|</problematic>&gt;+materialize
                    |                       <problematic ids="id50" refid="id49">|</problematic>You are now material.</paragraph>
            </block_quote>
            <paragraph>&gt;l Frank                |                       |
                Frank                   <problematic ids="id52" refid="id51">|</problematic>John has looked at     <problematic ids="id54" refid="id53">|</problematic>Frank has looked at you.
                This is Frank, looking  <problematic ids="id56" refid="id55">|</problematic>Frank.                 |
                human.                  |                       |</paragraph>
            <block_quote>
                <paragraph><problematic ids="id58" refid="id57">|</problematic>&gt;l Frank               |</paragraph>
            </block_quote>
            <paragraph>Jack has looked at      <problematic ids="id60" refid="id59">|</problematic>Frank                  <problematic ids="id62" refid="id61">|</problematic>John has looked at you.
                Frank.                  <problematic ids="id64" refid="id63">|</problematic>This is Frank, looking |</paragraph>
            <block_quote>
                <paragraph><problematic ids="id70" refid="id69">|human.                 |
                        |This is Frank's ghostly|</problematic>
                    <problematic ids="id66" refid="id65">|</problematic>shape.                 |</paragraph>
            </block_quote>
        </section>
        <section ids="example-2-a-wod-setup" names="example\ 2:\ a\ wod\ setup">
            <title>Example 2: A WoD setup</title>
            <paragraph>The reality levels will be defined like this:
                reality_level           Real 1
                reality_level           Obf1 2
                reality_level           Obf2 4
                reality_level           Obf3 8 OBFDESC
                reality_level           Obf4 16 OBFDESC
                reality_level           Obf5 32 OBFDESC
                reality_level           Umbra 64 UMBRADESC
                reality_level           Fae 128 FAEDESC
                reality_level           Shadow 256 SHADOWDESC
                reality_level           All 511</paragraph>
            <paragraph>5 levels of Obfuscation, Umbra, Dreaming, Wraiths. ‘All’ is a handy
                replacement for all levels, useful for wizards and wizobjects that should
                be visible on all levels. Also useful when you want to set an object’s
                levels to something without knowing what he had before.
                @rxlevel #276=!All Real
                !All will clear all levels, then the object will gain the Real level.
                There is more than one Obfuscation level because of the relation between
                Auspex and Obfuscation.
                A vampire with Obfuscate 2, should not be visible by one with Auspex 1.
                However one with Auspex 3 should see another vampire with Obfuscate 1, 2
                /or/ 3.
                Obfuscated players can move if they have Obf &gt; 1. Umbral and Shadow players
                should also be able to see most of the exits. So the exits at creation
                should have default levels of Real + Obf2 + Obf3 + Obf4 + Obf5 + Umbra +
                Shadow = 1 + 4 + 8 + 16 + 32 + 64 + 256 = 381</paragraph>
            <block_quote>
                <paragraph>def_exit_rx 381
                    def_exit_tx 381</paragraph>
            </block_quote>
            <paragraph>Obf1 is not included since an Obfuscated vampire should not be able to move
                if it only has Obf1. Therefore they won’t see the exits. If you want them
                to be able to see the exits, but not to use them, change the default Tx of
                the exits:</paragraph>
            <block_quote>
                <paragraph>def_exit_rx 381
                    def_exit_tx 383</paragraph>
            </block_quote>
            <paragraph>Joe the Mortal will have an RxLevel: Real and a TxLevel: Real
                Jack the Malk, who likes to walk around Obfuscated and has Obfuscate 2 will
                have an RxLevel: Real (he sees what the mortals see) but a TxLevel: Obf2
                Jimmy the Nossie, who is using the Mask and has Obfuscate 4, but doesn’t
                try to make himself invisible will have an RxLevel: Real (as Jack)
                and a TxLevel: Real Obf4. He will also set his @desc to what the mortals see and
                &amp;OBFDESC to his real slimy desc. Simply put, he will be visible to mortals,
                but not with his real desc.
                Aldrin the Gangrel, has Auspex 4 and activates it. Therefore, his TxLevel
                will still be Real, but RxLevel: Real Obf1 Obf2 Obf3 Obf4 (all of them). So
                he can see Joe, Jack and Jimmy’s both descs.
                Joe, on the other hand, won’t see Jack at all. He will still see Jimmy, but
                only Jimmy’s @desc, not the OBFDESC</paragraph>
            <paragraph>Frida the Fae… will have RxLevel: Real Fae and TxLevel: Real Fae. @desc
                set to the mundane desc, &amp;FAEDESC set to the Chimerical desc.
                Emily the Enchanted will have an RxLevel: Real Fae, but the TxLevel: Real.
                No &amp;FAEDESC on her, although she’ll be able to see it the one on Frida.
                Gil the Garou, while travelling through the Umbra, will have RxLevel: Umbra
                and TxLevel: Umbra. &amp;UMBRADESC is his friend. He won’t see mortals or other
                characters who are not in the Umbra.
                Barbie the Bastet, who’s only peeking in the Umbra, without going there,
                will have RxLevel: Umbra, TxLevel: Real. Dangerous position since she
                can’t see the things that see her.
                Deanna the Drake, who activates her spirit vision, will have
                RxLevel: Real Umbra and TxLevel: Real. She will see characters in Umbra and
                real world at the same time and perceive the desc appropiate to the realm
                the ohter character is in.
                Wanda the Wraith: RxLevel: Real Shadow, TxLevel: Shadow. Her @desc
                would be empty, but the &amp;SHADOWDESC should be set.
                Marie the Mortal+ Medium: RxLevel: Real Shadow, TxLevel: Real</paragraph>
            <paragraph>Global code objects that all characters should be able to use:
                RxLevel: All, TxLevel: All</paragraph>
        </section>
        <section ids="example-3-softcode" names="example\ 3:\ softcode">
            <title>Example 3: Softcode</title>
            <paragraph>Considering the config directives from example 2 and assuming a function
                getstat(&lt;dbref&gt;,&lt;stat&gt;) that will return the value of a player’s stat from
                the sheet here are softcode examples that implement some of the WoD powers.
                In a real game you would have to use some more checks, of course.</paragraph>
            <paragraph>@create Reality Levels Commands (RLS)
                &amp;CMD_OBFON rls=$+obf/on:@switch [setr(0, getstat(%#,Obfuscate))]=0, @pemit
                %#=You don’t have Obfuscate!, {@txlevel %#=!All Obf%q0; @pemit %#=You are
                now invisible.}
                &amp;CMD_OBFOFF rls=$+obf/off:@txlevel %#=Real; @pemit %#=You are now visible.
                @@ Note: +obf/on clears all TxLevels before setting the appropiate Obf
                @@ This is necesary, because a character might advance from Obf2 to
                @@ Obf3 and he should be visible /only/ on the Obf3 level.
                @@ +obf/off simply sets the Real Tx level, without clearing the Obf. The
                @@ reason is the Mask. Players with Obf3 or higher who use the Mask should
                @@ +obf/on, then +obf/off after approval and everything is set.
                &amp;CMD_AUSPEXON rls=$+auspex/on:@switch [setr(0, getstat(%#, Auspex))]=0,
                @pemit %#=You don’t have Auspex!, {@rxlevel %#=[iter(lnum(1, %q0), Obf##)];
                @pemit %#=Auspex enabled.}
                &amp;CMD_AUSPEXOFF rls=$+auspex/off:@switch [hasrxlevel(%#, Obf1)]=0, @pemit %#=
                You don’t have Auspex enabled!, {@rxlevel %#=[iter(lnum(1, 5), !Obf##)];
                @pemit %#=Auspex disabled.}
                &amp;CMD_UMBRAENTER rls=$+umbra/enter:@rxlevel %#=!Real Umbra; @txlevel %#=
                !Real Umbra; @pemit %#=You are now in the Umbra.
                &amp;CMD_UMBRALEAVE rls=$+umbra/leave:@rxlevel %#=Real !Umbra; @txlevel %#=
                Real !Umbra; @pemit %#=You left the Umbra.
                &amp;CMD_PEEKON rls=$+peek/on:@switch hastxlevel(%#,Umbra)=1, {@rxlevel %#=Real
                !Umbra; @pemit %#=You are now peeking in the real world}, {@rxlevel %#=!Real
                Umbra; @pemit %#=You are now peeking into the Umbra}
                &amp;CMD_PEEKOFF rls=$+peek/off:@rxlevel %#=!Real !Umbra [setinter(Real Umbra,
                txlevel(%#))]; @pemit %#=You are no longer peeking.</paragraph>
        </section>
    </section>
</document>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush/rhostmush-handbook/source/troubleshooting.rst">
    <section ids="troubleshooting" names="troubleshooting">
        <title>Troubleshooting</title>
        <section ids="reporting-bugs-or-getting-help" names="reporting\ bugs\ or\ getting\ help">
            <title>Reporting bugs or getting help</title>
            <paragraph>If you find any bugs or problems, notify one of the developers of RhostMUSH and
                a patch or workaround will be made available as soon as possible.  Current
                developers are:  Seawolf, Thorin, Ashen-Shugar, Lensman, Kale, Mac, Zenty,
                Ambrosia, Amos, and Morgan.  They can be found around the net.</paragraph>
            <section ids="troubleshooting-issues-with-starting-up" names="troubleshooting\ issues\ with\ starting\ up">
                <title>Troubleshooting issues with starting up</title>
                <section ids="problem-if-it-says-the-shared-id-is-already-in-use" names="problem:\ if\ it\ says\ the\ shared\ id\ is\ already\ in\ use">
                    <title>Problem: If it says the shared ID is already in use</title>
                    <paragraph>A1: please verify that it is the right shared debug_id in your netrhost.conf file</paragraph>
                    <paragraph>A2: Force a start by running:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush -f</literal_block>
                </section>
                <section ids="problem-your-log-file-is-massive-and-your-mush-is-running" names="problem:\ your\ log\ file\ is\ massive\ and\ your\ mush\ is\ running">
                    <title>Problem: Your log file is massive and your mush is running</title>
                    <paragraph>A1: To rotate this use the @logrotate command. See wizhelp on @logrotate</paragraph>
                </section>
                <section ids="problem-the-database-flatfile-you-re-loading-can-t-load-because-a-db-is-already-defined" names="problem:\ the\ database\ flatfile\ you're\ loading\ can't\ load\ because\ a\ db\ is\ already\ defined">
                    <title>Problem: The database flatfile you’re loading can’t load because a db is already defined</title>
                    <paragraph>A1: remove netrhost.db* and netrhost.gdbm* from your data directory</paragraph>
                </section>
                <section ids="problem-the-mail-database-won-t-load-and-mail-shows-offline" names="problem:\ the\ mail\ database\ won't\ load\ and\ mail\ shows\ 'offline'">
                    <title>Problem: The mail database won’t load and mail shows ‘offline’</title>
                    <paragraph>A1: from within the MUSH run:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">wmail/load</literal_block>
                </section>
            </section>
        </section>
        <section ids="stack-limit-and-debugging" names="stack\ limit\ and\ debugging">
            <title>Stack limit and debugging</title>
            <paragraph>Rhost uses a stack limit in the debug monitor.</paragraph>
            <paragraph>This stack limit is set to a reasonable amount of 1000.
                This is defined in the debug.h file in the hdrs directory.</paragraph>
            <paragraph>This will directly impact the function_recursion_limit from being
                set above 100.  If, for whatever reason, you really must have
                a ridiculously high recursion limit, then it is a suggestion to
                manually modify the stack limit in debug.h to a higher number.</paragraph>
            <paragraph>We have reasonably set it to 10000 without too much issue, but keep
                in mind, the overhead is higher for every stack you throw on the
                process table.  Higher stack means more memory used.</paragraph>
            <paragraph>Also be aware that your shell stack limit directly is affected
                to this value.</paragraph>
            <paragraph>Type:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">ulimit -a</literal_block>
            <paragraph>This will show you your shell stack limits.  Do NOT set the
                STACKMAX value higher than your shell’s stack value.</paragraph>
            <paragraph>The value in ~/Rhost/Server/hdrs/debug.h is currently set as:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">#define STACKMAX 1000</literal_block>
            <paragraph>Feel free to change this to a higher value if you wish.</paragraph>
            <paragraph>The caveat.  This effects the debug stack daemon.  Meaning,
                the only way for this to be updated is through @shutdown and
                then a fresh ./Startmush.</paragraph>
            <paragraph>A @reboot WILL NOT LOAD IN A NEW DEBUG MONITOR!!!!</paragraph>
            <paragraph>You can issue @list stack to see the current stack ceiling ingame.</paragraph>
        </section>
        <section ids="how-to-reset-the-password-for-1" names="how\ to\ reset\ the\ password\ for\ #1">
            <title>How to reset the password for #1</title>
            <warning>
                <paragraph>You can only use one of these options at a time. Make sure to change back your nerhost.conf and then reboot after making the changes.</paragraph>
            </warning>
            <section ids="method-1-reset-to-default-password" names="method\ 1:\ reset\ to\ default\ password">
                <title>Method 1: Reset to Default Password</title>
                <paragraph>in your netrhost.conf file add:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">newpass_god 777</literal_block>
                <paragraph>This will reset #1’s password to the default ‘Nyctasia’.</paragraph>
            </section>
            <section ids="method-2-increase-permissions-of-immortals" names="method\ 2:\ increase\ permissions\ of\ immortals">
                <title>Method 2: Increase Permissions of Immortals</title>
                <paragraph>in your netrhost.conf file add:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">newpass_god 1</literal_block>
                <paragraph>This will allow IMMORTAL players to @newpassword #1 upon reboot.</paragraph>
            </section>
        </section>
        <section ids="troubleshooting-difficulties-compiling-rhostmush" names="troubleshooting\ difficulties\ compiling\ rhostmush">
            <title>Troubleshooting difficulties compiling RhostMUSH</title>
            <section ids="changes-to-conf-for-high-bit-cpus" names="changes\ to\ conf\ for\ high-bit\ cpus">
                <title>Changes to conf for high-bit CPUs</title>
                <paragraph>RhostMUSH automatically detects 64-bit platforms, and should compile
                    cleanly on these.</paragraph>
                <paragraph>In case you are trying to compile Rhost on some other crazy-wide CPUs
                    such as the PS2, PS3 or other 128 or 256 bit CPUs, you can easily do
                    so by changing a few lines of code in conf.c.</paragraph>
                <paragraph>change:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">typedef unsigned int    pmath1;
typedef int             pmath2;
#define ALLIGN1 4</literal_block>
                <paragraph>to:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">typedef unsigned long   pmath1;
typedef long            pmath2;
#define ALLIGN1 8</literal_block>
                <note>
                    <paragraph>Replace 8 with the size of your CPU’s long integer. (4 for 32-bit,
                        8 for 64-bit, 16 for 128-bit, etc etc)</paragraph>
                </note>
                <paragraph>RhostMUSH has only been tested to work on the AMD64, but there is no
                    reason to believe the same will not hold true for IA64.</paragraph>
            </section>
            <section ids="changes-to-autconf-for-certain-systems" names="changes\ to\ autconf\ for\ certain\ systems">
                <title>Changes to autconf for certain systems</title>
                <paragraph>You should not have to worry about this, but incase something really
                    weird occurs, you may need to look into these changes…</paragraph>
                <paragraph>The autoconfig.h file needs to have modifications to it by hand.</paragraph>
                <paragraph>There are three manual entries:</paragraph>
                <paragraph>This one sets how it defines the int to character pointer.  It’s safe
                    to keep it as ‘unsigned int’ for 32 bit platforms.  For non 32-bit,
                    define it to  how an int is defined on that system:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">typedef unsigned int    pmath1;</literal_block>
                <paragraph>This one sets how it defines the signed int to character pointer.  Same
                    restrictions apply as above for unsigned int:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">typedef int     pmath2;</literal_block>
                <paragraph>This sets the allignment for the given platform.  4 represents a 32 bit
                    platform.  8 would represent a 64 bit platform, etc.  Change accordingly:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">#define ALLIGN1 4</literal_block>
                <warning>
                    <paragraph>Make sure these three entries are defined in your autoconf.h file else
                        the mush will not compile.</paragraph>
                </warning>
            </section>
        </section>
        <section ids="dealing-with-db-corruption" names="dealing\ with\ db\ corruption">
            <title>Dealing with DB Corruption</title>
            <paragraph>Ok.  Your database won’t come up.</paragraph>
            <paragraph>If you are reading this, then likely the scenerio is one of the following:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>The mush says it can’t find your database files.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The mush says it can’t read or load your database files.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The mush seems to load fine but I can’t log in anyone and when I do
                        all the names and attributes of things seem to be gone!</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Bringing up your mail database</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>First thing is first.  Don’t have a panic attack.</paragraph>
            <section ids="if-the-mush-says-it-can-t-find-your-database-files" names="if\ the\ mush\ says\ it\ can't\ find\ your\ database\ files">
                <title>If the mush says it can’t find your database files</title>
                <section ids="check-the-names-of-the-database-files-in-your-data-directory" names="check\ the\ names\ of\ the\ database\ files\ in\ your\ 'data'\ directory">
                    <title>Check the names of the database files in your ‘data’ directory</title>
                    <paragraph>They should be named something like:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">netrhost.db
netrhost.db.old
netrhost.db.old.prev
netrhost.gdbm.dir
netrhost.gdbm.pag</literal_block>
                    <paragraph>And you may see a netrhost.db.flat</paragraph>
                </section>
                <section ids="check-your-netrhost-conf-file" names="check\ your\ netrhost.conf\ file">
                    <title>Check your netrhost.conf file</title>
                    <paragraph>If you never touched the *database or muddb_name params, you should be good.</paragraph>
                    <paragraph>Verify your *database params (and muddb_name) are still set to ‘netrhost’ as
                        part of the name.  Ergo, the default values and you didn’t change them.
                        These should match up with the filenames in your data directory.</paragraph>
                    <paragraph>If these names do not match up, it can’t find the database files to load.
                        So you shouldn’t have to change these names, ever. :)</paragraph>
                </section>
                <section ids="check-your-mush-config-file" names="check\ your\ mush.config\ file">
                    <title>Check your mush.config file</title>
                    <paragraph>If you never modified this file, you should be good.</paragraph>
                    <paragraph>The gamename should be ‘netrhost’ for this file.  This does NOT control
                        the name of your game.  This controls the name of all the files
                        as associated to the mush.  So changing this means the netrhost.conf
                        file, all your database files, and so forth.  Please don’t change this :)</paragraph>
                </section>
            </section>
            <section ids="if-the-mush-says-it-can-t-read-or-load-your-database-files" names="if\ the\ mush\ says\ it\ can't\ read\ or\ load\ your\ database\ files">
                <title>If the mush says it can’t read or load your database files</title>
                <paragraph>Double check everything for the previous issue. Make sure everything is named properly.</paragraph>
                <section ids="verify-you-have-enough-disk-space-quota" names="verify\ you\ have\ enough\ disk\ space.\ (quota)">
                    <title>Verify you have enough disk space. (quota)</title>
                    <paragraph>Some account have a limited quota to run in.  If you reached or exceed
                        your disk quota, you can have a corrupted database.  So always keep
                        your eye on the size.  quota -s to see a human readable format to see
                        how much quota you have left.  You want to make sure current in use is
                        below the ‘grace’ and soft/hard limits shown.  If not, you’re out of
                        space.</paragraph>
                    <paragraph>You will need to remove some files before you repair and bring up your
                        mush again.  Try to keep your quota at least 200 megs free to allow
                        plenty of wonderful growth space for the mush.</paragraph>
                </section>
                <section ids="verify-you-have-enough-disk-space-system" names="verify\ you\ have\ enough\ disk\ space.\ (system)">
                    <title>Verify you have enough disk space.  (system)</title>
                    <paragraph>The second way you can run out of disk space is by the filesystem itself.
                        do a df -h . in your ‘game’ directory’.  That is df -h &lt;period&gt;.
                        This will return how much disk space is being used and how much remains.
                        If it shows 100% used, you’re out of disk space and the db is corrupt.</paragraph>
                    <paragraph>At this point, you’re pretty screwed.  You can see if anything exists
                        in your system to free up some space, but if the filesystem itself
                        is filled, reach out to the owner of the server and let them know.
                        It’s a much bigger deal than just your mush if that’s the case.</paragraph>
                    <paragraph>Until this issue is resolved, you can not repair and bring up your mush.
                        No disk to run the game.</paragraph>
                </section>
            </section>
            <section ids="if-the-mush-seems-to-load-fine-but-i-can-t-log-in-anyone-and-when-i-do-all-the-names-and-attributes-of-things-seem-to-be-gone" names="if\ the\ mush\ seems\ to\ load\ fine\ but\ i\ can't\ log\ in\ anyone\ and\ when\ i\ do\ all\ the\ names\ and\ attributes\ of\ things\ seem\ to\ be\ gone!">
                <title>If the mush seems to load fine but I can’t log in anyone and when I do all the names and attributes of things seem to be gone!</title>
                <paragraph>Ok, at this point you likely had your mush up when the physical server
                    went down hard.  Weither through an emergency shutdown or a physical
                    power outage, your db likely was brought down hard during a write,
                    so it left it in a corrupt state.  These things happen.  This is
                    why we always strongly request you make daily flatfile dumps.</paragraph>
                <paragraph>So, to recover your database.</paragraph>
                <section ids="the-bad-news" names="the\ bad\ news">
                    <title>The bad news</title>
                    <paragraph>If you have no flatfile backup or never bothered with backups?
                        I’m sorry, at this point you’re SOA.  There’s no easy way to
                        recover a corrupted binary database.  If you absolutely need
                        data out of it we may be able to help you to piece meal things
                        out of it, but otherwise it’s a lost cause.  You’ll have to start
                        over from scratch.  I’m sorry.</paragraph>
                </section>
                <section ids="the-good-news" names="the\ good\ news">
                    <title>The good news</title>
                    <paragraph>If you made backups, or if the server had a normal shutdown, you
                        likely have a flatfile backup.  You will see a netrhost.db.flat
                        in either the ‘data’ directory or ‘prevflat’ directory.  That
                        is your manual flatfile backup.</paragraph>
                    <paragraph>If the server had a normal shutdown, you will see a file called
                        netrhost.db.TERMFLAT.  This is a scram-emergency db flatfile.
                        It attempts to write this at the time of server shutdown to
                        hopefully keep a clean backup in the case of issues since
                        it identifies the server is coming down hard.  Make sure
                        if you plan to use the TERMFLAT as your recovery flatfile
                        that the very last line shows something like ** END OF DUMP **.
                        That shows you had a successful backup.</paragraph>
                </section>
                <section ids="now-to-restore-your-database" names="now,\ to\ restore\ your\ database?">
                    <title>Now, to restore your database?</title>
                    <paragraph>Please refer to the file ‘README.DBLOADING’.</paragraph>
                </section>
            </section>
            <section ids="bringing-up-your-mail-database" names="bringing\ up\ your\ mail\ database">
                <title>Bringing up your mail database</title>
                <paragraph>Your mail db may or may not come up at this point.</paragraph>
                <section ids="if-after-restoring-main-database-your-mail-database-works" names="if\ after\ restoring\ main\ database\ your\ mail\ database\ works">
                    <title>If after restoring main database your mail database works</title>
                    <paragraph>If your mail database came up and does not show
                        ‘Mail: mail is currently off’ then you should be good to go.</paragraph>
                    <paragraph>Please issue on the MUSH:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">wmail/fix
wmail/lfix</literal_block>
                    <paragraph>This will put your mail system in sync with your current database and
                        fix up any errors that may exist.</paragraph>
                    <paragraph>wmail/fix fixes the mail.</paragraph>
                    <paragraph>wmail/lfix loads in the fixes.</paragraph>
                </section>
                <section ids="if-after-restoring-main-database-your-mail-database-does-not-work" names="if\ after\ restoring\ main\ database\ your\ mail\ database\ does\ not\ work">
                    <title>If after restoring main database your mail database does not work</title>
                    <paragraph>If your mail database is not up and shows ‘Mail: mail is currently off’ then your mail db is currupt.</paragraph>
                </section>
            </section>
        </section>
        <section ids="dealing-with-a-corrupt-mail-database" names="dealing\ with\ a\ corrupt\ mail\ database">
            <title>Dealing with a corrupt mail database</title>
            <paragraph>It says when you try to access mail that mail is disabled and/or off.</paragraph>
            <paragraph>Nothing you do can bring it on line.  Well, this is bad, but not horrible.</paragraph>
            <paragraph>The mail db is totally separate from the main game database.  This means
                that it in no way damaged or corrupted your main mush database.</paragraph>
            <paragraph>The bad news?  Yes.  Your mail database is corrupt.  To bring it back,
                is it hopes that you read ahead of time about how to backup your mush,
                which would include the mail database.</paragraph>
            <section ids="backing-up-your-mail-database" names="backing\ up\ your\ mail\ database">
                <title>Backing up your mail database</title>
                <paragraph>You should be making a flatifile dump of mail db daily by running on the MUSH:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">wmail/unload</literal_block>
                <paragraph>To recover your mail, it assumes you have a mail flatfile in either the
                    ~/Server/game/data directory or the ~/Server/game/prevflat directory.  The
                    latter directory is used in junction to the backup_flat.sh and will always
                    house the latest flatfile if not one recently dumped in your data directory.</paragraph>
            </section>
            <section ids="automatically-recovering-your-mail-database" names="automatically\ recovering\ your\ mail\ database">
                <title>Automatically recovering your mail database</title>
                <paragraph>If you have a flatfile dump of your mail db, run this command on the MUSH:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">wmail/load</literal_block>
                <paragraph>Yup, that’s it.  It’ll take care of everything else.  Isn’t automation grand?</paragraph>
                <paragraph>Doesn’t even require a reboot :)</paragraph>
                <note>
                    <paragraph>You may at this point wish to run the following:
                        wmail/fix  – this fixes the mail database and sync’s it to the mush db.
                        wmail/lfix – this loads in the fixed mail database</paragraph>
                </note>
                <paragraph>If you have a very old mail database, this is likely going to be required
                    to sync against nuked players and other changes to the game since the flatfile.</paragraph>
                <paragraph>If this is a new db that you have, you can skip the fixing.</paragraph>
            </section>
            <section ids="manually-recovering-your-mail-database" names="manually\ recovering\ your\ mail\ database">
                <title>Manually recovering your mail database</title>
                <paragraph>To recover your mail manually, you need to delete your mail databases,
                    reboot, then reload your mail flatfiles.  If you have no mail flatfiles,
                    well, you’re going to have to start over with the mail database.  Sorry.</paragraph>
                <paragraph>First, go into the ‘game’ subdirectory.  Inside that directory is a ‘data’
                    directory.</paragraph>
                <paragraph>You will be deleting all the files with the following names:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">RhostMUSH.mail.*                (like RhostMUSH.mail.dir/RhostMUSH.mail.pag)
RhostMUSH.folder.*              (like RhostMUSH.folder.dir/RhostMUSH.folder.pag)</literal_block>
                <warning>
                    <paragraph>DO NOT DELETE OTHER NAMED FILES!!!</paragraph>
                </warning>
                <paragraph>Once these files are deleted, you may issue a @reboot to restart the mush.
                    This will unlock the mail system and load in a fresh db.</paragraph>
                <paragraph>Now, if you have flatfiles of the old mail database, you will see in either
                    the ‘data’ directory or the ‘prevflat’ directory files that are called:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">RhostMUSH.dump.folder
RhostMUSH.dump.mail</literal_block>
                <paragraph>Make sure these two files are in the ‘data’ subdirectory.  Copy them in
                    if they exist in your ‘prevflat’ directory.</paragraph>
                <paragraph>Once they are in the ‘data’ directory, within the mush type: wmail/load</paragraph>
                <paragraph>This loads in the flatfile and recover the mail database.</paragraph>
                <paragraph>Now, at this point the mail db may not be 100% in-sync with the game db.</paragraph>
                <paragraph>So let’s fix it.</paragraph>
                <paragraph>wmail/fix   – this will run a fix on the mail db and repair any issues.</paragraph>
                <paragraph>wmail/lfix  – this will load the fixed flatfile back into the mush.</paragraph>
                <paragraph>At this point you should be good to go.</paragraph>
            </section>
        </section>
    </section>
</document>

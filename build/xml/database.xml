<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush/rhostmush-handbook/source/database.rst">
    <substitution_definition names="br"><raw format="html .. force a line break in html output (blank lines needed here)" xml:space="preserve">&lt;br /&gt;</raw></substitution_definition>
    <substitution_definition names="p"><raw format="html .. force a blank line in html output (blank lines needed here)" xml:space="preserve">&lt;p&gt;&lt;/p&gt;</raw></substitution_definition>
    <comment xml:space="preserve">These are replacement strings for non-ASCII characters used within the project
using the same name as the html entity names (e.g., &amp;copy;) for that character</comment>
    <substitution_definition ltrim="1" names="copy">©</substitution_definition>
    <substitution_definition ltrim="1" names="trade">™</substitution_definition>
    <substitution_definition ltrim="1" names="reg">®</substitution_definition>
    <substitution_definition ltrim="1" names="deg">°</substitution_definition>
    <substitution_definition names="plusminus" rtrim="1">±</substitution_definition>
    <substitution_definition names="micro" rtrim="1">µ</substitution_definition>
    <substitution_definition ltrim="1" names="sup2">²</substitution_definition>
    <section ids="database" names="database">
        <title>Database</title>
        <section ids="loading-an-existing-database" names="loading\ an\ existing\ database">
            <title>Loading an existing Database</title>
            <paragraph>To load in a previous database, you run the db_load script.</paragraph>
            <paragraph>From the game directory you would type:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./db_load data/netrhost.gdbm yourflatfilehere data/netrhost.db.new</literal_block>
            <note>
                <paragraph>You may also do: ./Startmush
                    Then you just follow the prompts to load in your flatfile there.</paragraph>
            </note>
            <paragraph>If you wish to have #1's password reset to 'Nyctasia' please add this
                to the bottom of your netrhost.conf file:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">newpass_god 777</literal_block>
            <paragraph>The caveat is that you must not have any netrhost.db* or netrhost.gdbm* files
                in your data directory prior to loading it in.  It'll error out if previous
                files exist.  So you will need to move all files that start with netrhost.db*
                and all files that start with netrhost.gdbm* to another directory.</paragraph>
            <paragraph>Your flatfile tends to be named 'netrhost.db.flat' which is in your data
                directory.  You can, however, name your flatfile anything you want and have
                it in any directory you want.</paragraph>
            <paragraph>To make a flatfile in game, you just issue @dump/flat.  You can specify
                a filename after it, otherwise it assumes the name 'netrhost.db.flat'.</paragraph>
        </section>
        <section ids="converting-a-flatfile-database-for-use-in-rhostmush" names="converting\ a\ flatfile\ database\ for\ use\ in\ rhostmush">
            <title>Converting a flatfile database for use in RhostMUSH</title>
            <paragraph>In the ~/Server/convert directory there is a script called 'doconvert.sh'</paragraph>
            <paragraph>This script will convert most flatfiles from existing mush engines to
                RhostMUSH.  The exception is PennMUSH 1.8.0 and later.  For this there is a
                BETA converter penn18x_converter.tgz.  This is proven to work, most of the time,
                with codebases between 1.8.0 and 1.8.2.  It has not been fully vetted with
                the latest PennMUSH databases.  Our apologies.</paragraph>
            <paragraph>To convert a non-pennmush game (or a pennmush 1.7.4 or earlier), you first
                need a valid flatfile of the game you're wanting to convert.  Please refer
                to the documentatation of the mush engine in question (MUX, Penn 1.7, TM2/3)
                on how to do this.  Once you have it type::</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./doconvert.sh FLATFILETOCONVERT FLATFILEOUTPUT</literal_block>
            <paragraph>In this instance, FLATFILETOCONVERT will be the filename (with full path) to
                the flatfile you are wishing to convert.</paragraph>
            <paragraph>The FLATFILEOUTPUT is anyfilename you wish to name the RhostMUSH converted
                flatfile.  I suggest netrhost_converted.db.flat so you know by the name
                what it is.</paragraph>
            <paragraph>Follow what it asks for and just let it do its thing.</paragraph>
        </section>
        <section ids="note-about-compiling" names="note\ about\ compiling">
            <title>Note about Compiling</title>
            <paragraph>If you are importing a MUX2 flatfile, make ABSOLUTELY SURE that you select
                mux passwords as a compatibility option, or you will NOT BE ABLE to log in
                to players as the password will not be recognizeable.</paragraph>
            <paragraph>Make sure to keep QDBM selected as it's a much more stable database engine
                that does not have attribute limit restrictions like GDBM does.</paragraph>
            <paragraph>If you are converting from a Penn, TinyMUSH, or MUX database, make sure you
                drill down into the LBUF section and select, at minimum, 8K lbufs.  You likely
                want that anyway as it gives you far more room for attribute content storage.</paragraph>
            <paragraph>You can go up to 32K safely.  While 64k is safe and does work, there are issues
                with networking and older routers that use a 32K TCP buffer size that can
                at times cut off the data as overflow resulting in output to the end-point
                players not receiving their data.  So it is strongly recommended not to go
                above 32K in lbuffer size.</paragraph>
            <paragraph>Go ahead and select 64 char attributes.  It allows you to have 64 characters
                for attribute names.  It's handy to have.</paragraph>
            <paragraph>If you wish at this point to set up mysql and/or sqlite, you  may do so.
                Yes, you can use them in parallel without any issue.</paragraph>
        </section>
    </section>
</document>

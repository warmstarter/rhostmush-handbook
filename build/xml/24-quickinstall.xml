<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush-handbook/source/24-quickinstall.rst">
    <section ids="quickinstall-guide-to-rhostmush" names="quickinstall\ guide\ to\ rhostmush">
        <title>Quickinstall guide to RhostMUSH</title>
        <paragraph>Welcome to OpenSource Rhostmush!</paragraph>
        <section ids="obtaining-rhostmush" names="obtaining\ rhostmush">
            <title>Obtaining RhostMUSH</title>
            <paragraph>It is assumed that you have gotten to this point with the following command:</paragraph>
            <paragraph>git clone <reference refuri="https://github.com/RhostMUSH/trunk">https://github.com/RhostMUSH/trunk</reference> Rhost</paragraph>
            <paragraph>If you did NOT get it this way, your file permissions may not be properly set
                up.  Please type:</paragraph>
            <block_quote>
                <paragraph>chmod +rx bin/<emphasis>.sh src/</emphasis>.sh game/<emphasis>.sh game/Startmush game/db_</emphasis></paragraph>
            </block_quote>
            <paragraph>This makes sure all the build scripts are properly made executable.
                This will result in ‘permission denied’ or similar results when running a script.</paragraph>
            <paragraph>Once ready to compile type:</paragraph>
            <block_quote>
                <paragraph>make confsource</paragraph>
            </block_quote>
            <paragraph>This will bring up a menu where you can selection options.</paragraph>
        </section>
        <section ids="important-before-you-actually-start-building" names="important\ before\ you\ actually\ start\ building">
            <title>Important before you actually start building</title>
            <paragraph>The main parts of making your RhostMUSH, easy pleasy:
                0.  The stunnel directory contains TLS/SSL connectivity.  This has to be linked</paragraph>
            <block_quote>
                <paragraph>to another port and will tunnel to the mush port.  The README file explains
                    how to set up and configure your TLS/SSL connection.</paragraph>
            </block_quote>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>./patch.sh – This makes sure you have the latest code.
                        If you got this by git clone <reference refuri="https://github.com/RhostMUSH/trunk">https://github.com/RhostMUSH/trunk</reference>
                        then you can ignore patching.  You can use ./patch.sh at any
                        time to update your code.  It ignores local.c incase you make
                        your own modules.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>make confsource.  Yup, it’s menu driven, nifty eh?
                        Options you may want to select (other than the defaults):
                        5  (%c is selected by default, but choose %x as well for MUX/TM3 compat)
                        9  (if you want $commands to require the COMMAND flag)
                        16 (if you want a wider WHO listing like older versions of MUX)
                        22 (if you’re converting a TinyMUSH3 or TinyMUX/MUX2 flatfile)
                        24 (if you have issues with -lssl not being found)
                        B3 (for 64 character attribute names)
                        B6 (select 8K for Penn/MUX2/TM3 default, up to 32K.  64K is network intensive)
                        B5 (will be autoselected if you choose 8K or more.  Pick this anyway)
                        B4 (if you have sqlite libraries and wish to use this)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>‘r’ to compile with the settings you selected.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Modify your netrhost.conf file as specified.  Make sure to align
                        your port and debug_id as shown in the netrhost.conf file.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If you wish to port in an old flatfile, please refer to the readme directory
                        on how to port your flatfile in (README.DBLOADING).</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="using-the-prebuilt-flatfile" names="using\ the\ prebuilt\ flatfile">
            <title>Using the prebuilt flatfile</title>
            <paragraph>There are pre-loaded flatfile databases you can use at this point.  The netrhost.db.flat
                and corrisponding netrhost.conf file will be located in the minimal-DBs/minimal_db directory.</paragraph>
            <paragraph>You may auto-load the minimal db and corresponding netrhost.conf file with the
                command:</paragraph>
            <block_quote>
                <paragraph>./minimal.sh</paragraph>
            </block_quote>
            <paragraph>This is ran from within the ‘game’ directory.  Once this is ran, you will need
                to customize the netrhost.conf file for your purposes.  The port and debug_id must
                be changed at the very least.  Keep the debug_id coordinated to the port as described.</paragraph>
            <section ids="to-load-a-prebuilt-flatfile" names="to\ load\ a\ prebuilt\ flatfile">
                <title>To load a prebuilt flatfile</title>
                <paragraph>To use these follow these steps:
                    1.  Make a backup of your existing netrhost.conf file</paragraph>
                <block_quote>
                    <paragraph>–&gt; cp game/netrhost.conf game/netrhost.conf.backup</paragraph>
                </block_quote>
                <enumerated_list enumtype="arabic" prefix="" start="2" suffix=".">
                    <list_item>
                        <paragraph>Copy the netrhost.conf file into your game directory
                            –&gt; cp -f ./minimal-DBs/minimal_db/netrhost.conf ./game/netrhost.conf</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>At this point you can modify your netrhost.conf file settings in your game directory.
                            Using an editor modify the ‘port’ and ‘debug_id’ respectively in your netrhost.conf as stated.
                            The ‘port’ will be the port the mush listens on, the debug_id is for the debug-stack and is
                            your port with a ‘5’ at the end.  So if your port is 4444, the debug_id is 44445</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Load in the flatfile into the mush (You could do this in the Startmush as well)
                            Manually:
                            –&gt; cd game
                            –&gt; ./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new</paragraph>
                        <paragraph>Start your mush:
                            –&gt; ./Startmush</paragraph>
                        <paragraph>This will load the db that you loaded.</paragraph>
                        <paragraph>—————OR——-</paragraph>
                        <paragraph>From Startmush:
                            –&gt; ./Startmush</paragraph>
                        <paragraph>when prompted, hit &lt;RETURN&gt; for searching then select the number of the netrhost.db.flat that is
                            listed as ~/minimal-DBs/minimal_db/netrhost.db.flat</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
        <section ids="starting-from-scratch-with-a-brand-new-database" names="starting\ from\ scratch\ with\ a\ brand\ new\ database">
            <title>Starting from scratch with a brand new database</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>You can modify your netrhost.conf file settings in your game directory.
                        Using an editor modify the ‘port’ and ‘debug_id’ respectively in your netrhost.conf as stated.
                        The ‘port’ will be the port the mush listens on, the debug_id is for the debug-stack and is
                        your port with a ‘5’ at the end.  So if your port is 4444, the debug_id is 44445</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Start your mush:
                        –&gt; ./Startmush</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>You can use the ‘vi’ editor or ‘nano’ if you like a more menu driven DOS like experience.
                You can of course use any other editor you’re familar with.</paragraph>
            <paragraph>For a more thorough understanding of how to set things up, keep reading!</paragraph>
            <paragraph>If you have syntax issues running ‘make config’, ‘make confsource’
                or ‘make bugreport’ please run the script: ./bin/script_setup.sh</paragraph>
            <paragraph>Now… things you may need to do on errors.</paragraph>
        </section>
        <section ids="instructions-for-starting-a-new-rhostmush" names="instructions\ for\ starting\ a\ new\ rhostmush">
            <title>Instructions for starting a new RhostMUSH</title>
            <section ids="setup-directory-permissions" names="setup\ directory\ permissions">
                <title>Setup directory permissions</title>
                <block_quote>
                    <paragraph>run ./dirsetup.sh</paragraph>
                    <paragraph>This is a simple script that will change file permissions
                        and directory permissions to properly protect RhostMUSH.
                        These settings generally work fine out of the box so
                        you likely won’t even have to set this up if you don’t want to.</paragraph>
                </block_quote>
            </section>
            <section ids="compile-the-source-code" names="compile\ the\ source\ code">
                <title>Compile the source code</title>
                <block_quote>
                    <paragraph>Make and run the RhostMUSH source
                        Type:  make confsource</paragraph>
                    <paragraph>If you get an error running the script itself,
                        type: ./bin/script_setup.sh</paragraph>
                    <paragraph>Then type: make confsource</paragraph>
                    <paragraph>After the compile process is done, you should be good to go.
                        If it complains about missing binaries then type ‘make links’</paragraph>
                </block_quote>
                <section ids="manual-configuration-of-source-code" names="manual\ configuration\ of\ source\ code">
                    <title>Manual configuration of source code</title>
                    <block_quote>
                        <block_quote>
                            <paragraph>To do manual configuration (skip if the previous step worked for you)
                                And yes, this is a bit of a pain in the bottom, hopefully you
                                will not need this.</paragraph>
                            <block_quote>
                                <paragraph>You need the following definitions defined to make this
                                    work:  TINY_U, USE_SIDEEFFECTS, MUX_INCDEC, ATTR_HACK</paragraph>
                                <block_quote>
                                    <paragraph>(u()/u2() switched)
                                        (sideeffects)
                                        (inc()/xinc() switched)
                                        (support for _/~ attribs)</paragraph>
                                </block_quote>
                                <paragraph>You only need to do this if you received the RhostMUSH src.
                                    If you received a binary, continue on to the next part.</paragraph>
                                <paragraph>To compile the code, just type ‘make confsource’.  It will
                                    prompt you with settings on what you need to do.  If you
                                    just want to quickly hand edit the Makefile, it is in the
                                    directory src (full path src/Makefile).  Then you may just
                                    run ‘make source’, if you so choose to hand-edit the Makefile.</paragraph>
                            </block_quote>
                        </block_quote>
                        <paragraph>After the compile process is done, type ‘make links’!</paragraph>
                        <block_quote>
                        </block_quote>
                    </block_quote>
                </section>
            </section>
        </section>
        <section ids="loading-a-database-for-your-mush" names="loading\ a\ database\ for\ your\ mush">
            <title>Loading a database for your MUSH</title>
            <paragraph>You now have a choice of optionally starting at a provided database or starting from scratch.</paragraph>
            <section ids="option-only-perform-these-steps-if-using-a-provided-database" names="option:\ only\ perform\ these\ steps\ if\ using\ a\ provided\ database">
                <title>Option: Only perform these steps if using a provided database</title>
                <block_quote>
                    <definition_list>
                        <definition_list_item>
                            <term>Copy an existing flatfile and corresponding netrhost.conf file</term>
                            <definition>
                                <paragraph>Default provied example:
                                    1.  cp game/netrhost.conf game/netrhost.conf.backup
                                    2.  cp -f minimal-DBs/minimal_db/netrhost.conf game/netrhost.conf
                                    3.  cd game
                                    4.  ./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </block_quote>
            </section>
        </section>
        <section ids="configure-the-netrhost-conf-file-for-your-mush" names="configure\ the\ netrhost.conf\ file\ for\ your\ mush">
            <title>Configure the netrhost.conf file for your MUSH</title>
            <block_quote>
                <paragraph>Go into the game directory and modify the netrhost.conf file
                    The next step is configuring the mush to your config standards.
                    There is a file in the game subdirectory called ‘netrhost.conf’.
                    You hand-edit this file and just follow what it says each
                    one does.  It’s very well documented and should give you
                    great details on what to edit.  For most things, you can
                    feel comfortable to stick with the defaults unless you wish
                    to change them.  The port and debug_id need to be changed.</paragraph>
            </block_quote>
        </section>
        <section ids="start-the-mush-and-login" names="start\ the\ mush\ and\ login">
            <title>Start the MUSH and login</title>
            <block_quote>
                <paragraph>From the game diretory issue: ./Startmush</paragraph>
                <block_quote>
                    <paragraph>To login:  co Wizard Nyctasia</paragraph>
                </block_quote>
            </block_quote>
        </section>
        <section ids="option-things-to-do-once-you-have-connected-if-you-did-not-use-a-provided-database" names="option:\ things\ to\ do\ once\ you\ have\ connected\ if\ you\ did\ not\ use\ a\ provided\ database">
            <title>Option: Things to do once you have connected if you did NOT use a provided database</title>
            <block_quote>
                <enumerated_list enumtype="loweralpha" prefix="" suffix=".">
                    <list_item>
                        <paragraph>@dig your master room and in your netrhost.conf file define master_room
                            to this dbref (without the #.  So like master_room 2)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create an immortal holder charater (@pcreate then @set immortal)
                            Feel free to set up holder characters for all the bittypes which are:</paragraph>
                        <block_quote>
                            <paragraph>GUILDMASTER, ARCHITECT, COUNCILOR, WIZARD, IMMORTAL</paragraph>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>@chown/preserve the master room and #0 to the immortal holder character.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Log into the immortal character</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>@pcreate all your guest characters and set them up properly.  My suggestion:
                            @dolist lnum(1,10)={@pcreate Guest##=guest;@set <problematic ids="id2" refid="id1">*</problematic>Guest##=guest;@desc <problematic ids="id4" refid="id3">*</problematic>Guest##=A guest player.;@adisconnect <problematic ids="id6" refid="id5">*</problematic>Guest##=home;@lock <problematic ids="id8" refid="id7">*</problematic>Guest##=*Guest##}</paragraph>
                        <paragraph>@list guest will show your guest characters and if they’re set up properly.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Any master room code you load in from your immholder character (or @chown/preserve to it)
                            The readme directory has softfunctions.minmax that has MUX/Penn compatability functions and comsys.
                            All other softcode (like mail wrappers) can be found on <reference refuri="http://code.google.com/p/rhostmush">http://code.google.com/p/rhostmush</reference> in downloads.</paragraph>
                    </list_item>
                </enumerated_list>
            </block_quote>
        </section>
        <section ids="setup-new-character-staff-and-take-tasks-that-can-only-be-accomplished-by-1" names="setup\ new\ character,\ staff,\ and\ take\ tasks\ that\ can\ only\ be\ accomplished\ by\ #1">
            <title>Setup new character, staff, and take tasks that can only be accomplished by #1</title>
            <block_quote>
                <paragraph>Set up any other characters you want.  Anyone immortal can issue @function, @admin, or anything #1 can do.</paragraph>
            </block_quote>
        </section>
        <section ids="setup-daily-backups-for-your-game" names="setup\ daily\ backups\ for\ your\ game">
            <title>Setup daily backups for your game</title>
            <block_quote>
                <paragraph>Make SURE YOU RUN DAILY Backups.  Rhost is very stable, but things outside the mush can damage the game.
                    paranoia is fine, especially when they really are out to get you.  TO make the backups, do the following:</paragraph>
                <paragraph>@dump/flat      – This makes a flatfile dump of the main database.  You want to run this daily.
                    wmail/unload    – This makes a flatfile dump of the mail database.  You want to run this daily.
                    @areg/unload    – Only worry about this if you are using auto-registration emailing.  Few do.
                    newsdb/unload   – Only worry if you use the hardcoded bbs system.  Most don’t use it.</paragraph>
                <paragraph>The backup_flat.sh script (that launches automatically with Startmush) will archive all the above files
                    if they exist.  It moves these flatfiles into the ‘prevflat’ directory, then tarballs those and dumps
                    consecutive backups in the ‘oldflat’ directory.  By default it keeps 7 consecutive backups.  You may
                    alter this in the backup_flat.sh script itself.</paragraph>
            </block_quote>
        </section>
        <section ids="customtize-the-textfiles-for-your-game" names="customtize\ the\ textfiles\ for\ your\ game">
            <title>Customtize the textfiles for your game</title>
            <block_quote>
                <paragraph>All connect.txt and customized files can be found in the ~/Server/game/txt directory.  There is a
                    README file there that explains their purposes in more detail.  You can see more information on
                    all files and how they inter-relate with ‘wizhelp file’.</paragraph>
            </block_quote>
        </section>
        <section ids="make-sure-to-read-up-further" names="make\ sure\ to\ read\ up\ further">
            <title>Make sure to read up further</title>
            <block_quote>
                <paragraph>The wiz bits can be confusing, so ‘wizhelp control’ is very helpful to give a high overview
                    of what each bit does and their inter-relationship is.</paragraph>
            </block_quote>
        </section>
    </section>
</document>

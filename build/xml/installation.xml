<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush/rhostmush-handbook/source/installation.rst">
    <section ids="installation" names="installation">
        <title>Installation</title>
        <section ids="compiling-the-code" names="compiling\ the\ code">
            <title>Compiling the code</title>
            <paragraph>make confsource</paragraph>
            <paragraph>Yes, that’s all you have to do.</paragraph>
            <paragraph>You may also issue ‘make source’ if the Makefile is already defined how
                you want it to be.  Please remember to ‘make clean’ before ‘make source’
                whenever you alter the code or import new source code.</paragraph>
            <section ids="note-about-compiling" names="note\ about\ compiling">
                <title>Note about Compiling</title>
                <paragraph>To install, type:  make confsource</paragraph>
                <paragraph>If your binaries do not work or you get an error type:  ./bin/script_setup.sh
                    Then type: make confsource</paragraph>
                <paragraph>If you are importing a MUX2 flatfile, make ABSOLUTELY SURE that you select
                    mux passwords as a compatibility option, or you will NOT BE ABLE to log in
                    to players as the password will not be recognizeable.</paragraph>
                <paragraph>Make sure to keep QDBM selected as it’s a much more stable database engine
                    that does not have attribute limit restrictions like GDBM does.</paragraph>
                <paragraph>If you are converting from a Penn, TinyMUSH, or MUX database, make sure you
                    drill down into the LBUF section and select, at minimum, 8K lbufs.  You likely
                    want that anyway as it gives you far more room for attribute content storage.</paragraph>
                <paragraph>You can go up to 32K safely.  While 64k is safe and does work, there are issues
                    with networking and older routers that use a 32K TCP buffer size that can
                    at times cut off the data as overflow resulting in output to the end-point
                    players not receiving their data.  So it is strongly recommended not to go
                    above 32K in lbuffer size.</paragraph>
                <paragraph>Go ahead and select 64 char attributes.  It allows you to have 64 characters
                    for attribute names.  It’s handy to have.</paragraph>
                <paragraph>If you wish at this point to set up mysql and/or sqlite, you  may do so.
                    Yes, you can use them in parallel without any issue.</paragraph>
            </section>
            <section ids="note-about-recompiling" names="note\ about\ recompiling">
                <title>Note about Recompiling</title>
                <paragraph>If you plan to use ‘make confsource’ to recompile your source, you should first
                    issue a ‘make clean’ before re-issuing a ‘make confsource’.  ‘make confsource’
                    remembers the last options you used.</paragraph>
                <paragraph>A failure to issue ‘make clean’ prior to re-compiling with ‘make confsource’ or
                    re-compiling with ‘make source’ can potentially leave stale object files which
                    may cause unforseen issues when running code, including but not limited to
                    random crashes.  Generally whenever recompiling it’s good to always make clean
                    first.</paragraph>
            </section>
            <section ids="note-about-patching" names="note\ about\ patching">
                <title>Note about Patching</title>
                <paragraph>There’s two ways you can look to patch the source.  If you plan to run the
                    RhostMUSH source from a git repository, then please use the git repo to
                    constantly update your code.  If you knew enough to want to set up a git repo
                    then we expect knowledge on how to keep source trees updated in the git repo
                    to be used the same as any other source distribution.</paragraph>
                <paragraph>If, however, you have no idea what a git repo even is, or have no inclination
                    of using git to manage your RhostMUSH source, or just don’t care one way
                    or another, then you can use the included patch.sh routine (from under the
                    Server directory) to patch your source at any time.</paragraph>
                <paragraph>From the server directory just type: ./patch.sh</paragraph>
                <paragraph>That will auto-compile your source, auto make all your header files and
                    essentially keep everything up to date to the latest source.
                    Once that’s done, all you do from within the game is two commands:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>@reboot (or @reboot/silent)  – This will load in the new binary</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>@readcache  – This will read in all the .txt file changes</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
        <section ids="configuring-the-game" names="configuring\ the\ game">
            <title>Configuring the game</title>
            <paragraph>When setting up a mush for the first time, make sure you
                have all the files configured correctly.  This is with using
                the following file for configuration:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">- netrhost.conf</literal_block>
        </section>
        <section ids="starting-the-game" names="starting\ the\ game">
            <title>Starting the game</title>
            <paragraph>Once done, you start up the system with the following command:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve"> - [sh/csh] ./Startmush

It will prompt you to start a new db if it doesn't find one.

You may also do the commands individually::

   [csh] netrhost -s netrhost.conf &gt;&amp; netrhost.log &amp;
   [sh]  netrhost -s netrhost.conf &gt; netrhost.log 2&gt;&amp;1 &amp;</literal_block>
        </section>
        <section ids="first-login-to-the-game" names="first\ login\ to\ the\ game">
            <title>First login to the game</title>
            <paragraph>Once started, log in the #1 character (Wizard) with it’s appropiate
                password (no, not ‘potrzebie’, but ‘Nyctasia’).  There were private
                reasons for the password change.</paragraph>
            <paragraph>Once in, do a @shutdown to save the database.  Then you can run Startup
                normally.   You may make a backup of your database at anytime on-line by
                utilizing the @dump/flat option.  A script comes with this distribution
                that allows the ability of auto-archiving your database for a configurable
                number of backups.</paragraph>
        </section>
        <section ids="reporting-bugs-or-getting-help" names="reporting\ bugs\ or\ getting\ help">
            <title>Reporting bugs or getting help</title>
            <paragraph>If you find any bugs or problems, notify one of the developers of RhostMUSH and
                a patch or workaround will be made available as soon as possible.  Current
                developers are:  Seawolf, Thorin, Ashen-Shugar, Lensman, Kale, Mac, Zenty,
                Ambrosia, Amos, and Morgan.  They can be found around the net.</paragraph>
        </section>
        <section ids="installing-using-an-ansible-playbook" names="installing\ using\ an\ ansible\ playbook">
            <title>Installing using an ansible playbook</title>
            <paragraph>To begin, you will run the following command in a directory that will house your game:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">git clone https://github.com/RhostMUSH/trunk Rhost</literal_block>
            <paragraph>You may also just run the yml file and ansible (ansible-playbook) to install your RhostMUSH engine:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">wget https://raw.githubusercontent.com/RhostMUSH/trunk/master/rhostinstall.yml
ansible-playbook rhostinstall.yml</literal_block>
            <paragraph>This downloads the latest stable version of the code, bringing with it all patches and scripts, documentation and support tools that you will need.</paragraph>
        </section>
        <section ids="quickinstall-guide-to-rhostmush" names="quickinstall\ guide\ to\ rhostmush">
            <title>Quickinstall guide to RhostMUSH</title>
            <section ids="compiling-rhostmush" names="compiling\ rhostmush">
                <title>Compiling RhostMUSH</title>
                <paragraph>Once ready to compile type:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">make confsource</literal_block>
                <paragraph>This will bring up a menu where you can selection options.</paragraph>
            </section>
            <section ids="important-before-you-actually-start-building" names="important\ before\ you\ actually\ start\ building">
                <title>Important before you actually start building</title>
                <paragraph>The main parts of making your RhostMUSH, easy pleasy:
                    #.  The stunnel directory contains TLS/SSL connectivity.  This has to be linked to another port and will tunnel to the mush port.  The README file explains how to set up and configure your TLS/SSL connection.
                    #.  ./patch.sh – This makes sure you have the latest code.  If you got this by git clone <reference refuri="https://github.com/RhostMUSH/trunk">https://github.com/RhostMUSH/trunk</reference> then you can ignore patching.  You can use ./patch.sh at any time to update your code.  It ignores local.c incase you make your own modules.
                    #.  make confsource.  Yup, it’s menu driven, nifty eh?</paragraph>
                <block_quote>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>Options you may want to select (other than the defaults):</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>5  (%c is selected by default, but choose %x as well for MUX/TM3 compat)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>9  (if you want $commands to require the COMMAND flag)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>16 (if you want a wider WHO listing like older versions of MUX)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>22 (if you’re converting a TinyMUSH3 or TinyMUX/MUX2 flatfile)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>24 (if you have issues with -lssl not being found)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>B3 (for 64 character attribute names)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>B6 (select 8K for Penn/MUX2/TM3 default, up to 32K.  64K is network intensive)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>B5 (will be autoselected if you choose 8K or more.  Pick this anyway)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>B4 (if you have sqlite libraries and wish to use this)</paragraph>
                        </list_item>
                    </enumerated_list>
                </block_quote>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>‘r’ to compile with the settings you selected.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Modify your netrhost.conf file as specified.  Make sure to align your port and debug_id as shown in the netrhost.conf file.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If you wish to port in an old flatfile, please refer to the readme directory on how to port your flatfile in (README.DBLOADING).</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="using-the-prebuilt-flatfile" names="using\ the\ prebuilt\ flatfile">
                <title>Using the prebuilt flatfile</title>
                <paragraph>There are pre-loaded flatfile databases you can use at this point.  The netrhost.db.flat
                    and corrisponding netrhost.conf file will be located in the minimal-DBs/minimal_db directory.</paragraph>
                <paragraph>You may auto-load the minimal db and corresponding netrhost.conf file with the command:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">./minimal.sh</literal_block>
                <paragraph>This is ran from within the ‘game’ directory.  Once this is ran, you will need
                    to customize the netrhost.conf file for your purposes.  The port and debug_id must
                    be changed at the very least.  Keep the debug_id coordinated to the port as described.</paragraph>
                <section ids="to-load-a-prebuilt-flatfile" names="to\ load\ a\ prebuilt\ flatfile">
                    <title>To load a prebuilt flatfile</title>
                    <paragraph>To use these follow these steps:
                        1.  Make a backup of your existing netrhost.conf file:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">cp game/netrhost.conf game/netrhost.conf.backup</literal_block>
                    <enumerated_list enumtype="arabic" prefix="" start="2" suffix=".">
                        <list_item>
                            <paragraph>Copy the netrhost.conf file into your game directory:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">cp -f ./minimal-DBs/minimal_db/netrhost.conf ./game/netrhost.conf</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>At this point you can modify your netrhost.conf file settings in your game directory.
                                Using an editor modify the ‘port’ and ‘debug_id’ respectively in your netrhost.conf as state.
                                The ‘port’ will be the port the mush listens on, the debug_id is for the debug-stack and is
                                your port with a ‘5’ at the end.  So if your port is 4444, the debug_id is 44445</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Load in the flatfile into the mush (You could do this in the Startmush as well)
                                Manually:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd game</literal_block>
                            <paragraph>./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new dwF</paragraph>
                            <paragraph>Start your mush:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
                            <paragraph>This will load the db that you loaded.</paragraph>
                            <paragraph>—————OR——-</paragraph>
                            <paragraph>From Startmush:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">--&gt; ./Startmush</literal_block>
                        </list_item>
                    </enumerated_list>
                    <paragraph>when prompted, hit &lt;RETURN&gt; for searching then select the number of the netrhost.db.flat that is listed as ~/minimal-DBs/minimal_db/netrhost.db.flat</paragraph>
                </section>
            </section>
            <section ids="starting-from-scratch-with-a-brand-new-database" names="starting\ from\ scratch\ with\ a\ brand\ new\ database">
                <title>Starting from scratch with a brand new database</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>You can modify your netrhost.conf file settings in your game directory.
                            Using an editor modify the ‘port’ and ‘debug_id’ respectively in your netrhost.conf as stated.
                            The ‘port’ will be the port the mush listens on, the debug_id is for the debug-stack and is
                            your port with a ‘5’ at the end.  So if your port is 4444, the debug_id is 44445</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Start your mush:</paragraph>
                        <literal_block force="False" language="default" linenos="False" xml:space="preserve">--&gt; ./Startmush</literal_block>
                    </list_item>
                </enumerated_list>
                <paragraph>You can use the ‘vi’ editor or ‘nano’ if you like a more menu driven DOS like experience.
                    You can of course use any other editor you’re familar with.</paragraph>
                <paragraph>For a more thorough understanding of how to set things up, keep reading!</paragraph>
                <paragraph>If you have syntax issues running ‘make config’, ‘make confsource’
                    or ‘make bugreport’ please run the script: ./bin/script_setup.sh</paragraph>
                <paragraph>Now… things you may need to do on errors.</paragraph>
            </section>
            <section ids="instructions-for-starting-a-new-rhostmush" names="instructions\ for\ starting\ a\ new\ rhostmush">
                <title>Instructions for starting a new RhostMUSH</title>
                <section ids="setup-directory-permissions" names="setup\ directory\ permissions">
                    <title>Setup directory permissions</title>
                    <block_quote>
                        <paragraph>run ./dirsetup.sh</paragraph>
                        <paragraph>This is a simple script that will change file permissions
                            and directory permissions to properly protect RhostMUSH.
                            These settings generally work fine out of the box so
                            you likely won’t even have to set this up if you don’t want to.</paragraph>
                    </block_quote>
                </section>
                <section ids="compile-the-source-code" names="compile\ the\ source\ code">
                    <title>Compile the source code</title>
                    <paragraph>Make and run the RhostMUSH source:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">Type:  make confsource</literal_block>
                    <paragraph>If you get an error running the script itself:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">type: ./bin/script_setup.sh

Then type: make confsource

After the compile process is done, you should be good to go.
If it complains about missing binaries then type 'make links'</literal_block>
                    <section ids="manual-configuration-of-source-code" names="manual\ configuration\ of\ source\ code">
                        <title>Manual configuration of source code</title>
                        <paragraph>To do manual configuration (skip if the previous step worked for you) And yes, this is a bit of a pain in the bottom, hopefully you will not need this.</paragraph>
                        <paragraph>You need the following definitions defined to make this work:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>TINY_U, USE_SIDEEFFECTS, MUX_INCDEC, ATTR_HACK</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>(u()/u2() switched)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>(sideeffects)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>(inc()/xinc() switched)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>(support for _/~ attribs)</paragraph>
                            </list_item>
                        </enumerated_list>
                        <paragraph>You only need to do this if you received the RhostMUSH src.  If you received a binary, continue on to the next part.</paragraph>
                        <paragraph>To compile the code, just type ‘make confsource’.  It will prompt you with settings on what you need to do.  If you just want to quickly hand edit the Makefile, it is in the directory src (full path src/Makefile).  Then you may just run ‘make source’, if you so choose to hand-edit the Makefile.</paragraph>
                        <paragraph>After the compile process is done, type ‘make links’!</paragraph>
                    </section>
                </section>
            </section>
            <section ids="loading-a-database-for-your-mush" names="loading\ a\ database\ for\ your\ mush">
                <title>Loading a database for your MUSH</title>
                <paragraph>You now have a choice of optionally starting at a provided database or starting from scratch.</paragraph>
                <section ids="option-only-perform-these-steps-if-using-a-provided-database" names="option:\ only\ perform\ these\ steps\ if\ using\ a\ provided\ database">
                    <title>Option: Only perform these steps if using a provided database</title>
                    <block_quote>
                        <definition_list>
                            <definition_list_item>
                                <term>Copy an existing flatfile and corresponding netrhost.conf file</term>
                                <definition>
                                    <paragraph>Default provied example:</paragraph>
                                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">1.  cp game/netrhost.conf game/netrhost.conf.backup
2.  cp -f minimal-DBs/minimal_db/netrhost.conf game/netrhost.conf
3.  cd game
4.  ./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new</literal_block>
                                </definition>
                            </definition_list_item>
                        </definition_list>
                    </block_quote>
                </section>
            </section>
            <section ids="configure-the-netrhost-conf-file-for-your-mush" names="configure\ the\ netrhost.conf\ file\ for\ your\ mush">
                <title>Configure the netrhost.conf file for your MUSH</title>
                <block_quote>
                    <paragraph>Go into the game directory and modify the netrhost.conf file
                        The next step is configuring the mush to your config standards.
                        There is a file in the game subdirectory called ‘netrhost.conf’.
                        You hand-edit this file and just follow what it says each
                        one does.  It’s very well documented and should give you
                        great details on what to edit.  For most things, you can
                        feel comfortable to stick with the defaults unless you wish
                        to change them.  The port and debug_id need to be changed.</paragraph>
                </block_quote>
            </section>
            <section ids="start-the-mush-and-login" names="start\ the\ mush\ and\ login">
                <title>Start the MUSH and login</title>
                <paragraph>From the game diretory issue:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
                <paragraph>To login:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">co Wizard Nyctasia</literal_block>
            </section>
            <section ids="option-things-to-do-once-you-have-connected-if-you-did-not-use-a-provided-database" names="option:\ things\ to\ do\ once\ you\ have\ connected\ if\ you\ did\ not\ use\ a\ provided\ database">
                <title>Option: Things to do once you have connected if you did NOT use a provided database</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>@dig your master room and in your netrhost.conf file define master_room to this dbref (without the #.  So like master_room 2)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create an immortal holder charater (@pcreate then @set immortal) Feel free to set up holder characters for all the bittypes which are: GUILDMASTER, ARCHITECT, COUNCILOR, WIZARD, IMMORTAL</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>@chown/preserve the master room and #0 to the immortal holder character.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Log into the immortal character</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>@pcreate all your guest characters and set them up properly.  My suggestion:</paragraph>
                        <literal_block force="False" language="default" linenos="False" xml:space="preserve">@dolist lnum(1,10)={@pcreate Guest##=guest;@set *Guest##=guest;@desc *Guest##=A guest player.;@adisconnect *Guest##=home;@lock *Guest##=*Guest##}

@list guest will show your guest characters and if they're set up properly.</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Any master room code you load in from your immholder character (or @chown/preserve to it) The readme directory has softfunctions.minmax that has MUX/Penn compatability functions and comsys.  All other softcode (like mail wrappers) can be found on <reference refuri="https://github.com/RhostMUSH/trunk">https://github.com/RhostMUSH/trunk</reference> in Mushcode.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="setup-new-character-staff-and-take-tasks-that-can-only-be-accomplished-by-1" names="setup\ new\ character,\ staff,\ and\ take\ tasks\ that\ can\ only\ be\ accomplished\ by\ #1">
                <title>Setup new character, staff, and take tasks that can only be accomplished by #1</title>
                <paragraph>Set up any other characters you want.  Anyone immortal can issue @function, @admin, or anything #1 can do.</paragraph>
            </section>
            <section ids="setup-daily-backups-for-your-game" names="setup\ daily\ backups\ for\ your\ game">
                <title>Setup daily backups for your game</title>
                <paragraph>Make SURE YOU RUN DAILY Backups.  Rhost is very stable, but things outside the mush can damage the game. paranoia is fine, especially when they really are out to get you.  TO make the backups, do the following:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">@dump/flat      -- This makes a flatfile dump of the main database.  You want to run this daily.
wmail/unload    -- This makes a flatfile dump of the mail database.  You want to run this daily.
@areg/unload    -- Only worry about this if you are using auto-registration emailing.  Few do.
newsdb/unload   -- Only worry if you use the hardcoded bbs system.  Most don't use it.</literal_block>
                <paragraph>The backup_flat.sh script (that launches automatically with Startmush) will archive all the above files if they exist.  It moves these flatfiles into the ‘prevflat’ directory, then tarballs those and dumps consecutive backups in the ‘oldflat’ directory.  By default it keeps 7 consecutive backups.  You may alter this in the backup_flat.sh script itself.</paragraph>
            </section>
            <section ids="customtize-the-textfiles-for-your-game" names="customtize\ the\ textfiles\ for\ your\ game">
                <title>Customtize the textfiles for your game</title>
                <block_quote>
                    <paragraph>All connect.txt and customized files can be found in the ~/Server/game/txt directory.  There is a
                        README file there that explains their purposes in more detail.  You can see more information on
                        all files and how they inter-relate with ‘wizhelp file’.</paragraph>
                </block_quote>
            </section>
            <section ids="make-sure-to-read-up-further" names="make\ sure\ to\ read\ up\ further">
                <title>Make sure to read up further</title>
                <block_quote>
                    <paragraph>The wiz bits can be confusing, so ‘wizhelp control’ is very helpful to give a high overview
                        of what each bit does and their inter-relationship is.</paragraph>
                </block_quote>
            </section>
        </section>
        <section ids="what-to-type-to-configure-and-get-your-rhostmush-up-and-running" names="what\ to\ type\ to\ configure\ and\ get\ your\ rhostmush\ up\ and\ running">
            <title>What to type to configure and get your RhostMUSH up and running</title>
            <paragraph>You may configure Rhost three ways.</paragraph>
            <section ids="creating-a-new-game-with-a-blank-database" names="creating\ a\ new\ game\ with\ a\ blank\ database">
                <title>Creating a new game with a blank database</title>
                <block_quote>
                    <paragraph>Modify your ./game/netrhost.conf file or what settings you want.
                        Don’t feel overwhelmed, it’s all very well documented.</paragraph>
                </block_quote>
            </section>
            <section ids="creating-a-new-game-with-ambrosia-s-default-database" names="creating\ a\ new\ game\ with\ ambrosia's\ default\ database">
                <title>Creating a new game with Ambrosia’s default database</title>
                <paragraph>Follow minimal-DBs/Amb-MinimalRhost/IMPORTANT_README</paragraph>
                <paragraph>The netrhost.conf file you will copy is in minimal-DBs/Amb-MinimalRhost/game
                    Copy this netrhost.conf file into your ‘game’ directory.</paragraph>
                <paragraph>You will want the custom txt files under Amb-MinimalRhost/txt in your game/txt directory and to mkindx all the txt files.  You can run ./Startmush -i to index.</paragraph>
                <paragraph>When ./Startmush prompts you to load a flatfile, say ‘yes’ and hit &lt;RETURN&gt; to have it search for flatfiles, then select netrhost.db.flat from under the minimal-DBs/Amb-MinimalRhost directory.</paragraph>
                <paragraph>The main steps to make sure you do for ~/Server/minimal-DBs/Amb-MinimalRhost/netrhost.db.flat – Ambrosia’s secure and featured minimal db</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Use the matching netrhost.conf file under the Amb-MinimalRhost/game directory</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Load in the settings specified in the Amb-MinimalRhost/bin directory.</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Copy this file into your ~/Server/bin directory</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>From ‘Server’ directory type: make clean</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>From ‘Server’ directory type: make confsource and ‘l’oad option 0</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Specify any -additional- options you want at this point.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Recompile your code</paragraph>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                    <list_item>
                        <paragraph>Copy the files in Amb-MinimalRhost/game/txt into your ~/Server/game/txt directory</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>from your ~/Server/game txt file run on each of the txt files:</paragraph>
                        <literal_block force="False" language="default" linenos="False" xml:space="preserve">../mkindx &lt;txtfile&gt;.txt &lt;txtfile&gt;.indx
Where &lt;txtfile&gt; is the name of the file (minus the .txt extension)</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>If running, @reboot your game.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="creating-a-new-game-with-the-generic-default-database" names="creating\ a\ new\ game\ with\ the\ generic\ default\ database">
                <title>Creating a new game with the generic default database</title>
                <block_quote>
                    <paragraph>Copy the netrhost.conf from minimal-DBs/minimal_db to your game directory.</paragraph>
                    <paragraph>When ./Startmush prompts you to load a flatfile, say ‘yes’ and hit &lt;RETURN&gt;
                        to have it search for flatfiles, then select netrhost.db.flat from under
                        the minimal-DBs/minimal_db directory.</paragraph>
                </block_quote>
            </section>
            <section ids="starting-your-mush" names="starting\ your\ mush">
                <title>Starting your MUSH</title>
                <paragraph>Once you have used one of these three methods to obtaina database, you can start your mush up.
                    At this point type from the game directory:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
            </section>
            <section ids="backups-for-rhostmush" names="backups\ for\ rhostmush">
                <title>Backups for RhostMUSH</title>
                <block_quote>
                    <paragraph>Backups are already handled and integrated with a script ‘backup_flat.sh’.
                        If you wish to customize this, feel free.  Again, it is well documented and
                        just require changing settings at the top of this script.</paragraph>
                    <paragraph>By default, it does 7 contiguous backups.  You may increase or decrease
                        this value to any value you want.</paragraph>
                    <paragraph>It will, by default, backup all your txt/<emphasis>.txt files, your netrhost.conf
                            file, your netrhost.db.flat (mush db) file, your RhostMUSH.dump.</emphasis>
                        (mail db) files, your RhostMUSH.news.* (internal news/bbs db – if used),
                        your RhostMUSH.areg.* (the autoregistration db – if used), and any sqlite
                        database you currently may be using which are OPTIONALLY backed up if you
                        remove the ‘#’ from before it.</paragraph>
                    <paragraph>The backup script also will optionally rcp/scp, ftp, or mail any backups
                        you want to a remote destination.  Be forewarned, the backup files can
                        potentially get rather large for larger games, even compressed.  The
                        average size for these files will be 1-5MB.  It could potentially get
                        over 10-20MB in size for excessively large games, so plan accordingly.</paragraph>
                    <paragraph>Be aware that the backup system will NOT make successful backups if you
                        run out of disk space.  This includes actually running out of disk space
                        or running out of disk quota.  There is a mechanism inside the backup
                        script to specify an email address that you wish to get alerts from
                        in these instances.  I recommend using it.</paragraph>
                    <paragraph>If you make changes to your backup_flat.sh script with an already
                        active and running mush and wish to just restart the backup procedure
                        just issue: ./backup_restart.sh</paragraph>
                </block_quote>
            </section>
            <section ids="troubleshooting-issues-with-starting-up" names="troubleshooting\ issues\ with\ starting\ up">
                <title>Troubleshooting issues with starting up</title>
                <section ids="problem-if-it-says-the-shared-id-is-already-in-use" names="problem:\ if\ it\ says\ the\ shared\ id\ is\ already\ in\ use">
                    <title>Problem: If it says the shared ID is already in use</title>
                    <paragraph>A1: please verify that it is the right shared debug_id in your netrhost.conf file</paragraph>
                    <paragraph>A2: Force a start by ./Startmush -f</paragraph>
                </section>
                <section ids="problem-your-log-file-is-massive-and-your-mush-is-running" names="problem:\ your\ log\ file\ is\ massive\ and\ your\ mush\ is\ running">
                    <title>Problem: Your log file is massive and your mush is running</title>
                    <paragraph>A1: To rotate this use the @logrotate command. See wizhelp on @logrotate</paragraph>
                </section>
                <section ids="problem-the-database-flatfile-you-re-loading-can-t-load-because-a-db-is-already-defined" names="problem:\ the\ database\ flatfile\ you're\ loading\ can't\ load\ because\ a\ db\ is\ already\ defined">
                    <title>Problem: The database flatfile you’re loading can’t load because a db is already defined</title>
                    <paragraph>A1: remove netrhost.db* and netrhost.gdbm* from your data directory</paragraph>
                </section>
                <section ids="problem-the-mail-database-won-t-load-and-mail-shows-offline" names="problem:\ the\ mail\ database\ won't\ load\ and\ mail\ shows\ 'offline'">
                    <title>Problem: The mail database won’t load and mail shows ‘offline’</title>
                    <paragraph>A1: wmail/load</paragraph>
                </section>
            </section>
        </section>
        <section ids="windows" names="windows">
            <title>Windows</title>
            <section ids="installing-on-windows-10-with-bash" names="installing\ on\ windows\ 10\ with\ bash">
                <title>Installing on Windows 10 with BASH</title>
                <paragraph>Rhost can be compiled and run under the new Bash on Ubuntu on Windows.
                    This has been tested with the Preview build 14342.</paragraph>
                <paragraph>1. After installing Bash you will need to install the following packages:
                    git
                    make
                    gcc
                    openssl (optional)
                    libpcre3 (optional)
                    libpcre3-dev (optional)</paragraph>
                <paragraph>2. When configuring rhost (using confsource) select the Disable Debugmon
                    option.</paragraph>
                <enumerated_list enumtype="arabic" prefix="" start="3" suffix=".">
                    <list_item>
                        <paragraph>When you issue Startmush, you must pass the -cyg option.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="installing-on-windows-with-cygwin" names="installing\ on\ windows\ with\ cygwin">
                <title>Installing on Windows with Cygwin</title>
                <paragraph>Rhost does work under windows using the cygwin package.</paragraph>
                <paragraph>1.  When you do install cygwin, the following packages must be added:
                    make
                    git
                    gcc
                    crypt
                    openssl (optional)
                    gdbm
                    bash</paragraph>
                <enumerated_list enumtype="arabic" prefix="" start="2" suffix=".">
                    <list_item>
                        <paragraph>The src/Makefile has to manually have the CYGWIN line uncommented.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When you issue Startmush, you must pass it the -cyg option.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
    </section>
</document>

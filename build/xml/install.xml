<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush/rhostmush-handbook/source/install.rst">
    <target refid="installing-rhostmush"></target>
    <section ids="installing-rhostmush id1" names="installing\ rhostmush installing-rhostmush">
        <title>Installing RhostMUSH</title>
        <topic classes="contents local" ids="table-of-contents" names="table\ of\ contents">
            <title>Table of Contents</title>
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id10" refid="rhostmush-requirements">RhostMUSH Requirements</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id11" refid="system-requirements">System Requirements</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id12" refid="software-requirements">Software Requirements</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id13" refid="optional-packages">Optional Packages</reference></paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id14" refid="hosting-requirements">Hosting Requirements</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id15" refid="obtaining-rhostmush-source-code">Obtaining RhostMUSH Source Code</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id16" refid="options-for-making-a-mush">Options for making a MUSH</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id17" refid="compile-time-options">Compile time options</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id18" refid="configuration-file-options">Configuration file options</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id19" refid="starting-database-options">Starting database options</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id20" refid="the-choices-we-make">The Choices We Make</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id21" refid="compiling-rhostmush">Compiling RhostMush</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id22" refid="setup-directory-permissions">Setup directory permissions</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id23" refid="compile-the-source-code">Compile the source code</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id24" refid="the-confsource-menu">The confsource Menu</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id25" refid="troubleshooting-compile-errors">Troubleshooting compile errors</reference></paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph><reference ids="id26" refid="recompiling-the-source-code">Recompiling the source code</reference></paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id27" refid="note-about-compiling">Note about Compiling</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id28" refid="installing-using-an-ansible-playbook">Installing using an ansible playbook</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id29" refid="starting-a-newly-compiled-mush">Starting a Newly Compiled MUSH</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id30" refid="configuring-the-game">Configuring the game</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id31" refid="starting-the-game">Starting the game</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id32" refid="first-login-to-the-game">First login to the game</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id33" refid="creating-rhostmush-with-a-provided-db">Creating RHostMUSH with a Provided DB</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id34" refid="important-before-you-actually-start-building">Important before you actually start building</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id35" refid="using-the-prebuilt-flatfile">Using the prebuilt flatfile</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id36" refid="to-load-a-prebuilt-flatfile">To load a prebuilt flatfile</reference></paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id37" refid="almost-backwards-instructions-for-compiling-and-starting-a-mush">Almost Backwards Instructions for Compiling and Starting a MUSH</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id38" refid="basic-instructions-for-starting-a-new-rhostmush">Basic Instructions for starting a new RhostMUSH</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id39" refid="manual-configuration-of-source-code">Manual configuration of source code</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id40" refid="loading-a-database-for-your-mush">Loading a database for your MUSH</reference></paragraph>
                            <bullet_list>
                                <list_item>
                                    <paragraph><reference ids="id41" refid="option-only-perform-these-steps-if-using-a-provided-database">Option: Only perform these steps if using a provided database</reference></paragraph>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><reference ids="id42" refid="configure-the-netrhost-conf-file-for-your-mush">Configure the netrhost.conf file for your MUSH</reference></paragraph>
                                        </list_item>
                                    </bullet_list>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id43" refid="start-a-mush-and-logging-on-for-the-first-time">Start a  MUSH and logging on for the first time</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id44" refid="option-things-to-do-once-you-have-connected-if-you-did-not-use-a-provided-database">Option: Things to do once you have connected if you did NOT use a provided database</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id45" refid="customtize-the-textfiles-for-your-game">Customtize the textfiles for your game</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id46" refid="three-options-for-starting-a-mush">Three Options for Starting a MUSH</reference></paragraph>
                    <bullet_list>
                        <list_item>
                            <paragraph><reference ids="id47" refid="option-1-creating-a-new-game-with-a-blank-database">Option 1: Creating a new game with a blank database</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id48" refid="options-2-creating-a-new-game-with-ambrosia-s-default-database">Options 2: Creating a new game with Ambrosia’s default database</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference ids="id49" refid="option-3-creating-a-new-game-with-the-generic-default-database">Option 3: Creating a new game with the generic default database</reference></paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id50" refid="starting-your-mush">Starting your MUSH</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <target refid="rhostmush-requirements"></target>
        <section ids="rhostmush-requirements id2" names="rhostmush\ requirements rhostmush-requirements">
            <title refid="table-of-contents">RhostMUSH Requirements</title>
            <target refid="system-requirements"></target>
            <section ids="system-requirements id3" names="system\ requirements system-requirements">
                <title refid="table-of-contents">System Requirements</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Operating System: Unix-like</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>Almost any variant of Unix or Linux should compile cleanly and run</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Preliminary support for Windows with an equivalent development environment</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Memory: 12-100 MB</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>Depending on size of database and buffers, as well as selected options</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>1 GB (memory and swap combined) is the minimum required to compile</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Storage: 100 MB and up</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>Depending on size of database and backup retention policy</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>Third-party applications can use considerably more resources</paragraph>
                </note>
                <target refid="software-requirements"></target>
            </section>
            <section ids="software-requirements id4" names="software\ requirements software-requirements">
                <title refid="table-of-contents">Software Requirements</title>
                <paragraph>RhostMUSH is a Linux or Unix based server software that runs as a daemon on the host.
                    In order to build this software, you will need the bare minimum of the ability to run ‘make’ commands.</paragraph>
                <paragraph>Package requirements are as follows:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>bash/ksh/dash (or compatible shell - for use with build menu)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>glibc and gcc/clang (compiling the code)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>git (to clone the source and maintain patches)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>libcrypt (for password encryption - this is usually standard on unix based systems)</paragraph>
                    </list_item>
                </bullet_list>
                <section ids="optional-packages" names="optional\ packages">
                    <title refid="table-of-contents">Optional Packages</title>
                    <paragraph>RhostMUSH also offers optional linking and library attachments.
                        For some of these libraries it will attempt to do auto-detection,
                        but in a worse case scenario, there exists override hashes in the menu to disable options it thinks exist that do not.</paragraph>
                    <paragraph>Optional packages are as follows:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>libpcre (if you wish to use system pcre libraries instead of the built-in ones)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>mysql client &amp; mysql_config (required for mysql capabilities)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>openssl dev libraries/headers (for MUX password compatibility, and digest() and advanced cryptology functionality.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>ruby/perl/python/etc (for custom interactive dynamic custom functions with the execscript() feature)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>sqlite3 libraries (required for sqlite capabilities)</paragraph>
                        </list_item>
                    </bullet_list>
                    <target refid="hosting-requirements"></target>
                </section>
            </section>
            <section ids="hosting-requirements id5" names="hosting\ requirements hosting-requirements">
                <title refid="table-of-contents">Hosting Requirements</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>You will need a stable host and access to open a single port number of your choice on the firewall.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Most games choose a number between 1025 and 9999, by convention.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Please make sure your debug_id matches the port number + 5.</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>So if your port is 1234, your debug_id will be 12345.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The debug_id is for use in the API daemon that runs Rhost as a container to keep track of heap, stack, and execution location.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <target refid="obtaining-rhostmush"></target>
            </section>
        </section>
        <section ids="obtaining-rhostmush-source-code obtaining-rhostmush" names="obtaining\ rhostmush\ source\ code obtaining-rhostmush">
            <title refid="table-of-contents">Obtaining RhostMUSH Source Code</title>
            <paragraph>The only official source for obtaining RhostMUSH is through the ‘RhostMUSH’
                github account. If the source code was obtained in some other manner, there
                are potentially any number of unintentional or intentional issues that you
                might run into.</paragraph>
            <paragraph>The recommended method of obtaing RhostMUSH is to clone it’s git reposistory:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">git clone https://github.com/RhostMUSH/trunk Rhost</literal_block>
            <paragraph>It is possible, but not recommended to download RhostMUSH via a web browser:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">https://github.com/RhostMUSH/trunk/archive/master.zip</literal_block>
            <note>
                <paragraph>This documentation generally assumes that you obtained the RhostMUSH source
                    code by cloning it’s git repository or at the very least downloading an
                    archive of the source code from the GitHub website. It also assumes that
                    all commands on the server are being run from within the main directory of
                    that cloned git repo or equivalent.</paragraph>
            </note>
        </section>
        <section ids="options-for-making-a-mush" names="options\ for\ making\ a\ mush">
            <title refid="table-of-contents">Options for making a MUSH</title>
            <paragraph>There is a <emphasis>lot</emphasis> of options once your start making your MUSH, but there are
                also a few big choices right as you get started making a MUSH. No matter which
                choices you ultimately make, there are certain things you will need to know how
                to do. This chapter is going to walk you through making the simplest possible
                version of RhostMUSH. It’s going to show you the things you would have to do
                no matter which choices you were making.</paragraph>
            <paragraph>In the process of making that simplest possible RhostMUSH you’ll also learn
                what the basics of those choices are and when and how you would make them.
                Later chapters will get much more into all of those choices, but they will also
                assume you know everything in this chapter already, or at least have it as a
                handy point of reference.</paragraph>
            <paragraph>While there are lots of little options, there are three big areas where you
                make those choices.</paragraph>
            <section ids="compile-time-options" names="compile\ time\ options">
                <title refid="table-of-contents">Compile time options</title>
                <paragraph>One of the first steps of making a MUSH or really any computer program is
                    to compile the source code. This takes what’s basically text files full of code
                    and turns them into a program you can run. Within that source code are a
                    number of options to choose from, but any time you want to change one of them,
                    you have to recompile the source code and then restart the MUSH.</paragraph>
                <paragraph>These choices are typically made through the <literal>confsource</literal> menu which you’ll
                    be seeing momentarily. There are some pretty big choices here from whether or
                    not you want hardcoded +help and comsys, deciding between a more secure server
                    and certtain powerful but potentially dangerous MUSHcode options, and then
                    whether or not you want to be able to connect to a variety of external programs
                    like databases, webservers, and even other programming languages.</paragraph>
            </section>
            <section ids="configuration-file-options" names="configuration\ file\ options">
                <title refid="table-of-contents">Configuration file options</title>
                <paragraph>While there are some options in RhostMUSH that can only be changed through
                    recompiling the source code, there are way more options that can be changed
                    without having to recompile. These choices are mostly made through the
                    <literal>netrhost.conf</literal> file. Whenever a MUSH starts up or gets rebooted, it’s
                    going to look to what’s in that file. A few of those choices relate to
                    further configuring the choices you made with <literal>confsource</literal></paragraph>
                <paragraph>The <literal>netrhost.conf</literal> file has some aesthetic options like what if anything
                    it says when the database is being saved or whether or not your MUSH will
                    allow ANSI color, both in general, but also in things like people’s names.
                    It has a lot of very esoteric options for tuning the performance and safety
                    of your MUSH. It also is where you define things that connect to your database
                    like your master room and guests. It let’s you determine which powers your
                    staff does or does not have, and it’s also where you have an option to change
                    the password for #1 should you forget it. There are ways to change some of
                    these options from within the MUSH and even have those changes become new
                    defaults that survive a reboot. One thing you set there that you definitely
                    can’t change from within the MUSH, is which port it runs on.</paragraph>
            </section>
            <section ids="starting-database-options" names="starting\ database\ options">
                <title refid="table-of-contents">Starting database options</title>
                <paragraph>This last big choice is one that you probably are well aware of at least some
                    of the things it allows for, mostly because the database is basically where
                    everyone on a MUSH lives. Most of the choices you ever make about your MUSH
                    will happen in the database and it’s something that’s basically always going
                    to be changing in more ways than any one person could follow. No matter how
                    vast the database of a MUSH gets, they all started somewhere, and that’s the
                    last big choice you have to make.</paragraph>
                <paragraph>Depending on how you look at it, there’s somewhere between thousands of choices
                    and two choices for a starting database. What I mean is that you have the
                    choice of starting with a brand new database to populate, only a room (#0) and
                    you (#1), even the Master Room is something you’d have to add to it. The other
                    option is to import an existing database, though to choose that option you’d
                    also have to have access to an existing database.</paragraph>
                <paragraph>Besides the brand new database that can be made on-demand, RhostMUSH comes with
                    two databases that you can use to get your start. One is called ‘Minimal’ and
                    the other is called ‘Ambrosia’ after the lead RhostMUSH developed that made it.
                    Despite the name, they’re both fairly minimal, there’s no grid in either, but
                    what you get is a lot of pre-installed softcode and security, as well as a
                    <literal>netrhost.conf`</literal> file that has been tuned to work well with it. Even if you
                    don’t use those databases you can take ideas for the <literal>netrhost.conf</literal> file for
                    tuning your MUSH or even use some RhostMUSH commands to import that softcode
                    into your database.</paragraph>
            </section>
            <section ids="the-choices-we-make" names="the\ choices\ we\ make">
                <title refid="table-of-contents">The Choices We Make</title>
                <paragraph>Well, not you’re aware of those three big choices, what they are, and where
                    you’ll run across them. Later in this Handbook we’ll be going through those
                    choices in-depth. In this chapter, what we’ll be doing is using the default
                    options for for <literal>confsource</literal> and <literal>netrhost.conf</literal> and a brand new database.
                    Those options and that blank slate are necessary so that you have in front of
                    you a working MUSH with only #0 and #1 and get shown the way of building it
                    into whatever is your dream MUSH, and I know we all have one.</paragraph>
                <paragraph>There will be a chance to make all those other choices later, in fact that
                    will be happening very soon. There’s a lot of very interesting choices that
                    you can make with RhostMUSH, too many for anyone to ever be able to use them
                    all. If you don’t start with mastering the basics, you’ll never end up knowing
                    what are the most RhostMUSH options. I can’t tell you what they are, it’s truly
                    something you have to discover on your own. Remember, you want to build your
                    dream MUSH, not mine.</paragraph>
                <target refid="compiling-rhostmush"></target>
            </section>
        </section>
        <section ids="compiling-rhostmush id6" names="compiling\ rhostmush compiling-rhostmush">
            <title refid="table-of-contents">Compiling RhostMush</title>
            <section ids="setup-directory-permissions" names="setup\ directory\ permissions">
                <title refid="table-of-contents">Setup directory permissions</title>
                <paragraph>In order to both compile and run, all of the RhostMUSH files and directories
                    need to have the proper permissions set. If you obtained the source code
                    directly from GitHub, it is likely that this step is not required, but there
                    is no harm in running it anyway:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">./dirsetup.sh</literal_block>
                <paragraph>If you did NOT obtain the source code directly from GitHub, it is possible that
                    even the above script will fail to run with ‘permission denied’ or similar
                    errors. It is recommended that you obtain the source code from there, but if
                    for whatever reason this is not an option, manually adjust your permissions
                    and then re-run the automated permission script:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">chmod +rx bin/*.sh src/*.sh game/*.sh game/Startmush game/db_*
./dirsetup.sh</literal_block>
            </section>
            <section ids="compile-the-source-code" names="compile\ the\ source\ code">
                <title refid="table-of-contents">Compile the source code</title>
                <paragraph>Once the source code has been obtained and the proper file and directory
                    permissions have been set, the RhostMUSH source code is ready to be compiled.
                    This is typically done through an interactive program where you configure the
                    options you want to have available to your installation:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">make confsource</literal_block>
                <section ids="the-confsource-menu" names="the\ confsource\ menu">
                    <title refid="table-of-contents">The confsource Menu</title>
                </section>
                <section ids="troubleshooting-compile-errors" names="troubleshooting\ compile\ errors">
                    <title refid="table-of-contents">Troubleshooting compile errors</title>
                    <paragraph>Should this result in an error, a script has been included to correct the most
                        common errors, after which you can once more try to compile:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">./bin/script_setup.sh
make confsource</literal_block>
                    <paragraph>Once the compile process successfully complete, you should be able to start-up
                        your new RhostMUSH server. If it complains about missing binaries make sure
                        they are linked. The provided script will fix this issue, and is not harmful
                        to run in any situation:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">make links</literal_block>
                </section>
                <section ids="recompiling-the-source-code" names="recompiling\ the\ source\ code">
                    <title refid="table-of-contents">Recompiling the source code</title>
                    <paragraph>If you plan to use <literal>make confsource</literal> to recompile your source, you should first
                        issue a ‘make clean’ before re-issuing a <literal>make confsource</literal>.  <literal>make confsource</literal>
                        remembers the last options you used.</paragraph>
                    <paragraph>A failure to issue <literal>make clean</literal> prior to re-compiling with <literal>make confsource</literal> or
                        re-compiling with <literal>make source</literal> can potentially leave stale object files which
                        may cause unforseen issues when running code, including but not limited to
                        random crashes.  Generally whenever recompiling it’s good to always make clean
                        first.</paragraph>
                    <note>
                        <paragraph>You may also issue <literal>make source</literal> if the <literal>Makefile</literal> is already defined how
                            you want it to be.  Please remember to <literal>make clean</literal> before <literal>make source`</literal>
                            whenever you alter the code or import new source code.</paragraph>
                    </note>
                </section>
            </section>
            <section ids="note-about-compiling" names="note\ about\ compiling">
                <title refid="table-of-contents">Note about Compiling</title>
                <paragraph>If you are importing a MUX2 flatfile, make ABSOLUTELY SURE that you select
                    mux passwords as a compatibility option, or you will NOT BE ABLE to log in
                    to players as the password will not be recognizeable.</paragraph>
                <paragraph>Make sure to keep QDBM selected as it’s a much more stable database engine
                    that does not have attribute limit restrictions like GDBM does.</paragraph>
                <paragraph>If you are converting from a Penn, TinyMUSH, or MUX database, make sure you
                    drill down into the LBUF section and select, at minimum, 8K lbufs.  You likely
                    want that anyway as it gives you far more room for attribute content storage.</paragraph>
                <paragraph>You can go up to 32K safely.  While 64k is safe and does work, there are issues
                    with networking and older routers that use a 32K TCP buffer size that can
                    at times cut off the data as overflow resulting in output to the end-point
                    players not receiving their data.  So it is strongly recommended not to go
                    above 32K in lbuffer size.</paragraph>
                <paragraph>Go ahead and select 64 char attributes.  It allows you to have 64 characters
                    for attribute names.  It’s handy to have.</paragraph>
                <paragraph>If you wish at this point to set up mysql and/or sqlite, you  may do so.
                    Yes, you can use them in parallel without any issue.</paragraph>
                <target refid="ansible-install"></target>
            </section>
        </section>
        <section ids="installing-using-an-ansible-playbook ansible-install" names="installing\ using\ an\ ansible\ playbook ansible-install">
            <title refid="table-of-contents">Installing using an ansible playbook</title>
            <paragraph>To begin, you will run the following command in a directory that will house your game:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">git clone https://github.com/RhostMUSH/trunk Rhost</literal_block>
            <paragraph>You may also just run the yml file and ansible (ansible-playbook) to install your RhostMUSH engine:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">wget https://raw.githubusercontent.com/RhostMUSH/trunk/master/rhostinstall.yml
ansible-playbook rhostinstall.yml</literal_block>
            <paragraph>This downloads the latest stable version of the code, bringing with it all patches and scripts, documentation and support tools that you will need.</paragraph>
        </section>
        <section ids="starting-a-newly-compiled-mush" names="starting\ a\ newly\ compiled\ mush">
            <title refid="table-of-contents">Starting a Newly Compiled MUSH</title>
            <section ids="configuring-the-game" names="configuring\ the\ game">
                <title refid="table-of-contents">Configuring the game</title>
                <paragraph>When setting up a mush for the first time, make sure you
                    have all the files configured correctly.  This is with using
                    the following file for configuration:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">- netrhost.conf</literal_block>
            </section>
            <section ids="starting-the-game" names="starting\ the\ game">
                <title refid="table-of-contents">Starting the game</title>
                <paragraph>Once done, you start up the system with the following command:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve"> - [sh/csh] ./Startmush

It will prompt you to start a new db if it doesn't find one.

You may also do the commands individually::

   [csh] netrhost -s netrhost.conf &gt;&amp; netrhost.log &amp;
   [sh]  netrhost -s netrhost.conf &gt; netrhost.log 2&gt;&amp;1 &amp;</literal_block>
            </section>
            <section ids="first-login-to-the-game" names="first\ login\ to\ the\ game">
                <title refid="table-of-contents">First login to the game</title>
                <paragraph>Once started, log in the #1 character (Wizard) with it’s appropiate
                    password (no, not ‘potrzebie’, but ‘Nyctasia’).  There were private
                    reasons for the password change.</paragraph>
                <paragraph>Once in, do a @shutdown to save the database.  Then you can run Startup
                    normally.   You may make a backup of your database at anytime on-line by
                    utilizing the @dump/flat option.  A script comes with this distribution
                    that allows the ability of auto-archiving your database for a configurable
                    number of backups.</paragraph>
            </section>
        </section>
        <section ids="creating-rhostmush-with-a-provided-db" names="creating\ rhostmush\ with\ a\ provided\ db">
            <title refid="table-of-contents">Creating RHostMUSH with a Provided DB</title>
            <section ids="important-before-you-actually-start-building" names="important\ before\ you\ actually\ start\ building">
                <title refid="table-of-contents">Important before you actually start building</title>
                <paragraph>The main parts of making your RhostMUSH, easy pleasy:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The stunnel directory contains TLS/SSL connectivity.  This has to be linked to another port and will tunnel to the mush port.  The README file explains how to set up and configure your TLS/SSL connection.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>./patch.sh – This makes sure you have the latest code.  If you got this by git clone <reference refuri="https://github.com/RhostMUSH/trunk">https://github.com/RhostMUSH/trunk</reference> then you can ignore patching.  You can use ./patch.sh at any time to update your code.  It ignores local.c incase you make your own modules.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>make confsource.  Yup, it’s menu driven, nifty eh?</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Options you may want to select (other than the defaults):</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>5  (%c is selected by default, but choose %x as well for MUX/TM3 compat)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>9  (if you want $commands to require the COMMAND flag)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>16 (if you want a wider WHO listing like older versions of MUX)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>22 (if you’re converting a TinyMUSH3 or TinyMUX/MUX2 flatfile)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>24 (if you have issues with -lssl not being found)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>B3 (for 64 character attribute names)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>B6 (select 8K for Penn/MUX2/TM3 default, up to 32K.  64K is network intensive)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>B5 (will be autoselected if you choose 8K or more.  Pick this anyway)</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>B4 (if you have sqlite libraries and wish to use this)</paragraph>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                    <list_item>
                        <paragraph>‘r’ to compile with the settings you selected.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Modify your netrhost.conf file as specified.  Make sure to align your port and debug_id as shown in the netrhost.conf file.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If you wish to port in an old flatfile, please refer to the readme directory on how to port your flatfile in (README.DBLOADING).</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="using-the-prebuilt-flatfile" names="using\ the\ prebuilt\ flatfile">
                <title refid="table-of-contents">Using the prebuilt flatfile</title>
                <paragraph>There are pre-loaded flatfile databases you can use at this point.  The netrhost.db.flat
                    and corrisponding netrhost.conf file will be located in the minimal-DBs/minimal_db directory.</paragraph>
                <paragraph>You may auto-load the minimal db and corresponding netrhost.conf file with the command:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">./minimal.sh</literal_block>
                <paragraph>This is ran from within the ‘game’ directory.  Once this is ran, you will need
                    to customize the netrhost.conf file for your purposes.  The port and debug_id must
                    be changed at the very least.  Keep the debug_id coordinated to the port as described.</paragraph>
                <section ids="to-load-a-prebuilt-flatfile" names="to\ load\ a\ prebuilt\ flatfile">
                    <title refid="table-of-contents">To load a prebuilt flatfile</title>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph>Make a backup of your existing netrhost.conf file:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">cp game/netrhost.conf game/netrhost.conf.backup</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>Copy the netrhost.conf file into your game directory:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">cp -f ./minimal-DBs/minimal_db/netrhost.conf ./game/netrhost.conf</literal_block>
                        </list_item>
                        <list_item>
                            <paragraph>At this point you can modify your netrhost.conf file settings in your game directory.
                                Using an editor modify the ‘port’ and ‘debug_id’ respectively in your netrhost.conf as state.
                                The ‘port’ will be the port the mush listens on, the debug_id is for the debug-stack and is
                                your port with a ‘5’ at the end.  So if your port is 4444, the debug_id is 44445</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Load in the flatfile into the mush (You could do this in the Startmush as well)
                                Manually:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">cd game</literal_block>
                            <paragraph>./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new dwF</paragraph>
                            <paragraph>Start your mush:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
                            <paragraph>This will load the db that you loaded.</paragraph>
                            <paragraph>—————OR——-</paragraph>
                            <paragraph>From Startmush when prompted, hit &lt;RETURN&gt; for searching then select the number of the netrhost.db.flat that is listed as ~/minimal-DBs/minimal_db/netrhost.db.flat:</paragraph>
                            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
                        </list_item>
                    </enumerated_list>
                </section>
            </section>
        </section>
        <section ids="almost-backwards-instructions-for-compiling-and-starting-a-mush" names="almost\ backwards\ instructions\ for\ compiling\ and\ starting\ a\ mush">
            <title refid="table-of-contents">Almost Backwards Instructions for Compiling and Starting a MUSH</title>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>You can modify your netrhost.conf file settings in your game directory.
                        Using an editor modify the ‘port’ and ‘debug_id’ respectively in your netrhost.conf as stated.
                        The ‘port’ will be the port the mush listens on, the debug_id is for the debug-stack and is
                        your port with a ‘5’ at the end.  So if your port is 4444, the debug_id is 44445</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Start your mush:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">--&gt; ./Startmush</literal_block>
                </list_item>
            </enumerated_list>
            <paragraph>You can use the ‘vi’ editor or ‘nano’ if you like a more menu driven DOS like experience.
                You can of course use any other editor you’re familar with.</paragraph>
            <paragraph>For a more thorough understanding of how to set things up, keep reading!</paragraph>
            <paragraph>If you have syntax issues running ‘make config’, ‘make confsource’
                or ‘make bugreport’ please run the script: ./bin/script_setup.sh</paragraph>
            <paragraph>Now… things you may need to do on errors.</paragraph>
        </section>
        <section ids="basic-instructions-for-starting-a-new-rhostmush" names="basic\ instructions\ for\ starting\ a\ new\ rhostmush">
            <title refid="table-of-contents">Basic Instructions for starting a new RhostMUSH</title>
            <section ids="manual-configuration-of-source-code" names="manual\ configuration\ of\ source\ code">
                <title refid="table-of-contents">Manual configuration of source code</title>
                <paragraph>To do manual configuration (skip if the previous step worked for you) And yes, this is a bit of a pain in the bottom, hopefully you will not need this.</paragraph>
                <paragraph>You need the following definitions defined to make this work:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>TINY_U, USE_SIDEEFFECTS, MUX_INCDEC, ATTR_HACK</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>(u()/u2() switched)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>(sideeffects)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>(inc()/xinc() switched)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>(support for _/~ attribs)</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>You only need to do this if you received the RhostMUSH src.  If you received a binary, continue on to the next part.</paragraph>
                <paragraph>To compile the code, just type ‘make confsource’.  It will prompt you with settings on what you need to do.  If you just want to quickly hand edit the Makefile, it is in the directory src (full path src/Makefile).  Then you may just run ‘make source’, if you so choose to hand-edit the Makefile.</paragraph>
                <paragraph>After the compile process is done, type ‘make links’!</paragraph>
            </section>
            <section ids="loading-a-database-for-your-mush" names="loading\ a\ database\ for\ your\ mush">
                <title refid="table-of-contents">Loading a database for your MUSH</title>
                <paragraph>You now have a choice of optionally starting at a provided database or starting from scratch.</paragraph>
                <section ids="option-only-perform-these-steps-if-using-a-provided-database" names="option:\ only\ perform\ these\ steps\ if\ using\ a\ provided\ database">
                    <title refid="table-of-contents">Option: Only perform these steps if using a provided database</title>
                    <paragraph>Copy an existing flatfile and corresponding netrhost.conf file Default provied example:</paragraph>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">cp game/netrhost.conf game/netrhost.conf.backup
cp -f minimal-DBs/minimal_db/netrhost.conf game/netrhost.conf
cd game
./db_load data/netrhost.gdbm ../minimal-DBs/minimal_db/netrhost.db.flat data/netrhost.db.new</literal_block>
                    <section ids="configure-the-netrhost-conf-file-for-your-mush" names="configure\ the\ netrhost.conf\ file\ for\ your\ mush">
                        <title refid="table-of-contents">Configure the netrhost.conf file for your MUSH</title>
                        <block_quote>
                            <paragraph>Go into the game directory and modify the netrhost.conf file
                                The next step is configuring the mush to your config standards.
                                There is a file in the game subdirectory called ‘netrhost.conf’.
                                You hand-edit this file and just follow what it says each
                                one does.  It’s very well documented and should give you
                                great details on what to edit.  For most things, you can
                                feel comfortable to stick with the defaults unless you wish
                                to change them.  The port and debug_id need to be changed.</paragraph>
                        </block_quote>
                    </section>
                </section>
            </section>
        </section>
        <section ids="start-a-mush-and-logging-on-for-the-first-time" names="start\ a\ mush\ and\ logging\ on\ for\ the\ first\ time">
            <title refid="table-of-contents">Start a  MUSH and logging on for the first time</title>
            <paragraph>From the game diretory issue:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
            <paragraph>To login:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">co Wizard Nyctasia</literal_block>
            <section ids="option-things-to-do-once-you-have-connected-if-you-did-not-use-a-provided-database" names="option:\ things\ to\ do\ once\ you\ have\ connected\ if\ you\ did\ not\ use\ a\ provided\ database">
                <title refid="table-of-contents">Option: Things to do once you have connected if you did NOT use a provided database</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>@dig your master room and in your netrhost.conf file define master_room to this dbref (without the #.  So like master_room 2)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create an immortal holder charater (@pcreate then @set immortal) Feel free to set up holder characters for all the bittypes which are: GUILDMASTER, ARCHITECT, COUNCILOR, WIZARD, IMMORTAL</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>@chown/preserve the master room and #0 to the immortal holder character.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Log into the immortal character</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>@pcreate all your guest characters and set them up properly.  My suggestion:</paragraph>
                        <literal_block force="False" language="default" linenos="False" xml:space="preserve">@dolist lnum(1,10)={@pcreate Guest##=guest;@set *Guest##=guest;@desc *Guest##=A guest player.;@adisconnect *Guest##=home;@lock *Guest##=*Guest##}

@list guest will show your guest characters and if they're set up properly.</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Any master room code you load in from your immholder character (or @chown/preserve to it) The readme directory has softfunctions.minmax that has MUX/Penn compatability functions and comsys.  All other softcode (like mail wrappers) can be found on <reference refuri="https://github.com/RhostMUSH/trunk">https://github.com/RhostMUSH/trunk</reference> in Mushcode.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Setup new character, staff, and take tasks that can only be accomplished by #1</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Set up any other characters you want.  Anyone immortal can issue @function, @admin, or anything #1 can do.</paragraph>
                    </list_item>
                </enumerated_list>
                <todo_node classes="admonition-todo" docname="install" ids="id7">
                    <title>Todo</title>
                    <paragraph>Figure out what they were trying to say by having those two sentences right after each other.</paragraph>
                </todo_node>
            </section>
        </section>
        <section ids="customtize-the-textfiles-for-your-game" names="customtize\ the\ textfiles\ for\ your\ game">
            <title refid="table-of-contents">Customtize the textfiles for your game</title>
            <block_quote>
                <paragraph>All connect.txt and customized files can be found in the ~/Server/game/txt directory.  There is a
                    README file there that explains their purposes in more detail.  You can see more information on
                    all files and how they inter-relate with ‘wizhelp file’.</paragraph>
            </block_quote>
        </section>
        <section ids="three-options-for-starting-a-mush" names="three\ options\ for\ starting\ a\ mush">
            <title refid="table-of-contents">Three Options for Starting a MUSH</title>
            <paragraph>The RhostMUSH Git Repository comes with three options for starting your Mush.</paragraph>
            <todo_node classes="admonition-todo" docname="install" ids="id8">
                <title>Todo</title>
                <paragraph>Well, there’s also some other pre-existing DB or upgrading, so let’s try to make this a little more coherent.</paragraph>
            </todo_node>
            <section ids="option-1-creating-a-new-game-with-a-blank-database" names="option\ 1:\ creating\ a\ new\ game\ with\ a\ blank\ database">
                <title refid="table-of-contents">Option 1: Creating a new game with a blank database</title>
                <block_quote>
                    <paragraph>Modify your ./game/netrhost.conf file or what settings you want.
                        Don’t feel overwhelmed, it’s all very well documented.</paragraph>
                </block_quote>
            </section>
            <section ids="options-2-creating-a-new-game-with-ambrosia-s-default-database" names="options\ 2:\ creating\ a\ new\ game\ with\ ambrosia's\ default\ database">
                <title refid="table-of-contents">Options 2: Creating a new game with Ambrosia’s default database</title>
                <paragraph>Follow minimal-DBs/Amb-MinimalRhost/IMPORTANT_README</paragraph>
                <paragraph>The netrhost.conf file you will copy is in minimal-DBs/Amb-MinimalRhost/game
                    Copy this netrhost.conf file into your ‘game’ directory.</paragraph>
                <paragraph>You will want the custom txt files under Amb-MinimalRhost/txt in your game/txt directory and to mkindx all the txt files.  You can run ./Startmush -i to index.</paragraph>
                <paragraph>When ./Startmush prompts you to load a flatfile, say ‘yes’ and hit &lt;RETURN&gt; to have it search for flatfiles, then select netrhost.db.flat from under the minimal-DBs/Amb-MinimalRhost directory.</paragraph>
                <paragraph>The main steps to make sure you do for ~/Server/minimal-DBs/Amb-MinimalRhost/netrhost.db.flat – Ambrosia’s secure and featured minimal db</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Use the matching netrhost.conf file under the Amb-MinimalRhost/game directory</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Load in the settings specified in the Amb-MinimalRhost/bin directory.</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Copy this file into your ~/Server/bin directory</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>From ‘Server’ directory type: make clean</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>From ‘Server’ directory type: make confsource and ‘l’oad option 0</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Specify any -additional- options you want at this point.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Recompile your code</paragraph>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                    <list_item>
                        <paragraph>Copy the files in Amb-MinimalRhost/game/txt into your ~/Server/game/txt directory</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>from your ~/Server/game txt file run on each of the txt files:</paragraph>
                        <literal_block force="False" language="default" linenos="False" xml:space="preserve">../mkindx &lt;txtfile&gt;.txt &lt;txtfile&gt;.indx</literal_block>
                    </list_item>
                </enumerated_list>
                <note>
                    <paragraph>Where &lt;txtfile&gt; is the name of the file (minus the .txt extension)</paragraph>
                </note>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>If running, @reboot your game.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="option-3-creating-a-new-game-with-the-generic-default-database" names="option\ 3:\ creating\ a\ new\ game\ with\ the\ generic\ default\ database">
                <title refid="table-of-contents">Option 3: Creating a new game with the generic default database</title>
                <block_quote>
                    <paragraph>Copy the netrhost.conf from minimal-DBs/minimal_db to your game directory.</paragraph>
                    <paragraph>When ./Startmush prompts you to load a flatfile, say ‘yes’ and hit &lt;RETURN&gt;
                        to have it search for flatfiles, then select netrhost.db.flat from under
                        the minimal-DBs/minimal_db directory.</paragraph>
                </block_quote>
            </section>
        </section>
        <section ids="starting-your-mush" names="starting\ your\ mush">
            <title refid="table-of-contents">Starting your MUSH</title>
            <paragraph>Once you have used one of these three methods to obtaina database, you can start your mush up.
                At this point type from the game directory:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./Startmush</literal_block>
            <todo_node classes="admonition-todo" docname="install" ids="id9">
                <title>Todo</title>
                <paragraph>Considering this was already mentioned earlier in other parts, yeah this all needs to be a bit more coherent and focused.
                    Check to see if there are other install bits not yet even integrated here.</paragraph>
            </todo_node>
        </section>
    </section>
</document>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush-handbook/source/20-execscript.rst">
    <section ids="execscript-and-external-programs-and-scripts" names="execscript\ and\ external\ programs\ and\ scripts">
        <title>Execscript and external programs and scripts</title>
        <section ids="mush-variables" names="mush\ variables">
            <title>Mush variables</title>
            <section ids="built-in-variables" names="built\ in\ variables">
                <title>Built in variables</title>
                <paragraph>Variable                   Description
                    MUSH_PLAYER                player dbref#
                    MUSH_CAUSE                 cause dbref#
                    MUSH_CALLER                caller dbref#
                    MUSH_OWNER                 owner of player dbref#
                    MUSH_FLAGS                 space delimited list of flags on player
                    MUSH_TOGGLES               space delimited list of toggles on player
                    MUSH_OFLAGS                space delimited list of flags of player owner
                    MUSH_OTOGGLES              space delimited list of toggles of player owner
                    MUSHL_VARS                 space delimited list of MUSH attributes from player</paragraph>
                <block_quote>
                    <paragraph>This is passed from the mush’s EXECSCRIPT_VARS attr</paragraph>
                </block_quote>
            </section>
            <section dupnames="dynamic\ variables" ids="dynamic-variables">
                <title>Dynamic variables</title>
                <definition_list>
                    <definition_list_item>
                        <term>MUSHV_&lt;arg&gt;                &lt;arg&gt; variable passed from MUSHL_VARS</term>
                        <definition>
                            <paragraph>These are the attributes from EXECSCRIPT_VARS</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
            <section dupnames="register\ variables" ids="register-variables">
                <title>Register variables</title>
                <paragraph>MUSHQ_&lt;arg&gt;                setq registers 0-9 and a-z
                    MUSHQN_&lt;arg&gt;               labels that are assigned the setq vars
                    MUSHN_&lt;arg&gt;                The labels that were defined by any register</paragraph>
                <block_quote>
                    <definition_list>
                        <definition_list_item>
                            <term>Note: they must be ASCII-7 clean and contain no</term>
                            <definition>
                                <paragraph>white spaces</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </block_quote>
            </section>
        </section>
        <section ids="set-object" names="set\ object">
            <title>set object</title>
            <paragraph>The script executed with execscript() will read in a file with the same name
                as the script ending in ‘.set’.  This is a loader object that will set attributes
                and registers back into the mush that you wish to pass from the script. The
                fields are SPACE SEPARATED.  The values are NOT evaluated.</paragraph>
            <section ids="the-format-of-the-fields-are" names="the\ format\ of\ the\ fields\ are">
                <title>The format of the fields are</title>
                <section dupnames="dynamic\ variables" ids="id1">
                    <title>Dynamic variables</title>
                    <paragraph>VARNAME        OWNER        CONTENTS (or leave null to clear)</paragraph>
                    <section ids="examples" names="examples">
                        <title>Examples</title>
                        <paragraph>SEX #123 Male
                            DESC #123 %r%tThis is a willow tree of unique description%r%rIt sways in the wind.
                            RED #123 This is the color %ch%crred%cn.
                            WIPETHISATTR #123
                            MULTILINE #123 This is a line
                            that continues on
                            because of the line feed (a control-M) on each line
                            on the lines above</paragraph>
                    </section>
                </section>
                <section dupnames="register\ variables" ids="id2">
                    <title>Register variables</title>
                    <paragraph>REGISTER       Q            CONTENTS (or leave null to clear)</paragraph>
                    <section ids="examples-the-last-example-clears-register-0" names="examples\ (the\ last\ example\ clears\ register\ 0)">
                        <title>Examples (The last example clears register 0)</title>
                        <paragraph>W Q This is stored in register W
                            1 Q This is stored in register 1
                            0 Q
                            foo QN this sets register with label ‘foo’</paragraph>
                    </section>
                </section>
            </section>
        </section>
        <section ids="example-bash-script" names="example\ bash\ script">
            <title>Example bash script</title>
            <paragraph>#!/bin/bash
                echo “This was called by player ${MUSH_PLAYER} that is owned by ${MUSH_OWNER}”
                echo “Displaying Registers:”
                regs=”0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z”
                for list in ${regs}
                do</paragraph>
            <block_quote>
                <paragraph>eval echo “Register ${list}: ${MUSHQ_${list}}”</paragraph>
            </block_quote>
            <paragraph>done
                echo “Displaying variables:”
                for vars in ${MUSHL_VARS}
                do</paragraph>
            <block_quote>
                <paragraph>eval echo “Variable ${vars}: ${MUSHV_${vars}}”</paragraph>
            </block_quote>
            <paragraph>done</paragraph>
        </section>
        <section ids="notes-and-warnings" names="notes\ and\ warnings">
            <title>Notes and warnings</title>
            <paragraph>While MUSHL_VARS are sanitized on what is allowable as a mush variable, this
                is not necessarilly sanitized on what the calling script can fetch as a valid
                variable.  Of note, you can not set environment variables that contain an
                equals sign.  Be aware of this limitation.</paragraph>
            <paragraph>Remember, MUSHL_VARS is the environment variable seen by the script.
                This is EXECSCRIPT_VARS on the mush itself, that is the attribute set
                on the target that contains the execscript() that is being executed.</paragraph>
        </section>
    </section>
</document>

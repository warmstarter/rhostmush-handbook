<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/home/pi/rhostmush/rhostmush-handbook/source/maintenance.rst">
    <substitution_definition names="br"><raw format="html .. force a line break in html output (blank lines needed here)" xml:space="preserve">&lt;br /&gt;</raw></substitution_definition>
    <substitution_definition names="p"><raw format="html .. force a blank line in html output (blank lines needed here)" xml:space="preserve">&lt;p&gt;&lt;/p&gt;</raw></substitution_definition>
    <comment xml:space="preserve">These are replacement strings for non-ASCII characters used within the project
using the same name as the html entity names (e.g., &amp;copy;) for that character</comment>
    <substitution_definition ltrim="1" names="copy">©</substitution_definition>
    <substitution_definition ltrim="1" names="trade">™</substitution_definition>
    <substitution_definition ltrim="1" names="reg">®</substitution_definition>
    <substitution_definition ltrim="1" names="deg">°</substitution_definition>
    <substitution_definition names="plusminus" rtrim="1">±</substitution_definition>
    <substitution_definition names="micro" rtrim="1">µ</substitution_definition>
    <substitution_definition ltrim="1" names="sup2">²</substitution_definition>
    <section ids="maintenance" names="maintenance">
        <title>Maintenance</title>
        <section ids="note-about-patching" names="note\ about\ patching">
            <title>Note about Patching</title>
            <paragraph>There's two ways you can look to patch the source.  If you plan to run the
                RhostMUSH source from a git repository, then please use the git repo to
                constantly update your code.  If you knew enough to want to set up a git repo
                then we expect knowledge on how to keep source trees updated in the git repo
                to be used the same as any other source distribution.</paragraph>
            <paragraph>If, however, you have no idea what a git repo even is, or have no inclination
                of using git to manage your RhostMUSH source, or just don't care one way
                or another, then you can use the included patch.sh routine (from under the
                Server directory) to patch your source at any time.</paragraph>
            <paragraph>From the server directory just type:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./patch.sh</literal_block>
            <paragraph>That will auto-compile your source, auto make all your header files and
                essentially keep everything up to date to the latest source.
                Once that's done, all you do from within the game is two commands:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">@reboot (or @reboot/silent)  -- This will load in the new binary
@readcache  -- This will read in all the .txt file changes</literal_block>
        </section>
        <section ids="daily-backups-for-rhostmush" names="daily\ backups\ for\ rhostmush">
            <title>Daily Backups for RhostMUSH</title>
            <paragraph>Make SURE YOU RUN DAILY Backups.  Rhost is very stable, but things outside the mush can damage the game. paranoia is fine, especially when they really are out to get you.  TO make the backups, do the following:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve"> @dump/flat      -- This makes a flatfile dump of the main database.  You want to run this daily.
 wmail/unload    -- This makes a flatfile dump of the mail database.  You want to run this daily.
 @areg/unload    -- Only worry about this if you are using auto-registration emailing.  Few do.
 newsdb/unload   -- Only worry if you use the hardcoded bbs system.  Most don't use it.


Backups are already handled and integrated with a script 'backup_flat.sh'.
If you wish to customize this, feel free.  Again, it is well documented and
just require changing settings at the top of this script.

By default, it does 7 contiguous backups.  You may increase or decrease
this value to any value you want.

It will, by default, backup all your txt/\*.txt files, your netrhost.conf
file, your netrhost.db.flat (mush db) file, your RhostMUSH.dump.\*
(mail db) files, your RhostMUSH.news.\* (internal news/bbs db -- if used),
your RhostMUSH.areg.\* (the autoregistration db -- if used), and any sqlite
database you currently may be using which are OPTIONALLY backed up if you
remove the '#' from before it.

The backup script also will optionally rcp/scp, ftp, or mail any backups
you want to a remote destination.  Be forewarned, the backup files can
potentially get rather large for larger games, even compressed.  The
average size for these files will be 1-5MB.  It could potentially get
over 10-20MB in size for excessively large games, so plan accordingly.

Be aware that the backup system will NOT make successful backups if you
run out of disk space.  This includes actually running out of disk space
or running out of disk quota.  There is a mechanism inside the backup
script to specify an email address that you wish to get alerts from
in these instances.  I recommend using it.

If you make changes to your backup_flat.sh script with an already
active and running mush and wish to just restart the backup procedure
just issue::

   ./backup_restart.sh</literal_block>
        </section>
        <section ids="signals-and-why-you-need-them-for-control" names="signals\ and\ why\ you\ need\ them\ for\ control">
            <title>Signals and why you need them for control</title>
            <paragraph>Rhost by default allows signals at the shell to handle various processes in-game.</paragraph>
            <paragraph>The following signals are useful.</paragraph>
            <section ids="term-kill-term-or-kill-15" names="term\ (kill\ -term\ or\ kill\ -15)">
                <title>TERM (kill -TERM or kill -15)</title>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>This will immediately terminate the mush, dumping a special flatfile called
                                netrhost.db.TERM and scramming the db in question by force-closing it
                                without any writes.  A TERM is the effort for the mush to shut down the
                                mush as fast as possible to avoid any db corruption if possible since
                                a TERM signal is common during a server shutdown, so time is paramount.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
            <section ids="usr1-kill-usr1" names="usr1\ (kill\ -usr1)">
                <title>USR1 (kill -USR1)</title>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>This by default issues a reboot on the server.  This is a special parameter
                                because this can actually be changed in-game to do any number of other
                                things.  Please refer to the RhostMUSH running in question if this is
                                the default behavior or if the method for USR1 is doing something else.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
            <section ids="usr2-kill-usr2" names="usr2\ (kill\ -usr2)">
                <title>USR2 (kill -USR2)</title>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>This will shutdown (cleanly) the mush.  This behaves as if you issued
                                a @shutdown from within the game, and follows all proper procedure
                                in bringing the game down cleanly and safely.  This shoudl be used
                                when doing maintenance on the game or if you need to bring it down
                                from the shell.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
            <section ids="kill-kill-kill-or-kill-9" names="kill\ (kill\ -kill\ or\ kill\ -9)">
                <title>KILL (kill -KILL or kill -9)</title>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>This signal can not be caught and will immediately terminate the game
                                without any safty to the database at all.  Short of something horribly
                                wrong going on, this should never be used to bring down your mush.
                                Doing so will almost certainly corrupt your databases (ALL OF THEM)
                                that are open, including but not limited to your main database, your
                                mail database, your autoregistration database, and so forth.  So if
                                you do this, plan to do some database recovery from your flat files.
                                Also, when you bring down a mush in this manner, you need to issue
                                Startmush -f to bring it back up.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </section>
        </section>
        <section ids="shutting-down-rhostmush-gracefully" names="shutting\ down\ rhostmush\ gracefully">
            <title>Shutting down RhostMUSH gracefully</title>
            <section ids="rhostmush-has-many-ways-to-shutdown-the-game-cleanly" names="rhostmush\ has\ many\ ways\ to\ shutdown\ the\ game\ cleanly">
                <title>RhostMUSH has many ways to shutdown the game cleanly</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Log into the mush and issue @shutdown</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Issue a kill -USR2 to the mush which issues an emergency @shutdown</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Issue a kill -TERM to the mush which issues an emergency abort and clean shutdown.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Through the Autoshutdown script</paragraph>
                    </list_item>
                </enumerated_list>
                <warning>
                    <paragraph>Never kill -9 RhostMUSH</paragraph>
                    <paragraph>Under NO CIRCUMSTANCES should you kill -9 your mush unless you don't care for the
                        database.  The reason is if the mush happens to be saving, in any method, to the
                        database, especially a QDBM database, you will likely have just corrupted your
                        database, so pull out a flatfile to recover.</paragraph>
                    <paragraph>Sadly, this also may occur if the server hosting you takes a nose-dive in the middle
                        of a db write.  Rhost can recover corruption in-game while up, but if it bombs
                        in the middle of a write, all bets are off. :)</paragraph>
                </warning>
            </section>
            <section ids="autoshutdown-script" names="autoshutdown\ script">
                <title>Autoshutdown script</title>
                <paragraph>The makefile will 'make' the program that will STOP the mush.
                    Please tweek 'autolog.h' with the proper parameters.</paragraph>
                <paragraph>The 'startup.sh' will START the mush.</paragraph>
                <paragraph>Both of these are intended to be used for automations (automated processes)
                    like your rc.local file and/or startup scripts when you bring your server up.</paragraph>
            </section>
        </section>
        <section ids="network-port-redirector" names="network\ port\ redirector">
            <title>Network Port redirector</title>
            <paragraph>This is a port redirector incase you decide to move your mush
                to a new site/port.  To use, first, compile the code.  To do
                this you would type the following:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">cc portmsg.c -o portmsg</literal_block>
            <paragraph>if 'cc' is not defined, try the following:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">gcc portmsg.c -o portmsg</literal_block>
            <paragraph>Once compiled, you would then modify the file 'file' to describe
                the mush, what was done, where it's moved to, then specify the
                IP address and the PORT where specified.</paragraph>
            <paragraph>To launch the application, you would then type:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">./portmsg file &lt;port&gt;</literal_block>
            <paragraph>Where &lt;port&gt; is the port where the mush used to run at.</paragraph>
        </section>
        <section ids="using-the-built-in-cron-system-for-periodically-running-commands" names="using\ the\ built-in\ cron\ system\ for\ periodically\ running\ commands">
            <title>Using the built-in cron system for periodically running commands</title>
            <section ids="syntax-for-rhost-cron" names="syntax\ for\ rhost.cron">
                <title>Syntax for rhost.cron</title>
                <paragraph>The rhost.cron file will be in the syntax as follows:</paragraph>
                <literal_block force="False" language="default" linenos="False" xml:space="preserve">username (or dbref#)
command1;command2;command3;...;commandN
command
command
command1;command2;command3;...;commandN</literal_block>
                <paragraph>You can have commands strung together with a semicolon
                    on the same line.  This counts as a single line of input.
                    You can have at most 20 lines of commands after the target
                    you wish to execute the commands as.  The target may
                    be a player name OR a dbref# of any valid dbref# within
                    the game.  Invalid targets will abort the cron process.
                    Non-printable characters in the cron file will abort
                    the process.  Any aborts or warnings will be logged
                    in the netrhost.gamelog.</paragraph>
                <paragraph>Here is a working example of the code cron file.
                    This example will perform dumps of the mush.</paragraph>
                <section ids="example-syntaxt-for-rhost-cron" names="example\ syntaxt\ for\ rhost.cron">
                    <title>Example syntaxt for rhost.cron</title>
                    <literal_block force="False" language="default" linenos="False" xml:space="preserve">#1
@dump/flat; @@ dump the main game database to flatfile
wmail/unload; @@ dump the mail database to flatfile
@areg/unload; @@ dump the registration database to flatfile
newsdb/unload; @@ dump the news bbs database to flatfile</literal_block>
                </section>
            </section>
        </section>
        <section ids="the-following-scripts-are-used-in-the-game-directory" names="the\ following\ scripts\ are\ used\ in\ the\ game\ directory">
            <title>The following scripts are used in the game directory</title>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">Startmush               -- used to Start up the mush
backup_flat.sh          -- Used to run backups with @dump/flat within the game (Started with Startmush automatically)
backup_restart.sh       -- Restart the backup_flat.sh if changes are done
compress_logs.sh        -- Compress logs in 'oldlogs'.  Ran with Startmush
findit.sh               -- Internal script used to check for flatfile validity
mailhide.sh             -- Wrapper to hide from address using the 'mail' progam
minimal.sh              -- Auto-load the minimal db into the mush
proxysnarf.sha          -- Internal script for the tor_pull.sh tor proxy blacklist
tor_pullit.sh           -- Internal script for the tor_pull.sh for proxy blacklist
recovery.sh             -- If your db is corrupt, run this to auto-revert to an earlier flatfile
tor_pull.sh             -- Create a blacklist.txt file that can be loaded via the internal @blacklist command for proxy handling</literal_block>
        </section>
        <section ids="textfiles-for-rhostmush" names="textfiles\ for\ rhostmush">
            <title>Textfiles for RhostMUSH</title>
            <todo_node classes="admonition-todo" docname="maintenance" ids="id1">
                <title>Todo</title>
                <paragraph>Notate which need mkindx</paragraph>
            </todo_node>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">areghost.txt           - file player gets when autoregistration on registered host.
autoreg.txt            - file player gets when autoregistration on non-registered host.
autoreg_include.txt    - file player receives in email when they autoregister attached to login/passwd
badsite.txt            - file player gets when site is not allowed.
connect.txt            - file player gets when connect
create_reg.txt         - file player gets when their site is register and they can't create.
doorconf.txt           - file that is searched for information regarding @door.
down.txt               - file player gets when the mush has logins disabled (@disable login)
error.txt              - the 'Huh? (type help for help)' messages.
full.txt               - file player gets when the mush can't have any more players.
guest.txt              - file player gets when they connect as a guest.
help.txt               - your help file
motd.txt               - your motd file
news.txt               - your news file
newuser.txt            - file newly created players get when they connect for the first time.
noguest.txt            - file player gets when they are not allowed to connect to a guest.
plushelp.txt           - optional +help file. (needs compile time option)
quit.txt               - file player gets when they disconnect.
register.txt           - file player gets when the site is locked down for registration.
wizhelp.txt            - your wizhelp file
wizmotd.txt            - your wiz motd file</literal_block>
            <section ids="textfile-frequently-asked-questions" names="textfile\ frequently\ asked\ questions">
                <title>Textfile Frequently Asked Questions</title>
                <paragraph>Q:  How do I put color in these files?</paragraph>
                <paragraph>A1: Look at ansi.h and you need to put the literal ASCII codes.  They will look like: ^[[0m (for ANSI_NORMAL).  That's &lt;ESC&gt;[</paragraph>
                <paragraph>A2: You can enable ansi_txtfiles then use %c (or %x/%m) encoding for ansi, however you compiled your Rhost.</paragraph>
                <paragraph>Q:  I want to design my own txt files to read in the mush.</paragraph>
                <paragraph>A:  Easy.  Design them like help.txt would be set up, mkindx the file, then you can access it via @dynhelp online.</paragraph>
                <paragraph>Q:  Do I have to mkindx these files whenever I make changes?</paragraph>
                <paragraph>A:  Only the ones that have '&amp; ' index. (help.txt, wizhelp.txt, news.txt, etc)</paragraph>
                <paragraph>Q:  Do I have to @readcache in the game whenever I make a change?</paragraph>
                <paragraph>A:  Only when you modify any of the files listed in README.TXTFILES.  Not the ones you use with @dynhelp.</paragraph>
                <paragraph>Q:  Can't I just make code in the mush that then is used for these silly txt files?</paragraph>
                <paragraph>A:  Absolutely.  Check 'wizhelp file_object'.</paragraph>
            </section>
        </section>
    </section>
</document>
